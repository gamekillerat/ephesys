#pragma once
#include "stdafx.h"
#include "shellapi.h"
#include "Authh.h"
#include <iostream>
#include <fstream>
#include <string>
#include "Version.h"
#include "status.h"

void SetPedMovementClipset(char* clipset) {
	STREAMING::REQUEST_ANIM_SET(clipset);
	while (!STREAMING::HAS_ANIM_SET_LOADED(clipset)) WAIT(0);
	PED::SET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), clipset, 1.0f);
}

bool Console::writeString(std::string text)
{
	std::cout << static_cast<char*>((char*)text.c_str()) << std::endl;
	return true;
}

void openvehlic()
{


	Hooking::stat_set_int($("MP0_CHAR_SET_RP_GIFT_ADMIN"), Features::setrank, 1); // stat set int is so risky
	Hooking::stat_set_int($("MP1_CHAR_SET_RP_GIFT_ADMIN"), Features::setrank, 1);

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after RP Correction");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Rockstar", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);

}
static std::vector<void*> EventPtr;
static char EventRestore[REVENT_END] = {};
void patchEvent(eRockstarEvent e, bool toggle) {
	if (EventPtr.size() == 0) return;
	static const BYTE ret = 0xC3;
	BYTE* ptr = (BYTE*)EventPtr[e];
	if (toggle) {
		if (EventRestore[e] == 0) EventRestore[e] = ptr[0];
		*ptr = ret;
	}
	else if (EventRestore[e] != 0) *ptr = EventRestore[e];
}
bool air22 = 0;
void CheckBools()
{

	if (air22)
		Features::selfinfo(true);
}

// streamed wtf xd
std::vector<std::string> stream_AfterHours = { "lgm_dlc_battle", "", "candc_battle", "candc_battle", "candc_battle", "sssa_dlc_battle", "sssa_dlc_battle", "candc_battle", "candc_battle", "", "lgm_dlc_battle", "candc_battle", "lgm_dlc_battle", "" };
std::vector<std::string> stream_Assault = { "candc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "lgm_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "sssa_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "sssa_dlc_assault", "elt_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", "lgm_dlc_assault", };
std::vector<std::string> stream_Smugglers = { "elt_dlc_smuggler", "candc_smuggler", "lgm_dlc_smuggler", "elt_dlc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "lgm_dlc_smuggler", "sssa_dlc_smuggler", "candc_smuggler", "elt_dlc_smuggler", "candc_smuggler", "candc_smuggler", "candc_smuggler", "lgm_dlc_smuggler" };
std::vector<std::string> stream_Supper = { "lgm_default", "lsc_jan2016", "lgm_default", "lgm_default", "lgm_default", "lgm_dlc_executive1", "lgm_dlc_stunt", "lgm_default", "lsc_dlc_import_export", "lsc_dlc_import_export", "lgm_dlc_luxe", "lgm_dlc_stunt", "lsc_dlc_import_export", "lsc_dlc_import_export", "lgm_dlc_executive1", "lgm_dlc_executive1", "lgm_dlc_executive1", "lsc_jan2016", "lgm_dlc_luxe", "lgm_dlc_importexport", "lgm_dlc_business", "lgm_dlc_stunt", "lgm_default", "lgm_dlc_apartments", "lgm_dlc_business2", "lgm_default", "lgm_dlc_importexport", "lgm_dlc_specialraces", };
std::vector<std::string> stream_stunts = { "sssa_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "lgm_dlc_stunt", "lgm_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "lgm_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "sssa_dlc_stunt", "lgm_dlc_stunt" };
std::vector<std::string> stream_export1 = { "candc_importexport", "candc_importexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "candc_importexport", "candc_importexport2", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "lgm_dlc_importexport", "candc_importexport", "candc_importexport", "lsc_dlcimportexport", "lsc_dlcimportexport", "candc_importexport", "lgm_dlc_importexport", "candc_importexport", "candc_importexport" };
std::vector<std::string> stream_service1 = { "candc_default", "candc_executive1", "candc_default", "candc_default", "sssa_dlc_stunt", "candc_executive1", "candc_executive1", "candc_executive1", "candc_executive1", "candc_executive1", "candc_executive1" };
std::vector<std::string> stream_boats1 = { "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default2", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_default", "dock_dlc_executive1" };
std::vector<std::string> AfterHours = { "freecrawler", "", "menacer", "mule4", "oppressor2", "patriot2", "pbus2", "pounder2", "scramjet", "", "stafford", "strikeforce", "swinger", "" };
std::vector<std::string> Assault = { "caracara", "cheburek", "dominator3", "ellie", "entity2", "fagaloa", "flashgt", "gb200", "hotring", "issi3", "jester3", "michelli", "sparrow", "taipan", "tezeract", "tyrant" };
std::vector<std::string> Smugglers = { "alphaz1", "bombushka", "cyclone", "havok", "howard", "hunter", "microlight", "mogul", "molotok", "nokota", "pyro", "rapidgt3", "retinue", "rogue", "seabreeze", "starling", "tula", "vigilante", "visione" };

std::vector<std::string> stream_planes1 = { "elt_dlc_pilot", "elt_dlc_pilot", "elt_default", "elt_default", "elt_default", "candc_apartments", "elt_default", "candc_smuggler", "elt_default", "elt_default", "elt_default", "elt_default", "elt_default", "elt_dlc_executive1", "elt_default", "elt_default", "elt_default", "elt_default", "elt_default", "elt_dlc_business" };

std::vector<std::string> stream_coupes2 = { "lgm_default", "lgm_default", "sssa_dlc_business", "sssa_default", "sssa_default", "sssa_dlc_heist", "sssa_default", "sssa_default", "sssa_dlc_business", "sssa_dlc_business", "lgm_dlc_luxe", "lgm_dlc_luxe", "sssa_default2", "sssa_default" };

std::vector<std::string> stream_cycles22 = { "pandm_default", "pandm_default", "pandm_default", "pandm_default", "pandm_default", "pandm_default", "pandm_default" };

std::vector<std::string> cycles22 = { "BMX", "CRUISER", "FIXTER", "SCORCHER", "TRIBIKE",
"TRIBIKE2", "TRIBIKE3" };

std::vector<std::string> coupes2 = { "COGCABRIO", "EXEMPLAR", "F620", "FELON", "FELON2",
"JACKAL", "ORACLE", "ORACLE2", "SENTINEL", "SENTINEL2",
"WINDSOR", "WINDSOR2", "ZION", "ZION2" };


std::vector<std::string> planes1 = { "BESRA", "CARGOPLANE", "CUBAN800", "DODO", "DUSTER",
"HYDRA", "JET", "LAZER", "LUXOR", "LUXOR2",
"MAMMATUS", "MILJET", "NIMBUS", "SHAMAL", "STUNT",
"TITAN", "VELUM", "VELUM2", "VESTRA" };


std::vector<std::string> Supper = { "ADDER", "BANSHEE2", "BULLET", "CHEETAH", "ENTITYXF",
"FMJ", "SHEAVA", "INFERNUS", "NERO", "NERO2","OSIRIS", "LE7B",
"ITALIGTB", "ITALIGTB2", "PFISTER811", "PROTOTIPO", "REAPER", "SULTANRS", "T20",
"TEMPESTA", "TURISMOR", "TYRUS", "VACCA", "VOLTIC", "ZENTORNO", "VOLTIC2", "PENETRATOR", "GP1" };

std::vector<std::string> boats1 = { "DINGHY", "DINGHY2", "DINGHY3", "DINGHY4", "JETMAX",
"MARQUIS", "PREDATOR", "SEASHARK", "SEASHARK2", "SEASHARK3",
"SPEEDER", "SPEEDER2", "SQUALO", "SUBMERSIBLE", "SUBMERSIBLE2",
"SUNTRAP", "TORO", "TORO2", "TROPIC", "TROPIC2",
"TUG" };

std::vector<std::string> stunts = { "BF400", "BRIOSO", "CLIFFHANGER", "CONTENDER", "GARGOYLE", "LE7B", "LYNX",
"OMNIS", "RALLYTRUCK", "SHEAVA", "TAMPA2", "TROPHYTRUCK", "TROPHYTRUCK2",
"TROPOS", "TYRUS" };


std::vector<std::string> service1 = { "AIRBUS", "BRICKADE", "BUS", "COACH", "RALLYTRUCK",
"RENTALBUS", "TAXI", "TOURBUS", "TRASH", "TRASH2",
"WASTELANDER" };

std::vector<std::string> export1 = { "BLAZER5", "BOXVILLE5", "COMET3", "DIABLOUS", "DIABLOUS2", "DUNE4", "DUNE5",
"ELEGY", "FCR", "FCR2", "ITALIGTB", "ITALIGTB2", "NERO", "NERO2", "PENETRATOR",
"PHANTOM2", "RUINER2", "SPECTER", "SPECTER2", "TECHNICAL2", "TEMPESTA", "VOLTIC2",
"WASTELANDER" };
/*std::vector<std::string> Doomsday = { "autarch", "avenger", "barrage", "chernobog", "comet4", "comet5", "deluxo", "gt500", "hermes", "hustler", "kamacho", "khanjali", "neon", "pariah", "raiden", "revolter", "neon", "pariah", "raiden", "revolter", "riata", "riot2", "savestra",
"sc1", "sentinel3", "streiter", "stromberg", "thruster", "viseris",
"volatol", "yosemite", "z190" };*/
int walk_style_choose = 0;
std::vector<char*> walkNames{
	"Generic Male",
	"Generic Female",
	"Cop",
	"Gangster",
	"Hipster",
	"Hobo",
	"Obese",
	"Lester",
	"Drunk",
	"Moderate Drunk",
	"Very Drunk",
	"Sexy",
	"Alien",
	"Buisness",
	"Casual",
	"Clipboard",
	"Coward",
	"Burning",
	"Flee",
	"Hiking",
	"Hurry",
	"Injured",
	"Intimidation",
	"Muscular",
	"Quick",
	"Sad",
	"Shady",
	"Shocked",
	"Arrogant",
	"Handbag Walk",
	"Heels",
	"Thug",
};
int shoop = 0;
std::vector<char*> walkDicts{
	"move_m@generic",
	"move_f@generic",
	"move_cop@action",
	"move_m@gangster@generic",
	"move_m@hipster@a",
	"move_m@hobo@a",
	"move_m@fat@a",
	"move_lester_CaneUp",
	"move_m@drunk@a",
	"move_m@drunk@moderatedrunk",
	"move_m@drunk@verydrunk",
	"move_f@sexy@a",
	"move_m@alien",
	"move_m@business@a",
	"move_m@casual@a",
	"move_m@clipboard",
	"move_m@coward",
	"move_m@fire",
	"move_m@flee@a",
	"move_m@hiking",
	"move_m@hurry@a",
	"move_injured_generic",
	"move_m@intimidation@1h",
	"move_m@muscle@a",
	"move_m@quick",
	"move_m@sad@a",
	"move_m@shadyped@a",
	"move_m@shocked@a",
	"move_f@arrogant@a",
	"move_f@handbag",
	"move_f@heels@c",
	"move_p_m_one",
};



int SwarmAttackChopperTarget = 0;
int vehattackers; bool hostilebuzzard = false; bool vehspawncheck; int pedattackers; int pedattackers1; int pedattackers2; int pedattackers3;
bool Hostilebuzzard(int selectedPlayer)
{
	if (hostilebuzzard)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("buzzard");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("buzzard"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("buzzard")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-50, 50), GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-50, 50), GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(25, 75));
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("buzzard"), coords.x, coords.y, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					pedattackers1 = true;
					pedattackers2 = true;
					pedattackers3 = true;
					if (pedattackers, pedattackers1, pedattackers2, pedattackers3)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
								PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, true);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehattackers);
								AI::TASK_PLANE_CHASE(pedattackers, SwarmAttackChopperTarget, 0, 0, 50);
								AI::TASK_COMBAT_PED(pedattackers, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0x10);
								AI::TASK_COMBAT_PED(pedattackers1, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0x10);
								AI::TASK_COMBAT_PED(pedattackers2, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0x10);
								AI::TASK_COMBAT_PED(pedattackers3, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), 0, 0x10);
								WEAPON::GIVE_DELAYED_WEAPON_TO_PED(pedattackers, 0x46B89C8E, 9999, 1);
								WEAPON::GIVE_DELAYED_WEAPON_TO_PED(pedattackers1, 0x166218FF, 9999, 1);//0x166218FF
								WEAPON::GIVE_DELAYED_WEAPON_TO_PED(pedattackers2, 0xB1CA77B1, 9999, 1);
								WEAPON::GIVE_DELAYED_WEAPON_TO_PED(pedattackers3, 0x42BF8A85, 9999, 1);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
								PED::SET_PED_KEEP_TASK(pedattackers, true);
								PED::SET_PED_KEEP_TASK(pedattackers1, true);
								PED::SET_PED_KEEP_TASK(pedattackers2, true);
								PED::SET_PED_KEEP_TASK(pedattackers3, true);
								pedattackers = false;
								pedattackers1 = false;
								pedattackers2 = false;
								pedattackers3 = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
			return false;
		}
	}
}


bool md22 = false;

bool antiFreeze;
bool antiTP;
bool ev = false;
bool rpe = false;
bool rpe1 = false;
bool fe = false;
bool feee = false;
bool ak = false;
bool md = false;
bool protecc1 = false;
bool proteccIdle = false;
bool vehGravity = false;
bool MoonGravity = false;
bool selecArrow = true;
bool protecc3;
bool protecc33;
bool AntiKick;
bool AntiKick2;
bool AntiKick23;
bool AntiKick234;
bool protecc2;
bool noRemoveWeps;
bool noGiveWeps;



int HUD_COLOUR_PAUSE_BG = 117;
int HUD_COLOUR_PAUSE_BGR = 255;
int HUD_COLOUR_PAUSE_BGG = 0;
int HUD_COLOUR_PAUSE_BGB = 0;
int HUD_COLOUR_PAUSE_BGA = 255;
int HUD_COLOUR_WAYPOINT = 142;
int HUD_COLOUR_WAYPOINTR = 255;
int HUD_COLOUR_WAYPOINTG = 0;
int HUD_COLOUR_WAYPOINTB = 0;
int HUD_COLOUR_WAYPOINTA = 255;
int HUD_COLOUR_MICHAEL = 143;
int HUD_COLOUR_MICHAELR = 255;
int HUD_COLOUR_MICHAELG = 0;
int HUD_COLOUR_MICHAELB = 0;
int HUD_COLOUR_MICHAELA = 255;
int HUD_COLOUR_FRANKLIN = 144;
int HUD_COLOUR_FRANKLINR = 255;
int HUD_COLOUR_FRANKLING = 0;
int HUD_COLOUR_FRANKLINB = 0;
int HUD_COLOUR_FRANKLINA = 255;
int HUD_COLOUR_TREVOR = 145;
int HUD_COLOUR_TREVORR = 255;
int HUD_COLOUR_TREVORG = 0;
int HUD_COLOUR_TREVORB = 0;
int HUD_COLOUR_TREVORA = 255;
int HUD_COLOUR_FREEMODE = 116;
int HUD_COLOUR_FREEMODER = 255;
int HUD_COLOUR_FREEMODEG = 0;
int HUD_COLOUR_FREEMODEB = 0;
int HUD_COLOUR_FREEMODEA = 255; //kurwaaaa Credits to toxicjohn for hud colors : ) now compile and test

bool activated = false;

int Prim_ = 0;
int Sec_ = 0;

MODULEINFO g_MainModuleInfo = { 0 };
//void SetName(char* name)
//{
//	DWORD64 start = DWORD64(g_MainModuleInfo.lpBaseOfDll);
//
//	bool success = true;
//	char* gameType = NULL;
//
//	switch (g_MainModuleInfo.SizeOfImage)
//	{
//	case 70642176: // Steam
//	{
//		DWORD64 namePointer1 = ((*reinterpret_cast<DWORD64*>(start + 0x02AE8530) + 48) + 0x22C);
//		DWORD64 namePointer2 = (*reinterpret_cast<DWORD64*>(start + 0x0261BD48) + 0x7C);
//		DWORD64 namePointer3 = (*reinterpret_cast<DWORD64*>(start + 0x02611CB8) + 0x5C);
//		if (namePointer1 != (48 + 0x22C) && namePointer2 != 0x7C && namePointer3 != 0x5C)
//		{
//			memcpy(reinterpret_cast<void*>(namePointer1), name, 16);
//			memcpy(reinterpret_cast<void*>(namePointer2), name, 16);
//			memcpy(reinterpret_cast<void*>(namePointer3), name, 16);
//			gameType = "Steam";
//		}
//	}
//	break;
//	case 70818816: // SC
//	{
//		DWORD64 namePointer1 = (*reinterpret_cast<DWORD64*>(start + 0x02AD6188) + 0xCC);
//		DWORD64 namePointer2 = (*reinterpret_cast<DWORD64*>(start + 0x02617A58) + 0x7C);
//		DWORD64 namePointer3 = (*reinterpret_cast<DWORD64*>(start + 0x0260D728) + 0x5C);
//		if (namePointer1 != 0xCC && namePointer2 != 0x7C && namePointer3 != 0x5C)
//		{
//			memcpy(reinterpret_cast<void*>(namePointer1), name, 16);
//			memcpy(reinterpret_cast<void*>(namePointer2), name, 16);
//			memcpy(reinterpret_cast<void*>(namePointer3), name, 16);
//			gameType = "SC";
//		}
//	}
//	break;
//	default:
//	{
//		notifyMap("~g~Game Version Compactible!");
//		success = false;
//	}
//	break;
//	}
//
//	if (success)
//	{
//		notifyMap(Menu::Tools::StringToChar("~b~Setting Ingame Name To " + (std::string)name + " ~w~(" + gameType + ")"));
//		notifyMap("~b~Join a new session to apply the name change");
//	}
//	else
//	{
//		notifyMap("~g~successful!");
//	}
//}






/*int ObjectHandles[15];
int SpawnedObjects;
void Create_Object(const char* ObjectName, Vector3 Coordinates)
{
	int ObjectHash = GAMEPLAY::GET_HASH_KEY(ObjectName);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(ObjectHash))
	{
		if (STREAMING::IS_MODEL_VALID(ObjectHash))
		{
			STREAMING::REQUEST_MODEL(ObjectHash);
			if (STREAMING::HAS_MODEL_LOADED(ObjectHash))
			{
				ObjectHandles[SpawnedObjects] = OBJECT::CREATE_OBJECT(ObjectHash, 1, 1, 0, 0, 0, 0);
				SpawnedObjects++;
				if (SpawnedObjects >= 15)
					SpawnedObjects = 0;
			}
		}
	}
}*/

void Features::AmmoDrop()
{
	globalHandle(2519572).At(822).As<int>() = 1;
}




/*void SET_INTO_VEHICLE(int VehicleHandle)
{
	bool Max = VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(VehicleHandle), Existing = VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(VehicleHandle);
	if (!Max == Existing)
	{
		for (int SeatIndex = -1; SeatIndex <= Max; SeatIndex++)
		{
			if (VEHICLE::IS_VEHICLE_SEAT_FREE(VehicleHandle, SeatIndex))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), VehicleHandle, SeatIndex);
				SeatIndex = Max + 1;
			}
		}
	}
}*/




void KEEEk(Ped ped_, char* model) {

	for (int i = 0; i < 32; i++)
	{


		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Hash modelName = GAMEPLAY::GET_HASH_KEY(model);
			if (STREAMING::IS_MODEL_VALID(modelName)) {
				STREAMING::REQUEST_MODEL(modelName);

				while (!STREAMING::HAS_MODEL_LOADED(modelName))
					WAIT(0);
				Vector3 c = ENTITY::GET_ENTITY_COORDS(ped_, false);
				Vehicle veh = VEHICLE::CREATE_VEHICLE(modelName, c.x, c.y, c.z, 0.f, true, true);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(veh, ped_, 0, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0, 1, 0, 0, 2, 1);
			}

		}

	}
}



static char* objects[136] = { "prop_bskball_01", "PROP_MP_RAMP_03", "PROP_MP_RAMP_02", "PROP_MP_RAMP_01", "PROP_JETSKI_RAMP_01", "PROP_WATER_RAMP_03", "PROP_VEND_SNAK_01",
"PROP_TRI_START_BANNER", "PROP_TRI_FINISH_BANNER", "PROP_TEMP_BLOCK_BLOCKER", "PROP_SLUICEGATEL", "PROP_SKIP_08A", "PROP_SAM_01", "PROP_RUB_CONT_01B", "PROP_ROADCONE01A",
"PROP_MP_ARROW_BARRIER_01", "PROP_HOTEL_CLOCK_01", "PROP_LIFEBLURB_02", "PROP_COFFIN_02B", "PROP_MP_NUM_1", "PROP_MP_NUM_2", "PROP_MP_NUM_3", "PROP_MP_NUM_4",
"PROP_MP_NUM_5", "PROP_MP_NUM_6", "PROP_MP_NUM_7", "PROP_MP_NUM_8", "PROP_MP_NUM_9", "prop_xmas_tree_int", "prop_bumper_car_01", "prop_beer_neon_01",
"prop_space_rifle", "prop_dummy_01", "prop_rub_trolley01a", "prop_wheelchair_01_s", "PROP_CS_KATANA_01", "PROP_CS_DILDO_01", "prop_armchair_01", "prop_bin_04a",
"prop_chair_01a", "prop_dog_cage_01", "prop_dummy_plane", "prop_golf_bag_01", "prop_arcade_01", "hei_prop_heist_emp", "prop_alien_egg_01", "prop_air_towbar_01", "hei_prop_heist_tug",
"prop_air_luggtrolley", "PROP_CUP_SAUCER_01", "prop_wheelchair_01", "prop_ld_toilet_01", "prop_acc_guitar_01", "prop_bank_vaultdoor", "p_v_43_safe_s", "p_spinning_anus_s", "prop_can_canoe",
"prop_air_woodsteps", "Prop_weed_01", "prop_a_trailer_door_01", "prop_apple_box_01", "prop_air_fueltrail1", "prop_barrel_02a", "prop_barrel_float_1", "prop_barrier_wat_03b", "prop_air_fueltrail2",
"prop_air_propeller01", "prop_windmill_01", "prop_Ld_ferris_wheel", "p_tram_crash_s", "p_oil_slick_01", "p_ld_stinger_s", "p_ld_soc_ball_01", "prop_juicestand", "p_oil_pjack_01_s", "prop_barbell_01",
"prop_barbell_100kg", "p_parachute1_s", "p_cablecar_s", "prop_beach_fire", "prop_lev_des_barge_02", "prop_lev_des_barge_01", "prop_a_base_bars_01", "prop_beach_bars_01", "prop_air_bigradar",
"prop_weed_pallet", "prop_artifact_01", "prop_attache_case_01", "prop_large_gold", "prop_roller_car_01", "prop_water_corpse_01", "prop_water_corpse_02", "prop_dummy_01", "prop_atm_01",
"hei_prop_carrier_docklight_01", "hei_prop_carrier_liferafts", "hei_prop_carrier_ord_03", "hei_prop_carrier_defense_02", "hei_prop_carrier_defense_01", "hei_prop_carrier_radar_1",
"hei_prop_carrier_radar_2", "hei_prop_hei_bust_01", "hei_prop_wall_alarm_on", "hei_prop_wall_light_10a_cr", "prop_afsign_amun", "prop_afsign_vbike", "prop_aircon_l_01", "prop_aircon_l_02",
"prop_aircon_l_03", "prop_aircon_l_04", "prop_airhockey_01", "prop_air_bagloader", "prop_air_blastfence_01", "prop_air_blastfence_02", "prop_air_cargo_01a", "prop_air_chock_01", "prop_air_chock_03",
"prop_air_gasbogey_01", "prop_air_generator_03", "prop_air_stair_02", "prop_amb_40oz_02", "prop_amb_40oz_03", "prop_amb_beer_bottle", "prop_amb_donut", "prop_amb_handbag_01", "prop_amp_01",
"prop_anim_cash_pile_02", "prop_asteroid_01", "prop_arm_wrestle_01", "prop_ballistic_shield", "prop_bank_shutter", "prop_barier_conc_02b", "prop_barier_conc_05a", "prop_barrel_01a",
"prop_bar_stool_01", "prop_basejump_target_01" };



int inipos = 0;
std::vector<char*> ini1 =
{
	"2wheeler",
	"Airship",
	"custom zentorno",
	"German Tank",
	"Robot",
	"AAA_True_Ghostrider",
	"AirborneZentorno",
	"AtomicFrogger",
	"Military_TANK_TRANSPORT",
	"MOBILE_WINDMILL",
	"Nazi_Duke",
	"SCOOPER",
	"SecretMilitaryRobot",
	"SecretMilitaryRobot2",
	"TANKMAN",
	"TugBoatSpeeder",
	"TURISMOBEAST",
	"ZENTORNOHUNTER",
	"ZentoroExtraEngine",
	"ROCKET_Nero",
	"Destroyer",
	"Machine",
	"Robot2",
	"FUN_Ramp_Truck",
	"BIKES_Dildo_BMX",
	"BIKES_Bati-Arcade",
	"XMAS_Christmas_Joy",
	"NSA_Truck",
	"True_Ghostrider",
	"Trippy_Blimp",
	"Flying_Yacht",
	"RoadCleaner",
	"rOverpowered_RoadCleaner",
	"pFutureX80",
	"0CleanerRampCar",
	"ZCUFO_Flying",
	"00Delorean",
	"pFLY_BacktoTheFuture_Deluxo_",
	"pFutureZentorno",
	"Peepee_Hydra",


};




const std::string GetModulePath(HMODULE module)
{
std::string path;
char buffer[MAX_PATH];
GetModuleFileNameA(module, buffer, MAX_PATH);
PathRemoveFileSpecA(buffer);
path = buffer;
return path;
}
static fpFileRegister file_register = (fpFileRegister)(Memory::pattern("48 89 5C 24 ? 48 89 6C 24 ? 48 89 7C 24 ? 41 54 41 56 41 57 48 83 EC 50 48 8B EA 4C 8B FA 48 8B D9 4D 85 C9").count(1).get(0).get<decltype(file_register)>());
bool FileExists(const std::string& fileName)
{
struct stat buffer;
return (stat(fileName.c_str(), &buffer) == 0);
}

const std::string name = "EphesysMenu\\ephesystextures.ytd";
const std::string delim = "\\";
const std::string fullPath = GetModulePath(Hooking::hmodule) + delim + name;
void drawYTD() {
if (FileExists(fullPath))
{
int textureID;
file_register(&textureID, fullPath.c_str(), true, name.c_str(), false);
notifyMap("Attached ephesystextures.ytd");
if (textureID == -1)
{
Log::Msg("Failed to register %s", fullPath.c_str());
}
else
{
Log::Msg("Registered File %s with ID:%i", fullPath.c_str(), textureID);
}
}
else
{
notifyMap("Failed to Attach ephesystextures.ytd");
}
}

Menu::Checks::Controlls();
Features::UpdateLoop();
drawYTD();

// can you look on horn boost, never wanted and god mode and other self shit? horn boost detected? :Thinking:
/*MODULEINFO g_MainModuleInfo = { 0 };
extern MODULEINFO g_MainModuleInfo;
void SetName(char* name)
{
DWORD64 start = DWORD64(g_MainModuleInfo.lpBaseOfDll);

bool success = true;
char* gameType = NULL;

switch (g_MainModuleInfo.SizeOfImage)
{
case 70642176: // Steam
{
DWORD64 namePointer1 = ((reinterpret_cast<DWORD64>(start + 0x02AE8530) + 48) + 0x22C);
DWORD64 namePointer2 = (reinterpret_cast<DWORD64>(start + 0x0261BD48) + 0x7C);
DWORD64 namePointer3 = (reinterpret_cast<DWORD64>(start + 0x02611CB8) + 0x5C);
}
break;
case 70818816: // SC
{
DWORD64 namePointer1 = (reinterpret_cast<DWORD64>(start + 0x02AD6188) + 0xCC);
DWORD64 namePointer2 = (reinterpret_cast<DWORD64>(start + 0x02617A58) + 0x7C);
DWORD64 namePointer3 = (reinterpret_cast<DWORD64>(start + 0x0260D728) + 0x5C);
}
break;
default:
{
notifyMap("~r~Unknown Game Version Detected!");
success = false;
}
break;
}

if (success)
{
notifyMap(Menu::Tools::StringToChar("~b~Setting Ingame Name To " + (std::string)name + " ~w~(" + gameType + ")"));
notifyMap("~b~Join a new session to apply the name change");
}
else
{
notifyMap("~r~Name Change Failed!");
}
}*/

int SelectedClient;
int selectedPlayer;
void changeModel(char* Model)
{
	int ModelHash = GAMEPLAY::GET_HASH_KEY(Model);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(ModelHash))
	{
		if (STREAMING::IS_MODEL_VALID(ModelHash))
		{
			STREAMING::REQUEST_MODEL(ModelHash);
			if (STREAMING::HAS_MODEL_LOADED(ModelHash))
			{
				PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), ModelHash);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
			}
		}
	}
}

void changeModelall(char* Model)
{
	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	int ModelHash = GAMEPLAY::GET_HASH_KEY(Model);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(ModelHash))
	{
		if (STREAMING::IS_MODEL_VALID(ModelHash))
		{
			STREAMING::REQUEST_MODEL(ModelHash);
			if (STREAMING::HAS_MODEL_LOADED(ModelHash))
			{
				PLAYER::SET_PLAYER_MODEL(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(ped), ModelHash);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
			}
		}
	}
}



void changeModelallpl(char* Model)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			int ModelHash = GAMEPLAY::GET_HASH_KEY(Model);
			if (STREAMING::IS_MODEL_IN_CDIMAGE(ModelHash))
			{
				if (STREAMING::IS_MODEL_VALID(ModelHash))
				{
					STREAMING::REQUEST_MODEL(ModelHash);
					if (STREAMING::HAS_MODEL_LOADED(ModelHash))
					{
						PLAYER::SET_PLAYER_MODEL(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(iPed), ModelHash);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
					}
				}
			}
		}

	}
}

void AttachNearbyPedsToPlayer(Player selectedPlayer)
{
	const int numElements = 15;
	const int arrSize = numElements * 2 + 2;
	int peds[arrSize];

	peds[0] = numElements;

	int count = PED::GET_PED_NEARBY_PEDS(selectedPlayer, peds, -1);
	for (int i = 0; i < count; ++i)
	{
		int offsettedID = i * 2 + 2;
		if (ENTITY::DOES_ENTITY_EXIST(peds[offsettedID]))
		{
			if (peds[offsettedID] == selectedPlayer) continue;
			{
				if (!ENTITY::IS_ENTITY_DEAD(peds[offsettedID]))
				{
					ENTITY::ATTACH_ENTITY_TO_ENTITY(peds[offsettedID], selectedPlayer, PED::GET_PED_BONE_INDEX(selectedPlayer, 0xe0fd), 0.0, -1.0, 0.0, 0.0, 0.0, 0, false, false, false, false, 2, true);
				}
			}
		}
	}
}

#define PICKUP_MONEY_PAPER_BAG 0x711D02A4  //hello xD
#define PROP_MONEY_BAG_01 0xB8CFE3E3
#define URL 

float get_float_stat2(Hash stat_hash) {
	float stat;
	STATS::STAT_GET_FLOAT(stat_hash, &stat, 0);
	return stat;
}

int Face_ = 0;
int Glasses_ = 0;
int Ears_ = 0;
int Mask_ = 0;
int Hair_ = 0;
int Torso_ = 0;
int Legs_ = 0;
int Hands_ = 0;
int Shoes_ = 0;
int Watches_ = 0;
int Special1_ = 0;
int Special2_ = 0;
int Special3_ = 0;
int Texture_ = 0;
int Torso2_ = 0;
int selectedOutfit = 0;

int  Features::amount = 0;

char *CloudChar[] = { "Cloudy 01", "RAIN", "horizonband1", "horizonband2", "Puffs", "Wispy", "Horizon", "Stormy 01", "Clear 01", "Snowy 01", "Contrails", "altostratus", "Nimbus", "Cirrus", "cirrocumulus", "stratoscumulus", "horizonband3", "Stripey", "horsey", "shower" };

void dropModelsSelect() {
	if (Menu::Option("Plastic Bag (2.5k)")) { Features::bagHash = 0x9CA6F755; }
	if (Menu::Option("Money Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"); }
	if (Menu::Option("Alien Egg")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"); }
	if (Menu::Option("EMP")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp"); }
	if (Menu::Option("Dildo")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"); }
	if (Menu::Option("Xmas Tree")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"); }
	if (Menu::Option("Armor")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"); }
	if (Menu::Option("Poly Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"); }
	if (Menu::Option("Paper Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_paper_bag_01"); }
	if (Menu::Option("Hoockey Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_hockey_bag_01"); }
	if (Menu::Option("Gold Bars")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_gold_bar"); }
	if (Menu::Option("Med Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_poly_bag_money"); }
	if (Menu::Option("Trollys")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_trolly"); }
	if (Menu::Option("Cash Pile 01")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_pile_01"); }
	if (Menu::Option("Cash Pile 02")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_pile_02"); }
	if (Menu::Option("Cash Note")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_note_01"); }
	if (Menu::Option("Cash Envelope")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_envelope_01"); }
	if (Menu::Option("Cash Create")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_cash_crate_01"); }
	if (Menu::Option("Casino Door")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_casino_door_01l"); }
	if (Menu::Option("Gun Case")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"); }
	if (Menu::Option("Golf Bag")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"); }
	if (Menu::Option("Plane")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"); }
	if (Menu::Option("Guitar")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"); }
	if (Menu::Option("Safe")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"); }
	if (Menu::Option("Asteroid")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"); }
	if (Menu::Option("Weed")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_weed_02"); }
	if (Menu::Option("Number0")) { Features::bagHash = $("prop_mp_num_0"); }
	if (Menu::Option("Number1")) { Features::bagHash = $("prop_mp_num_1"); }
	if (Menu::Option("Number2")) { Features::bagHash = $("prop_mp_num_2"); }
	if (Menu::Option("Number3")) { Features::bagHash = $("prop_mp_num_3"); }
	if (Menu::Option("Number4")) { Features::bagHash = $("prop_mp_num_4"); }
	if (Menu::Option("Number5")) { Features::bagHash = $("prop_mp_num_5"); }
	if (Menu::Option("Number6")) { Features::bagHash = $("prop_mp_num_6"); }
	if (Menu::Option("Number7")) { Features::bagHash = $("prop_mp_num_7"); }
	if (Menu::Option("Number8")) { Features::bagHash = $("prop_mp_num_8"); }
	if (Menu::Option("Number9")) { Features::bagHash = $("prop_mp_num_9"); }

}



void dropModelsSelectfakse() {
	if (Menu::Option("Money Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"); }
	if (Menu::Option("Alien Egg")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"); }
	if (Menu::Option("EMP")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp"); }
	if (Menu::Option("Dildo")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"); }
	if (Menu::Option("Xmas Tree")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"); }
	if (Menu::Option("Armor")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"); }
	if (Menu::Option("Poly Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"); }
	if (Menu::Option("Paper Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_paper_bag_01"); }
	if (Menu::Option("Hoockey Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_hockey_bag_01"); }
	if (Menu::Option("Gold Bars")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_gold_bar"); }
	if (Menu::Option("Med Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_poly_bag_money"); }
	if (Menu::Option("Trollys")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_trolly"); }
	if (Menu::Option("Cash Pile 01")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_pile_01"); }
	if (Menu::Option("Cash Pile 02")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_pile_02"); }
	if (Menu::Option("Cash Note")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_note_01"); }
	if (Menu::Option("Cash Envelope")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_envelope_01"); }
	if (Menu::Option("Cash Create")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_cash_crate_01"); }
	if (Menu::Option("Casino Door")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_casino_door_01l"); }
	if (Menu::Option("Gun Case")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"); }
	if (Menu::Option("Golf Bag")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"); }
	if (Menu::Option("Plane")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"); }
	if (Menu::Option("Guitar")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"); }
	if (Menu::Option("Safe")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_night_safe_01"); }
	if (Menu::Option("Asteroid")) { Features::bagHash4 = GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"); }
}



void dropModelsSelect1() {
	if (Menu::Option("Armour")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_ARMOUR_STANDARD"); }
	if (Menu::Option("Bullpupshotgun")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_BULLPUPSHOTGUN "); }
	if (Menu::Option("Assaultsmg")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_ASSAULTSMG "); }
	if (Menu::Option("Pistol 50")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PISTOL50 "); }
	if (Menu::Option("Bullet MP")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_AMMO_BULLET_MP "); }
	if (Menu::Option("Missle MP")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_AMMO_MISSILE_MP"); }
	if (Menu::Option("Granadelauncher")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_AMMO_GRENADELAUNCHER_MP "); }
	if (Menu::Option("Assualtrifle")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_ASSAULTRIFLE "); }
	if (Menu::Option("Health")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_STANDARD"); }
	if (Menu::Option("Parachute")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_PARACHUTE"); }
	if (Menu::Option("Minigun")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MINIGUN "); }
	if (Menu::Option("Pistol")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PISTOL "); }
	if (Menu::Option("Hammer")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HAMMER "); }
	if (Menu::Option("Health Snack")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_SNACK "); }
	if (Menu::Option("Ammo Pistol")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_AMMO_PISTOL "); }
	if (Menu::Option("Ammo RPG")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_AMMO_RPG "); }
	if (Menu::Option("RPG")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_RPG  "); }
	if (Menu::Option("Portable Package")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_PORTABLE_PACKAGE "); }
	if (Menu::Option("Bat")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_BAT "); }
	if (Menu::Option("Dep Bag")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_DEP_BAG"); }
	if (Menu::Option("Plane")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"); }
	if (Menu::Option("Guitar")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"); }
	if (Menu::Option("Safe")) { Features::bagHash1 = GAMEPLAY::GET_HASH_KEY("prop_night_safe_01"); }
	if (Menu::Option("Weed")) { Features::bagHash = GAMEPLAY::GET_HASH_KEY("prop_weed_02"); }
	if (Menu::Option("Number0")) { Features::bagHash = $("prop_mp_num_0"); }
	if (Menu::Option("Number1")) { Features::bagHash = $("prop_mp_num_1"); }
	if (Menu::Option("Number2")) { Features::bagHash = $("prop_mp_num_2"); }
	if (Menu::Option("Number3")) { Features::bagHash = $("prop_mp_num_3"); }
	if (Menu::Option("Number4")) { Features::bagHash = $("prop_mp_num_4"); }
	if (Menu::Option("Number5")) { Features::bagHash = $("prop_mp_num_5"); }
	if (Menu::Option("Number6")) { Features::bagHash = $("prop_mp_num_6"); }
	if (Menu::Option("Number7")) { Features::bagHash = $("prop_mp_num_7"); }
	if (Menu::Option("Number8")) { Features::bagHash = $("prop_mp_num_8"); }
	if (Menu::Option("Number9")) { Features::bagHash = $("prop_mp_num_9"); }
}

void dropModelsSelect1jjj() {
	if (Menu::Option("Freemode")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("mp_m_freemode_01"); }
	if (Menu::Option("Player Zero")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("player_zero "); }
	if (Menu::Option("player_one")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("Player One "); }
	if (Menu::Option("Player two")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("player_two "); }
	if (Menu::Option("Alien")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("s_m_m_movalien_01 "); }
	if (Menu::Option("Zombie")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("u_m_y_zombie_01"); }
	if (Menu::Option("Imporage")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("u_m_y_imporage "); }
	if (Menu::Option("Fireman")) { Features::bagHash1555 = GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01 "); }

}



void selectpedweapon() {
	if (Menu::Option("Minigun")) { Features::bagHash55 = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN"); }
	if (Menu::Option("Pistol")) { Features::bagHash55 = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL"); }
	if (Menu::Option("Micro SMG")) { Features::bagHash55 = GAMEPLAY::GET_HASH_KEY("WEAPON_MICROSMG"); }
	if (Menu::Option("SMG")) { Features::bagHash55 = GAMEPLAY::GET_HASH_KEY("WEAPON_SMG"); }
	if (Menu::Option("Pumpshotgun")) { Features::bagHash55 = GAMEPLAY::GET_HASH_KEY("WEAPON_PUMPSHOTGUN"); }

}

void selectped() {
	if (Menu::Option("Zombie")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("u_m_y_zombie_01"); }
	if (Menu::Option("Fireman")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01"); }
	if (Menu::Option("Johnykelbitz")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("ig_johnnyklebitz"); }
	if (Menu::Option("Zero")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("player_zero"); }
	if (Menu::Option("Tourist")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("A_F_M_Tourist_01"); }
	if (Menu::Option("Alien")) { Features::bagHash556 = GAMEPLAY::GET_HASH_KEY("S_M_M_MovAlien_01"); }

}

void particleModelsSelect() {
	if (Menu::Option("~w~Clown Appears"))Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
	if (Menu::Option("~w~Firework 1"))Features::PTFXCALL("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst");
	if (Menu::Option("~w~Firework 2"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw");
	if (Menu::Option("~w~Firework 3"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw");
	if (Menu::Option("~w~Banknotes"))Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
	if (Menu::Option("~w~Truck Crash"))Features::PTFXCALL("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash");
	if (Menu::Option("~w~Alien 1"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate");
	if (Menu::Option("~w~Alien 2"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport");
	if (Menu::Option("~w~Electric Box"))Features::PTFXCALL("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box");
	if (Menu::Option("~w~Water Splash"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash");
	if (Menu::Option("~w~Bubbles"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles");
	if (Menu::Option("~w~Blood Entry"))Features::PTFXCALL("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry");
	if (Menu::Option("~w~Sniper Impact"))Features::PTFXCALL("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact");
	if (Menu::Option("~w~Dirt Throw"))Features::PTFXCALL("core_snow", "core_snow", "cs_mich1_spade_dirt_throw");
	if (Menu::Option("~w~Blood Stab"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_mich2_blood_stab");
	if (Menu::Option("~w~Ped Sliced"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced");
	if (Menu::Option("~w~Camera"))Features::PTFXCALL("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera");
	if (Menu::Option("~w~Meth Smoke"))Features::PTFXCALL("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke");
	if (Menu::Option("~w~Burial Dirt"))Features::PTFXCALL("scr_reburials", "scr_reburials", "scr_burial_dirt");
}

bool rdev;

int weaponpos = 0;
std::vector<char*> weaponsel =
{
	"WEAPON_UNARMED","WEAPON_ANIMAL","WEAPON_COUGAR","WEAPON_KNIFE","WEAPON_NIGHTSTICK ","WEAPON_HAMMER","WEAPON_BAT","WEAPON_GOLFCLUB ","WEAPON_CROWBAR","WEAPON_PISTOL",
	"WEAPON_COMBATPISTOL","WEAPON_APPISTOL","WEAPON_PISTOL50","WEAPON_MICROSMG","WEAPON_SMG","WEAPON_ASSAULTSMG","WEAPON_ASSAULTRIFLE","WEAPON_CARBINERIFLE","WEAPON_ADVANCEDRIFLE",
	"WEAPON_MG ","WEAPON_COMBATMG ","WEAPON_PUMPSHOTGUN ","WEAPON_SAWNOFFSHOTGUN ","WEAPON_ASSAULTSHOTGUN ",




};

#pragma region long bois

int StuntlistPos = 0;
std::vector<char*> Stuntlist = {
	"stt_prop_c4_stack",
	"stt_prop_corner_sign_01",
	"stt_prop_corner_sign_02",
	"stt_prop_corner_sign_03",
	"stt_prop_corner_sign_04",
	"stt_prop_corner_sign_05",
	"stt_prop_corner_sign_06",
	"stt_prop_corner_sign_07",
	"stt_prop_corner_sign_08",
	"stt_prop_corner_sign_09",
	"stt_prop_corner_sign_10",
	"stt_prop_corner_sign_11",
	"stt_prop_corner_sign_12",
	"stt_prop_corner_sign_13",
	"stt_prop_corner_sign_14",
	"stt_prop_flagpole_1a",
	"stt_prop_flagpole_1b",
	"stt_prop_flagpole_1c",
	"stt_prop_flagpole_1d",
	"stt_prop_flagpole_1e",
	"stt_prop_flagpole_1f",
	"stt_prop_flagpole_2a",
	"stt_prop_flagpole_2b",
	"stt_prop_flagpole_2c",
	"stt_prop_flagpole_2d",
	"stt_prop_flagpole_2e",
	"stt_prop_flagpole_2f",
	"stt_prop_hoop_constraction_01a",
	"stt_prop_hoop_small_01",
	"stt_prop_hoop_tyre_01a",
	"stt_prop_lives_bottle",
	"stt_prop_race_gantry_01",
	"stt_prop_race_start_line_01",
	"stt_prop_race_start_line_01b",
	"stt_prop_race_start_line_02",
	"stt_prop_race_start_line_02b",
	"stt_prop_race_start_line_03",
	"stt_prop_race_start_line_03b",
	"stt_prop_race_tannoy",
	"stt_prop_ramp_adj_flip_m",
	"stt_prop_ramp_adj_flip_mb",
	"stt_prop_ramp_adj_flip_s",
	"stt_prop_ramp_adj_flip_sb",
	"stt_prop_ramp_adj_hloop",
	"stt_prop_ramp_adj_loop",
	"stt_prop_ramp_jump_l",
	"stt_prop_ramp_jump_m",
	"stt_prop_ramp_jump_s",
	"stt_prop_ramp_jump_xl",
	"stt_prop_ramp_jump_xs",
	"stt_prop_ramp_jump_xxl",
	"stt_prop_ramp_multi_loop_rb",
	"stt_prop_ramp_spiral_l",
	"stt_prop_ramp_spiral_l_l",
	"stt_prop_ramp_spiral_l_m",
	"stt_prop_ramp_spiral_l_s",
	"stt_prop_ramp_spiral_l_xxl",
	"stt_prop_ramp_spiral_m",
	"stt_prop_ramp_spiral_s",
	"stt_prop_ramp_spiral_xxl",
	"stt_prop_sign_circuit_01",
	"stt_prop_sign_circuit_02",
	"stt_prop_sign_circuit_03",
	"stt_prop_sign_circuit_04",
	"stt_prop_sign_circuit_05",
	"stt_prop_sign_circuit_06",
	"stt_prop_sign_circuit_07",
	"stt_prop_sign_circuit_08",
	"stt_prop_sign_circuit_09",
	"stt_prop_sign_circuit_10",
	"stt_prop_sign_circuit_11",
	"stt_prop_sign_circuit_11b",
	"stt_prop_sign_circuit_12",
	"stt_prop_sign_circuit_13",
	"stt_prop_sign_circuit_13b",
	"stt_prop_sign_circuit_14",
	"stt_prop_sign_circuit_14b",
	"stt_prop_sign_circuit_15",
	"stt_prop_slow_down",
	"stt_prop_speakerstack_01a",
	"stt_prop_startline_gantry",
	"stt_prop_stunt_bblock_huge_01",
	"stt_prop_stunt_bblock_huge_02",
	"stt_prop_stunt_bblock_huge_03",
	"stt_prop_stunt_bblock_huge_04",
	"stt_prop_stunt_bblock_huge_05",
	"stt_prop_stunt_bblock_hump_01",
	"stt_prop_stunt_bblock_hump_02",
	"stt_prop_stunt_bblock_lrg1",
	"stt_prop_stunt_bblock_lrg2",
	"stt_prop_stunt_bblock_lrg3",
	"stt_prop_stunt_bblock_mdm1",
	"stt_prop_stunt_bblock_mdm2",
	"stt_prop_stunt_bblock_mdm3",
	"stt_prop_stunt_bblock_qp",
	"stt_prop_stunt_bblock_qp2",
	"stt_prop_stunt_bblock_qp3",
	"stt_prop_stunt_bblock_sml1",
	"stt_prop_stunt_bblock_sml2",
	"stt_prop_stunt_bblock_sml3",
	"stt_prop_stunt_bblock_xl1",
	"stt_prop_stunt_bblock_xl2",
	"stt_prop_stunt_bblock_xl3",
	"stt_prop_stunt_bowling_ball",
	"stt_prop_stunt_bowling_pin",
	"stt_prop_stunt_bowlpin_stand",
	"stt_prop_stunt_domino",
	"stt_prop_stunt_jump15",
	"stt_prop_stunt_jump30",
	"stt_prop_stunt_jump45",
	"stt_prop_stunt_jump_l",
	"stt_prop_stunt_jump_lb",
	"stt_prop_stunt_jump_loop",
	"stt_prop_stunt_jump_m",
	"stt_prop_stunt_jump_mb",
	"stt_prop_stunt_jump_s",
	"stt_prop_stunt_jump_sb",
	"stt_prop_stunt_landing_zone_01",
	"stt_prop_stunt_ramp",
	"stt_prop_stunt_soccer_ball",
	"stt_prop_stunt_soccer_goal",
	"stt_prop_stunt_soccer_lball",
	"stt_prop_stunt_soccer_sball",
	"stt_prop_stunt_target",
	"stt_prop_stunt_target_small",
	"stt_prop_stunt_track_bumps",
	"stt_prop_stunt_track_cutout",
	"stt_prop_stunt_track_dwlink",
	"stt_prop_stunt_track_dwlink_02",
	"stt_prop_stunt_track_dwsh15",
	"stt_prop_stunt_track_dwshort",
	"stt_prop_stunt_track_dwslope15",
	"stt_prop_stunt_track_dwslope30",
	"stt_prop_stunt_track_dwslope45",
	"stt_prop_stunt_track_dwturn",
	"stt_prop_stunt_track_dwuturn",
	"stt_prop_stunt_track_exshort",
	"stt_prop_stunt_track_fork",
	"stt_prop_stunt_track_funlng",
	"stt_prop_stunt_track_funnel",
	"stt_prop_stunt_track_hill",
	"stt_prop_stunt_track_hill2",
	"stt_prop_stunt_track_jump",
	"stt_prop_stunt_track_link",
	"stt_prop_stunt_track_otake",
	"stt_prop_stunt_track_sh15",
	"stt_prop_stunt_track_sh30",
	"stt_prop_stunt_track_sh45",
	"stt_prop_stunt_track_sh45_a",
	"stt_prop_stunt_track_short",
	"stt_prop_stunt_track_slope15",
	"stt_prop_stunt_track_slope30",
	"stt_prop_stunt_track_slope45",
	"stt_prop_stunt_track_start",
	"stt_prop_stunt_track_start_02",
	"stt_prop_stunt_track_straight",
	"stt_prop_stunt_track_straightice",
	"stt_prop_stunt_track_st_01",
	"stt_prop_stunt_track_st_02",
	"stt_prop_stunt_track_turn",
	"stt_prop_stunt_track_turnice",
	"stt_prop_stunt_track_uturn",
	"stt_prop_stunt_tube_crn",
	"stt_prop_stunt_tube_crn2",
	"stt_prop_stunt_tube_crn_15d",
	"stt_prop_stunt_tube_crn_30d",
	"stt_prop_stunt_tube_crn_5d",
	"stt_prop_stunt_tube_cross",
	"stt_prop_stunt_tube_end",
	"stt_prop_stunt_tube_ent",
	"stt_prop_stunt_tube_fn_01",
	"stt_prop_stunt_tube_fn_02",
	"stt_prop_stunt_tube_fn_03",
	"stt_prop_stunt_tube_fn_04",
	"stt_prop_stunt_tube_fn_05",
	"stt_prop_stunt_tube_fork",
	"stt_prop_stunt_tube_gap_01",
	"stt_prop_stunt_tube_gap_02",
	"stt_prop_stunt_tube_gap_03",
	"stt_prop_stunt_tube_hg",
	"stt_prop_stunt_tube_jmp",
	"stt_prop_stunt_tube_jmp2",
	"stt_prop_stunt_tube_l",
	"stt_prop_stunt_tube_m",
	"stt_prop_stunt_tube_qg",
	"stt_prop_stunt_tube_s",
	"stt_prop_stunt_tube_speed",
	"stt_prop_stunt_tube_speeda",
	"stt_prop_stunt_tube_speedb",
	"stt_prop_stunt_tube_xs",
	"stt_prop_stunt_tube_xxs",
	"stt_prop_stunt_wideramp",
	"stt_prop_track_bend2_bar_l",
	"stt_prop_track_bend2_bar_l_b",
	"stt_prop_track_bend2_l",
	"stt_prop_track_bend2_l_b",
	"stt_prop_track_bend_15d",
	"stt_prop_track_bend_15d_bar",
	"stt_prop_track_bend_180d",
	"stt_prop_track_bend_180d_bar",
	"stt_prop_track_bend_30d",
	"stt_prop_track_bend_30d_bar",
	"stt_prop_track_bend_5d",
	"stt_prop_track_bend_5d_bar",
	"stt_prop_track_bend_bar_l",
	"stt_prop_track_bend_bar_l_b",
	"stt_prop_track_bend_bar_m",
	"stt_prop_track_bend_l",
	"stt_prop_track_bend_l_b",
	"stt_prop_track_bend_m",
	"stt_prop_track_block_01",
	"stt_prop_track_block_02",
	"stt_prop_track_block_03",
	"stt_prop_track_chicane_l",
	"stt_prop_track_chicane_l_02",
	"stt_prop_track_chicane_r",
	"stt_prop_track_chicane_r_02",
	"stt_prop_track_cross",
	"stt_prop_track_cross_bar",
	"stt_prop_track_fork",
	"stt_prop_track_fork_bar",
	"stt_prop_track_funnel",
	"stt_prop_track_funnel_ads_01a",
	"stt_prop_track_funnel_ads_01b",
	"stt_prop_track_funnel_ads_01c",
	"stt_prop_track_jump_01a",
	"stt_prop_track_jump_01b",
	"stt_prop_track_jump_01c",
	"stt_prop_track_jump_02a",
	"stt_prop_track_jump_02b",
	"stt_prop_track_jump_02c",
	"stt_prop_track_link",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown_t1",
	"stt_prop_track_slowdown_t2",
	"stt_prop_track_speedup",
	"stt_prop_track_speedup_t1",
	"stt_prop_track_speedup_t2",
	"stt_prop_track_start",
	"stt_prop_track_start_02",
	"stt_prop_track_stop_sign",
	"stt_prop_track_straight_bar_l",
	"stt_prop_track_straight_bar_m",
	"stt_prop_track_straight_bar_s",
	"stt_prop_track_straight_l",
	"stt_prop_track_straight_lm",
	"stt_prop_track_straight_lm_bar",
	"stt_prop_track_straight_m",
	"stt_prop_track_straight_s",
	"stt_prop_track_tube_01",
	"stt_prop_track_tube_02",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_010",
	"stt_prop_tyre_wall_011",
	"stt_prop_tyre_wall_012",
	"stt_prop_tyre_wall_013",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_015",
	"stt_prop_tyre_wall_02",
	"stt_prop_tyre_wall_03",
	"stt_prop_tyre_wall_04",
	"stt_prop_tyre_wall_05",
	"stt_prop_tyre_wall_06",
	"stt_prop_tyre_wall_07",
	"stt_prop_tyre_wall_08",
	"stt_prop_tyre_wall_09",
	"stt_prop_tyre_wall_0l010",
	"stt_prop_tyre_wall_0l012",
	"stt_prop_tyre_wall_0l013",
	"stt_prop_tyre_wall_0l014",
	"stt_prop_tyre_wall_0l015",
	"stt_prop_tyre_wall_0l018",
	"stt_prop_tyre_wall_0l019",
	"stt_prop_tyre_wall_0l020",
	"stt_prop_tyre_wall_0l04",
	"stt_prop_tyre_wall_0l05",
	"stt_prop_tyre_wall_0l06",
	"stt_prop_tyre_wall_0l07",
	"stt_prop_tyre_wall_0l08",
	"stt_prop_tyre_wall_0l1",
	"stt_prop_tyre_wall_0l16",
	"stt_prop_tyre_wall_0l17",
	"stt_prop_tyre_wall_0l2",
	"stt_prop_tyre_wall_0l3",
	"stt_prop_tyre_wall_0r010",
	"stt_prop_tyre_wall_0r011",
	"stt_prop_tyre_wall_0r012",
	"stt_prop_tyre_wall_0r013",
	"stt_prop_tyre_wall_0r014,"
	"stt_prop_tyre_wall_0r015,"
	"stt_prop_tyre_wall_0r016",
	"stt_prop_tyre_wall_0r017",
	"stt_prop_tyre_wall_0r018",
	"stt_prop_tyre_wall_0r019",
	"stt_prop_tyre_wall_0r04",
	"stt_prop_tyre_wall_0r05",
	"stt_prop_tyre_wall_0r06",
	"stt_prop_tyre_wall_0r07",
	"stt_prop_tyre_wall_0r08",
	"stt_prop_tyre_wall_0r09",
	"stt_prop_tyre_wall_0r1",
	"stt_prop_tyre_wall_0r2",
	"stt_prop_tyre_wall_0r3",
	"stt_prop_wallride_01",
	"stt_prop_wallride_01b",
	"stt_prop_wallride_02",
	"stt_prop_wallride_02b",
	"stt_prop_wallride_04",
	"stt_prop_wallride_05",
	"stt_prop_wallride_05b",
	"stt_prop_wallride_45l",
	"stt_prop_wallride_45la",
	"stt_prop_wallride_45r",
	"stt_prop_wallride_45ra",
	"stt_prop_wallride_90l",
	"stt_prop_wallride_90lb",
	"stt_prop_wallride_90r",
	"stt_prop_wallride_90rb",
};

int namedPedListPos = 0;
std::vector<char*> namedPedList =
{
	"mp_m_freemode_01","player_zero","player_one","player_two","s_m_m_movalien_01","u_m_y_zombie_01","u_m_y_imporage","s_m_y_fireman_01","a_f_y_topless_01","u_f_y_poppymich","a_m_y_acult_01","ig_lamardavis","ig_jimmydisanto","ig_tracydisanto",
	"ig_johnnyklebitz","ig_wade","a_f_y_juggalo_01","A_C_Boar","A_C_Chickenhawk","A_C_Chimp","A_C_Chop","A_C_Cormorant","A_C_Cow","A_C_Coyote","A_C_Crow","A_C_Deer","A_C_Fish","A_C_Hen","A_C_Husky","A_C_MtLion","A_C_Pig","A_C_Pigeon","A_C_Rat","A_C_Retriever",
	"A_C_Rhesus","A_C_Rottweiler","A_C_Seagull","A_C_SharkTiger","A_C_shepherd","A_F_M_Beach_01","A_F_M_BevHills_01","A_F_M_BevHills_02","A_F_M_BodyBuild_01","A_F_M_Business_02","A_F_M_Downtown_01","A_F_M_EastSA_01",
	"A_F_M_EastSA_02","A_F_M_FatBla_01","A_F_M_FatCult_01","A_F_M_FatWhite_01","A_F_M_KTown_01","A_F_M_KTown_02","A_F_M_ProlHost_01","A_F_M_Salton_01","A_F_M_SkidRow_01","A_F_M_SouCentMC_01","A_F_M_SouCent_01","A_F_M_SouCent_02",
	"A_F_M_Tourist_01","A_F_M_TrampBeac_01","A_F_M_Tramp_01","A_F_O_GenStreet_01","A_F_O_Indian_01","A_F_O_KTown_01","A_F_O_Salton_01","A_F_O_SouCent_01","A_F_O_SouCent_02","A_F_Y_Beach_01","A_F_Y_BevHills_01","A_F_Y_BevHills_02",
	"A_F_Y_BevHills_03","A_F_Y_BevHills_04","A_F_Y_Business_01","A_F_Y_Business_02","A_F_Y_Business_03","A_F_Y_Business_04","A_F_Y_EastSA_01","A_F_Y_EastSA_02","A_F_Y_EastSA_03","A_F_Y_Epsilon_01","A_F_Y_Fitness_01",
	"A_F_Y_Fitness_02","A_F_Y_GenHot_01","A_F_Y_Golfer_01","A_F_Y_Hiker_01","A_F_Y_Hippie_01","A_F_Y_Hipster_01","A_F_Y_Hipster_02","A_F_Y_Hipster_03","A_F_Y_Hipster_04","A_F_Y_Indian_01","A_F_Y_Juggalo_01","A_F_Y_Runner_01",
	"A_F_Y_RurMeth_01","A_F_Y_SCDressy_01","A_F_Y_Skater_01","A_F_Y_SouCent_01","A_F_Y_SouCent_02","A_F_Y_SouCent_03","A_F_Y_Tennis_01","A_F_Y_Topless_01","A_F_Y_Tourist_01","A_F_Y_Tourist_02","A_F_Y_Vinewood_01",
	"A_F_Y_Vinewood_02","A_F_Y_Vinewood_03","A_F_Y_Vinewood_04","A_F_Y_Yoga_01","A_M_M_ACult_01","A_M_M_AfriAmer_01","A_M_M_Beach_01","A_M_M_Beach_02","A_M_M_BevHills_01","A_M_M_BevHills_02","A_M_M_Business_01",
	"A_M_M_EastSA_01","A_M_M_EastSA_02","A_M_M_Farmer_01","A_M_M_FatLatin_01","A_M_M_GenFat_01","A_M_M_GenFat_02","A_M_M_Golfer_01","A_M_M_HasJew_01","A_M_M_Hillbilly_01","A_M_M_Hillbilly_02","A_M_M_Indian_01",
	"A_M_M_KTown_01","A_M_M_Malibu_01","A_M_M_MexCntry_01","A_M_M_MexLabor_01","A_M_M_OG_Boss_01","A_M_M_Paparazzi_01","A_M_M_Polynesian_01","A_M_M_ProlHost_01","A_M_M_RurMeth_01","A_M_M_Salton_01","A_M_M_Salton_02",
	"A_M_M_Salton_03","A_M_M_Salton_04","A_M_M_Skater_01","A_M_M_Skidrow_01","A_M_M_SoCenLat_01","A_M_M_SouCent_01","A_M_M_SouCent_02","A_M_M_SouCent_03","A_M_M_SouCent_04","A_M_M_StLat_02","A_M_M_Tennis_01",
	"A_M_M_Tourist_01","A_M_M_TrampBeac_01","A_M_M_Tramp_01","A_M_M_TranVest_01","A_M_M_TranVest_02","A_M_O_ACult_01","A_M_O_ACult_02","A_M_O_Beach_01","A_M_O_GenStreet_01","A_M_O_KTown_01","A_M_O_Salton_01",
	"A_M_O_SouCent_01","A_M_O_SouCent_02","A_M_O_SouCent_03","A_M_O_Tramp_01","A_M_Y_ACult_01","A_M_Y_ACult_02","A_M_Y_BeachVesp_01","A_M_Y_BeachVesp_02","A_M_Y_Beach_01","A_M_Y_Beach_02","A_M_Y_Beach_03","A_M_Y_BevHills_01",
	"A_M_Y_BevHills_02","A_M_Y_BreakDance_01","A_M_Y_BusiCas_01","A_M_Y_Business_01","A_M_Y_Business_02","A_M_Y_Business_03","A_M_Y_Cyclist_01","A_M_Y_DHill_01","A_M_Y_Downtown_01","A_M_Y_EastSA_01","A_M_Y_EastSA_02",
	"A_M_Y_Epsilon_01","A_M_Y_Epsilon_02","A_M_Y_Gay_01","A_M_Y_Gay_02","A_M_Y_GenStreet_01","A_M_Y_GenStreet_02","A_M_Y_Golfer_01","A_M_Y_HasJew_01","A_M_Y_Hiker_01","A_M_Y_Hippy_01","A_M_Y_Hipster_01","A_M_Y_Hipster_02",
	"A_M_Y_Hipster_03","A_M_Y_Indian_01","A_M_Y_Jetski_01","A_M_Y_Juggalo_01","A_M_Y_KTown_01","A_M_Y_KTown_02","A_M_Y_Latino_01","A_M_Y_MethHead_01","A_M_Y_MexThug_01","A_M_Y_MotoX_01","A_M_Y_MotoX_02","A_M_Y_MusclBeac_01",
	"A_M_Y_MusclBeac_02","A_M_Y_Polynesian_01","A_M_Y_RoadCyc_01","A_M_Y_Runner_01","A_M_Y_Runner_02","A_M_Y_Salton_01","A_M_Y_Skater_01","A_M_Y_Skater_02","A_M_Y_SouCent_01","A_M_Y_SouCent_02","A_M_Y_SouCent_03","A_M_Y_SouCent_04",
	"A_M_Y_StBla_01","A_M_Y_StBla_02","A_M_Y_StLat_01","A_M_Y_StWhi_01","A_M_Y_StWhi_02","A_M_Y_Sunbathe_01","A_M_Y_Surfer_01","A_M_Y_VinDouche_01","A_M_Y_Vinewood_01","A_M_Y_Vinewood_02","A_M_Y_Vinewood_03","A_M_Y_Vinewood_04",
	"A_M_Y_Yoga_01","CSB_Abigail","CSB_Anita","CSB_Anton","CSB_BallasOG","CSB_Bride","CSB_BurgerDrug","CSB_Car3guy1","CSB_Car3guy2","CSB_Chef","CSB_Chin_goon","CSB_Cletus","CSB_Cop","CSB_Customer","CSB_Denise_friend",
	"CSB_FOS_rep","CSB_G","CSB_Groom","CSB_Grove_str_dlr","CSB_Hao","CSB_Hugh","CSB_Imran","CSB_Janitor","CSB_Maude","CSB_MWeather","CSB_Ortega","CSB_Oscar","CSB_PornDudes","CSB_PrologueDriver","CSB_ProlSec","CSB_Ramp_gang",
	"CSB_Ramp_hic","CSB_Ramp_hipster","CSB_Ramp_marine","CSB_Ramp_mex","CSB_Reporter","CSB_RoccoPelosi","CSB_Screen_Writer","CSB_Stripper_01","CSB_Stripper_02","CSB_Tonya","CSB_TrafficWarden","CS_AmandaTownley","CS_Andreas",
	"cs_ashley","CS_Bankman","CS_Barry","CS_Beverly","CS_Brad","CS_BradCadaver","CS_Carbuyer","CS_Casey","CS_ChengSr","CS_ChrisFormage","CS_Clay","CS_Dale","CS_DaveNorton","cs_debra","cs_denise","CS_Devin","CS_Dom","CS_Dreyfuss",
	"CS_DrFriedlander","CS_Fabien","CS_FBISuit_01","CS_Floyd","CS_Guadalope","cs_gurk","CS_Hunter","CS_Janet","CS_JewelAss","CS_JimmyBoston","CS_JimmyDiSanto","CS_JoeMinuteMan","CS_JohnnyKlebitz","CS_Josef","CS_Josh","CS_LamarDavis",
	"CS_Lazlow","CS_LesterCrest","CS_LifeInvad_01","CS_Magenta","CS_Manuel","CS_Marnie","CS_MartinMadrazo","CS_MaryAnn","CS_Michelle","CS_Milton","CS_Molly","CS_MovPremF_01","CS_MovPremMale","CS_MRK","CS_MrsPhillips","CS_MRS_Thornhill",
	"CS_Natalia","CS_NervousRon","CS_Nigel","CS_Old_Man1A","CS_Old_Man2","CS_Omega","CS_Orleans","CS_Paper","CS_Patricia","CS_Priest","CS_ProlSec_02","CS_RussianDrunk","CS_SiemonYetarian","CS_Solomon","CS_SteveHains","CS_Stretch",
	"CS_Tanisha","CS_TaoCheng","CS_TaosTranslator","CS_TennisCoach","CS_Terry","CS_Tom","CS_TomEpsilon","CS_TracyDiSanto","CS_Wade","CS_Zimbor","G_F_Y_ballas_01","G_F_Y_Families_01","G_F_Y_Lost_01","G_F_Y_Vagos_01","G_M_M_ArmBoss_01",
	"G_M_M_ArmGoon_01","G_M_M_ArmLieut_01","G_M_M_ChemWork_01","G_M_M_ChiBoss_01","G_M_M_ChiCold_01","G_M_M_ChiGoon_01","G_M_M_ChiGoon_02","G_M_M_KorBoss_01","G_M_M_MexBoss_01","G_M_M_MexBoss_02","G_M_Y_ArmGoon_02","G_M_Y_Azteca_01",
	"G_M_Y_BallaEast_01","G_M_Y_BallaOrig_01","G_M_Y_BallaSout_01","G_M_Y_FamCA_01","G_M_Y_FamDNF_01","G_M_Y_FamFor_01","G_M_Y_Korean_01","G_M_Y_Korean_02","G_M_Y_KorLieut_01","G_M_Y_Lost_01","G_M_Y_Lost_02","G_M_Y_Lost_03",
	"G_M_Y_MexGang_01","G_M_Y_MexGoon_01","G_M_Y_MexGoon_02","G_M_Y_MexGoon_03","G_M_Y_PoloGoon_01","G_M_Y_PoloGoon_02","G_M_Y_SalvaBoss_01","G_M_Y_SalvaGoon_01","G_M_Y_SalvaGoon_02","G_M_Y_SalvaGoon_03","G_M_Y_StrPunk_01","G_M_Y_StrPunk_02",
	"HC_Driver","HC_Gunman","HC_Hacker","IG_Abigail","IG_AmandaTownley","IG_Andreas","IG_Ashley","IG_BallasOG","IG_Bankman","IG_Barry","IG_BestMen","IG_Beverly","IG_Brad","IG_Bride","IG_Car3guy1","IG_Car3guy2","IG_Casey",
	"IG_Chef","IG_ChengSr","IG_ChrisFormage","IG_Clay","IG_ClayPain","IG_Cletus","IG_Dale","IG_DaveNorton","IG_Denise","IG_Devin","IG_Dom","IG_Dreyfuss","IG_DrFriedlander","IG_Fabien","IG_FBISuit_01","IG_Floyd","IG_Groom",
	"IG_Hao","IG_Hunter","IG_Janet","ig_JAY_Norris","IG_JewelAss","IG_JimmyBoston","IG_JimmyDiSanto","IG_JoeMinuteMan","ig_JohnnyKlebitz","IG_Josef","IG_Josh","IG_KerryMcIntosh","IG_LamarDavis","IG_Lazlow","IG_LesterCrest",
	"IG_LifeInvad_01","IG_LifeInvad_02","IG_Magenta","IG_Manuel","IG_Marnie","IG_MaryAnn","IG_Maude","IG_Michelle","IG_Milton","IG_Molly","IG_MRK","IG_MrsPhillips","IG_MRS_Thornhill","IG_Natalia","IG_NervousRon","IG_Nigel",
	"IG_Old_Man1A","IG_Old_Man2","IG_Omega","IG_ONeil","IG_Orleans","IG_Ortega","IG_Paper","IG_Patricia","IG_Priest","IG_ProlSec_02","IG_Ramp_Gang","IG_Ramp_Hic","IG_Ramp_Hipster","IG_Ramp_Mex","IG_RoccoPelosi","IG_RussianDrunk",
	"IG_Screen_Writer","IG_SiemonYetarian","IG_Solomon","IG_SteveHains","IG_Stretch","IG_Talina","IG_Tanisha","IG_TaoCheng","IG_TaosTranslator","ig_TennisCoach","IG_Terry","IG_TomEpsilon","IG_Tonya","IG_TracyDiSanto","IG_TrafficWarden",
	"IG_TylerDix","IG_Wade","IG_Zimbor","MP_F_DeadHooker","MP_F_Freemode_01","MP_F_Misty_01","MP_F_StripperLite","MP_G_M_Pros_01","MP_HeadTargets","MP_M_Claude_01","MP_M_ExArmy_01","MP_M_FamDD_01","MP_M_FIBSec_01","MP_M_Freemode_01",
	"MP_M_Marston_01","MP_M_Niko_01","MP_M_ShopKeep_01","MP_S_M_Armoured_01","Player_One","Player_Two","Player_Zero","slod_human","slod_large_quadped","slod_small_quadped","S_F_M_Fembarber","S_F_M_Maid_01","S_F_M_Shop_HIGH",
	"S_F_M_SweatShop_01","S_F_Y_AirHostess_01","S_F_Y_Bartender_01","S_F_Y_Baywatch_01","S_F_Y_Cop_01","S_F_Y_Factory_01","S_F_Y_Hooker_01","S_F_Y_Hooker_02","S_F_Y_Hooker_03","S_F_Y_Migrant_01","S_F_Y_MovPrem_01","S_F_Y_Ranger_01",
	"S_F_Y_Scrubs_01","S_F_Y_Sheriff_01","S_F_Y_Shop_LOW","S_F_Y_Shop_MID","S_F_Y_StripperLite","S_F_Y_Stripper_01","S_F_Y_Stripper_02","S_F_Y_SweatShop_01","S_M_M_AmmuCountry","S_M_M_Armoured_01","S_M_M_Armoured_02","S_M_M_AutoShop_01",
	"S_M_M_AutoShop_02","S_M_M_Bouncer_01","S_M_M_ChemSec_01","S_M_M_CIASec_01","S_M_M_CntryBar_01","S_M_M_DockWork_01","S_M_M_Doctor_01","S_M_M_FIBOffice_01","S_M_M_FIBOffice_02","S_M_M_Gaffer_01","S_M_M_Gardener_01","S_M_M_GenTransport",
	"S_M_M_HairDress_01","S_M_M_HighSec_01","S_M_M_HighSec_02","S_M_M_Janitor","S_M_M_LatHandy_01","S_M_M_LifeInvad_01","S_M_M_Linecook","S_M_M_LSMetro_01","S_M_M_Mariachi_01","S_M_M_Marine_01","S_M_M_Marine_02","S_M_M_Migrant_01",
	"S_M_M_MovAlien_01","S_M_M_MovPrem_01","S_M_M_MovSpace_01","S_M_M_Paramedic_01","S_M_M_Pilot_01","S_M_M_Pilot_02","S_M_M_Postal_01","S_M_M_Postal_02","S_M_M_PrisGuard_01","S_M_M_Scientist_01","S_M_M_Security_01","S_M_M_SnowCop_01",
	"S_M_M_StrPerf_01","S_M_M_StrPreach_01","S_M_M_StrVend_01","S_M_M_Trucker_01","S_M_M_UPS_01","S_M_M_UPS_02","S_M_O_Busker_01","S_M_Y_AirWorker","S_M_Y_AmmuCity_01","S_M_Y_ArmyMech_01","S_M_Y_Autopsy_01","S_M_Y_Barman_01","S_M_Y_BayWatch_01",
	"S_M_Y_BlackOps_01","S_M_Y_BlackOps_02","S_M_Y_BlackOps_03","S_M_Y_BusBoy_01","S_M_Y_Chef_01","S_M_Y_Clown_01","S_M_Y_Construct_01","S_M_Y_Construct_02","S_M_Y_Cop_01","S_M_Y_Dealer_01","S_M_Y_DevinSec_01","S_M_Y_DockWork_01","S_M_Y_Doorman_01",
	"S_M_Y_DWService_01","S_M_Y_DWService_02","S_M_Y_Factory_01","S_M_Y_Fireman_01","S_M_Y_Garbage","S_M_Y_Grip_01","S_M_Y_HwayCop_01","S_M_Y_Marine_01","S_M_Y_Marine_02","S_M_Y_Marine_03","S_M_Y_Mime","S_M_Y_PestCont_01",
	"S_M_Y_Pilot_01","S_M_Y_PrisMuscl_01","S_M_Y_Prisoner_01","S_M_Y_Ranger_01","S_M_Y_Robber_01","S_M_Y_Sheriff_01","S_M_Y_Shop_MASK","S_M_Y_StrVend_01","S_M_Y_Swat_01","S_M_Y_USCG_01","S_M_Y_Valet_01","S_M_Y_Waiter_01",
	"S_M_Y_WinClean_01","S_M_Y_XMech_01","S_M_Y_XMech_02","U_F_M_Corpse_01","U_F_M_Miranda","U_F_M_ProMourn_01","U_F_O_MovieStar","U_F_O_ProlHost_01","U_F_Y_BikerChic","U_F_Y_COMJane","U_F_Y_corpse_01","U_F_Y_corpse_02",
	"U_F_Y_HotPosh_01","U_F_Y_JewelAss_01","U_F_Y_Mistress","U_F_Y_PoppyMich","U_F_Y_Princess","U_F_Y_SpyActress","U_M_M_Aldinapoli","U_M_M_BankMan","U_M_M_BikeHire_01","U_M_M_FIBArchitect","U_M_M_FilmDirector","U_M_M_GlenStank_01",
	"U_M_M_Griff_01","U_M_M_Jesus_01","U_M_M_JewelSec_01","U_M_M_JewelThief","U_M_M_MarkFost","U_M_M_PartyTarget","U_M_M_ProlSec_01","U_M_M_ProMourn_01","U_M_M_RivalPap","U_M_M_SpyActor","U_M_M_WillyFist","U_M_O_FinGuru_01",
	"U_M_O_TapHillBilly","U_M_O_Tramp_01","U_M_Y_Abner","U_M_Y_AntonB",	"U_M_Y_BabyD","U_M_Y_Baygor","U_M_Y_BurgerDrug_01","U_M_Y_Chip","U_M_Y_Cyclist_01","U_M_Y_FIBMugger_01","U_M_Y_Guido_01","U_M_Y_GunVend_01","U_M_Y_Hippie_01",
	"U_M_Y_ImpoRage","U_M_Y_Justin","U_M_Y_Mani","U_M_Y_MilitaryBum","U_M_Y_Paparazzi","U_M_Y_Party_01","U_M_Y_Pogo_01","U_M_Y_Prisoner_01","U_M_Y_ProlDriver_01","U_M_Y_RSRanger_01","U_M_Y_SBike","U_M_Y_StagGrm_01","U_M_Y_Tattoo_01",
	"U_M_Y_Zombie_01",
};

int propListPos23w = 0;
std::vector<char*> propList23 = {

	"ba_mp_battle_tubes",
	"ba_mp_race_track",
	"ba_props_battle_light_mast",
	"ba_prop_batle_crates_mule",
	"ba_prop_batle_crates_pounder",
	"ba_prop_batle_crates_vehicle",
	"ba_prop_battle_barrier_01",
	"ba_prop_battle_barrier_01a",
	"ba_prop_battle_barrier_01b",
	"ba_prop_battle_barrier_01c",
	"ba_prop_battle_barrier_02a",
	"ba_prop_battle_bomb",
	"ba_prop_battle_cctv_cam_01a",
	"ba_prop_battle_cctv_cam_01b",
	"ba_prop_battle_hinge",
	"ba_prop_battle_latch",
	"ba_prop_battle_mast_01a",
	"ba_prop_battle_pbus_screen",
	"ba_prop_battle_policet_seats",
	"ba_prop_battle_stunt_track",
	"ba_prop_battle_track_exshort",
	"ba_prop_battle_track_short",
	"ba_prop_battle_tube_fn_01",
	"ba_prop_battle_tube_fn_02",
	"ba_prop_battle_tube_fn_03",
	"ba_prop_battle_tube_fn_04",
	"ba_prop_battle_tube_fn_05",
	"ba_prop_club_dressing",
	"ba_prop_club_dressing_board_01",
	"ba_prop_club_dressing_board_02",
	"ba_prop_club_dressing_board_03",
	"ba_prop_club_dressing_board_04",
	"ba_prop_club_dressing_board_05",
	"ba_prop_club_dressing_posters_01",
	"ba_prop_club_dressing_posters_02",
	"ba_prop_club_dressing_posters_03",
	"ba_prop_club_dressing_poster_01",
	"ba_prop_club_dressing_poster_02",
	"ba_prop_club_dressing_poster_03",
	"ba_prop_club_dressing_sign_01",
	"ba_prop_club_dressing_sign_02",
	"ba_prop_club_dressing_sign_03",
	"ba_prop_track_bend_l_b",
	"ba_prop_track_straight_lm",
	"ba_prop_battle_amb_phone",
	"ba_prop_battle_antique_box",
	"ba_prop_battle_bag_01",
	"ba_prop_battle_bag_01a",
	"ba_prop_battle_bag_01b",
	"ba_prop_battle_case_sm_03",
	"ba_prop_battle_champ_01",
	"ba_prop_battle_chest_closed",
	"ba_prop_battle_coke_block_01a",
	"ba_prop_battle_coke_doll_bigbox",
	"ba_prop_battle_crates.ytyp",
	"ba_prop_battle_crates_pistols_01a",
	"ba_prop_battle_crates_rifles_01a",
	"ba_prop_battle_crates_rifles_02a",
	"ba_prop_battle_crates_rifles_03a",
	"ba_prop_battle_crates_rifles_04a",
	"ba_prop_battle_crates_sam_01a",
	"ba_prop_battle_crates_weapons",
	"ba_prop_battle_crates_wpn_mix_01a",
	"ba_prop_battle_crate_art_02_bc",
	"ba_prop_battle_crate_beer",
	"ba_prop_battle_crate_beer_01",
	"ba_prop_battle_crate_beer_02",
	"ba_prop_battle_crate_beer_03",
	"ba_prop_battle_crate_beer_04",
	"ba_prop_battle_crate_beer_double",
	"ba_prop_battle_crate_biohazard_bc",
	"ba_prop_battle_crate_closed_bc",
	"ba_prop_battle_crate_gems_bc",
	"ba_prop_battle_crate_med_bc",
	"ba_prop_battle_crate_m_antiques",
	"ba_prop_battle_crate_m_bones",
	"ba_prop_battle_crate_m_hazard",
	"ba_prop_battle_crate_m_jewellery",
	"ba_prop_battle_crate_m_medical",
	"ba_prop_battle_crate_m_tobacco",
	"ba_prop_battle_crate_tob_bc",
	"ba_prop_battle_crate_wlife_bc",
	"ba_prop_battle_drug_package_02",
	"ba_prop_battle_fakeid_boxdl_01a",
	"ba_prop_battle_fakeid_boxpp_01a",
	"ba_prop_battle_handbag",
	"ba_prop_battle_laptop_dj",
	"ba_prop_battle_meth_bigbag_01a",
	"ba_prop_battle_moneypack_02a",
	"ba_prop_battle_ps_box_01",
	"ba_prop_battle_rsply_crate_02a",
	"ba_prop_battle_rsply_crate_gr_02a",
	"ba_prop_battle_vinyl_case",
	"ba_prop_battle_wallet_pickup",
	"ba_prop_battle_weed_bigbag_01a",
	"ba_prop_battle_bar_beerfridge_01",
	"ba_prop_battle_bar_fridge",
	"ba_prop_battle_bar_fridge_01",
	"ba_prop_battle_bar_fridge_02",
	"ba_prop_battle_champ_closed",
	"ba_prop_battle_champ_closed_02",
	"ba_prop_battle_champ_closed_03",
	"ba_prop_battle_champ_open",
	"ba_prop_battle_champ_open_02",
	"ba_prop_battle_champ_open_03",
	"ba_prop_battle_club_chair_01",
	"ba_prop_battle_club_chair_02",
	"ba_prop_battle_club_chair_03",
	"ba_prop_battle_club_computer_01",
	"ba_prop_battle_club_computer_02",
	"ba_prop_battle_club_doors",
	"ba_prop_battle_club_door_edgy",
	"ba_prop_battle_club_door_glam",
	"ba_prop_battle_club_door_trad",
	"ba_prop_battle_club_projector",
	"ba_prop_battle_club_screen.",
	"ba_prop_battle_club_screen",
	"ba_prop_battle_club_screen_02",
	"ba_prop_battle_club_screen_03",
	"ba_prop_battle_club_speaker",
	"ba_prop_battle_club_speaker_array",
	"ba_prop_battle_club_speaker_dj",
	"ba_prop_battle_club_speaker_large",
	"ba_prop_battle_club_speaker_med",
	"ba_prop_battle_club_speaker_small",
	"ba_prop_battle_cuffs",
	"ba_prop_battle_decanter_01_s",
	"ba_prop_battle_decanter_02_s",
	"ba_prop_battle_decanter_03_s",
	"ba_prop_battle_dj",
	"ba_prop_battle_dj",
	"ba_prop_battle_dj_decks",
	"ba_prop_battle_dj_deck_01a",
	"ba_prop_battle_dj_kit",
	"ba_prop_battle_dj_kit_mixer",
	"ba_prop_battle_dj_kit_speaker",
	"ba_prop_battle_dj_mixer_01a",
	"ba_prop_battle_dj_mixer_01b",
	"ba_prop_battle_dj_mixer_01c",
	"ba_prop_battle_dj_mixer_01d",
	"ba_prop_battle_dj_mixer_01e",
	"ba_prop_battle_dj_stand",
	"ba_prop_battle_dj_wires_dixon",
	"ba_prop_battle_dj_wires_madonna",
	"ba_prop_battle_dj_wires_solomon",
	"ba_prop_battle_dj_wires_tale",
	"ba_prop_battle_fan",
	"ba_prop_battle_glowstick_01",
	"ba_prop_battle_headphones_dj",
	"ba_prop_battle_hobby_horse",
	"ba_prop_battle_ice_bucket",
	"ba_prop_battle_mic",
	"ba_prop_battle_nightclub_champ",
	"ba_prop_battle_poster_promo_01",
	"ba_prop_battle_poster_promo_02",
	"ba_prop_battle_poster_promo_03",
	"ba_prop_battle_poster_promo_04",
	"ba_prop_battle_poster_skin_01",
	"ba_prop_battle_poster_skin_02",
	"ba_prop_battle_poster_skin_03",
	"ba_prop_battle_poster_skin_04.ydr",
	"ba_prop_battle_security_pad",
	"ba_prop_battle_shot_glass_01",
	"ba_prop_battle_sniffing_pipe",
	"ba_prop_battle_sports_helmet",
	"ba_prop_battle_trophies",
	"ba_prop_battle_trophy_battler",
	"ba_prop_battle_trophy_dancer",
	"ba_prop_battle_trophy_no1",
	"ba_prop_battle_vape_01",
	"ba_prop_battle_whiskey_bottle_2_s",
	"ba_prop_battle_whiskey_bottle_s",
	"ba_prop_battle_whiskey_opaque_s.ydr",
	"ba_prop_club_champset",
	"ba_prop_club_dimmer",
	"ba_prop_club_glass_opaque",
	"ba_prop_club_glass_trans",
	"ba_prop_club_laptop_dj",
	"ba_prop_club_laptop_dj_02",
	"ba_prop_club_posters_promo",
	"ba_prop_club_screens_01",
	"ba_prop_club_screens_02.ydr",
	"ba_prop_club_smoke_machine",
	"ba_prop_club_tonic_bottle",
	"ba_prop_club_tonic_can",
	"ba_prop_club_water_bottle",
	"ba_prop_door_club_edgy_generic",
	"ba_prop_door_club_edgy_wc",
	"ba_prop_door_club_entrance",
	"ba_prop_door_club_generic_vip",
	"ba_prop_door_club_glam_generic",
	"ba_prop_door_club_glam_wc",
	"ba_prop_door_club_glass",
	"ba_prop_door_club_glass_opaque",
	"ba_prop_door_club_trad_generic",
	"ba_prop_door_club_trad_wc",
	"ba_prop_door_elevator_1l",
	"ba_prop_door_elevator_1r",
	"ba_prop_door_gun_safe",
	"ba_prop_door_safe",
	"ba_prop_door_safe_02",
	"ba_prop_glass_front_office",
	"ba_prop_glass_front_office_opaque",
	"ba_prop_glass_garage",
	"ba_prop_glass_garage_opaque",
	"ba_prop_glass_rear_office",
	"ba_prop_glass_rear_opaque",
	"ba_prop_int_edgy_stool.ydr",
	"ba_prop_int_edgy_table_01",
	"ba_prop_int_edgy_table_02",
	"ba_prop_int_glam_stool",
	"ba_prop_int_glam_table",
	"ba_prop_int_glass",
	"ba_prop_int_stool_low",
	"ba_prop_int_trad_table",
	"ba_prop_sign_galaxy",
	"ba_prop_sign_gefangnis",
	"ba_prop_sign_maison",
	"ba_prop_sign_omega",
	"ba_prop_sign_omega_02",
	"ba_prop_sign_palace",
	"ba_prop_sign_paradise",
	"ba_prop_sign_studio",
	"ba_prop_sign_technologie",
	"ba_prop_sign_tonys",
	"ba_prop_battle_bikechock",
	"ba_prop_battle_cameradrone",
	"ba_prop_battle_control_console",
	"ba_prop_battle_control_seat",
	"ba_prop_battle_drones",
	"ba_prop_battle_drones",
	"ba_prop_battle_drone_hornet",
	"ba_prop_battle_drone_quad",
	"ba_prop_battle_drone_quad",
	"ba_prop_battle_drone_quad_static",
	"ba_prop_battle_hacker_screen",
	"ba_prop_battle_secpanel",
	"ba_prop_battle_secpanel_dam",
	"ba_prop_hei_secpanel",
	"ba_prop_battle_lights",
	"ba_prop_battle_lights",
	"ba_prop_battle_lights_01_bright",
	"ba_prop_battle_lights_01_dim",
	"ba_prop_battle_lights_02_bright",
	"ba_prop_battle_lights_02_dim",
	"ba_prop_battle_lights_03_bright",
	"ba_prop_battle_lights_03_dim",
	"ba_prop_battle_lights_ceiling_l_a",
	"ba_prop_battle_lights_ceiling_l_b",
	"ba_prop_battle_lights_ceiling_l_c",
	"ba_prop_battle_lights_ceiling_l_d",
	"ba_prop_battle_lights_ceiling_l_e",
	"ba_prop_battle_lights_ceiling_l_f",
	"ba_prop_battle_lights_ceiling_l_g",
	"ba_prop_battle_lights_ceiling_l_h",
	"ba_prop_battle_lights_club_dancefloor",
	"ba_prop_battle_lights_floor",
	"ba_prop_battle_lights_floorblue",
	"ba_prop_battle_lights_floorred",
	"ba_prop_battle_lights_floor_l_a",
	"ba_prop_battle_lights_floor_l_b",
	"ba_prop_battle_lights_fx_lamp",
	"ba_prop_battle_lights_fx_riga",
	"ba_prop_battle_lights_fx_rigb",
	"ba_prop_battle_lights_fx_rigc",
	"ba_prop_battle_lights_fx_rigd",
	"ba_prop_battle_lights_fx_rige",
	"ba_prop_battle_lights_fx_rigf",
	"ba_prop_battle_lights_fx_rigg",
	"ba_prop_battle_lights_fx_righ",
	"ba_prop_battle_lights_fx_rotator",
	"ba_prop_battle_lights_fx_support",
	"ba_prop_battle_lights_int_03_lr1",
	"ba_prop_battle_lights_int_03_lr2",
	"ba_prop_battle_lights_int_03_lr3",
	"ba_prop_battle_lights_int_03_lr4",
	"ba_prop_battle_lights_int_03_lr5",
	"ba_prop_battle_lights_int_03_lr6",
	"ba_prop_battle_lights_int_03_lr7.ydr",
	"ba_prop_battle_lights_int_03_lr8.ydr",
	"ba_prop_battle_lights_int_03_lr9",
	"ba_prop_battle_lights_stairs",
	"ba_prop_battle_lights_support",
	"ba_prop_battle_lights_tube_l_a",
	"ba_prop_battle_lights_tube_l_b",
	"ba_prop_battle_lights_wall_l_a",
	"ba_prop_battle_lights_wall_l_b",
	"ba_prop_battle_lights_wall_l_c",
	"ba_prop_battle_lights_wall_l_d",
	"ba_prop_battle_lights_wall_l_e",
	"ba_prop_battle_lights_wall_l_f",
	"ba_prop_battle_lights_workbench",
	"ba_prop_battle_emis_rig_01",
	"ba_prop_battle_emis_rig_10.ytd",
	"ba_prop_battle_lights_02.ycd",
	"ba_prop_battle_lights_02",
	"ba_prop_ba_dj1_emis_rig_01",
	"ba_prop_ba_dj2_emis_rig_01",
	"ba_prop_ba_dj3_emis_rig_01",
	"ba_prop_ba_dj4_emis_rig_01",
	"ba_prop_club_emis_rig_01",
	"ba_prop_club_emis_rig_02",
	"ba_prop_club_emis_rig_02b",
	"ba_prop_club_emis_rig_02c",
	"ba_prop_club_emis_rig_02d",
	"ba_prop_club_emis_rig_03",
	"ba_prop_club_emis_rig_04",
	"ba_prop_club_emis_rig_04b",
	"ba_prop_club_emis_rig_04c",
	"ba_prop_club_emis_rig_05",
	"ba_prop_club_emis_rig_06",
	"ba_prop_club_emis_rig_07",
	"ba_prop_club_emis_rig_08",
	"ba_prop_club_emis_rig_09",
	"ba_prop_club_emis_rig_10",
	"ba_prop_club_emis_rig_10_shad",
	"ba_rig_dj_01_lights_01_a",
	"ba_rig_dj_01_lights_01_b",
	"ba_rig_dj_01_lights_01_c",
	"ba_rig_dj_02_lights_01_a",
	"ba_rig_dj_02_lights_01_b",
	"ba_rig_dj_02_lights_01_c",
	"ba_rig_dj_03_lights_01_a",
	"ba_rig_dj_03_lights_01_b",
	"ba_rig_dj_03_lights_01_c",
	"ba_rig_dj_04_lights_01_a",
	"ba_rig_dj_04_lights_01_b",
	"ba_rig_dj_04_lights_01_c",
	"ba_rig_dj_all_lights_01_off",
	"ba_prop_battle_lights_03",
	"ba_prop_battle_lights_03",
	"ba_prop_ba_dj1_emis_rig_02",
	"ba_prop_ba_dj2_emis_rig_02",
	"ba_prop_ba_dj3_emis_rig_02",
	"ba_prop_ba_dj4_emis_rig_02",
	"ba_rig_dj_01_lights_02_a",
	"ba_rig_dj_01_lights_02_b"
	"ba_rig_dj_01_lights_02_c",
	"ba_rig_dj_02_lights_02_a",
	"ba_rig_dj_02_lights_02_b",
	"ba_rig_dj_02_lights_02_c",
	"ba_rig_dj_03_lights_02_a",
	"ba_rig_dj_03_lights_02_b",
	"ba_rig_dj_03_lights_02_c",
	"ba_rig_dj_04_lights_02_a",
	"ba_rig_dj_04_lights_02_b",
	"ba_rig_dj_04_lights_02_c",
	"ba_rig_dj_all_lights_02_off",
	"ba_prop_battle_lights_04",
	"ba_prop_battle_lights_04",
	"ba_prop_ba_dj1_emis_rig_03",
	"ba_prop_ba_dj2_emis_rig_03",
	"ba_prop_ba_dj3_emis_rig_03",
	"ba_prop_ba_dj4_emis_rig_03.ytd",
	"ba_rig_dj_01_lights_03_a.ydr",
	"ba_rig_dj_01_lights_03_b",
	"ba_rig_dj_01_lights_03_c",
	"ba_rig_dj_02_lights_03_a",
	"ba_rig_dj_02_lights_03_b",
	"ba_rig_dj_02_lights_03_c",
	"ba_rig_dj_03_lights_03_a",
	"ba_rig_dj_03_lights_03_b",
	"ba_rig_dj_03_lights_03_c",
	"ba_rig_dj_04_lights_03_a",
	"ba_rig_dj_04_lights_03_b",
	"ba_rig_dj_04_lights_03_c",
	"ba_rig_dj_all_lights_03_off",
	"ba_prop_battle_lights_05",
	"ba_prop_battle_lights_05",
	"ba_prop_ba_dj1_emis_rig_04",
	"ba_prop_ba_dj2_emis_rig_04",
	"ba_prop_ba_dj3_emis_rig_04",
	"ba_prop_ba_dj4_emis_rig_04",
	"ba_rig_dj_01_lights_04_a",
	"ba_rig_dj_01_lights_04_a_scr",
	"ba_rig_dj_01_lights_04_b",
	"ba_rig_dj_01_lights_04_b_scr",
	"ba_rig_dj_01_lights_04_c",
	"ba_rig_dj_01_lights_04_c_scr",
	"ba_rig_dj_02_lights_04_a",
	"ba_rig_dj_02_lights_04_a_scr",
	"ba_rig_dj_02_lights_04_b",
	"ba_rig_dj_02_lights_04_b_scr",
	"ba_rig_dj_02_lights_04_c",
	"ba_rig_dj_02_lights_04_c_scr",
	"ba_rig_dj_03_lights_04_a",
	"ba_rig_dj_03_lights_04_a_scr",
	"ba_rig_dj_03_lights_04_b",
	"ba_rig_dj_03_lights_04_b_scr",
	"ba_rig_dj_03_lights_04_c",
	"ba_rig_dj_03_lights_04_c_scr",
	"ba_rig_dj_04_lights_04_a",
	"ba_rig_dj_04_lights_04_a_scr",
	"ba_rig_dj_04_lights_04_b",
	"ba_rig_dj_04_lights_04_b_scr",
	"ba_rig_dj_04_lights_04_c",
	"ba_rig_dj_04_lights_04_c_scr",
	"ba_rig_dj_all_lights_04_off",
	"ba_prop_battle_emis_rig_01",
	"ba_prop_battle_emis_rig_02",
	"ba_prop_battle_emis_rig_03",
	"ba_prop_battle_emis_rig_04",
	"ba_prop_battle_lights_content",
	"ba_prop_battle_lights_content",
	"ba_prop_battle_rigs_content",
	"ba_prop_battle_tents",
	"ba_prop_battle_tent",
	"ba_prop_battle_tent_01",
	"ba_prop_battle_tent_02",

};
int propListPos = 0;
std::vector<char*> propList = {
	{
		"prop_mp_ramp_03",
		"prop_a4_pile_01",
		"prop_a4_sheet_01",
		"prop_abat_roller_static",
		"prop_abat_slide",
		"prop_acc_guitar_01",
		"prop_aerial_01a",
		"prop_afsign_amun",
		"prop_afsign_vbike",
		"prop_agave_01",
		"prop_aiprort_sign_01",
		"prop_aircon_l_01",
		"prop_aircon_m_09",
		"prop_aircon_s_01a",
		"prop_aircon_s_02a",
		"prop_airhockey_01",
		"prop_air_bagloader",
		"prop_air_bagloader2",
		"prop_air_barrier",
		"prop_air_bench_01",
		"prop_air_bench_02",
		"prop_air_bigradar_l1",
		"prop_air_bigradar_slod",
		"prop_air_blastfence_01",
		"prop_air_blastfence_02",
		"prop_air_bridge01",
		"prop_air_bridge02",
		"prop_air_cargoloader_01",
		"prop_air_cargo_01a",
		"prop_air_cargo_01b",
		"prop_air_chock_01",
		"prop_air_fueltrail1",
		"prop_air_fueltrail2",
		"prop_air_gasbogey_01",
		"prop_air_generator_01",
		"prop_air_generator_03",
		"prop_air_hoc_paddle_01",
		"prop_air_hoc_paddle_02",
		"prop_air_lights_01a",
		"prop_air_lights_01b",
		"prop_air_lights_03a",
		"prop_air_luggtrolley",
		"prop_air_mast_01",
		"prop_air_mast_02",
		"prop_air_monhut_01",
		"prop_air_monhut_02",
		"prop_air_monhut_03",
		"prop_air_propeller01",
		"prop_air_radar_01",
		"prop_air_stair_01",
		"prop_air_towbar_01",
		"prop_air_towbar_02",
		"prop_air_towbar_03",
		"prop_air_trailer_4a",
		"prop_air_trailer_4b",
		"prop_air_trailer_4c",
		"prop_air_watertank1",
		"prop_air_watertank2",
		"prop_air_windsock_base",
		"prop_air_woodsteps",
		"prop_alarm_01",
		"prop_alarm_02",
		"prop_alien_egg_01",
		"prop_aloevera_01",
		"prop_amanda_note_01",
		"prop_amanda_note_01b",
		"prop_amb_40oz_02",
		"prop_amb_40oz_03",
		"prop_amb_beer_bottle",
		"prop_amb_ciggy_01",
		"prop_amb_donut",
		"prop_amb_handbag_01",
		"prop_amb_phone",
		"prop_amp_01",
		"prop_am_box_wood_01",
		"prop_anim_cash_note",
		"prop_anim_cash_note_b",
		"prop_anim_cash_pile_01",
		"prop_anim_cash_pile_02",
		"prop_apple_box_01",
		"prop_apple_box_02",
		"prop_arcade_01",
		"prop_arcade_02",
		"prop_arc_blueprints_01",
		"prop_armchair_01",
		"prop_armenian_gate",
		"prop_armour_pickup",
		"prop_arm_gate_l",
		"prop_arm_wrestle_01",
		"prop_artgallery_02_dl",
		"prop_artgallery_02_dr",
		"prop_artgallery_dl",
		"prop_artgallery_dr",
		"prop_artifact_01",
		"prop_ashtray_01",
		"prop_asteroid_01",
		"prop_atm_02",
		"prop_atm_03",
		"prop_attache_case_01",
		"prop_aviators_01",
		"prop_a_base_bars_01",
		"prop_a_trailer_door_01",
		"prop_bahammenu",
		"prop_ballistic_shield",
		"prop_ballistic_shield_lod1",
		"prop_bandsaw_01",
		"prop_bank_shutter",
		"prop_bank_vaultdoor",
		"prop_barn_door_l",
		"prop_barn_door_r",
		"prop_barrachneon",
		"prop_barrel_01a",
		"prop_barrel_02a",
		"prop_barrel_02b",
		"prop_barrel_03a",
		"prop_barrel_03d",
		"prop_barrel_float_1",
		"prop_barrel_float_2",
		"prop_barriercrash_03",
		"prop_barriercrash_04",
		"prop_barrier_wat_01a",
		"prop_barrier_wat_03b",
		"prop_barrier_work01c",
		"prop_barry_table_detail",
		"prop_bar_coastbarr",
		"prop_bar_coastchamp",
		"prop_bar_coastdusc",
		"prop_bar_coastmount",
		"prop_bar_cooler_01",
		"prop_bar_cooler_03",
		"prop_bar_fridge_01",
		"prop_bar_fridge_02",
		"prop_bar_fridge_03",
		"prop_bar_fridge_04",
		"prop_bar_ice_01",
		"prop_bar_napkindisp",
		"prop_bar_pump_01",
		"prop_bar_pump_04",
		"prop_bar_pump_05",
		"prop_bar_pump_10",
		"prop_bar_sink_01",
		"prop_bar_stool_01",
		"prop_basejump_target_01",
		"prop_basketball_net",
		"prop_bath_dirt_01",
		"prop_battery_01",
		"prop_battery_02",
		"prop_bball_arcade_01",
		"prop_bbq_2",
		"prop_bbq_3",
		"prop_beachbag_01",
		"prop_beachbag_02",
		"prop_beachbag_combo_01",
		"prop_beachball_02",
		"prop_beachflag_le",
		"prop_beach_bars_01",
		"prop_beach_bars_02",
		"prop_beach_bbq",
		"prop_beach_dip_bars_01",
		"prop_beach_dip_bars_02",
		"prop_beach_fire",
		"prop_beach_lg_float",
		"prop_beach_lg_stretch",
		"prop_beach_lg_surf",
		"prop_beach_punchbag",
		"prop_beach_rings_01",
		"prop_beach_sculp_01",
		"prop_beach_towel_02",
		"prop_beach_volball01",
		"prop_beach_volball02",
		"prop_beerneon",
		"prop_beer_bison",
		"prop_beer_box_01",
		"prop_beer_neon_01",
		"prop_beer_neon_02",
		"prop_beggers_sign_01",
		"prop_beggers_sign_02",
		"prop_bench_01b",
		"prop_bench_01c",
		"prop_bench_04",
		"prop_beta_tape",
		"prop_beware_dog_sign",
		"prop_bh1_03_gate_l",
		"prop_bh1_03_gate_r",
		"prop_bh1_08_mp_gar",
		"prop_bh1_09_mp_gar",
		"prop_bh1_09_mp_l",
		"prop_bh1_09_mp_r",
		"prop_bh1_16_display",
		"prop_bh1_44_door_01l",
		"prop_bh1_44_door_01r",
		"prop_bh1_48_backdoor_l",
		"prop_bh1_48_backdoor_r",
		"prop_bh1_48_gate_1",
		"prop_bhhotel_door_l",
		"prop_bhhotel_door_r",
		"prop_big_bag_01",
		"prop_big_clock_01",
		"prop_big_shit_01",
		"prop_big_shit_02",
		"prop_bikerack_2",
		"prop_bikini_disp_01",
		"prop_bikini_disp_02",
		"prop_billboard_01",
		"prop_billboard_02",
		"prop_billboard_03",
		"prop_billboard_04",
		"prop_billboard_09wall",
		"prop_billboard_10",
		"prop_billboard_11",
		"prop_billb_frame01a",
		"prop_billb_frame01b",
		"prop_billb_frame02a",
		"prop_binoc_01",
		"prop_bin_04a",
		"prop_bin_10a",
		"prop_bin_10b",
		"prop_bin_11a",
		"prop_bin_beach_01d",
		"prop_bin_delpiero",
		"prop_bin_delpiero_b",
		"prop_biolab_g_door",
		"prop_biotech_store",
		"prop_bison_winch",
		"prop_blackjack_01",
		"prop_bleachers_01",
		"prop_blox_spray",
		"prop_bmu_01",
		"prop_bmu_01_b",
		"prop_bmu_02",
		"prop_bmu_02_ld",
		"prop_bmu_02_ld_cab",
		"prop_bmu_02_ld_sup",
		"prop_bmu_track01",
		"prop_bmu_track02",
		"prop_bmu_track03",
		"prop_bodyarmour_02",
		"prop_bodyarmour_03",
		"prop_bodyarmour_04",
		"prop_bollard_01a",
		"prop_bollard_01b",
		"prop_bomb_01",
		"prop_bomb_01_s",
		"prop_bonesaw",
		"prop_bongos_01",
		"prop_bong_01",
		"prop_boogbd_stack_01",
		"prop_boogbd_stack_02",
		"prop_boogieboard_01",
		"prop_boogieboard_02",
		"prop_boombox_01",
		"prop_bottle_cap_01",
		"prop_bowling_ball",
		"prop_bowling_pin",
		"prop_bowl_crisps",
		"prop_boxcar5_handle",
		"prop_boxing_glove_01",
		"prop_boxpile_10a",
		"prop_boxpile_10b",
		"prop_box_ammo01a",
		"prop_box_ammo02a",
		"prop_box_ammo03a_set",
		"prop_box_ammo03a_set2",
		"prop_box_guncase_01a",
		"prop_box_guncase_02a",
		"prop_box_guncase_03a",
		"prop_box_tea01a",
		"prop_box_wood05a",
		"prop_box_wood05b",
		"prop_box_wood08a",
		"prop_breadbin_01",
		"prop_bread_rack_01",
		"prop_bread_rack_02",
		"prop_broken_cboard_p1",
		"prop_broken_cboard_p2",
		"prop_broken_cell_gate_01",
		"prop_broom_unit_01",
		"prop_bskball_01",
		"prop_bs_map_door_01",
		"prop_buckets_02",
		"prop_bucket_01a",
		"prop_bucket_01b",
		"prop_bucket_02a",
		"prop_buck_spade_01",
		"prop_buck_spade_02",
		"prop_buck_spade_03",
		"prop_bumper_01",
		"prop_bumper_02",
		"prop_bumper_03",
		"prop_bumper_car_01",
		"prop_burto_gate_01",
		"prop_bush_dead_02",
		"prop_bush_grape_01",
		"prop_bush_ivy_01_1m",
		"prop_bush_lrg_01",
		"prop_bush_lrg_01b",
		"prop_bush_lrg_01c",
		"prop_bush_med_01",
		"prop_bush_med_02",
		"prop_bush_neat_01",
		"prop_bush_neat_02",
		"prop_bush_ornament_01",
		"prop_bush_ornament_02",
		"prop_busker_hat_01",
		"prop_byard_bench01",
		"prop_byard_bench02",
		"prop_byard_block_01",
		"prop_byard_boat01",
		"prop_byard_boat02",
		"prop_byard_chains01",
		"prop_byard_dingy",
		"prop_byard_elecbox01",
		"prop_byard_elecbox02",
		"prop_byard_floatpile",
		"prop_byard_float_01",
		"prop_byard_float_01b",
		"prop_byard_hoist",
		"prop_byard_hoist_2",
		"prop_byard_hoses01",
		"prop_byard_hoses02",
		"prop_byard_ladder01",
		"prop_byard_machine01",
		"prop_byard_machine02",
		"prop_byard_motor_01",
		"prop_byard_motor_02",
		"prop_byard_net02",
		"prop_byard_phone",
		"prop_byard_pipes01",
		"prop_byard_pipe_01",
		"prop_byard_planks01",
		"prop_byard_pulley01",
		"prop_byard_rack",
		"prop_byard_ramp",
		"prop_byard_rampold",
		"prop_byard_rowboat1",
		"prop_byard_scfhold01",
		"prop_byard_sleeper01",
		"prop_byard_sleeper02",
		"prop_byard_steps_01",
		"prop_byard_tank_01",
		"prop_byard_trailer01",
		"prop_byard_trailer02",
		"prop_b_board_blank",
		"prop_c4_final",
		"prop_c4_final_green",
		"prop_cabinet_01",
		"prop_cabinet_01b",
		"prop_cabinet_02b",
		"prop_cablespool_01a",
		"prop_cablespool_01b",
		"prop_cablespool_02",
		"prop_camera_strap",
		"prop_candy_pqs",
		"prop_can_canoe",
		"prop_cap_01",
		"prop_cap_01b",
		"prop_cap_row_01",
		"prop_cap_row_01b",
		"prop_cap_row_02",
		"prop_cap_row_02b",
		"prop_carcreeper",
		"prop_cargo_int",
		"prop_carjack",
		"prop_carjack_l2",
		"prop_carrier_bag_01",
		"prop_carrier_bag_01_lod",
		"prop_cartwheel_01",
		"prop_carwash_roller_horz",
		"prop_carwash_roller_vert",
		"prop_car_battery_01",
		"prop_car_bonnet_01",
		"prop_car_bonnet_02",
		"prop_car_door_01",
		"prop_car_engine_01",
		"prop_car_exhaust_01",
		"prop_car_ignition",
		"prop_car_seat",
		"prop_casey_sec_id",
		"prop_cash_case_01",
		"prop_cash_case_02",
		"prop_cash_crate_01",
		"prop_cash_dep_bag_01",
		"prop_cash_envelope_01",
		"prop_cash_note_01",
		"prop_cash_pile_01",
		"prop_cash_pile_02",
		"prop_cash_trolly",
		"prop_casino_door_01l",
		"prop_casino_door_01r",
		"prop_cattlecrush",
		"prop_cat_tail_01",
		"prop_cctv_02_sm",
		"prop_cctv_cont_01",
		"prop_cctv_cont_03",
		"prop_cementmixer_01a",
		"prop_cementmixer_02a",
		"prop_ceramic_jug_01",
		"prop_ceramic_jug_cork",
		"prop_ch1_07_door_01l",
		"prop_ch2_05d_g_door",
		"prop_ch2_07b_20_g_door",
		"prop_ch2_09b_door",
		"prop_ch2_09c_garage_door",
		"prop_ch3_01_trlrdoor_l",
		"prop_ch3_01_trlrdoor_r",
		"prop_ch3_04_door_01l",
		"prop_ch3_04_door_01r",
		"prop_ch3_04_door_02",
		"prop_chair_01a",
		"prop_chair_01b",
		"prop_chair_02",
		"prop_chair_03",
		"prop_chair_pile_01",
		"prop_chall_lamp_01",
		"prop_chall_lamp_01n",
		"prop_chall_lamp_02",
		"prop_chateau_chair_01",
		"prop_cheetah_covered",
		"prop_chem_grill",
		"prop_chem_grill_bit",
		"prop_chem_vial_02",
		"prop_chem_vial_02b",
		"prop_cherenneon",
		"prop_chickencoop_a",
		"prop_chip_fryer",
		"prop_choc_ego",
		"prop_choc_meto",
		"prop_choc_pq",
		"prop_ch_025c_g_door_01",
		"prop_cigar_01",
		"prop_cigar_pack_01",
		"prop_cigar_pack_02",
		"prop_clapper_brd_01",
		"prop_cleaver",
		"prop_cliff_paper",
		"prop_clippers_01",
		"prop_clothes_rail_02",
		"prop_clothes_rail_03",
		"prop_clothes_rail_2b",
		"prop_clothes_tub_01",
		"prop_clown_chair",
		"prop_cntrdoor_ld_l",
		"prop_cntrdoor_ld_r",
		"prop_coathook_01",
		"prop_cockneon",
		"prop_coffee_cup_trailer",
		"prop_coffee_mac_02",
		"prop_coffin_02",
		"prop_coffin_02b",
		"prop_coke_block_01",
		"prop_coke_block_half_a",
		"prop_coke_block_half_b",
		"prop_compressor_01",
		"prop_compressor_02",
		"prop_compressor_03",
		"prop_com_gar_door_01",
		"prop_com_ls_door_01",
		"prop_conc_sacks_02a",
		"prop_cone_float_1",
		"prop_conschute",
		"prop_consign_01c",
		"prop_consign_02a",
		"prop_conslift_base",
		"prop_conslift_brace",
		"prop_conslift_cage",
		"prop_conslift_steps",
		"prop_console_01",
		"prop_construcionlamp_01",
		"prop_const_fence01a",
		"prop_const_fence01b",
		"prop_const_fence02a",
		"prop_cons_crate",
		"prop_cons_plank",
		"prop_cons_ply01",
		"prop_cons_ply02",
		"prop_container_01a",
		"prop_container_01b",
		"prop_container_01c",
		"prop_container_01d",
		"prop_container_01e",
		"prop_container_01f",
		"prop_container_03mb",
		"prop_container_05mb",
		"prop_container_door_mb_l",
		"prop_container_door_mb_r",
		"prop_container_hole",
		"prop_container_ld",
		"prop_container_ld2",
		"prop_container_old1",
		"prop_contnr_pile_01a",
		"prop_controller_01",
		"prop_control_rm_door_01",
		"prop_cont_chiller_01",
		"prop_cooker_03",
		"prop_copier_01",
		"prop_copper_pan",
		"prop_coral_bush_01",
		"prop_coral_flat_01",
		"prop_coral_flat_01_l1",
		"prop_coral_flat_02",
		"prop_coral_flat_brainy",
		"prop_coral_flat_clam",
		"prop_coral_grass_01",
		"prop_coral_grass_02",
		"prop_coral_kelp_01",
		"prop_coral_kelp_01_l1",
		"prop_coral_kelp_02",
		"prop_coral_kelp_02_l1",
		"prop_coral_kelp_03",
		"prop_coral_kelp_03_l1",
		"prop_coral_kelp_04",
		"prop_coral_kelp_04_l1",
		"prop_coral_pillar_01",
		"prop_coral_pillar_02",
		"prop_coral_spikey_01",
		"prop_coral_stone_03",
		"prop_coral_sweed_03",
		"prop_coral_sweed_04",
		"prop_cora_clam_01",
		"prop_cork_board",
		"prop_couch_01",
		"prop_couch_03",
		"prop_couch_04",
		"prop_couch_lg_02",
		"prop_couch_lg_05",
		"prop_couch_sm_07",
		"prop_crane_01_truck1",
		"prop_crane_01_truck2",
		"prop_cranial_saw",
		"prop_crashed_heli",
		"prop_cratepile_07a_l1",
		"prop_crate_01a",
		"prop_crate_02a",
		"prop_crate_08a",
		"prop_crate_float_1",
		"prop_creosote_b_01",
		"prop_crisp",
		"prop_crisp_small",
		"prop_crosssaw_01",
		"prop_cs1_14b_traind",
		"prop_cs1_14b_traind_dam",
		"prop_cs4_05_tdoor",
		"prop_cs4_10_tr_gd_01",
		"prop_cs4_11_door",
		"prop_cs6_03_door_l",
		"prop_cs6_03_door_r",
		"prop_cs_20m_rope",
		"prop_cs_30m_rope",
		"prop_cs_abattoir_switch",
		"prop_cs_aircon_01",
		"prop_cs_aircon_fan",
		"prop_cs_amanda_shoe",
		"prop_cs_ashtray",
		"prop_cs_bandana",
		"prop_cs_bar",
		"prop_cs_beachtowel_01",
		"prop_cs_beer_bot_01",
		"prop_cs_beer_bot_01b",
		"prop_cs_beer_bot_01lod",
		"prop_cs_beer_bot_02",
		"prop_cs_beer_bot_40oz_03",
		"prop_cs_beer_bot_test",
		"prop_cs_binder_01",
		"prop_cs_bin_01",
		"prop_cs_bin_01_lid",
		"prop_cs_bin_01_skinned",
		"prop_cs_bin_02",
		"prop_cs_bin_03",
		"prop_cs_book_01",
		"prop_cs_bottle_opener",
		"prop_cs_bowie_knife",
		"prop_cs_bowl_01",
		"prop_cs_bowl_01b",
		"prop_cs_box_clothes",
		"prop_cs_box_step",
		"prop_cs_brain_chunk",
		"prop_cs_bs_cup",
		"prop_cs_bucket_s",
		"prop_cs_bucket_s_lod",
		"prop_cs_burger_01",
		"prop_cs_business_card",
		"prop_cs_cardbox_01",
		"prop_cs_cash_note_01",
		"prop_cs_cctv",
		"prop_cs_champ_flute",
		"prop_cs_ciggy_01",
		"prop_cs_ciggy_01b",
		"prop_cs_clothes_box",
		"prop_cs_coke_line",
		"prop_cs_cont_latch",
		"prop_cs_crackpipe",
		"prop_cs_credit_card",
		"prop_cs_creeper_01",
		"prop_cs_crisps_01",
		"prop_cs_cuffs_01",
		"prop_cs_diaphram",
		"prop_cs_dildo_01",
		"prop_cs_documents_01",
		"prop_cs_duffel_01",
		"prop_cs_duffel_01b",
		"prop_cs_dumpster_01a",
		"prop_cs_dumpster_lidl",
		"prop_cs_dumpster_lidr",
		"prop_cs_dvd",
		"prop_cs_dvd_case",
		"prop_cs_dvd_player",
		"prop_cs_envolope_01",
		"prop_cs_fertilizer",
		"prop_cs_film_reel_01",
		"prop_cs_folding_chair_01",
		"prop_cs_fork",
		"prop_cs_frank_photo",
		"prop_cs_freightdoor_l1",
		"prop_cs_freightdoor_r1",
		"prop_cs_fridge",
		"prop_cs_fridge_door",
		"prop_cs_fuel_hose",
		"prop_cs_fuel_nozle",
		"prop_cs_gascutter_1",
		"prop_cs_gascutter_2",
		"prop_cs_glass_scrap",
		"prop_cs_gravyard_gate_l",
		"prop_cs_gravyard_gate_r",
		"prop_cs_gunrack",
		"prop_cs_hand_radio",
		"prop_cs_heist_bag_01",
		"prop_cs_heist_bag_02",
		"prop_cs_heist_bag_strap_01",
		"prop_cs_heist_rope",
		"prop_cs_heist_rope_b",
		"prop_cs_hotdog_01",
		"prop_cs_hotdog_02",
		"prop_cs_h_bag_strap_01",
		"prop_cs_ice_locker",
		"prop_cs_ice_locker_door_l",
		"prop_cs_ice_locker_door_r",
		"prop_cs_ilev_blind_01",
		"prop_cs_ironing_board",
		"prop_cs_katana_01",
		"prop_cs_kettle_01",
		"prop_cs_keyboard_01",
		"prop_cs_keys_01",
		"prop_cs_kitchen_cab_l2",
		"prop_cs_lazlow_ponytail",
		"prop_cs_lazlow_shirt_01",
		"prop_cs_lazlow_shirt_01b",
		"prop_cs_leaf",
		"prop_cs_leg_chain_01",
		"prop_cs_lester_crate",
		"prop_cs_lipstick",
		"prop_cs_magazine",
		"prop_cs_marker_01",
		"prop_cs_meth_pipe",
		"prop_cs_milk_01",
		"prop_cs_mini_tv",
		"prop_cs_mopbucket_01",
		"prop_cs_mop_s",
		"prop_cs_mouse_01",
		"prop_cs_nail_file",
		"prop_cs_newspaper",
		"prop_cs_office_chair",
		"prop_cs_overalls_01",
		"prop_cs_package_01",
		"prop_cs_padlock",
		"prop_cs_pamphlet_01",
		"prop_cs_panel_01",
		"prop_cs_panties",
		"prop_cs_panties_02",
		"prop_cs_panties_03",
		"prop_cs_paper_cup",
		"prop_cs_para_ropebit",
		"prop_cs_para_ropes",
		"prop_cs_pebble",
		"prop_cs_pebble_02",
		"prop_cs_petrol_can",
		"prop_cs_phone_01",
		"prop_cs_photoframe_01",
		"prop_cs_pills",
		"prop_cs_plane_int_01",
		"prop_cs_planning_photo",
		"prop_cs_plant_01",
		"prop_cs_plate_01",
		"prop_cs_polaroid",
		"prop_cs_police_torch",
		"prop_cs_pour_tube",
		"prop_cs_power_cell",
		"prop_cs_power_cord",
		"prop_cs_protest_sign_01",
		"prop_cs_protest_sign_02",
		"prop_cs_rage_statue_p1",
		"prop_cs_rage_statue_p2",
		"prop_cs_remote_01",
		"prop_cs_rolled_paper",
		"prop_cs_rope_tie_01",
		"prop_cs_rub_binbag_01",
		"prop_cs_rub_box_01",
		"prop_cs_rub_box_02",
		"prop_cs_r_business_card",
		"prop_cs_sack_01",
		"prop_cs_saucer_01",
		"prop_cs_sc1_11_gate",
		"prop_cs_scissors",
		"prop_cs_script_bottle",
		"prop_cs_script_bottle_01",
		"prop_cs_server_drive",
		"prop_cs_sheers",
		"prop_cs_shirt_01",
		"prop_cs_shopping_bag",
		"prop_cs_shot_glass",
		"prop_cs_silver_tray",
		"prop_cs_sink_filler",
		"prop_cs_sink_filler_02",
		"prop_cs_sm_27_gate",
		"prop_cs_sol_glasses",
		"prop_cs_spray_can",
		"prop_cs_steak",
		"prop_cs_stock_book",
		"prop_cs_street_binbag_01",
		"prop_cs_street_card_01",
		"prop_cs_street_card_02",
		"prop_cs_sub_hook_01",
		"prop_cs_sub_rope_01",
		"prop_cs_swipe_card",
		"prop_cs_tablet",
		"prop_cs_tablet_02",
		"prop_cs_toaster",
		"prop_cs_trolley_01",
		"prop_cs_trowel",
		"prop_cs_truck_ladder",
		"prop_cs_tshirt_ball_01",
		"prop_cs_tv_stand",
		"prop_cs_t_shirt_pile",
		"prop_cs_valve",
		"prop_cs_vent_cover",
		"prop_cs_vial_01",
		"prop_cs_walkie_talkie",
		"prop_cs_walking_stick",
		"prop_cs_whiskey_bottle",
		"prop_cs_whiskey_bot_stop",
		"prop_cs_wrench",
		"prop_cub_door_lifeblurb",
		"prop_cub_lifeblurb",
		"prop_cuff_keys_01",
		"prop_cup_saucer_01",
		"prop_curl_bar_01",
		"prop_damdoor_01",
		"prop_dart_1",
		"prop_dart_2",
		"prop_dart_bd_01",
		"prop_dart_bd_cab_01",
		"prop_defilied_ragdoll_01",
		"prop_desert_iron_01",
		"prop_detergent_01a",
		"prop_detergent_01b",
		"prop_devin_box_01",
		"prop_devin_rope_01",
		"prop_diggerbkt_01",
		"prop_direct_chair_01",
		"prop_direct_chair_02",
		"prop_display_unit_01",
		"prop_display_unit_02",
		"prop_disp_cabinet_002",
		"prop_disp_cabinet_01",
		"prop_disp_razor_01",
		"prop_distantcar_day",
		"prop_distantcar_night",
		"prop_distantcar_truck",
		"prop_dj_deck_01",
		"prop_dj_deck_02",
		"prop_dock_ropefloat",
		"prop_dock_ropetyre1",
		"prop_dock_ropetyre2",
		"prop_dock_ropetyre3",
		"prop_dock_rtg_01",
		"prop_dock_rtg_ld",
		"prop_dock_shippad",
		"prop_dock_sign_01",
		"prop_dock_woodpole1",
		"prop_dock_woodpole2",
		"prop_dog_cage_01",
		"prop_dog_cage_02",
		"prop_dolly_01",
		"prop_dolly_02",
		"prop_donut_01",
		"prop_donut_02",
		"prop_donut_02b",
		"prop_door_01",
		"prop_door_balcony_frame",
		"prop_door_balcony_left",
		"prop_door_balcony_right",
		"prop_door_bell_01",
		"prop_double_grid_line",
		"prop_dress_disp_01",
		"prop_dress_disp_02",
		"prop_drop_armscrate_01",
		"prop_drop_armscrate_01b",
		"prop_drop_crate_01",
		"prop_drop_crate_01_set",
		"prop_drop_crate_01_set2",
		"prop_drug_burner",
		"prop_drug_package",
		"prop_drug_package_02",
		"prop_drywallpile_01",
		"prop_drywallpile_02",
		"prop_dt1_13_groundlight",
		"prop_dt1_13_walllightsource",
		"prop_dt1_20_mp_door_l",
		"prop_dt1_20_mp_door_r",
		"prop_dt1_20_mp_gar",
		"prop_ducktape_01",
		"prop_dummy_01",
		"prop_dummy_car",
		"prop_dummy_light",
		"prop_dummy_plane",
		"prop_dumpster_3a",
		"prop_dumpster_3step",
		"prop_dumpster_4a",
		"prop_dumpster_4b",
		"prop_d_balcony_l_light",
		"prop_d_balcony_r_light",
		"prop_ear_defenders_01",
		"prop_ecg_01",
		"prop_ecg_01_cable_01",
		"prop_ecg_01_cable_02",
		"prop_ecola_can",
		"prop_egg_clock_01",
		"prop_ejector_seat_01",
		"prop_elecbox_03a",
		"prop_elecbox_10",
		"prop_el_guitar_01",
		"prop_el_guitar_02",
		"prop_el_guitar_03",
		"prop_employee_month_01",
		"prop_employee_month_02",
		"prop_energy_drink",
		"prop_entityxf_covered",
		"prop_epsilon_door_l",
		"prop_epsilon_door_r",
		"prop_etricmotor_01",
		"prop_exer_bike_01",
		"prop_faceoffice_door_l",
		"prop_faceoffice_door_r",
		"prop_face_rag_01",
		"prop_facgate_01",
		"prop_facgate_01b",
		"prop_facgate_02pole",
		"prop_facgate_02_l",
		"prop_facgate_03post",
		"prop_facgate_08_frame",
		"prop_facgate_08_ld2",
		"prop_facgate_id1_27",
		"prop_fac_machine_02",
		"prop_fag_packet_01",
		"prop_fan_01",
		"prop_fan_palm_01a",
		"prop_fax_01",
		"prop_fbi3_coffee_table",
		"prop_fbibombbin",
		"prop_fbibombcupbrd",
		"prop_fbibombfile",
		"prop_fbibombplant",
		"prop_feeder1",
		"prop_feed_sack_01",
		"prop_feed_sack_02",
		"prop_fence_log_01",
		"prop_fence_log_02",
		"prop_ff_shelves_01",
		"prop_ff_sink_01",
		"prop_ff_sink_02",
		"prop_fib_badge",
		"prop_fib_broken_window",
		"prop_fib_skylight_piece",
		"prop_film_cam_01",
		"prop_fireescape_01a",
		"prop_fireescape_01b",
		"prop_fireescape_02a",
		"prop_fireescape_02b",
		"prop_fire_driser_1a",
		"prop_fire_hosereel",
		"prop_fishing_rod_01",
		"prop_fishing_rod_02",
		"prop_fish_slice_01",
		"prop_flagpole_1a",
		"prop_flagpole_2a",
		"prop_flagpole_3a",
		"prop_flare_01",
		"prop_flare_01b",
		"prop_flash_unit",
		"prop_flatbed_strap",
		"prop_flatbed_strap_b",
		"prop_flatscreen_overlay",
		"prop_flattrailer_01a",
		"prop_flattruck_01a",
		"prop_fleeca_atm",
		"prop_flight_box_01",
		"prop_flight_box_insert",
		"prop_flight_box_insert2",
		"prop_flipchair_01",
		"prop_floor_duster_01",
		"prop_fncconstruc_02a",
		"prop_fridge_03",
		"prop_front_seat_01",
		"prop_front_seat_02",
		"prop_front_seat_03",
		"prop_front_seat_04",
		"prop_front_seat_05",
		"prop_front_seat_06",
		"prop_front_seat_07",
		"prop_front_seat_row_01",
		"prop_fruitstand_b_nite",
		"prop_fruit_basket",
		"prop_ftowel_01",
		"prop_ftowel_07",
		"prop_ftowel_08",
		"prop_ftowel_10",
		"prop_f_b_insert_broken",
		"prop_f_duster_01_s",
		"prop_f_duster_02",
		"prop_gaffer_arm_bind",
		"prop_gaffer_arm_bind_cut",
		"prop_gaffer_leg_bind",
		"prop_gaffer_leg_bind_cut",
		"prop_gaffer_tape",
		"prop_gaffer_tape_strip",
		"prop_game_clock_01",
		"prop_game_clock_02",
		"prop_garden_dreamcatch_01",
		"prop_garden_edging_01",
		"prop_garden_edging_02",
		"prop_garden_zapper_01",
		"prop_gar_door_05_l",
		"prop_gar_door_05_r",
		"prop_gar_door_a_01",
		"prop_gar_door_plug",
		"prop_gascage01",
		"prop_gascyl_ramp_01",
		"prop_gascyl_ramp_door_01",
		"prop_gas_grenade",
		"prop_gas_mask_hang_01",
		"prop_gatecom_02",
		"prop_gate_airport_01",
		"prop_gate_bridge_ld",
		"prop_gate_cult_01_l",
		"prop_gate_cult_01_r",
		"prop_gate_docks_ld",
		"prop_gate_farm_01a",
		"prop_gate_farm_post",
		"prop_gate_frame_06",
		"prop_gate_military_01",
		"prop_gate_prison_01",
		"prop_gate_tep_01_l",
		"prop_gate_tep_01_r",
		"prop_gazebo_03",
		"prop_gd_ch2_08",
		"prop_generator_02a",
		"prop_generator_03a",
		"prop_generator_04",
		"prop_ghettoblast_02",
		"prop_girder_01a",
		"prop_glasscutter_01",
		"prop_glass_suck_holder",
		"prop_glf_roller",
		"prop_glf_spreader",
		"prop_gold_bar",
		"prop_gold_cont_01",
		"prop_gold_cont_01b",
		"prop_gold_trolly",
		"prop_gold_trolly_full",
		"prop_gold_trolly_strap_01",
		"prop_golf_bag_01",
		"prop_golf_bag_01b",
		"prop_golf_bag_01c",
		"prop_golf_ball",
		"prop_golf_ball_p2",
		"prop_golf_tee",
		"prop_golf_wood_01",
		"prop_grain_hopper",
		"prop_grapes_01",
		"prop_grapes_02",
		"prop_grass_dry_02",
		"prop_grass_dry_03",
		"prop_gravestones_01a",
		"prop_gravestones_02a",
		"prop_gravestones_03a",
		"prop_gravestones_04a",
		"prop_gravestones_05a",
		"prop_gravestones_06a",
		"prop_gravestones_07a",
		"prop_gravestones_08a",
		"prop_gravestones_09a",
		"prop_gravestones_10a",
		"prop_gravetomb_01a",
		"prop_gravetomb_02a",
		"prop_griddle_01",
		"prop_griddle_02",
		"prop_grumandoor_l",
		"prop_grumandoor_r",
		"prop_gshotsensor_01",
		"prop_gun_case_01",
		"prop_gun_case_02",
		"prop_gun_frame",
		"prop_hacky_sack_01",
		"prop_handdry_01",
		"prop_handdry_02",
		"prop_handrake",
		"prop_handtowels",
		"prop_hand_toilet",
		"prop_hanger_door_1",
		"prop_hard_hat_01",
		"prop_hat_box_01",
		"prop_hat_box_02",
		"prop_hat_box_03",
		"prop_hat_box_04",
		"prop_hat_box_05",
		"prop_hat_box_06",
		"prop_haybailer_01",
		"prop_haybale_01",
		"prop_haybale_02",
		"prop_haybale_stack_01",
		"prop_hd_seats_01",
		"prop_headphones_01",
		"prop_headset_01",
		"prop_hedge_trimmer_01",
		"prop_helipad_01",
		"prop_helipad_02",
		"prop_henna_disp_01",
		"prop_henna_disp_02",
		"prop_henna_disp_03",
		"prop_hifi_01",
		"prop_hobo_stove_01",
		"prop_hockey_bag_01",
		"prop_hole_plug_01",
		"prop_holster_01",
		"prop_homeless_matress_01",
		"prop_homeless_matress_02",
		"prop_hose_1",
		"prop_hose_2",
		"prop_hose_3",
		"prop_hose_nozzle",
		"prop_hospitaldoors_start",
		"prop_hospital_door_l",
		"prop_hospital_door_r",
		"prop_hotel_clock_01",
		"prop_hotel_trolley",
		"prop_hottub2",
		"prop_huf_rag_01",
		"prop_huge_display_01",
		"prop_huge_display_02",
		"prop_hunterhide",
		"prop_hw1_03_gardoor_01",
		"prop_hw1_04_door_l1",
		"prop_hw1_04_door_r1",
		"prop_hw1_23_door",
		"prop_hwbowl_pseat_6x1",
		"prop_hwbowl_seat_01",
		"prop_hwbowl_seat_02",
		"prop_hwbowl_seat_03",
		"prop_hwbowl_seat_03b",
		"prop_hwbowl_seat_6x6",
		"prop_hydro_platform_01",
		"prop_ice_box_01",
		"prop_ice_box_01_l1",
		"prop_ice_cube_01",
		"prop_ice_cube_02",
		"prop_ice_cube_03",
		"prop_id2_11_gdoor",
		"prop_id2_20_clock",
		"prop_idol_01",
		"prop_idol_01_error",
		"prop_idol_case",
		"prop_idol_case_01",
		"prop_idol_case_02",
		"prop_id_21_gardoor_01",
		"prop_id_21_gardoor_02",
		"prop_indus_meet_door_l",
		"prop_indus_meet_door_r",
		"prop_ind_barge_01",
		"prop_ind_barge_02",
		"prop_ind_coalcar_01",
		"prop_ind_coalcar_02",
		"prop_ind_coalcar_03",
		"prop_ind_conveyor_01",
		"prop_ind_conveyor_02",
		"prop_ind_conveyor_04",
		"prop_ind_crusher",
		"prop_ind_deiseltank",
		"prop_ind_light_01a",
		"prop_ind_light_01b",
		"prop_ind_light_01c",
		"prop_ind_mech_01c",
		"prop_ind_mech_02a",
		"prop_ind_mech_02b",
		"prop_ind_mech_03a",
		"prop_ind_mech_04a",
		"prop_ind_oldcrane",
		"prop_ind_washer_02",
		"prop_inflatearch_01",
		"prop_inflategate_01",
		"prop_ing_camera_01",
		"prop_ing_crowbar",
		"prop_inhaler_01",
		"prop_int_gate01",
		"prop_in_tray_01",
		"prop_irish_sign_01",
		"prop_irish_sign_02",
		"prop_irish_sign_03",
		"prop_irish_sign_04",
		"prop_irish_sign_05",
		"prop_irish_sign_06",
		"prop_irish_sign_07",
		"prop_irish_sign_08",
		"prop_irish_sign_09",
		"prop_irish_sign_10",
		"prop_irish_sign_11",
		"prop_irish_sign_12",
		"prop_irish_sign_13",
		"prop_iron_01",
		"prop_jb700_covered",
		"prop_jeans_01",
		"prop_jetski_ramp_01",
		"prop_jet_bloodsplat_01",
		"prop_jewel_02a",
		"prop_jewel_02b",
		"prop_jewel_02c",
		"prop_jewel_03a",
		"prop_jewel_03b",
		"prop_jewel_04a",
		"prop_jewel_04b",
		"prop_jewel_pickup_new_01",
		"prop_juice_dispenser",
		"prop_juice_pool_01",
		"prop_jukebox_01",
		"prop_jukebox_02",
		"prop_jyard_block_01a",
		"prop_j_disptray_01",
		"prop_j_disptray_01b",
		"prop_j_disptray_01_dam",
		"prop_j_disptray_02",
		"prop_j_disptray_02_dam",
		"prop_j_disptray_03",
		"prop_j_disptray_03_dam",
		"prop_j_disptray_04",
		"prop_j_disptray_04b",
		"prop_j_disptray_05",
		"prop_j_disptray_05b",
		"prop_j_heist_pic_01",
		"prop_j_heist_pic_02",
		"prop_j_heist_pic_03",
		"prop_j_heist_pic_04",
		"prop_j_neck_disp_01",
		"prop_j_neck_disp_02",
		"prop_j_neck_disp_03",
		"prop_kayak_01",
		"prop_kayak_01b",
		"prop_kebab_grill",
		"prop_keg_01",
		"prop_kettle",
		"prop_kettle_01",
		"prop_keyboard_01a",
		"prop_keyboard_01b",
		"prop_kino_light_01",
		"prop_kino_light_03",
		"prop_kitch_juicer",
		"prop_kitch_pot_fry",
		"prop_kitch_pot_huge",
		"prop_kitch_pot_lrg",
		"prop_kitch_pot_lrg2",
		"prop_kitch_pot_med",
		"prop_kitch_pot_sm",
		"prop_knife",
		"prop_knife_stand",
		"prop_kt1_06_door_l",
		"prop_kt1_06_door_r",
		"prop_kt1_10_mpdoor_l",
		"prop_kt1_10_mpdoor_r",
		"prop_ladel",
		"prop_laptop_02_closed",
		"prop_laptop_jimmy",
		"prop_laptop_lester",
		"prop_laptop_lester2",
		"prop_large_gold",
		"prop_large_gold_alt_a",
		"prop_large_gold_alt_b",
		"prop_large_gold_alt_c",
		"prop_large_gold_empty",
		"prop_lawnmower_01",
		"prop_ld_alarm_01",
		"prop_ld_alarm_01_dam",
		"prop_ld_alarm_alert",
		"prop_ld_ammo_pack_01",
		"prop_ld_ammo_pack_02",
		"prop_ld_ammo_pack_03",
		"prop_ld_armour",
		"prop_ld_balcfnc_01a",
		"prop_ld_balcfnc_02a",
		"prop_ld_balcfnc_02c",
		"prop_ld_bankdoors_02",
		"prop_ld_barrier_01",
		"prop_ld_binbag_01",
		"prop_ld_bomb",
		"prop_ld_bomb_01",
		"prop_ld_bomb_01_open",
		"prop_ld_bomb_anim",
		"prop_ld_cable",
		"prop_ld_cable_tie_01",
		"prop_ld_can_01",
		"prop_ld_case_01",
		"prop_ld_case_01_lod",
		"prop_ld_case_01_s",
		"prop_ld_contact_card",
		"prop_ld_container",
		"prop_ld_contain_dl",
		"prop_ld_contain_dl2",
		"prop_ld_contain_dr",
		"prop_ld_contain_dr2",
		"prop_ld_crate_01",
		"prop_ld_crate_lid_01",
		"prop_ld_crocclips01",
		"prop_ld_crocclips02",
		"prop_ld_dummy_rope",
		"prop_ld_fags_01",
		"prop_ld_fags_02",
		"prop_ld_fan_01",
		"prop_ld_fan_01_old",
		"prop_ld_faucet",
		"prop_ld_ferris_wheel",
		"prop_ld_fireaxe",
		"prop_ld_flow_bottle",
		"prop_ld_fragwall_01a",
		"prop_ld_garaged_01",
		"prop_ld_gold_tooth",
		"prop_ld_greenscreen_01",
		"prop_ld_handbag",
		"prop_ld_handbag_s",
		"prop_ld_hat_01",
		"prop_ld_haybail",
		"prop_ld_hdd_01",
		"prop_ld_health_pack",
		"prop_ld_hook",
		"prop_ld_int_safe_01",
		"prop_ld_jail_door",
		"prop_ld_jeans_01",
		"prop_ld_jeans_02",
		"prop_ld_jerrycan_01",
		"prop_ld_keypad_01",
		"prop_ld_keypad_01b",
		"prop_ld_keypad_01b_lod",
		"prop_ld_lap_top",
		"prop_ld_monitor_01",
		"prop_ld_peep_slider",
		"prop_ld_pipe_single_01",
		"prop_ld_planning_pin_01",
		"prop_ld_planning_pin_02",
		"prop_ld_planning_pin_03",
		"prop_ld_purse_01",
		"prop_ld_purse_01_lod",
		"prop_ld_rail_01",
		"prop_ld_rail_02",
		"prop_ld_rope_t",
		"prop_ld_rubble_01",
		"prop_ld_rubble_02",
		"prop_ld_rubble_03",
		"prop_ld_rubble_04",
		"prop_ld_rub_binbag_01",
		"prop_ld_scrap",
		"prop_ld_shirt_01",
		"prop_ld_shoe_01",
		"prop_ld_shoe_02",
		"prop_ld_shovel",
		"prop_ld_shovel_dirt",
		"prop_ld_snack_01",
		"prop_ld_suitcase_01",
		"prop_ld_suitcase_02",
		"prop_ld_test_01",
		"prop_ld_toilet_01",
		"prop_ld_tooth",
		"prop_ld_tshirt_01",
		"prop_ld_tshirt_02",
		"prop_ld_vault_door",
		"prop_ld_wallet_01",
		"prop_ld_wallet_01_s",
		"prop_ld_wallet_02",
		"prop_ld_wallet_pickup",
		"prop_ld_w_me_machette",
		"prop_leaf_blower_01",
		"prop_lectern_01",
		"prop_letterbox_04",
		"prop_lev_crate_01",
		"prop_lev_des_barge_01",
		"prop_lev_des_barge_02",
		"prop_lifeblurb_01",
		"prop_lifeblurb_01b",
		"prop_lifeblurb_02",
		"prop_lifeblurb_02b",
		"prop_life_ring_02",
		"prop_lift_overlay_01",
		"prop_lift_overlay_02",
		"prop_litter_picker",
		"prop_loggneon",
		"prop_logpile_05",
		"prop_logpile_06",
		"prop_logpile_06b",
		"prop_logpile_07",
		"prop_logpile_07b",
		"prop_log_01",
		"prop_log_02",
		"prop_log_03",
		"prop_loose_rag_01",
		"prop_lrggate_01c_l",
		"prop_lrggate_01c_r",
		"prop_lrggate_01_l",
		"prop_lrggate_01_pst",
		"prop_lrggate_01_r",
		"prop_lrggate_02_ld",
		"prop_lrggate_03a",
		"prop_lrggate_03b",
		"prop_lrggate_03b_ld",
		"prop_lrggate_04a",
		"prop_lrggate_05a",
		"prop_lrggate_06a",
		"prop_luggage_01a",
		"prop_luggage_02a",
		"prop_luggage_03a",
		"prop_luggage_04a",
		"prop_luggage_05a",
		"prop_luggage_06a",
		"prop_luggage_07a",
		"prop_luggage_08a",
		"prop_luggage_09a",
		"prop_magenta_door",
		"prop_makeup_trail_01",
		"prop_makeup_trail_02",
		"prop_map_door_01",
		"prop_mast_01",
		"prop_mat_box",
		"prop_mb_cargo_01a",
		"prop_mb_cargo_02a",
		"prop_mb_cargo_03a",
		"prop_mb_cargo_04a",
		"prop_mb_cargo_04b",
		"prop_mb_crate_01a",
		"prop_mb_crate_01a_set",
		"prop_mb_crate_01b",
		"prop_mb_hesco_06",
		"prop_mb_ordnance_01",
		"prop_mb_ordnance_03",
		"prop_mb_sandblock_01",
		"prop_mb_sandblock_02",
		"prop_mb_sandblock_03",
		"prop_mb_sandblock_04",
		"prop_mb_sandblock_05",
		"prop_medal_01",
		"prop_medstation_02",
		"prop_medstation_03",
		"prop_medstation_04",
		"prop_med_bag_01",
		"prop_med_bag_01b",
		"prop_med_jet_01",
		"prop_megaphone_01",
		"prop_mem_candle_04",
		"prop_mem_candle_05",
		"prop_mem_candle_06",
		"prop_mem_reef_01",
		"prop_mem_reef_02",
		"prop_mem_reef_03",
		"prop_mem_teddy_01",
		"prop_mem_teddy_02",
		"prop_metalfoodjar_01",
		"prop_metal_plates01",
		"prop_metal_plates02",
		"prop_meth_bag_01",
		"prop_michaels_credit_tv",
		"prop_michael_backpack",
		"prop_michael_balaclava",
		"prop_michael_door",
		"prop_michael_sec_id",
		"prop_microphone_02",
		"prop_microwave_1",
		"prop_micro_01",
		"prop_micro_02",
		"prop_micro_cs_01",
		"prop_micro_cs_01_door",
		"prop_military_pickup_01",
		"prop_mil_crate_01",
		"prop_mil_crate_02",
		"prop_minigun_01",
		"prop_mobile_mast_1",
		"prop_mobile_mast_2",
		"prop_money_bag_01",
		"prop_monitor_01c",
		"prop_monitor_01d",
		"prop_monitor_02",
		"prop_monitor_03b",
		"prop_motel_door_09",
		"prop_mouse_01",
		"prop_mouse_01a",
		"prop_mouse_01b",
		"prop_mouse_02",
		"prop_movie_rack",
		"prop_mp3_dock",
		"prop_mp_arrow_barrier_01",
		"prop_mp_barrier_01",
		"prop_mp_barrier_01b",
		"prop_mp_barrier_02",
		"prop_mp_barrier_02b",
		"prop_mp_base_marker",
		"prop_mp_boost_01",
		"prop_mp_cant_place_lrg",
		"prop_mp_cant_place_med",
		"prop_mp_cant_place_sm",
		"prop_mp_cone_01",
		"prop_mp_cone_02",
		"prop_mp_cone_03",
		"prop_mp_cone_04",
		"prop_mp_drug_package",
		"prop_mp_drug_pack_blue",
		"prop_mp_drug_pack_red",
		"prop_mp_icon_shad_lrg",
		"prop_mp_icon_shad_med",
		"prop_mp_icon_shad_sm",
		"prop_mp_max_out_lrg",
		"prop_mp_max_out_med",
		"prop_mp_max_out_sm",
		"prop_mp_num_0",
		"prop_mp_num_1",
		"prop_mp_num_2",
		"prop_mp_num_3",
		"prop_mp_num_4",
		"prop_mp_num_5",
		"prop_mp_num_6",
		"prop_mp_num_7",
		"prop_mp_num_8",
		"prop_mp_num_9",
		"prop_mp_placement",
		"prop_mp_placement_lrg",
		"prop_mp_placement_maxd",
		"prop_mp_placement_med",
		"prop_mp_placement_red",
		"prop_mp_placement_sm",
		"prop_mp_ramp_01",
		"prop_mp_ramp_02",
		"prop_mp_repair",
		"prop_mp_repair_01",
		"prop_mp_respawn_02",
		"prop_mp_rocket_01",
		"prop_mp_spike_01",
		"prop_mr_rasberryclean",
		"prop_mr_raspberry_01",
		"prop_muscle_bench_01",
		"prop_muscle_bench_02",
		"prop_muscle_bench_03",
		"prop_muscle_bench_04",
		"prop_muscle_bench_05",
		"prop_muscle_bench_06",
		"prop_muster_wboard_01",
		"prop_muster_wboard_02",
		"prop_m_pack_int_01",
		"prop_necklace_board",
		"prop_news_disp_02a_s",
		"prop_new_drug_pack_01",
		"prop_nigel_bag_pickup",
		"prop_night_safe_01",
		"prop_notepad_01",
		"prop_notepad_02",
		"prop_novel_01",
		"prop_npc_phone",
		"prop_npc_phone_02",
		"prop_office_alarm_01",
		"prop_office_desk_01",
		"prop_offroad_bale01",
		"prop_offroad_bale02_l1_frag_",
		"prop_offroad_barrel01",
		"prop_offroad_tyres01",
		"prop_off_chair_01",
		"prop_off_chair_03",
		"prop_off_chair_04",
		"prop_off_chair_04b",
		"prop_off_chair_04_s",
		"prop_off_chair_05",
		"prop_off_phone_01",
		"prop_oiltub_01",
		"prop_oiltub_02",
		"prop_oiltub_03",
		"prop_oiltub_05",
		"prop_oiltub_06",
		"prop_oil_derrick_01",
		"prop_oil_guage_01",
		"prop_oil_spool_02",
		"prop_oil_valve_01",
		"prop_oil_valve_02",
		"prop_oil_wellhead_01",
		"prop_oil_wellhead_03",
		"prop_oil_wellhead_04",
		"prop_oil_wellhead_05",
		"prop_oil_wellhead_06",
		"prop_oldplough1",
		"prop_old_boot",
		"prop_old_churn_01",
		"prop_old_churn_02",
		"prop_old_deck_chair",
		"prop_old_deck_chair_02",
		"prop_old_farm_01",
		"prop_old_farm_02",
		"prop_old_wood_chair",
		"prop_old_wood_chair_lod",
		"prop_orang_can_01",
		"prop_outdoor_fan_01",
		"prop_out_door_speaker",
		"prop_overalls_01",
		"prop_owl_totem_01",
		"prop_paints_can01",
		"prop_paints_can02",
		"prop_paints_can03",
		"prop_paints_can04",
		"prop_paints_can05",
		"prop_paints_can06",
		"prop_paints_can07",
		"prop_paint_brush01",
		"prop_paint_brush02",
		"prop_paint_brush03",
		"prop_paint_brush04",
		"prop_paint_brush05",
		"prop_paint_roller",
		"prop_paint_spray01a",
		"prop_paint_spray01b",
		"prop_paint_stepl01",
		"prop_paint_stepl01b",
		"prop_paint_stepl02",
		"prop_paint_tray",
		"prop_paint_wpaper01",
		"prop_pallettruck_01",
		"prop_palm_fan_02_a",
		"prop_palm_fan_02_b",
		"prop_palm_fan_03_a",
		"prop_palm_fan_03_b",
		"prop_palm_fan_03_c",
		"prop_palm_fan_03_d",
		"prop_palm_fan_04_a",
		"prop_palm_fan_04_b",
		"prop_palm_fan_04_c",
		"prop_palm_fan_04_d",
		"prop_palm_huge_01a",
		"prop_palm_huge_01b",
		"prop_palm_med_01a",
		"prop_palm_med_01b",
		"prop_palm_med_01c",
		"prop_palm_med_01d",
		"prop_palm_sm_01a",
		"prop_palm_sm_01d",
		"prop_palm_sm_01e",
		"prop_palm_sm_01f",
		"prop_paper_bag_01",
		"prop_paper_bag_small",
		"prop_paper_ball",
		"prop_paper_box_01",
		"prop_paper_box_02",
		"prop_paper_box_03",
		"prop_paper_box_04",
		"prop_paper_box_05",
		"prop_pap_camera_01",
		"prop_parachute",
		"prop_parapack_01",
		"prop_parasol_01",
		"prop_parasol_01_b",
		"prop_parasol_01_c",
		"prop_parasol_01_down",
		"prop_parasol_02",
		"prop_parasol_02_b",
		"prop_parasol_02_c",
		"prop_parasol_03",
		"prop_parasol_03_b",
		"prop_parasol_03_c",
		"prop_parasol_04e",
		"prop_parasol_04e_lod1",
		"prop_parasol_bh_48",
		"prop_parking_sign_06",
		"prop_parking_sign_07",
		"prop_parking_sign_1",
		"prop_parking_sign_2",
		"prop_parking_wand_01",
		"prop_park_ticket_01",
		"prop_partsbox_01",
		"prop_passport_01",
		"prop_patio_heater_01",
		"prop_patio_lounger1",
		"prop_patio_lounger1b",
		"prop_patio_lounger1_table",
		"prop_patio_lounger_2",
		"prop_patio_lounger_3",
		"prop_patriotneon",
		"prop_paynspray_door_l",
		"prop_paynspray_door_r",
		"prop_pc_01a",
		"prop_pc_02a",
		"prop_peanut_bowl_01",
		"prop_ped_pic_01",
		"prop_ped_pic_01_sm",
		"prop_ped_pic_02",
		"prop_ped_pic_02_sm",
		"prop_ped_pic_03",
		"prop_ped_pic_03_sm",
		"prop_ped_pic_04",
		"prop_ped_pic_04_sm",
		"prop_ped_pic_05",
		"prop_ped_pic_05_sm",
		"prop_ped_pic_06",
		"prop_ped_pic_06_sm",
		"prop_ped_pic_07",
		"prop_ped_pic_07_sm",
		"prop_ped_pic_08",
		"prop_ped_pic_08_sm",
		"prop_pencil_01",
		"prop_pharm_sign_01",
		"prop_phonebox_05a",
		"prop_phone_ing",
		"prop_phone_ing_02",
		"prop_phone_ing_03",
		"prop_phone_overlay_01",
		"prop_phone_overlay_02",
		"prop_phone_overlay_anim",
		"prop_phone_proto",
		"prop_phone_proto_back",
		"prop_phone_proto_battery",
		"prop_picnictable_02",
		"prop_piercing_gun",
		"prop_pier_kiosk_01",
		"prop_pier_kiosk_02",
		"prop_pier_kiosk_03",
		"prop_pile_dirt_01",
		"prop_pile_dirt_02",
		"prop_pile_dirt_03",
		"prop_pile_dirt_04",
		"prop_pile_dirt_06",
		"prop_pile_dirt_07",
		"prop_ping_pong",
		"prop_pipes_01a",
		"prop_pipes_01b",
		"prop_pipes_03b",
		"prop_pipes_04a",
		"prop_pipes_05a",
		"prop_pipes_conc_01",
		"prop_pipes_conc_02",
		"prop_pipe_single_01",
		"prop_pistol_holster",
		"prop_pitcher_01_cs",
		"prop_pizza_box_01",
		"prop_pizza_box_02",
		"prop_pizza_oven_01",
		"prop_planer_01",
		"prop_plant_01a",
		"prop_plant_01b",
		"prop_plant_base_01",
		"prop_plant_base_02",
		"prop_plant_base_03",
		"prop_plant_cane_01a",
		"prop_plant_cane_01b",
		"prop_plant_cane_02a",
		"prop_plant_cane_02b",
		"prop_plant_clover_01",
		"prop_plant_clover_02",
		"prop_plant_fern_01a",
		"prop_plant_fern_01b",
		"prop_plant_fern_02a",
		"prop_plant_fern_02b",
		"prop_plant_fern_02c",
		"prop_plant_flower_01",
		"prop_plant_flower_02",
		"prop_plant_flower_03",
		"prop_plant_flower_04",
		"prop_plant_group_01",
		"prop_plant_group_02",
		"prop_plant_group_03",
		"prop_plant_group_04",
		"prop_plant_group_05",
		"prop_plant_group_05b",
		"prop_plant_group_05c",
		"prop_plant_group_05d",
		"prop_plant_group_06a",
		"prop_plant_group_06b",
		"prop_plant_group_06c",
		"prop_plant_int_02a",
		"prop_plant_int_02b",
		"prop_plant_int_05a",
		"prop_plant_int_05b",
		"prop_plant_int_06a",
		"prop_plant_int_06b",
		"prop_plant_int_06c",
		"prop_plant_paradise",
		"prop_plant_paradise_b",
		"prop_plastic_cup_02",
		"prop_plas_barier_01a",
		"prop_plate_04",
		"prop_plate_stand_01",
		"prop_plate_warmer",
		"prop_player_gasmask",
		"prop_player_phone_01",
		"prop_player_phone_02",
		"prop_pliers_01",
		"prop_plywoodpile_01a",
		"prop_plywoodpile_01b",
		"prop_podium_mic",
		"prop_police_door_l",
		"prop_police_door_l_dam",
		"prop_police_door_r",
		"prop_police_door_r_dam",
		"prop_police_door_surround",
		"prop_police_phone",
		"prop_police_radio_handset",
		"prop_police_radio_",
		"prop_poly_bag_01",
		"prop_poly_bag_money",
		"prop_poolball_1",
		"prop_poolball_10",
		"prop_poolball_11",
		"prop_poolball_12",
		"prop_poolball_13",
		"prop_poolball_14",
		"prop_poolball_15",
		"prop_poolball_2",
		"prop_poolball_3",
		"prop_poolball_4",
		"prop_poolball_5",
		"prop_poolball_6",
		"prop_poolball_7",
		"prop_poolball_8",
		"prop_poolball_9",
		"prop_poolball_cue",
		"prop_poolskimmer",
		"prop_pooltable_02",
		"prop_pooltable_3b",
		"prop_pool_ball_01",
		"prop_pool_cue",
		"prop_pool_rack_01",
		"prop_pool_rack_02",
		"prop_pool_tri",
		"prop_porn_mag_01",
		"prop_porn_mag_02",
		"prop_porn_mag_03",
		"prop_porn_mag_04",
		"prop_portable_hifi_01",
		"prop_portacabin01",
		"prop_portasteps_01",
		"prop_portasteps_02",
		"prop_postcard_rack",
		"prop_poster_tube_01",
		"prop_poster_tube_02",
		"prop_postit_drive",
		"prop_postit_gun",
		"prop_postit_it",
		"prop_postit_lock",
		"prop_potatodigger",
		"prop_pot_01",
		"prop_pot_02",
		"prop_pot_03",
		"prop_pot_04",
		"prop_pot_05",
		"prop_pot_06",
		"prop_pot_plant_02a",
		"prop_pot_plant_02b",
		"prop_pot_plant_02c",
		"prop_pot_plant_02d",
		"prop_pot_plant_03a",
		"prop_pot_plant_04a",
		"prop_pot_plant_05d_l1",
		"prop_pot_plant_bh1",
		"prop_pot_rack",
		"prop_power_cell",
		"prop_power_cord_01",
		"prop_premier_fence_01",
		"prop_premier_fence_02",
		"prop_printer_01",
		"prop_printer_02",
		"prop_pris_bars_01",
		"prop_pris_bench_01",
		"prop_pris_door_01_l",
		"prop_pris_door_01_r",
		"prop_pris_door_02",
		"prop_pris_door_03",
		"prop_prlg_gravestone_05a_l1",
		"prop_prlg_gravestone_06a",
		"prop_projector_overlay",
		"prop_prologue_phone",
		"prop_prop_tree_01",
		"prop_prop_tree_02",
		"prop_protest_sign_01",
		"prop_protest_table_01",
		"prop_prototype_minibomb",
		"prop_proxy_chateau_table",
		"prop_punch_bag_l",
		"prop_pylon_01",
		"prop_pylon_02",
		"prop_pylon_03",
		"prop_pylon_04",
		"prop_p_jack_03_col",
		"prop_p_spider_01a",
		"prop_p_spider_01c",
		"prop_p_spider_01d",
		"prop_ql_revolving_door",
		"prop_quad_grid_line",
		"prop_radiomast01",
		"prop_radiomast02",
		"prop_rad_waste_barrel_01",
		"prop_ragganeon",
		"prop_rag_01",
		"prop_railsleepers01",
		"prop_railsleepers02",
		"prop_railstack01",
		"prop_railstack02",
		"prop_railstack03",
		"prop_railstack04",
		"prop_railstack05",
		"prop_rail_boxcar",
		"prop_rail_boxcar2",
		"prop_rail_boxcar3",
		"prop_rail_boxcar4",
		"prop_rail_boxcar5",
		"prop_rail_boxcar5_d",
		"prop_rail_buffer_01",
		"prop_rail_buffer_02",
		"prop_rail_controller",
		"prop_rail_crane_01",
		"prop_rail_points01",
		"prop_rail_points02",
		"prop_rail_sigbox01",
		"prop_rail_sigbox02",
		"prop_rail_signals02",
		"prop_rail_tankcar",
		"prop_rail_tankcar2",
		"prop_rail_tankcar3",
		"prop_rail_wellcar",
		"prop_rail_wellcar2",
		"prop_range_target_01",
		"prop_range_target_02",
		"prop_range_target_03",
		"prop_rebar_pile01",
		"prop_recyclebin_02a",
		"prop_recyclebin_02b",
		"prop_recyclebin_02_c",
		"prop_recyclebin_02_d",
		"prop_recyclebin_03_a",
		"prop_recyclebin_04_a",
		"prop_recyclebin_04_b",
		"prop_recyclebin_05_a",
		"prop_ret_door",
		"prop_ret_door_02",
		"prop_ret_door_03",
		"prop_ret_door_04",
		"prop_rf_conc_pillar",
		"prop_riding_crop_01",
		"prop_riot_shield",
		"prop_rio_del_01",
		"prop_roadcone01a",
		"prop_roadcone01b",
		"prop_roadcone01c",
		"prop_roadcone02a",
		"prop_roadcone02b",
		"prop_roadcone02c",
		"prop_roadheader_01",
		"prop_rock_1_a",
		"prop_rock_1_b",
		"prop_rock_1_c",
		"prop_rock_1_d",
		"prop_rock_1_e",
		"prop_rock_1_f",
		"prop_rock_1_g",
		"prop_rock_1_h",
		"prop_rock_1_i",
		"prop_rock_2_a",
		"prop_rock_2_c",
		"prop_rock_2_d",
		"prop_rock_2_f",
		"prop_rock_2_g",
		"prop_rock_3_a",
		"prop_rock_3_b",
		"prop_rock_3_c",
		"prop_rock_3_d",
		"prop_rock_3_e",
		"prop_rock_3_f",
		"prop_rock_3_g",
		"prop_rock_3_h",
		"prop_rock_3_i",
		"prop_rock_3_j",
		"prop_rock_4_c",
		"prop_rock_4_d",
		"prop_rock_chair_01",
		"prop_rolled_sock_01",
		"prop_rolled_sock_02",
		"prop_rolled_yoga_mat",
		"prop_roller_car_01",
		"prop_roller_car_02",
		"prop_ron_door_01",
		"prop_roofpipe_01",
		"prop_roofpipe_02",
		"prop_roofpipe_03",
		"prop_roofpipe_04",
		"prop_roofpipe_05",
		"prop_roofpipe_06",
		"prop_roofvent_011a",
		"prop_roofvent_01a",
		"prop_roofvent_01b",
		"prop_roofvent_02a",
		"prop_roofvent_02b",
		"prop_roofvent_03a",
		"prop_roofvent_04a",
		"prop_roofvent_05a",
		"prop_roofvent_05b",
		"prop_roofvent_07a",
		"prop_roofvent_08a",
		"prop_roofvent_09a",
		"prop_roofvent_10a",
		"prop_roofvent_10b",
		"prop_roofvent_11b",
		"prop_roofvent_11c",
		"prop_roofvent_12a",
		"prop_roofvent_13a",
		"prop_roofvent_15a",
		"prop_roofvent_16a",
		"prop_rope_family_3",
		"prop_rope_hook_01",
		"prop_roundbailer01",
		"prop_roundbailer02",
		"prop_rub_bike_01",
		"prop_rub_bike_02",
		"prop_rub_bike_03",
		"prop_rub_binbag_sd_01",
		"prop_rub_binbag_sd_02",
		"prop_rub_busdoor_01",
		"prop_rub_busdoor_02",
		"prop_rub_buswreck_01",
		"prop_rub_buswreck_03",
		"prop_rub_buswreck_06",
		"prop_rub_cabinet",
		"prop_rub_cabinet01",
		"prop_rub_cabinet02",
		"prop_rub_cabinet03",
		"prop_rub_cage01a",
		"prop_rub_carpart_02",
		"prop_rub_carpart_03",
		"prop_rub_carpart_04",
		"prop_rub_chassis_01",
		"prop_rub_chassis_02",
		"prop_rub_chassis_03",
		"prop_rub_cont_01a",
		"prop_rub_cont_01b",
		"prop_rub_cont_01c",
		"prop_rub_flotsam_01",
		"prop_rub_flotsam_02",
		"prop_rub_flotsam_03",
		"prop_rub_frklft",
		"prop_rub_litter_01",
		"prop_rub_litter_02",
		"prop_rub_litter_03",
		"prop_rub_litter_03b",
		"prop_rub_litter_03c",
		"prop_rub_litter_04",
		"prop_rub_litter_04b",
		"prop_rub_litter_05",
		"prop_rub_litter_06",
		"prop_rub_litter_07",
		"prop_rub_litter_09",
		"prop_rub_litter_8",
		"prop_rub_matress_01",
		"prop_rub_matress_02",
		"prop_rub_matress_03",
		"prop_rub_matress_04",
		"prop_rub_monitor",
		"prop_rub_pile_01",
		"prop_rub_pile_02",
		"prop_rub_planks_01",
		"prop_rub_planks_02",
		"prop_rub_planks_03",
		"prop_rub_planks_04",
		"prop_rub_railwreck_1",
		"prop_rub_railwreck_2",
		"prop_rub_railwreck_3",
		"prop_rub_scrap_02",
		"prop_rub_scrap_03",
		"prop_rub_scrap_04",
		"prop_rub_scrap_05",
		"prop_rub_scrap_06",
		"prop_rub_scrap_07",
		"prop_rub_stool",
		"prop_rub_sunktyre",
		"prop_rub_t34",
		"prop_rub_trainers_01",
		"prop_rub_trolley01a",
		"prop_rub_trolley02a",
		"prop_rub_trolley03a",
		"prop_rub_trukwreck_1",
		"prop_rub_trukwreck_2",
		"prop_rub_tyre_01",
		"prop_rub_tyre_02",
		"prop_rub_tyre_03",
		"prop_rub_tyre_dam1",
		"prop_rub_tyre_dam2",
		"prop_rub_tyre_dam3",
		"prop_rub_washer_01",
		"prop_rub_wheel_01",
		"prop_rub_wheel_02",
		"prop_rub_wreckage_3",
		"prop_rub_wreckage_4",
		"prop_rub_wreckage_5",
		"prop_rub_wreckage_6",
		"prop_rub_wreckage_7",
		"prop_rub_wreckage_8",
		"prop_rub_wreckage_9",
		"prop_rural_windmill_l1",
		"prop_rural_windmill_l2",
		"prop_rus_olive",
		"prop_rus_olive_wint",
		"prop_sacktruck_01",
		"prop_sacktruck_02a",
		"prop_safety_glasses",
		"prop_sam_01",
		"prop_sandwich_01",
		"prop_satdish_2_a",
		"prop_satdish_2_f",
		"prop_satdish_2_g",
		"prop_satdish_3_b",
		"prop_satdish_3_c",
		"prop_satdish_3_d",
		"prop_satdish_l_01",
		"prop_satdish_s_03",
		"prop_satdish_s_05a",
		"prop_satdish_s_05b",
		"prop_sc1_06_gate_l",
		"prop_sc1_06_gate_r",
		"prop_sc1_12_door",
		"prop_sc1_21_g_door_01",
		"prop_scaffold_pole",
		"prop_scafold_01a",
		"prop_scafold_01c",
		"prop_scafold_01f",
		"prop_scafold_02a",
		"prop_scafold_02c",
		"prop_scafold_03a",
		"prop_scafold_03b",
		"prop_scafold_03c",
		"prop_scafold_03f",
		"prop_scafold_04a",
		"prop_scafold_05a",
		"prop_scafold_06a",
		"prop_scafold_06b",
		"prop_scafold_06c",
		"prop_scafold_07a",
		"prop_scafold_08a",
		"prop_scafold_09a",
		"prop_scafold_frame1a",
		"prop_scafold_frame1b",
		"prop_scafold_frame1c",
		"prop_scafold_frame1f",
		"prop_scafold_frame2a",
		"prop_scafold_frame2b",
		"prop_scafold_frame2c",
		"prop_scafold_frame3a",
		"prop_scafold_frame3c",
		"prop_scafold_rail_01",
		"prop_scafold_rail_02",
		"prop_scafold_rail_03",
		"prop_scafold_xbrace",
		"prop_scalpel",
		"prop_scn_police_torch",
		"prop_scourer_01",
		"prop_scrap_2_crate",
		"prop_scrap_win_01",
		"prop_scrim_01",
		"prop_scythemower",
		"prop_section_garage_01",
		"prop_securityvan_lightrig",
		"prop_security_case_01",
		"prop_security_case_02",
		"prop_sec_gate_01b",
		"prop_sec_gate_01c",
		"prop_sec_gate_01d",
		"prop_set_generator_01",
		"prop_sewing_fabric",
		"prop_sewing_machine",
		"prop_sglasses_stand_01",
		"prop_sglasses_stand_02",
		"prop_sglasses_stand_02b",
		"prop_sglasses_stand_03",
		"prop_sglasss_1b_lod",
		"prop_sglasss_1_lod",
		"prop_shamal_crash",
		"prop_shelves_01",
		"prop_shelves_02",
		"prop_shelves_03",
		"prop_shopping_bags01",
		"prop_shopping_bags02",
		"prop_shop_front_door_l",
		"prop_shop_front_door_r",
		"prop_shots_glass_cs",
		"prop_shower_01",
		"prop_shower_rack_01",
		"prop_shower_towel",
		"prop_showroom_door_l",
		"prop_showroom_door_r",
		"prop_showroom_glass_1b",
		"prop_shredder_01",
		"prop_shrub_rake",
		"prop_shuttering01",
		"prop_shuttering02",
		"prop_shuttering03",
		"prop_shuttering04",
		"prop_sh_beer_pissh_01",
		"prop_sh_bong_01",
		"prop_sh_cigar_01",
		"prop_sh_joint_01",
		"prop_sh_mr_rasp_01",
		"prop_sh_shot_glass",
		"prop_sh_tall_glass",
		"prop_sh_tt_fridgedoor",
		"prop_sh_wine_glass",
		"prop_side_lights",
		"prop_side_spreader",
		"prop_sign_airp_01a",
		"prop_sign_airp_02a",
		"prop_sign_airp_02b",
		"prop_sign_big_01",
		"prop_sign_mallet",
		"prop_sign_road_04g_l1",
		"prop_single_grid_line",
		"prop_single_rose",
		"prop_sink_01",
		"prop_sink_02",
		"prop_sink_03",
		"prop_sink_04",
		"prop_sink_05",
		"prop_sink_06",
		"prop_skate_flatramp",
		"prop_skate_funbox",
		"prop_skate_halfpipe",
		"prop_skate_kickers",
		"prop_skate_quartpipe",
		"prop_skate_rail",
		"prop_skate_spiner",
		"prop_skid_chair_01",
		"prop_skid_chair_02",
		"prop_skid_chair_03",
		"prop_skid_sleepbag_1",
		"prop_skid_tent_01",
		"prop_skid_tent_01b",
		"prop_skid_tent_03",
		"prop_skip_01a",
		"prop_skip_02a",
		"prop_skip_03",
		"prop_skip_04",
		"prop_skip_05a",
		"prop_skip_05b",
		"prop_skip_06a",
		"prop_skip_08a",
		"prop_skip_08b",
		"prop_skip_10a",
		"prop_skip_rope_01",
		"prop_skunk_bush_01",
		"prop_skylight_01",
		"prop_skylight_02",
		"prop_skylight_03",
		"prop_skylight_04",
		"prop_skylight_05",
		"prop_skylight_06a",
		"prop_skylight_06b",
		"prop_skylight_06c",
		"prop_sky_cover_01",
		"prop_slacks_01",
		"prop_slacks_02",
		"prop_sluicegate",
		"prop_sluicegatel",
		"prop_sluicegater",
		"prop_slush_dispenser",
		"prop_sm1_11_doorl",
		"prop_sm1_11_doorr",
		"prop_sm1_11_garaged",
		"prop_smg_holster_01",
		"prop_sm_10_mp_door",
		"prop_sm_14_mp_gar",
		"prop_sm_19_clock",
		"prop_sm_27_door",
		"prop_sm_27_gate",
		"prop_sm_27_gate_02",
		"prop_sm_27_gate_03",
		"prop_sm_27_gate_04",
		"prop_sm_locker_door",
		"prop_snow_bailer_01",
		"prop_snow_barrel_pile_03",
		"prop_snow_bench_01",
		"prop_snow_bin_01",
		"prop_snow_bin_02",
		"prop_snow_bush_01_a",
		"prop_snow_bush_02_a",
		"prop_snow_bush_02_b",
		"prop_snow_bush_03",
		"prop_snow_bush_04",
		"prop_snow_bush_04b",
		"prop_snow_cam_03",
		"prop_snow_cam_03a",
		"prop_snow_diggerbkt_01",
		"prop_snow_dumpster_01",
		"prop_snow_elecbox_16",
		"prop_snow_facgate_01",
		"prop_snow_field_01",
		"prop_snow_field_02",
		"prop_snow_field_03",
		"prop_snow_field_04",
		"prop_snow_flower_01",
		"prop_snow_flower_02",
		"prop_snow_fnclink_03crnr2",
		"prop_snow_fnclink_03h",
		"prop_snow_fnclink_03i",
		"prop_snow_fncwood_14a",
		"prop_snow_fncwood_14b",
		"prop_snow_fncwood_14c",
		"prop_snow_fncwood_14d",
		"prop_snow_fncwood_14e",
		"prop_snow_fnc_01",
		"prop_snow_gate_farm_03",
		"prop_snow_grain_01",
		"prop_snow_grass_01",
		"prop_snow_light_01",
		"prop_snow_oldlight_01b",
		"prop_snow_rail_signals02",
		"prop_snow_rub_trukwreck_2",
		"prop_snow_side_spreader_01",
		"prop_snow_streetlight01",
		"prop_snow_streetlight_01_frag_",
		"prop_snow_sub_frame_01a",
		"prop_snow_sub_frame_04b",
		"prop_snow_telegraph_01a",
		"prop_snow_telegraph_02a",
		"prop_snow_telegraph_03",
		"prop_snow_traffic_rail_1a",
		"prop_snow_traffic_rail_1b",
		"prop_snow_trailer01",
		"prop_snow_tree_03_e",
		"prop_snow_tree_03_h",
		"prop_snow_tree_03_i",
		"prop_snow_tree_04_d",
		"prop_snow_tree_04_f",
		"prop_snow_truktrailer_01a",
		"prop_snow_tyre_01",
		"prop_snow_t_ml_01",
		"prop_snow_t_ml_02",
		"prop_snow_t_ml_03",
		"prop_snow_wall_light_15a",
		"prop_snow_watertower01",
		"prop_snow_watertower01_l2",
		"prop_snow_watertower03",
		"prop_snow_woodpile_04a",
		"prop_soap_disp_01",
		"prop_soap_disp_02",
		"prop_solarpanel_01",
		"prop_solarpanel_02",
		"prop_solarpanel_03",
		"prop_sol_chair",
		"prop_space_pistol",
		"prop_space_rifle",
		"prop_speaker_01",
		"prop_speaker_02",
		"prop_speaker_03",
		"prop_speaker_05",
		"prop_speaker_06",
		"prop_speaker_07",
		"prop_speaker_08",
		"prop_speedball_01",
		"prop_sponge_01",
		"prop_sports_clock_01",
		"prop_spot_01",
		"prop_spot_clamp",
		"prop_spot_clamp_02",
		"prop_sprayer",
		"prop_spraygun_01",
		"prop_spray_backpack_01",
		"prop_spray_jackframe",
		"prop_spray_jackleg",
		"prop_sprink_crop_01",
		"prop_sprink_golf_01",
		"prop_sprink_park_01",
		"prop_spycam",
		"prop_squeegee",
		"prop_ss1_05_mp_door",
		"prop_ss1_08_mp_door_l",
		"prop_ss1_08_mp_door_r",
		"prop_ss1_10_door_l",
		"prop_ss1_10_door_r",
		"prop_ss1_14_garage_door",
		"prop_ss1_mpint_door_l",
		"prop_ss1_mpint_door_r",
		"prop_ss1_mpint_garage",
		"prop_ss1_mpint_garage_cl",
		"prop_stag_do_rope",
		"prop_start_finish_line_01",
		"prop_start_grid_01",
		"prop_staticmixer_01",
		"prop_stat_pack_01",
		"prop_steam_basket_01",
		"prop_steam_basket_02",
		"prop_steps_big_01",
		"prop_stickbfly",
		"prop_stickhbird",
		"prop_still",
		"prop_stockade_wheel",
		"prop_stockade_wheel_flat",
		"prop_stool_01",
		"prop_storagetank_01",
		"prop_storagetank_02",
		"prop_storagetank_03",
		"prop_storagetank_03a",
		"prop_storagetank_03b",
		"prop_storagetank_04",
		"prop_storagetank_05",
		"prop_storagetank_06",
		"prop_storagetank_07a",
		"prop_stripmenu",
		"prop_strip_door_01",
		"prop_strip_pole_01",
		"prop_studio_light_02",
		"prop_studio_light_03",
		"prop_sub_chunk_01",
		"prop_sub_cover_01",
		"prop_sub_crane_hook",
		"prop_sub_frame_01a",
		"prop_sub_frame_01b",
		"prop_sub_frame_01c",
		"prop_sub_frame_02a",
		"prop_sub_frame_03a",
		"prop_sub_frame_04a",
		"prop_sub_frame_04b",
		"prop_sub_gantry",
		"prop_sub_release",
		"prop_sub_trans_01a",
		"prop_sub_trans_02a",
		"prop_sub_trans_03a",
		"prop_sub_trans_04a",
		"prop_sub_trans_05b",
		"prop_sub_trans_06b",
		"prop_suitcase_01",
		"prop_suitcase_01b",
		"prop_suitcase_01c",
		"prop_suitcase_01d",
		"prop_suitcase_02",
		"prop_suitcase_03",
		"prop_suitcase_03b",
		"prop_surf_board_ldn_01",
		"prop_surf_board_ldn_02",
		"prop_surf_board_ldn_03",
		"prop_surf_board_ldn_04",
		"prop_syringe_01",
		"prop_s_pine_dead_01",
		"prop_tablesaw_01",
		"prop_tablesmall_01",
		"prop_table_02",
		"prop_table_03b_cs",
		"prop_table_04",
		"prop_table_04_chr",
		"prop_table_05",
		"prop_table_05_chr",
		"prop_table_06",
		"prop_table_06_chr",
		"prop_table_07",
		"prop_table_07_l1",
		"prop_table_08",
		"prop_table_08_chr",
		"prop_table_08_side",
		"prop_table_mic_01",
		"prop_table_para_comb_04",
		"prop_table_tennis",
		"prop_table_ten_bat",
		"prop_taco_01",
		"prop_taco_02",
		"prop_tail_gate_col",
		"prop_tapeplayer_01",
		"prop_target_arm",
		"prop_target_arm_b",
		"prop_target_arm_long",
		"prop_target_arm_sm",
		"prop_target_backboard",
		"prop_target_backboard_b",
		"prop_target_blue",
		"prop_target_blue_arrow",
		"prop_target_bull",
		"prop_target_bull_b",
		"prop_target_comp_metal",
		"prop_target_comp_wood",
		"prop_target_frame_01",
		"prop_target_inner1",
		"prop_target_inner2",
		"prop_target_inner2_b",
		"prop_target_inner3",
		"prop_target_inner3_b",
		"prop_target_inner_b",
		"prop_target_orange_arrow",
		"prop_target_oran_cross",
		"prop_target_ora_purp_01",
		"prop_target_purp_arrow",
		"prop_target_purp_cross",
		"prop_target_red",
		"prop_target_red_arrow",
		"prop_target_red_blue_01",
		"prop_target_red_cross",
		"prop_tarp_strap",
		"prop_taxi_meter_1",
		"prop_taxi_meter_2",
		"prop_tea_trolly",
		"prop_tea_urn",
		"prop_telegraph_01a",
		"prop_telegraph_01b",
		"prop_telegraph_01c",
		"prop_telegraph_01d",
		"prop_telegraph_01e",
		"prop_telegraph_01f",
		"prop_telegraph_01g",
		"prop_telegraph_02a",
		"prop_telegraph_02b",
		"prop_telegraph_03",
		"prop_telegraph_04a",
		"prop_telegraph_04b",
		"prop_telegraph_05a",
		"prop_telegraph_05b",
		"prop_telegraph_05c",
		"prop_telegraph_06a",
		"prop_telegraph_06b",
		"prop_telegraph_06c",
		"prop_telegwall_01a",
		"prop_telegwall_01b",
		"prop_telegwall_02a",
		"prop_telegwall_03a",
		"prop_telegwall_03b",
		"prop_telegwall_04a",
		"prop_telescope",
		"prop_telescope_01",
		"prop_temp_block_blocker",
		"prop_tennis_bag_01",
		"prop_tennis_ball",
		"prop_tennis_ball_lobber",
		"prop_tennis_rack_01",
		"prop_tennis_rack_01b",
		"prop_test_boulder_01",
		"prop_test_boulder_02",
		"prop_test_boulder_03",
		"prop_test_boulder_04",
		"prop_test_elevator",
		"prop_test_elevator_dl",
		"prop_test_elevator_dr",
		"prop_tick",
		"prop_tick_02",
		"prop_till_01_dam",
		"prop_till_02",
		"prop_till_03",
		"prop_time_capsule_01",
		"prop_tint_towel",
		"prop_tint_towels_01",
		"prop_tint_towels_01b",
		"prop_toaster_01",
		"prop_toaster_02",
		"prop_toiletfoot_static",
		"prop_toilet_01",
		"prop_toilet_02",
		"prop_toilet_03",
		"prop_toilet_brush_01",
		"prop_toilet_cube_01",
		"prop_toilet_cube_02",
		"prop_toilet_roll_01",
		"prop_toilet_roll_02",
		"prop_toilet_roll_03",
		"prop_toilet_roll_04",
		"prop_toilet_roll_05",
		"prop_toilet_shamp_01",
		"prop_toilet_shamp_02",
		"prop_toilet_soap_01",
		"prop_toilet_soap_02",
		"prop_toilet_soap_03",
		"prop_toilet_soap_04",
		"prop_toolchest_01",
		"prop_toolchest_02",
		"prop_toolchest_03",
		"prop_toolchest_04",
		"prop_toolchest_05",
		"prop_tool_adjspanner",
		"prop_tool_bench01",
		"prop_tool_bluepnt",
		"prop_tool_box_01",
		"prop_tool_box_02",
		"prop_tool_box_03",
		"prop_tool_box_04",
		"prop_tool_box_05",
		"prop_tool_box_06",
		"prop_tool_box_07",
		"prop_tool_broom",
		"prop_tool_broom2",
		"prop_tool_broom2_l1",
		"prop_tool_cable01",
		"prop_tool_cable02",
		"prop_tool_consaw",
		"prop_tool_drill",
		"prop_tool_fireaxe",
		"prop_tool_hammer",
		"prop_tool_hardhat",
		"prop_tool_jackham",
		"prop_tool_mallet",
		"prop_tool_mopbucket",
		"prop_tool_nailgun",
		"prop_tool_pickaxe",
		"prop_tool_pliers",
		"prop_tool_rake",
		"prop_tool_rake_l1",
		"prop_tool_sawhorse",
		"prop_tool_screwdvr01",
		"prop_tool_screwdvr02",
		"prop_tool_screwdvr03",
		"prop_tool_shovel",
		"prop_tool_shovel006",
		"prop_tool_shovel2",
		"prop_tool_shovel3",
		"prop_tool_shovel4",
		"prop_tool_shovel5",
		"prop_tool_sledgeham",
		"prop_tool_spanner01",
		"prop_tool_spanner02",
		"prop_tool_spanner03",
		"prop_tool_torch",
		"prop_tool_wrench",
		"prop_toothbrush_01",
		"prop_toothb_cup_01",
		"prop_toothpaste_01",
		"prop_tornado_wheel",
		"prop_torture_01",
		"prop_torture_ch_01",
		"prop_tourist_map_01",
		"prop_towel2_01",
		"prop_towel2_02",
		"prop_towel_01",
		"prop_towel_rail_01",
		"prop_towel_rail_02",
		"prop_towel_shelf_01",
		"prop_towel_small_01",
		"prop_towercrane_01a",
		"prop_towercrane_02a",
		"prop_towercrane_02b",
		"prop_towercrane_02c",
		"prop_towercrane_02d",
		"prop_towercrane_02e",
		"prop_towercrane_02el",
		"prop_towercrane_02el2",
		"prop_traffic_rail_1c",
		"prop_traffic_rail_2",
		"prop_trailer01",
		"prop_trailer01_up",
		"prop_trailer_01_new",
		"prop_trailer_door_closed",
		"prop_trailer_door_open",
		"prop_trailer_monitor_01",
		"prop_trailr_base",
		"prop_trailr_base_static",
		"prop_train_ticket_02",
		"prop_tram_pole_double01",
		"prop_tram_pole_double02",
		"prop_tram_pole_double03",
		"prop_tram_pole_roadside",
		"prop_tram_pole_single01",
		"prop_tram_pole_single02",
		"prop_tram_pole_wide01",
		"prop_tree_birch_01",
		"prop_tree_birch_02",
		"prop_tree_birch_03",
		"prop_tree_birch_03b",
		"prop_tree_birch_04",
		"prop_tree_birch_05",
		"prop_tree_cedar_02",
		"prop_tree_cedar_03",
		"prop_tree_cedar_04",
		"prop_tree_cedar_s_01",
		"prop_tree_cedar_s_02",
		"prop_tree_cedar_s_04",
		"prop_tree_cedar_s_05",
		"prop_tree_cedar_s_06",
		"prop_tree_cypress_01",
		"prop_tree_eng_oak_01",
		"prop_tree_eucalip_01",
		"prop_tree_fallen_01",
		"prop_tree_fallen_02",
		"prop_tree_fallen_pine_01",
		"prop_tree_jacada_01",
		"prop_tree_jacada_02",
		"prop_tree_lficus_02",
		"prop_tree_lficus_03",
		"prop_tree_lficus_05",
		"prop_tree_lficus_06",
		"prop_tree_log_01",
		"prop_tree_log_02",
		"prop_tree_maple_02",
		"prop_tree_maple_03",
		"prop_tree_mquite_01",
		"prop_tree_oak_01",
		"prop_tree_olive_01",
		"prop_tree_pine_01",
		"prop_tree_pine_02",
		"prop_tree_stump_01",
		"prop_trevor_rope_01",
		"prop_trev_sec_id",
		"prop_trev_tv_01",
		"prop_triple_grid_line",
		"prop_tri_finish_banner",
		"prop_tri_pod",
		"prop_tri_pod_lod",
		"prop_tri_start_banner",
		"prop_tri_table_01",
		"prop_trough1",
		"prop_truktrailer_01a",
		"prop_tshirt_box_02",
		"prop_tshirt_shelf_1",
		"prop_tshirt_shelf_2",
		"prop_tshirt_shelf_2a",
		"prop_tshirt_shelf_2b",
		"prop_tshirt_shelf_2c",
		"prop_tshirt_stand_01",
		"prop_tshirt_stand_01b",
		"prop_tshirt_stand_02",
		"prop_tshirt_stand_04",
		"prop_tt_screenstatic",
		"prop_tumbler_01",
		"prop_tumbler_01b",
		"prop_tumbler_01_empty",
		"prop_tunnel_liner01",
		"prop_tunnel_liner02",
		"prop_tunnel_liner03",
		"prop_turkey_leg_01",
		"prop_turnstyle_01",
		"prop_tv_02",
		"prop_tv_03_overlay",
		"prop_tv_04",
		"prop_tv_05",
		"prop_tv_06",
		"prop_tv_07",
		"prop_tv_cabinet_03",
		"prop_tv_cabinet_04",
		"prop_tv_cabinet_05",
		"prop_tv_cam_02",
		"prop_tv_flat_01",
		"prop_tv_flat_01_screen",
		"prop_tv_flat_02b",
		"prop_tv_flat_03",
		"prop_tv_flat_03b",
		"prop_tv_flat_michael",
		"prop_tv_test",
		"prop_tyre_rack_01",
		"prop_tyre_spike_01",
		"prop_t_coffe_table",
		"prop_t_shirt_ironing",
		"prop_t_shirt_row_01",
		"prop_t_shirt_row_02",
		"prop_t_shirt_row_02b",
		"prop_t_shirt_row_03",
		"prop_t_shirt_row_04",
		"prop_t_shirt_row_05l",
		"prop_t_shirt_row_05r",
		"prop_t_sofa",
		"prop_t_sofa_02",
		"prop_t_telescope_01b",
		"prop_umpire_01",
		"prop_utensil",
		"prop_valet_03",
		"prop_vault_shutter",
		"prop_vb_34_tencrt_lighting",
		"prop_vcr_01",
		"prop_veg_corn_01",
		"prop_veg_crop_01",
		"prop_veg_crop_02",
		"prop_veg_crop_04",
		"prop_veg_crop_04_leaf",
		"prop_veg_crop_05",
		"prop_veg_crop_06",
		"prop_veg_crop_orange",
		"prop_veg_crop_tr_01",
		"prop_veg_crop_tr_02",
		"prop_veg_grass_01_a",
		"prop_veg_grass_01_b",
		"prop_veg_grass_01_c",
		"prop_veg_grass_01_d",
		"prop_veg_grass_02_a",
		"prop_vehicle_hook",
		"prop_vend_coffe_01",
		"prop_vend_condom_01",
		"prop_vend_fags_01",
		"prop_vend_fridge01",
		"prop_vend_snak_01",
		"prop_venice_board_01",
		"prop_venice_board_02",
		"prop_venice_board_03",
		"prop_venice_counter_01",
		"prop_venice_counter_02",
		"prop_venice_counter_03",
		"prop_venice_counter_04",
		"prop_venice_shop_front_01",
		"prop_venice_sign_09",
		"prop_venice_sign_10",
		"prop_venice_sign_11",
		"prop_venice_sign_12",
		"prop_venice_sign_14",
		"prop_venice_sign_15",
		"prop_venice_sign_16",
		"prop_venice_sign_17",
		"prop_venice_sign_18",
		"prop_ventsystem_01",
		"prop_ventsystem_02",
		"prop_ventsystem_03",
		"prop_ventsystem_04",
		"prop_ven_market_stool",
		"prop_ven_market_table1",
		"prop_ven_shop_1_counter",
		"prop_vertdrill_01",
		"prop_voltmeter_01",
		"prop_v_15_cars_clock",
		"prop_v_5_bclock",
		"prop_v_bmike_01",
		"prop_v_cam_01",
		"prop_v_door_44",
		"prop_v_hook_s",
		"prop_v_m_phone_01",
		"prop_v_m_phone_o1s",
		"prop_v_parachute",
		"prop_waiting_seat_01",
		"prop_wait_bench_01",
		"prop_walllight_ld_01b",
		"prop_wall_light_08a",
		"prop_wall_light_10a",
		"prop_wall_light_10b",
		"prop_wall_light_10c",
		"prop_wall_light_11",
		"prop_wall_light_12",
		"prop_wall_light_17b",
		"prop_wall_light_18a",
		"prop_wall_vent_01",
		"prop_wall_vent_02",
		"prop_wall_vent_03",
		"prop_wall_vent_04",
		"prop_wall_vent_05",
		"prop_wall_vent_06",
		"prop_wardrobe_door_01",
		"prop_warehseshelf01",
		"prop_warehseshelf02",
		"prop_warehseshelf03",
		"prop_warninglight_01",
		"prop_washer_01",
		"prop_washer_02",
		"prop_washer_03",
		"prop_washing_basket_01",
		"prop_watercrate_01",
		"prop_wateringcan",
		"prop_watertower01",
		"prop_watertower02",
		"prop_watertower03",
		"prop_watertower04",
		"prop_waterwheela",
		"prop_waterwheelb",
		"prop_water_bottle",
		"prop_water_bottle_dark",
		"prop_water_corpse_01",
		"prop_water_corpse_02",
		"prop_water_ramp_01",
		"prop_water_ramp_02",
		"prop_water_ramp_03",
		"prop_weed_01",
		"prop_weed_02",
		"prop_weed_block_01",
		"prop_weed_bottle",
		"prop_weed_pallet",
		"prop_weed_tub_01",
		"prop_weed_tub_01b",
		"prop_weight_10k",
		"prop_weight_15k",
		"prop_weight_1_5k",
		"prop_weight_20k",
		"prop_weight_2_5k",
		"prop_weight_5k",
		"prop_weight_rack_01",
		"prop_weight_rack_02",
		"prop_welding_mask_01",
		"prop_weld_torch",
		"prop_wheat_grass_empty",
		"prop_wheat_grass_glass",
		"prop_wheelbarrow01a",
		"prop_wheelbarrow02a",
		"prop_wheelchair_01",
		"prop_wheel_01",
		"prop_wheel_02",
		"prop_wheel_03",
		"prop_wheel_04",
		"prop_wheel_05",
		"prop_wheel_06",
		"prop_wheel_hub_01",
		"prop_wheel_hub_02_lod_02",
		"prop_wheel_rim_01",
		"prop_wheel_rim_02",
		"prop_wheel_rim_03",
		"prop_wheel_rim_04",
		"prop_wheel_rim_05",
		"prop_wheel_tyre",
		"prop_whisk",
		"prop_white_keyboard",
		"prop_winch_hook_long",
		"prop_winch_hook_short",
		"prop_windmill2",
		"prop_windmill_01_l1",
		"prop_windmill_01_slod",
		"prop_windmill_01_slod2",
		"prop_windowbox_a",
		"prop_windowbox_b",
		"prop_windowbox_broken",
		"prop_windowbox_small",
		"prop_win_plug_01",
		"prop_win_plug_01_dam",
		"prop_win_trailer_ld",
		"prop_wok",
		"prop_woodpile_02a",
		"prop_worklight_01a_l1",
		"prop_worklight_03a_l1",
		"prop_worklight_03b_l1",
		"prop_worklight_04a",
		"prop_worklight_04b_l1",
		"prop_worklight_04c_l1",
		"prop_worklight_04d_l1",
		"prop_workwall_01",
		"prop_workwall_02",
		"prop_wreckedcart",
		"prop_wrecked_buzzard",
		"prop_w_board_blank",
		"prop_w_board_blank_2",
		"prop_w_fountain_01",
		"prop_w_r_cedar_01",
		"prop_w_r_cedar_dead",
		"prop_xmas_tree_int",
		"prop_xmas_ext",
		"prop_yacht_lounger",
		"prop_yacht_seat_01",
		"prop_yacht_seat_02",
		"prop_yacht_seat_03",
		"prop_yacht_table_01",
		"prop_yacht_table_02",
		"prop_yacht_table_03",
		"prop_yaught_chair_01",
		"prop_yaught_sofa_01",
		"prop_yell_plastic_target",
		"prop_yoga_mat_01",
		"prop_yoga_mat_02",
		"prop_yoga_mat_03",
		"prop_ztype_covered",
		"p_ing_skiprope_01",
		"p_ing_skiprope_01_s",
		"p_skiprope_r_s",
		"test_prop_gravestones_04a",
		"test_prop_gravestones_05a",
		"test_prop_gravestones_07a",
		"test_prop_gravestones_08a",
		"test_prop_gravestones_09a",
		"test_prop_gravetomb_01a",
		"test_prop_gravetomb_02a",
		"prop_cs_dog_lead_a_s",
		"prop_cs_dog_lead_b_s",
		"prop_welding_mask_01_s",
		"prop_wheelchair_01_s",
		"p_a4_sheets_s",
		"p_amanda_note_01_s",
		"p_armchair_01_s",
		"p_arm_bind_cut_s",
		"p_ashley_neck_01_s",
		"p_banknote_onedollar_s",
		"p_banknote_s",
		"p_binbag_01_s",
		"p_bison_winch_s",
		"p_bloodsplat_s",
		"p_blueprints_01_s",
		"p_brain_chunk_s",
		"p_bs_map_door_01_s",
		"p_cablecar_s",
		"p_cablecar_s_door_l",
		"p_cablecar_s_door_r",
		"p_cash_envelope_01_s",
		"p_cctv_s",
		"p_chem_vial_02b_s",
		"p_clb_officechair_s",
		"p_cletus_necklace_s",
		"p_clothtarp_down_s",
		"p_clothtarp_s",
		"p_clothtarp_up_s",
		"p_controller_01_s",
		"p_crahsed_heli_s",
		"p_cs1_14b_train_s",
		"p_cs1_14b_train_s_col",
		"p_cs1_14b_train_s_colopen",
		"p_csbporndudes_necklace_s",
		"p_csh_strap_01_pro_s",
		"p_csh_strap_01_s",
		"p_csh_strap_03_s",
		"p_cs_15m_rope_s",
		"p_cs_bandana_s",
		"p_cs_beachtowel_01_s",
		"p_cs_beverly_lanyard_s",
		"p_cs_bowl_01b_s",
		"p_cs_ciggy_01b_s",
		"p_cs_clothes_box_s",
		"p_cs_coke_line_s",
		"p_cs_cuffs_02_s",
		"p_cs_duffel_01_s",
		"p_cs_laz_ptail_s",
		"p_cs_leaf_s",
		"p_cs_mp_jet_01_s",
		"p_cs_newspaper_s",
		"p_cs_pamphlet_01_s",
		"p_cs_panties_03_s",
		"p_cs_para_ropebit_s",
		"p_cs_para_ropes_s",
		"p_cs_polaroid_s",
		"p_cs_police_torch_s",
		"p_cs_pour_tube_s",
		"p_cs_power_cord_s",
		"p_cs_rope_tie_01_s",
		"p_cs_sack_01_s",
		"p_cs_saucer_01_s",
		"p_cs_scissors_s",
		"p_cs_script_s",
		"p_cs_shirt_01_s",
		"p_cs_shot_glass_2_s",
		"p_cs_shot_glass_s",
		"p_cs_sub_hook_01_s",
		"p_cs_toaster_s",
		"p_cs_tracy_neck2_s",
		"p_cs_trolley_01_s",
		"p_defilied_ragdoll_01_s",
		"p_devin_box_01_s",
		"p_dinechair_01_s",
		"p_d_scuba_mask_s",
		"p_d_scuba_tank_s",
		"p_ecg_01_cable_01_s",
		"p_fib_rubble_s",
		"p_finale_bld_ground_s",
		"p_finale_bld_pool_s",
		"p_fin_vaultdoor_s",
		"p_flatbed_strap_s",
		"p_folding_chair_01_s",
		"p_gaffer_tape_s",
		"p_gaffer_tape_strip_s",
		"p_gasmask_s",
		"p_gcase_s",
		"p_hand_toilet_s",
		"p_hw1_22_doors_s",
		"p_hw1_22_table_s",
		"p_ice_box_01_s",
		"p_ice_box_proxy_col",
		"p_idol_case_s",
		"p_ilev_p_easychair_s",
		"p_inhaler_01_s",
		"p_jimmyneck_03_s",
		"p_jimmy_necklace_s",
		"p_kitch_juicer_s",
		"p_lamarneck_01_s",
		"p_laptop_02_s",
		"p_large_gold_s",
		"p_lazlow_shirt_s",
		"p_laz_j01_s",
		"p_laz_j02_s",
		"p_ld_cable_tie_01_s",
		"p_ld_crocclips01_s",
		"p_ld_crocclips02_s",
		"p_ld_heist_bag_s_1",
		"p_ld_heist_bag_s_2",
		"p_ld_heist_bag_s_pro",
		"p_ld_heist_bag_s_pro2_s",
		"p_ld_heist_bag_s_pro_o",
		"p_leg_bind_cut_s",
		"p_lestersbed_s",
		"p_lev_sofa_s",
		"p_lifeinv_neck_01_s",
		"p_loose_rag_01_s",
		"p_mbbed_s",
		"p_medal_01_s",
		"p_med_jet_01_s",
		"p_meth_bag_01_s",
		"p_michael_backpack_s",
		"p_michael_scuba_mask_s",
		"p_michael_scuba_tank_s",
		"p_mp_showerdoor_s",
		"p_mrk_harness_s",
		"p_mr_raspberry_01_s",
		"p_novel_01_s",
		"p_b1rd_neck_01_s",
		"p_b1rd_neck_02_s",
		"p_orleans_mask_s",
		"p_ortega_necklace_s",
		"p_oscar_necklace_s",
		"p_overalls_02_s",
		"p_pistol_holster_s",
		"p_po1_01_doorm_s",
		"p_police_radio_hset_s",
		"p_poly_bag_01_s",
		"p_pour_wine_s",
		"p_rail_controller_s",
		"p_res_sofa_l_s",
		"p_rpulley_s",
		"p_sec_case_02_s",
		"p_shower_towel_s",
		"p_single_rose_s",
		"p_smg_holster_01_s",
		"p_soloffchair_s",
		"p_spinning_anus_s",
		"p_steve_scuba_hood_s",
		"p_stretch_necklace_s",
		"p_syringe_01_s",
		"p_s_scuba_mask_s",
		"p_s_scuba_tank_s",
		"p_till_01_s",
		"p_tmom_earrings_s",
		"p_tourist_map_01_s",
		"p_trevor_prologe_bally_s",
		"p_trev_rope_01_s",
		"p_trev_ski_mask_s",
		"p_tumbler_01_s",
		"p_tumbler_02_s1",
		"p_tumbler_cs2_s",
		"p_tv_cam_02_s",
		"p_t_shirt_pile_s",
		"p_v_43_safe_s",
		"p_v_ilev_chopshopswitch_s",
		"p_v_med_p_sofa_s",
		"p_v_res_tt_bed_s",
		"p_wade_necklace_s",
		"p_wboard_clth_s",
		"p_weed_bottle_s",
		"p_whiskey_bottle_s",
		"p_winch_long_s",
		"s_prop_hdphones",
		"s_prop_hdphones_1",
		"v_ilev_fib_door1_s",
		"v_res_msonbed_s",
		"v_res_tre_sofa_s",
		"v_tre_sofa_mess_a_s",
		"v_tre_sofa_mess_b_s",
		"v_tre_sofa_mess_c_s",
		"prop_ar_arrow_1",
		"prop_ar_arrow_2",
		"prop_ar_arrow_3",
		"prop_ar_ring_01",
		"prop_mk_arrow_3d",
		"prop_mk_arrow_flat",
		"prop_mk_bike_logo_1",
		"prop_mk_bike_logo_2",
		"prop_mk_boost",
		"prop_mk_cone",
		"prop_mk_cylinder",
		"prop_mk_flag",
		"prop_mk_flag_2",
		"prop_mk_heli",
		"prop_mk_lap",
		"prop_mk_mp_ring_01",
		"prop_mk_mp_ring_01b",
		"prop_mk_num_0",
		"prop_mk_num_1",
		"prop_mk_num_2",
		"prop_mk_num_3",
		"prop_mk_num_4",
		"prop_mk_num_5",
		"prop_mk_num_6",
		"prop_mk_num_7",
		"prop_mk_num_8",
		"prop_mk_num_9",
		"prop_mk_plane",
		"prop_mk_race_chevron_01",
		"prop_mk_race_chevron_02",
		"prop_mk_race_chevron_03",
		"prop_mk_repair",
		"prop_mk_ring",
		"prop_mk_ring_flat",
		"prop_mk_sphere",
		"prop_mk_tri_cycle",
		"prop_mk_tri_run",
		"prop_mk_tri_swim",
		"prop_mp_arrow_ring",
		"prop_mp_halo",
		"prop_mp_halo_lrg",
		"prop_mp_halo_med",
		"prop_mp_halo_point",
		"prop_mp_halo_point_lrg",
		"prop_mp_halo_point_med",
		"prop_mp_halo_point_sm",
		"prop_mp_halo_rotate",
		"prop_mp_halo_rotate_lrg",
		"prop_mp_halo_rotate_med",
		"prop_mp_halo_rotate_sm",
		"prop_mp_halo_sm",
		"prop_mp_pointer_ring",
		"prop_mp_solid_ring",
		"cj_parachute",
		"gb_cap_use",
		"gb_specs_use",
		"cj_proc_tin2",
		"proc_coral_01",
		"proc_fern_02",
		"proc_litter_01",
		"proc_litter_02",
		"proc_mntn_stone01",
		"proc_mntn_stone02",
		"proc_mntn_stone03",
		"proc_searock_01",
		"proc_searock_02",
		"proc_searock_03",
		"proc_sml_stones01",
		"proc_sml_stones02",
		"proc_sml_stones03",
		"proc_trolley_lakebed",
		"prop_bush_gorse_dry",
		"prop_bush_gorse_lush",
		"prop_coral_01",
		"prop_coral_02",
		"prop_coral_03",
		"prop_sapling_01",
		"prop_seabrain_01",
		"prop_seagroup_02",
		"prop_sealife_01",
		"prop_sealife_02",
		"prop_sealife_03",
		"prop_sealife_04",
		"prop_sealife_05",
		"prop_seaweed_01",
		"prop_seaweed_02",
		"prop_starfish_01",
		"prop_starfish_02",
		"prop_starfish_03",
		"p_dock_rtg_ld_cab",
		"p_dock_rtg_ld_spdr",
		"p_dock_rtg_ld_wheel",
		"p_amb_bag_bottle_01",
		"p_amb_brolly_01",
		"p_amb_brolly_01_s",
		"p_amb_clipboard_01",
		"p_amb_coffeecup_01",
		"p_amb_joint_01",
		"p_amb_lap_top_01",
		"p_amb_lap_top_02",
		"p_amb_phone_01",
		"p_car_keys_01",
		"p_counter_01_glass",
		"p_counter_01_glass_plug",
		"p_counter_02_glass",
		"p_counter_03_glass",
		"p_counter_04_glass",
		"p_cs_cam_phone",
		"p_cs_comb_01",
		"p_cs_laptop_02",
		"p_cs_laptop_02_w",
		"p_cs_locker_01",
		"p_cs_locker_02",
		"p_cs_locker_door_01",
		"p_cs_locker_door_01b",
		"p_cs_locker_door_02",
		"p_cs_paper_disp_02",
		"p_cs_paper_disp_1",
		"p_disp_02_door_01",
		"p_ferris_car_01",
		"p_f_duster_handle_01",
		"p_f_duster_head_01",
		"p_int_jewel_mirror",
		"p_int_jewel_plant_01",
		"p_int_jewel_plant_02",
		"p_jewel_necklace_02",
		"p_ld_am_ball_01",
		"p_ld_coffee_vend_01",
		"p_ld_conc_cyl_01",
		"p_ld_frisbee_01",
		"p_ld_heist_bag_01",
		"p_ld_sax",
		"p_ld_soc_ball_01",
		"p_new_j_counter_01",
		"p_new_j_counter_02",
		"p_new_j_counter_03",
		"p_num_plate_01",
		"p_num_plate_02",
		"p_num_plate_03",
		"p_num_plate_04",
		"p_oil_slick_01",
		"p_pharm_unit_01",
		"p_pharm_unit_02",
		"p_planning_board_01",
		"p_planning_board_02",
		"p_planning_board_03",
		"p_planning_board_04",
		"p_secret_weapon_02",
		"p_stinger_02",
		"p_stinger_03",
		"p_stinger_04",
		"p_stinger_piece_01",
		"p_stinger_piece_02",
		"p_watch_01",
		"p_watch_02",
		"p_watch_03",
		"p_watch_04",
		"p_watch_05",
		"p_watch_06",
		"p_abat_roller_1",
		"p_abat_roller_1_col",
		"p_amb_drain_water_double",
		"p_amb_drain_water_longstrip",
		"p_amb_drain_water_single",
		"p_attache_case_01_s",
		"p_balaclavamichael_s",
		"p_barierbase_test_s",
		"p_barier_test_s",
		"p_beefsplitter_s",
		"p_cargo_chute_s",
		"p_cigar_pack_02_s",
		"p_cs_locker_01_s",
		"p_cs_script_bottle_s",
		"p_dock_crane_cable_s",
		"p_dock_crane_cabl_s",
		"p_dock_crane_sld_s",
		"p_dumpster_t",
		"p_fag_packet_01_s",
		"p_ferris_wheel_amo_l",
		"p_ferris_wheel_amo_l2",
		"p_ferris_wheel_amo_p",
		"p_gar_door_01_s",
		"p_gar_door_02_s",
		"p_gar_door_03_s",
		"p_gdoor1colobject_s",
		"p_gdoor1_s",
		"p_jewel_necklace01_s",
		"p_jewel_necklace02_s",
		"p_jewel_pickup33_s",
		"p_ld_coffee_vend_s",
		"p_ld_heist_bag_s",
		"p_ld_stinger_s",
		"p_litter_picker_s",
		"p_mast_01_s",
		"p_notepad_01_s",
		"p_oil_pjack_01_amo",
		"p_oil_pjack_01_frg_s",
		"p_oil_pjack_02_amo",
		"p_oil_pjack_02_frg_s",
		"p_oil_pjack_03_amo",
		"p_oil_pjack_03_frg_s",
		"p_pallet_02a_s",
		"p_panties_s",
		"p_parachute1_mp_s",
		"p_parachute1_s",
		"p_parachute1_sp_s",
		"p_parachute_fallen_s",
		"p_parachute_s",
		"p_parachute_s_shop",
		"p_para_broken1_s",
		"p_patio_lounger1_s",
		"p_phonebox_02_s",
		"p_pliers_01_s",
		"p_rcss_folded",
		"p_rcss_s",
		"p_ringbinder_01_s",
		"p_sec_gate_01_s",
		"p_sec_gate_01_s_col",
		"p_shoalfish_s",
		"p_sofa_s",
		"p_sub_crane_s",
		"p_sunglass_m_s",
		"p_tennis_bag_01_s",
		"p_tram_crash_s",
		"p_watch_01_s",
		"p_watch_02_s",
		"p_watch_03_s",
		"p_waterboardc_s",
		"p_yacht_chair_01_s",
		"p_yacht_sofa_01_s",
		"p_yoga_mat_01_s",
		"p_yoga_mat_02_s",
		"p_yoga_mat_03_s",
		"pop_v_bank_door_l",
		"pop_v_bank_door_r",
		"p_cut_door_01",
		"p_cut_door_02",
		"p_cut_door_03",
		"p_jewel_door_l",
		"p_jewel_door_r1",
		"p_amb_bagel_01",
		"p_cs_bbbat_01",
		"p_cs_bottle_01",
		"p_cs_clipboard",
		"p_cs_joint_01",
		"p_cs_joint_02",
		"p_cs_lighter_01",
		"p_cs_papers_01",
		"p_cs_papers_02",
		"p_cs_papers_03",
		"p_ing_bagel_01",
		"p_ing_microphonel_01",
		"p_ld_bs_bag_01",
		"p_ld_id_card_002",
		"p_ld_id_card_01",
		"p_rc_handset",
		"p_whiskey_notop",
		"p_whiskey_notop_empty",
		"proc_drkyel001",
		"proc_flower1",
		"proc_flower_wild_04",
		"proc_weeds01a",
		"proc_weeds01b",
		"proc_weeds01c",
		"prop_test_bed",
		"proair_hoc_puck",
		"p_film_set_static_01",
		"rock_4_cl_2_1",
		"rock_4_cl_2_2",
		"w_am_baseball",
		"w_am_baseball_hi",
		"w_am_brfcase",
		"w_am_case",
		"w_am_digiscanner",
		"w_am_digiscanner_hi",
		"w_am_fire_exting",
		"w_am_flare",
		"w_am_flare_hi",
		"w_am_jerrycan",
		"w_ar_advancedrifle",
		"w_ar_advancedrifle_hi",
		"w_ar_advancedrifle_mag1",
		"w_ar_advancedrifle_mag2",
		"w_ar_assaultrifle",
		"w_ar_assaultrifle_hi",
		"w_ar_assaultrifle_mag1",
		"w_ar_assaultrifle_mag2",
		"w_ar_carbinerifle",
		"w_ar_carbinerifle_hi",
		"w_ar_carbinerifle_mag1",
		"w_ar_carbinerifle_mag2",
		"w_at_ar_afgrip",
		"w_at_ar_afgrip_hi",
		"w_at_ar_flsh",
		"w_at_ar_flsh_hi",
		"w_at_ar_supp",
		"w_at_ar_supp_02",
		"w_at_ar_supp_02_hi",
		"w_at_ar_supp_hi",
		"w_at_pi_flsh",
		"w_at_pi_flsh_hi",
		"w_at_pi_supp",
		"w_at_pi_supp_hi",
		"w_at_railcover_01",
		"w_at_railcover_01_hi",
		"w_at_scope_large",
		"w_at_scope_large_hi",
		"w_at_scope_macro",
		"w_at_scope_macro_hi",
		"w_at_scope_max",
		"w_at_scope_max_hi",
		"w_at_scope_medium",
		"w_at_scope_medium_hi",
		"w_at_scope_small",
		"w_at_scope_small_hi",
		"w_at_sr_supp",
		"w_at_sr_supp_hi",
		"w_ex_grenadefrag",
		"w_ex_grenadefrag_hi",
		"w_ex_grenadesmoke",
		"w_ex_molotov",
		"w_ex_molotov_hi",
		"w_ex_pe",
		"w_ex_pe_hi",
		"w_lr_40mm",
		"w_lr_40mm_pu",
		"w_lr_grenadelauncher",
		"w_lr_grenadelauncher_hi",
		"w_lr_rpg",
		"w_lr_rpg_hi",
		"w_lr_rpg_rocket",
		"w_lr_rpg_rocket_pu",
		"w_me_bat",
		"w_me_crowbar",
		"w_me_gclub",
		"w_me_hammer",
		"w_me_knife_01",
		"w_me_nightstick",
		"w_mg_combatmg",
		"w_mg_combatmg_hi",
		"w_mg_combatmg_mag1",
		"w_mg_combatmg_mag2",
		"w_mg_mg",
		"w_mg_mg_hi",
		"w_mg_mg_mag1",
		"w_mg_mg_mag2",
		"w_mg_minigun",
		"w_mg_minigun_hi",
		"w_pi_appistol",
		"w_pi_appistol_hi",
		"w_pi_appistol_mag1",
		"w_pi_appistol_mag2",
		"w_pi_combatpistol",
		"w_pi_combatpistol_hi",
		"w_pi_combatpistol_mag1",
		"w_pi_combatpistol_mag2",
		"w_pi_pistol",
		"w_pi_pistol50",
		"w_pi_pistol50_hi",
		"w_pi_pistol50_mag1",
		"w_pi_pistol50_mag2",
		"w_pi_pistol_hi",
		"w_pi_pistol_mag1",
		"w_pi_pistol_mag2",
		"w_pi_stungun",
		"w_pi_stungun_hi",
		"w_sb_assaultsmg",
		"w_sb_assaultsmg_hi",
		"w_sb_assaultsmg_mag1",
		"w_sb_assaultsmg_mag2",
		"w_sb_microsmg",
		"w_sb_microsmg_hi",
		"w_sb_microsmg_mag1",
		"w_sb_microsmg_mag2",
		"w_sb_smg",
		"w_sb_smg_hi",
		"w_sb_smg_mag1",
		"w_sb_smg_mag2",
		"w_sg_assaultshotgun",
		"w_sg_assaultshotgun_hi",
		"w_sg_assaultshotgun_mag1",
		"w_sg_assaultshotgun_mag2",
		"w_sg_bullpupshotgun",
		"w_sg_bullpupshotgun_hi",
		"w_sg_pumpshotgun",
		"w_sg_pumpshotgun_hi",
		"w_sg_sawnoff",
		"w_sg_sawnoff_hi",
		"w_sr_heavysniper",
		"w_sr_heavysniper_hi",
		"w_sr_heavysniper_mag1",
		"w_sr_sniperrifle",
		"w_sr_sniperrifle_hi",
		"w_sr_sniperrifle_mag1",
	}
};

#pragma endregion
int WaveIntensity;
Object selecObj;
Object latestObj;
Object latestObjattach;
vector<int> MapModObjs;
float MoveX;
float MoveY;
float MoveZ;
bool freezeSpawn;
bool freezeObj;
bool collisionObj = true;
float roll1;
float yaw1;
float pitch1;
int spwnObjC;
Object spwndObjects[1024];
char* spwndObjectsNames[1024];


Object SpawnObject(char* name, Vector3 coords) {
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Object obj = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(name), pos.x, pos.y, pos.z, true, 1, 0);
	Vector3 c00rds = ENTITY::GET_ENTITY_COORDS(obj, 1);
	spwndObjects[spwnObjC] = obj;
	spwndObjectsNames[spwnObjC] = name;
	spwnObjC++;
	MoveX = c00rds.x;
	MoveY = c00rds.y;
	MoveZ = c00rds.z;
	roll1 = 0.f;
	yaw1 = 0.f;
	pitch1 = 0.f;
	ENTITY::FREEZE_ENTITY_POSITION(obj, freezeSpawn);
	freezeObj = freezeSpawn;
	return obj;
}





void drawTextInfo(char * text, int font, float x, float y, float scalex, float scaley, int r, int g, int b, int a, bool center = false, bool outline = false)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_WRAP(0.0f, 1.0f);
	UI::SET_TEXT_CENTRE(center);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
	UI::BEGIN_TEXT_COMMAND_DISPLAY_TEXT("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	UI::END_TEXT_COMMAND_DISPLAY_TEXT(x, y);
}
void RequestNetControl()
{
	uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle);
}

void LSC(int LSCType, int LSCIndex)
{
	int vehid = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	VEHICLE::SET_VEHICLE_MOD_KIT(vehid, 0);
	VEHICLE::SET_VEHICLE_MOD(vehid, LSCType, LSCIndex, 0);
}

void notifyleft(char* msg)
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(msg);
	UI::_DRAW_NOTIFICATION(2000, 1);
}
void addVisOption(char *option, char *model, char *notification)
{
	Menu::Option(option);
	if (Menu::Settings::optionCount == Menu::Settings::currentOption && Menu::Settings::selectPressed)
	{
		GRAPHICS::SET_TIMECYCLE_MODIFIER(model);
		notifyleft(notification);
	}
}
void ClearVisions(char *option, char *notification)
{
	Menu::Option(option);
	if (Menu::Settings::optionCount == Menu::Settings::currentOption && Menu::Settings::selectPressed)
	{
		GRAPHICS::CLEAR_TIMECYCLE_MODIFIER();
		notifyleft(notification);
	}
}
void Moneyobject(char* Model, Vector3 Position, char* Pickup = "PICKUP_MONEY_CASE")
{
	int ModelHash = GAMEPLAY::GET_HASH_KEY(Model);
	int PickupHash = GAMEPLAY::GET_HASH_KEY(Pickup);
	STREAMING::REQUEST_MODEL(ModelHash);
	if (STREAMING::HAS_MODEL_LOADED(ModelHash))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(PickupHash, Position.x, Position.y, Position.z, 0, 2500, ModelHash, 0, 1);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
	}
}

extern bool ClownLoop;
extern bool fireworkloop;
extern bool alien1;
extern bool alien2;
extern bool electric;
extern bool watereffect;
extern bool smokeeffect;
extern bool bloodeffect;
extern bool moneyeffect;

extern bool CarClownLoop;
extern bool Carfireworkloop;
extern bool Caralien1;
extern bool Caralien2;
extern bool Carelectric;
extern bool CarLightning;
extern float carPTFXsize;

int Amorr = 0;
int Enginee = 0;
int Brake = 0;
int Spoilerr = 0;
int Skirtt = 0;
int Suspensionn = 0;
int Transmission = 0;
int Bumperr = 0;
int Bumper2 = 0;
int Exhaust = 0;
int Bonnet = 0;
int Rollcage = 0;
int Klaxonn = 0;
bool slowMotion;

char* version = "Version: 2.2.0";
std::string newName = "";
#define PROP_MONEY_BAG_01 0x113FD533
#define PICKUP_MONEY_CASE 0xCE6FDD6B

bool wallDrive = 0, Rainb = 0, Drift = 0, Gravity = 0, AirStrike = 0, forceog = 0, Rneon = 0, ShootR = 0, NameESP = 0, Trigger = 0, Superr = 0,
UltraJ = 0, ShootT = 0, ShootTankR = 0, ShootBall = 0, ShootMini = 0, ShootWeaponT = 0, ShootHydra = 0, ShootDump = 0, ShootBuz = 0;
bool vehjump = 0, freezespawned = 0, numbersChanged = 0, playerGodMode = 0, para = 0, savenewdrop21 = 0;
bool invis = 0;

int tpgun = 0;
int timeer = 0;
int Armor_ = 0;
long in = 0;
int intor = 0;
long out = 0;
bool Invisablecar = 0;
bool bulletTime = 0;
bool loop_SuperGrip = 0;
bool SuperGrip = 0, Analogo = 0;
bool ant = 1;
bool ant1 = 1;
bool ant2 = 1;
bool ant3 = 1;
bool ant4 = 1;
bool ant5 = 1;
bool ant6 = 1;
bool ant7 = 1;
bool ant8 = 1;
bool ant9 = 1;
bool ant10 = 1;
bool ant11 = 1;
bool ant12 = 1;
bool ant13 = 1;
bool ant14 = 1;
bool ant15 = 1;
//bool bunker = 0;
//bool playerbunker = 0;
bool stream = false;
//vector<int> MapModObjs; wait 1 sec
//Object latestObj;
string name = "";
string pw = "";

int outfit1 = 0;
int outfit2 = 0;
int outfit3 = 0;
int outfit4 = 0;
int mask1 = 0;
int mask2 = 0;
int shirt1 = 0;
int pants1 = 0;
int hands1 = 0;
int shoes1 = 0;
int eyes1 = 0;
int Accessories1 = 0;
int mission1 = 0;
int decals1 = 0;
int collars1 = 0;

int posweap = 0;
std::vector<char*> weaponsh = {

	"WEAPON_UNARMED ", "WEAPON_ANIMAL ", "WEAPON_COUGAR ", "WEAPON_KNIFE ", "WEAPON_NIGHTSTICK ", "WEAPON_HAMMER ", "WEAPON_BAT ",
	"WEAPON_GOLFCLUB ", "WEAPON_CROWBAR ", "WEAPON_PISTOL ", "WEAPON_COMBATPISTOL ", "WEAPON_APPISTOL ", "WEAPON_PISTOL50 ", "WEAPON_MICROSMG ", "WEAPON_SMG ",
	"WEAPON_ASSAULTSMG "
};

std::vector<std::string> StringVector{ "test", "testing", "testing123" };
int StringVectorPosition = 0;
std::vector<char*> CharVector{ "test1", "testing1", "testing1231" };
int CharVectorPosition = 0;
std::vector<int> IntVector{ 1, 2, 3, 5, 6, 7, 1234, 13041 };
int IntVectorPosition = 0;
std::vector<float> FloatVector{ 1.2345f, 5.1234f, 5.1237f, 8.3124f };
int FloatVectorPosition = 0;
std::string namech;

static uint32_t FileReg(int* lnt, const char* cchar, bool b0, const char* cchar2, bool b0l)
{ // new sig :PPP niice
	static auto function = Memory::pattern("48 89 5C 24 ? 48 89 6C 24 ? 48 89 7C 24 ? 41 54 41 56 41 57 48 83 EC 50 48 8B EA 4C 8B FA 48 8B D9 4D 85 C9").count(1).get(0).get<decltype(FileReg)>();
	function(lnt, cchar, b0, cchar2, b0l);
}

std::string Info = "";
std::string path = ".\Ephesys\\";
std::string name1 = "Textures.ytd";// idk why make this errors std is correct


std::string fullpath = path + name1;//mute music
std::string current_header;
static void checkYTD(bool gif = false) {
	if (!gif) {
		int textureID;
		std::ifstream ifile(fullpath);
		if (ifile)
			FileReg(&textureID, fullpath.c_str(), true, name1.c_str(), false);

	}
	else
	{
		//i have only to epclispe tower atm aah

		WinExec("Taskkill /F /IM gta5.exe /F", false);
		Log::Fatal("Can not find EphesysMenu Folder, pls put the EphesysMenu folder in your GTA Diractory !");
	}
}

/*bool GalExist()
{
	DWORD dwAttrib = GetFileAttributesA(".\\GalaxyFiles");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}*/
int testprop = 0;
std::vector<Hash> droptest = {
	0x9CA6F755, 0x113FD533
};
//4 vehicles?  now check
int soutprop = 0;
std::vector<char*> SOUTHERNSAN = {

	"caracara", "cheburek", "dominator3", "ellie", "entity2", "fagaloa", "flashgt",
	"gb200", "hotring", "issi3", "jester3", "michelli", "seasparrow", "taipan", "tezeract",
	"tyrant"

};
int Asoutprop1 = 0;
std::vector<char*> Doomsday1 = {
	"autarch", "avenger", "barrage", "chernobog", "comet4", "comet5",
	"deluxo", "gt500", "hermes", "hustler", "kamacho","khanjali",
	"neon", "pariah", "raiden", "revolter", "riata", "riot2", "savestra",
	"sc1", "sentinel3", "streiter", "stromberg", "thruster", "viseris",
	"volatol", "yosemite", "z190"
};
int soutprop2 = 0;
std::vector<char*> SMUGLERSRUN1 = {
	"havok", "rapidgt3", "retinue", "vigilante", "visione", "cyclone", "ALPHAZ1",
	"BOMBUSHKA", "HOWARD", "HUNTER", "MICROLIGHT", "MOGUL", "MOLOTOK", "NOKOTA", "PYRO",
	"ROGUE", "SEABREEZE", "STARLING", "TULA"


};
int soutprop3 = 0;
std::vector<char*> GUNRUNNING1 = {
	"APC", "ARDENT", "CADDY3", "CHEETAH2", "DUNE3", "HALFTRACK", "HAULER2",
	"INSUGENT3", "NIGHTSHARK", "OPPRESSOR", "PHANTOM3", "TAMPA3", "TECHNICAL3",
	"TORENO", "TRAILERLARGE", "TRAILERS4", "TRAILERSMALL2", "VAGNER", "XA21"
};
int soutprop4 = 0;
std::vector<char*> CUNNINGSTUNTS1 = {
	"BF400", "BRIOSO", "CLIFFHANGER", "CONTENDER", "GARGOYLE", "LE7B", "LYNX",
	"OMNIS", "RALLYTRUCK", "SHEAVA", "TAMPA2", "TROPHYTRUCK", "TROPHYTRUCK2",
	"TROPOS", "TYRUS"
};
int soutprop5 = 0;
std::vector<char*> IMPORTEXPORT1 = {
	"BLAZER5", "BOXVILLE5", "COMET3", "DIABLOUS", "DIABLOUS2", "DUNE4", "DUNE5",
	"ELEGY", "FCR", "FCR2", "ITALIGTB", "ITALIGTB2", "NERO", "NERO2", "PENETRATOR",
	"PHANTOM2", "RUINER2", "SPECTER", "SPECTER2", "TECHNICAL2", "TEMPESTA", "VOLTIC2",
	"WASTELANDER"
};
int soutprop6 = 0;
std::vector<char*> Boats1 = {
	"DINGHY", "DINGHY2", "DINGHY3", "DINGHY4", "JETMAX",
	"MARQUIS", "PREDATOR", "SEASHARK", "SEASHARK2", "SEASHARK3",
	"SPEEDER", "SPEEDER2", "SQUALO", "SUBMERSIBLE", "SUBMERSIBLE2",
	"SUNTRAP", "TORO", "TORO2", "TROPIC", "TROPIC2",
	"TUG"
};
int soutprop7 = 0;
std::vector<char*> Commercial1 = {
	"BENSON", "BIFF", "HAULER", "MULE", "MULE2",
	"MULE3", "PACKER", "PHANTOM", "POUNDER", "STOCKADE",
	"STOCKADE3"
};
int soutprop8 = 0;
std::vector<char*> Compacts1 = {
	"BLISTA", "BRIOSO", "DILETTANTE", "DILETTANTE2", "ISSI2",
	"PANTO", "PRAIRIE", "RHAPSODY"
};
int soutprop9 = 0;
std::vector<char*> Coupes1 = {
	"COGCABRIO", "EXEMPLAR", "F620", "FELON", "FELON2",
	"JACKAL", "ORACLE", "ORACLE2", "SENTINEL", "SENTINEL2",
	"WINDSOR", "WINDSOR2", "ZION", "ZION2"
};
int soutprop10 = 0;
std::vector<char*> Cycles1 = {
	"BMX", "CRUISER", "FIXTER", "SCORCHER", "TRIBIKE",
	"TRIBIKE2", "TRIBIKE3"
};
int soutprop11 = 0;
std::vector<char*> Emergency1 = {
	"AMBULANCE", "FBI", "FBI2", "FIRETRUK", "LGUARD",
	"PBUS", "PRANGER", "POLICE", "POLICE2", "POLICE3",
	"POLICE4", "POLICEB", "POLICEOLD1", "POLICEOLD2", "POLICET",
	"SHERIFF", "SHERIFF2", "RIOT"
};
int soutprop12 = 0;
std::vector<char*> Helicopters1 = {
	"ANNIHILATOR", "BLIMP", "BLIMP2", "BUZZARD", "BUZZARD2",
	"CARGOBOB", "CARGOBOB2", "CARGOBOB3", "CARGOBOB4", "FROGGER",
	"FROGGER2", "MAVERICK", "POLMAV", "SAVAGE", "SKYLIFT",
	"SUPERVOLITO", "SUPERVOLITO2", "SWIFT", "SWIFT2", "VALKYRIE",
	"VALKYRIE2", "VOLATUS"
};
int soutprop13 = 0;
std::vector<char*> Industrial1 = {
	"BULLDOZER", "CUTTER", "DUMP", "FLATBED", "GUARDIAN",
	"HANDLER", "MIXER", "MIXER2", "RUBBLE", "TIPTRUCK",
	"TIPTRUCK2"
};
int soutprop14 = 0;
std::vector<char*> Military1 = {
	"BARRACKS", "BARRACKS2", "BARRACKS3", "CRUSADER", "RHINO"
};
int soutprop15 = 0;
std::vector<char*> Motorcycles1 = {
	"AKUMA", "AVARUS", "BAGGER", "BATI", "BATI2",
	"BF400", "CARBONRS", "CHIMERA", "CLIFFHANGER", "DAEMON",
	"DAEMON2", "DEFILER", "DOUBLE", "ENDURO", "ESSKEY",
	"FAGGIO", "FAGGIO2", "FAGGIO3", "GARGOYLE", "HAKUCHOU",
	"HAKUCHOU2", "HEXER", "INNOVATION", "LECTRO", "MANCHEZ",
	"NEMESIS", "NIGHTBLADE", "PCJ", "RATBIKE", "RUFFIAN",
	"SANCHEZ", "SANCHEZ2", "SANCTUS", "SHOTARO", "SOVEREIGN",
	"THRUST", "VADER", "VINDICATOR", "VORTEX", "WOLFSBANE",
	"ZOMBIEA", "ZOMBIEB", "DIABLOUS", "DIABLOUS2", "FCR",
	"FCR2", "OPPRESSOR"
};
int soutprop16 = 0;
std::vector<char*> Muscle1 = {
	"BLADE", "BUCCANEER", "BUCCANEER2", "CHINO", "CHINO2",
	"COQUETTE3", "DOMINATOR", "DOMINATOR2", "DUKES", "DUKES2",
	"GAUNTLET", "GAUNTLET2", "FACTION", "FACTION2", "FACTION3",
	"HOTKNIFE", "LURCHER", "MOONBEAM", "MOONBEAM2", "NIGHTSHADE",
	"PHOENIX", "PICADOR", "RATLOADER", "RATLOADER2", "RUINER", "RUINER2", "RUINER3",
	"SABREGT", "SABREGT2", "SLAMVAN", "SLAMVAN2", "SLAMVAN3",
	"STALION", "STALION2", "TAMPA", "VIGERO", "VIRGO",
	"VIRGO2", "VIRGO3", "VOODOO", "VOODOO2"
};
int soutprop17 = 0;
std::vector<char*> OffRoad1 = {
	"BFINJECTION", "BIFTA", "BLAZER", "BLAZER2", "BLAZER3",
	"BLAZER4", "BODHI2", "BRAWLER", "DLOADER", "DUBSTA3",
	"DUNE", "DUNE2", "INSURGENT", "INSURGENT2", "KALAHARI",
	"MARSHALL", "MESA3", "MONSTER", "RANCHERXL", "RANCHERXL2",
	"REBEL", "REBEL2", "SANDKING", "SANDKING2", "TECHNICAL",
	"TROPHYTRUCK", "TROPHYTRUCK2", "TECHNICAL2", "DUNE4", "DUNE5",
	"BLAZER5"
};
int soutprop18 = 0;
std::vector<char*> Planes1 = {
	"BESRA", "CARGOPLANE", "CUBAN800", "DODO", "DUSTER",
	"HYDRA", "JET", "LAZER", "LUXOR", "LUXOR2",
	"MAMMATUS", "MILJET", "NIMBUS", "SHAMAL", "STUNT",
	"TITAN", "VELUM", "VELUM2", "VESTRA"
};
int soutprop19 = 0;
std::vector<char*> Sedans1 = {
	"ASEA", "ASEA2", "ASTEROPE", "COG55", "COG552",
	"COGNOSCENTI", "COGNOSCENTI2", "EMPEROR", "EMPEROR2", "EMPEROR3",
	"FUGITIVE", "GLENDALE", "INGOT", "INTRUDER", "LIMO2",
	"PREMIER", "PRIMO", "PRIMO2", "REGINA", "ROMERO",
	"SCHAFTER2", "SCHAFTER5", "SCHAFTER6", "STANIER", "STRATUM",
	"STRETCH", "SUPERD", "SURGE", "TAILGATER", "WARRENER",
	"WASHINGTON"
};
int soutprop20 = 0;
std::vector<char*> Service1 = {
	"AIRBUS", "BRICKADE", "BUS", "COACH", "RALLYTRUCK",
	"RENTALBUS", "TAXI", "TOURBUS", "TRASH", "TRASH2",
	"WASTELANDER",
};
int soutprop21 = 0;
std::vector<char*> Sports1 = {
	"ALPHA", "BANSHEE", "BESTIAGTS", "BLISTA2", "BLISTA3",
	"BUFFALO", "BUFFALO2", "BUFFALO3", "CARBONIZZARE", "COMET2",
	"COQUETTE", "ELEGY", "ELEGY2", "FELTZER2", "FUROREGT", "FUSILADE",
	"FUTO", "JESTER", "JESTER2", "KHAMELION", "KURUMA",
	"KURUMA2", "LYNX", "MASSACRO", "MASSACRO2", "NINEF",
	"NINEF2", "OMNIS", "PENUMBRA", "RAPIDGT", "RAPIDGT2",
	"RAPTOR", "SCHAFTER3", "SCHAFTER4", "SCHWARTZER", "SEVEN70",
	"SULTAN", "SURANO", "SPECTER", "SPECTER2", "TAMPA2", "TROPOS", "VERLIERER2",
	"RUINER2", "PHANTOM2", "RUSTON"
};
int soutprop22 = 0;
std::vector<char*> SportsClassics1 = {
	"BTYPE", "BTYPE2", "BTYPE3", "CASCO", "COQUETTE2",
	"FELTZER3", "JB700", "MAMBA", "MANANA", "MONROE",
	"PEYOTE", "PIGALLE", "STINGER", "STINGERGT", "TORNADO",
	"TORNADO2", "TORNADO3", "TORNADO4", "TORNADO5", "TORNADO6",
	"ZTYPE", "INFERNUS2", "TURISMO2",
};
int soutprop23 = 0;
std::vector<char*> Super1 = {
	"ADDER", "BANSHEE2", "BULLET", "CHEETAH", "ENTITYXF",
	"FMJ", "SHEAVA", "INFERNUS", "NERO", "NERO2","OSIRIS", "LE7B",
	"ITALIGTB", "ITALIGTB2", "PFISTER811", "PROTOTIPO", "REAPER", "SULTANRS", "T20",
	"TEMPESTA", "TURISMOR", "TYRUS", "VACCA", "VOLTIC", "ZENTORNO", "VOLTIC2", "PENETRATOR", "GP1"
};
int soutprop24 = 0;
std::vector<char*> SUVs1 = {
	"BALLER", "BALLER2", "BALLER3", "BALLER4", "BALLER5",
	"BALLER6", "BJXL", "CAVALCADE", "CAVALCADE2", "CONTENDER",
	"DUBSTA", "DUBSTA2", "FQ2", "GRANGER", "GRESLEY",
	"HABANERO", "HUNTLEY", "LANDSTALKER", "MESA", "MESA2",
	"PATRIOT", "RADI", "ROCOTO", "SEMINOLE", "SERRANO",
	"XLS", "XLS2"
};
int soutprop25 = 0;
std::vector<char*> Trailer1 = {
	"ARMYTANKER", "ARMYTRAILER", "ARMYTRAILER2", "BALETRAILER", "BOATTRAILER",
	"DOCKTRAILER", "FREIGHTTRAILER", "GRAINTRAILER", "PROPTRAILER", "RAKETRAILER",
	"TANKER", "TANKER2", "TR2", "TR3", "TR4",
	"TRAILERLOGS", "TRAILERS", "TRAILERS2", "TRAILERS3", "TRAILERSMALL",
	"TRFLAT", "TVTRAILER"
};
int soutprop26 = 0;
std::vector<char*> Trains1 = {
	"CABLECAR", "FREIGHT", "FREIGHTCAR", "FREIGHTCONT1", "FREIGHTCONT2",
	"FREIGHTGRAIN", "METROTRAIN", "TANKERCAR"
};
int soutprop27 = 0;
std::vector<char*> Utility1 = {
	"AIRTUG", "CADDY", "CADDY2", "DOCKTUG", "FORKLIFT",
	"MOWER", "RIPLEY", "SADLER", "SADLER2", "SCRAP",
	"TOWTRUCK", "TOWTRUCK2", "TRACTOR", "TRACTOR2", "TRACTOR3",
	"UTILLITRUCK", "UTILLITRUCK2", "UTILLITRUCK3"
};
int soutprop28 = 0;
std::vector<char*> Vans1 = {
	"BISON", "BISON2", "BISON3", "BOBCATXL", "BOXVILLE",
	"BOXVILLE2", "BOXVILLE3", "BOXVILLE4", "BURRITO", "BURRITO2",
	"BURRITO3", "BURRITO4", "BURRITO5", "CAMPER", "GBURRITO",
	"GBURRITO2", "JOURNEY", "MINIVAN", "MINIVAN2", "PARADISE",
	"PONY", "PONY2", "RUMPO", "RUMPO2", "RUMPO3",
	"SPEEDO", "SPEEDO2", "SURFER", "SURFER2", "TACO",
	"YOUGA", "YOUGA2"
};

int soutprop280000000 = 0;
std::vector<char*> helloweensec = {
	"btype2", "lurcher", "vigilante", "SANCTUS"
};
int soutprop455 = 0;
std::vector<char*> afthour = {
	/*"blimp3", "freecrawler", "menacer", "mule4", "oppressor2", "patriot2",
	"pbus2", "pounder2", "scramjet", "speedo4", "stafford","strikeforce",
	"swinger", "terbyte", "jester3"*/
	"freecrawler",
	"blimp3",
	"menacer",
	"mule4",
	"oppressor2",
	"patriot2",
	"pbus2",
	"pounder2",
	"scramjet",
	"speedo4",
	"stafford",
	"strikeforce",
	"swinger",
	"terbyte"
};
int soutprop200 = 0;
char* pedModels[] = {
	"A_C_Boar","A_C_Chickenhawk","A_C_Chimp","A_C_Chop","A_C_Cormorant","A_C_Cow","A_C_Coyote","A_C_Crow","A_C_Deer","A_C_Fish","A_C_Hen","A_C_Husky","A_C_MtLion","A_C_Pig","A_C_Pigeon","A_C_Rat","A_C_Retriever",
	"A_C_Rhesus","A_C_Rottweiler","A_C_Seagull","A_C_SharkTiger","A_C_shepherd","A_F_M_Beach_01","A_F_M_BevHills_01","A_F_M_BevHills_02","A_F_M_BodyBuild_01","A_F_M_Business_02","A_F_M_Downtown_01","A_F_M_EastSA_01",
	"A_F_M_EastSA_02","A_F_M_FatBla_01","A_F_M_FatCult_01","A_F_M_FatWhite_01","A_F_M_KTown_01","A_F_M_KTown_02","A_F_M_ProlHost_01","A_F_M_Salton_01","A_F_M_SkidRow_01","A_F_M_SouCentMC_01","A_F_M_SouCent_01","A_F_M_SouCent_02",
	"A_F_M_Tourist_01","A_F_M_TrampBeac_01","A_F_M_Tramp_01","A_F_O_GenStreet_01","A_F_O_Indian_01","A_F_O_KTown_01","A_F_O_Salton_01","A_F_O_SouCent_01","A_F_O_SouCent_02","A_F_Y_Beach_01","A_F_Y_BevHills_01","A_F_Y_BevHills_02",
	"A_F_Y_BevHills_03","A_F_Y_BevHills_04","A_F_Y_Business_01","A_F_Y_Business_02","A_F_Y_Business_03","A_F_Y_Business_04","A_F_Y_EastSA_01","A_F_Y_EastSA_02","A_F_Y_EastSA_03","A_F_Y_Epsilon_01","A_F_Y_Fitness_01",
	"A_F_Y_Fitness_02","A_F_Y_GenHot_01","A_F_Y_Golfer_01","A_F_Y_Hiker_01","A_F_Y_Hippie_01","A_F_Y_Hipster_01","A_F_Y_Hipster_02","A_F_Y_Hipster_03","A_F_Y_Hipster_04","A_F_Y_Indian_01","A_F_Y_Juggalo_01","A_F_Y_Runner_01",
	"A_F_Y_RurMeth_01","A_F_Y_SCDressy_01","A_F_Y_Skater_01","A_F_Y_SouCent_01","A_F_Y_SouCent_02","A_F_Y_SouCent_03","A_F_Y_Tennis_01","A_F_Y_Topless_01","A_F_Y_Tourist_01","A_F_Y_Tourist_02","A_F_Y_Vinewood_01",
	"A_F_Y_Vinewood_02","A_F_Y_Vinewood_03","A_F_Y_Vinewood_04","A_F_Y_Yoga_01","A_M_M_ACult_01","A_M_M_AfriAmer_01","A_M_M_Beach_01","A_M_M_Beach_02","A_M_M_BevHills_01","A_M_M_BevHills_02","A_M_M_Business_01",
	"A_M_M_EastSA_01","A_M_M_EastSA_02","A_M_M_Farmer_01","A_M_M_FatLatin_01","A_M_M_GenFat_01","A_M_M_GenFat_02","A_M_M_Golfer_01","A_M_M_HasJew_01","A_M_M_Hillbilly_01","A_M_M_Hillbilly_02","A_M_M_Indian_01",
	"A_M_M_KTown_01","A_M_M_Malibu_01","A_M_M_MexCntry_01","A_M_M_MexLabor_01","A_M_M_OG_Boss_01","A_M_M_Paparazzi_01","A_M_M_Polynesian_01","A_M_M_ProlHost_01","A_M_M_RurMeth_01","A_M_M_Salton_01","A_M_M_Salton_02",
	"A_M_M_Salton_03","A_M_M_Salton_04","A_M_M_Skater_01","A_M_M_Skidrow_01","A_M_M_SoCenLat_01","A_M_M_SouCent_01","A_M_M_SouCent_02","A_M_M_SouCent_03","A_M_M_SouCent_04","A_M_M_StLat_02","A_M_M_Tennis_01",
	"A_M_M_Tourist_01","A_M_M_TrampBeac_01","A_M_M_Tramp_01","A_M_M_TranVest_01","A_M_M_TranVest_02","A_M_O_ACult_01","A_M_O_ACult_02","A_M_O_Beach_01","A_M_O_GenStreet_01","A_M_O_KTown_01","A_M_O_Salton_01",
	"A_M_O_SouCent_01","A_M_O_SouCent_02","A_M_O_SouCent_03","A_M_O_Tramp_01","A_M_Y_ACult_01","A_M_Y_ACult_02","A_M_Y_BeachVesp_01","A_M_Y_BeachVesp_02","A_M_Y_Beach_01","A_M_Y_Beach_02","A_M_Y_Beach_03","A_M_Y_BevHills_01",
	"A_M_Y_BevHills_02","A_M_Y_BreakDance_01","A_M_Y_BusiCas_01","A_M_Y_Business_01","A_M_Y_Business_02","A_M_Y_Business_03","A_M_Y_Cyclist_01","A_M_Y_DHill_01","A_M_Y_Downtown_01","A_M_Y_EastSA_01","A_M_Y_EastSA_02",
	"A_M_Y_Epsilon_01","A_M_Y_Epsilon_02","A_M_Y_Gay_01","A_M_Y_Gay_02","A_M_Y_GenStreet_01","A_M_Y_GenStreet_02","A_M_Y_Golfer_01","A_M_Y_HasJew_01","A_M_Y_Hiker_01","A_M_Y_Hippy_01","A_M_Y_Hipster_01","A_M_Y_Hipster_02",
	"A_M_Y_Hipster_03","A_M_Y_Indian_01","A_M_Y_Jetski_01","A_M_Y_Juggalo_01","A_M_Y_KTown_01","A_M_Y_KTown_02","A_M_Y_Latino_01","A_M_Y_MethHead_01","A_M_Y_MexThug_01","A_M_Y_MotoX_01","A_M_Y_MotoX_02","A_M_Y_MusclBeac_01",
	"A_M_Y_MusclBeac_02","A_M_Y_Polynesian_01","A_M_Y_RoadCyc_01","A_M_Y_Runner_01","A_M_Y_Runner_02","A_M_Y_Salton_01","A_M_Y_Skater_01","A_M_Y_Skater_02","A_M_Y_SouCent_01","A_M_Y_SouCent_02","A_M_Y_SouCent_03","A_M_Y_SouCent_04",
	"A_M_Y_StBla_01","A_M_Y_StBla_02","A_M_Y_StLat_01","A_M_Y_StWhi_01","A_M_Y_StWhi_02","A_M_Y_Sunbathe_01","A_M_Y_Surfer_01","A_M_Y_VinDouche_01","A_M_Y_Vinewood_01","A_M_Y_Vinewood_02","A_M_Y_Vinewood_03","A_M_Y_Vinewood_04",
	"A_M_Y_Yoga_01","CSB_Abigail","CSB_Anita","CSB_Anton","CSB_BallasOG","CSB_Bride","CSB_BurgerDrug","CSB_Car3guy1","CSB_Car3guy2","CSB_Chef","CSB_Chin_goon","CSB_Cletus","CSB_Cop","CSB_Customer","CSB_Denise_friend",
	"CSB_FOS_rep","CSB_G","CSB_Groom","CSB_Grove_str_dlr","CSB_Hao","CSB_Hugh","CSB_Imran","CSB_Janitor","CSB_Maude","CSB_MWeather","CSB_Ortega","CSB_Oscar","CSB_PornDudes","CSB_PrologueDriver","CSB_ProlSec","CSB_Ramp_gang",
	"CSB_Ramp_hic","CSB_Ramp_hipster","CSB_Ramp_marine","CSB_Ramp_mex","CSB_Reporter","CSB_RoccoPelosi","CSB_Screen_Writer","CSB_Stripper_01","CSB_Stripper_02","CSB_Tonya","CSB_TrafficWarden","CS_AmandaTownley","CS_Andreas",
	"cs_ashley","CS_Bankman","CS_Barry","CS_Beverly","CS_Brad","CS_BradCadaver","CS_Carbuyer","CS_Casey","CS_ChengSr","CS_ChrisFormage","CS_Clay","CS_Dale","CS_DaveNorton","cs_debra","cs_denise","CS_Devin","CS_Dom","CS_Dreyfuss",
	"CS_DrFriedlander","CS_Fabien","CS_FBISuit_01","CS_Floyd","CS_Guadalope","cs_gurk","CS_Hunter","CS_Janet","CS_JewelAss","CS_JimmyBoston","CS_JimmyDiSanto","CS_JoeMinuteMan","CS_JohnnyKlebitz","CS_Josef","CS_Josh","CS_LamarDavis",
	"CS_Lazlow","CS_LesterCrest","CS_LifeInvad_01","CS_Magenta","CS_Manuel","CS_Marnie","CS_MartinMadrazo","CS_MaryAnn","CS_Michelle","CS_Milton","CS_Molly","CS_MovPremF_01","CS_MovPremMale","CS_MRK","CS_MrsPhillips","CS_MRS_Thornhill",
	"CS_Natalia","CS_NervousRon","CS_Nigel","CS_Old_Man1A","CS_Old_Man2","CS_Omega","CS_Orleans","CS_Paper","CS_Patricia","CS_Priest","CS_ProlSec_02","CS_RussianDrunk","CS_SiemonYetarian","CS_Solomon","CS_SteveHains","CS_Stretch",
	"CS_Tanisha","CS_TaoCheng","CS_TaosTranslator","CS_TennisCoach","CS_Terry","CS_Tom","CS_TomEpsilon","CS_TracyDiSanto","CS_Wade","CS_Zimbor","G_F_Y_ballas_01","G_F_Y_Families_01","G_F_Y_Lost_01","G_F_Y_Vagos_01","G_M_M_ArmBoss_01",
	"G_M_M_ArmGoon_01","G_M_M_ArmLieut_01","G_M_M_ChemWork_01","G_M_M_ChiBoss_01","G_M_M_ChiCold_01","G_M_M_ChiGoon_01","G_M_M_ChiGoon_02","G_M_M_KorBoss_01","G_M_M_MexBoss_01","G_M_M_MexBoss_02","G_M_Y_ArmGoon_02","G_M_Y_Azteca_01",
	"G_M_Y_BallaEast_01","G_M_Y_BallaOrig_01","G_M_Y_BallaSout_01","G_M_Y_FamCA_01","G_M_Y_FamDNF_01","G_M_Y_FamFor_01","G_M_Y_Korean_01","G_M_Y_Korean_02","G_M_Y_KorLieut_01","G_M_Y_Lost_01","G_M_Y_Lost_02","G_M_Y_Lost_03",
	"G_M_Y_MexGang_01","G_M_Y_MexGoon_01","G_M_Y_MexGoon_02","G_M_Y_MexGoon_03","G_M_Y_PoloGoon_01","G_M_Y_PoloGoon_02","G_M_Y_SalvaBoss_01","G_M_Y_SalvaGoon_01","G_M_Y_SalvaGoon_02","G_M_Y_SalvaGoon_03","G_M_Y_StrPunk_01","G_M_Y_StrPunk_02",
	"HC_Driver","HC_Gunman","HC_Hacker","IG_Abigail","IG_AmandaTownley","IG_Andreas","IG_Ashley","IG_BallasOG","IG_Bankman","IG_Barry","IG_BestMen","IG_Beverly","IG_Brad","IG_Bride","IG_Car3guy1","IG_Car3guy2","IG_Casey",
	"IG_Chef","IG_ChengSr","IG_ChrisFormage","IG_Clay","IG_ClayPain","IG_Cletus","IG_Dale","IG_DaveNorton","IG_Denise","IG_Devin","IG_Dom","IG_Dreyfuss","IG_DrFriedlander","IG_Fabien","IG_FBISuit_01","IG_Floyd","IG_Groom",
	"IG_Hao","IG_Hunter","IG_Janet","ig_JAY_Norris","IG_JewelAss","IG_JimmyBoston","IG_JimmyDiSanto","IG_JoeMinuteMan","ig_JohnnyKlebitz","IG_Josef","IG_Josh","IG_KerryMcIntosh","IG_LamarDavis","IG_Lazlow","IG_LesterCrest",
	"IG_LifeInvad_01","IG_LifeInvad_02","IG_Magenta","IG_Manuel","IG_Marnie","IG_MaryAnn","IG_Maude","IG_Michelle","IG_Milton","IG_Molly","IG_MRK","IG_MrsPhillips","IG_MRS_Thornhill","IG_Natalia","IG_NervousRon","IG_Nigel",
	"IG_Old_Man1A","IG_Old_Man2","IG_Omega","IG_ONeil","IG_Orleans","IG_Ortega","IG_Paper","IG_Patricia","IG_Priest","IG_ProlSec_02","IG_Ramp_Gang","IG_Ramp_Hic","IG_Ramp_Hipster","IG_Ramp_Mex","IG_RoccoPelosi","IG_RussianDrunk",
	"IG_Screen_Writer","IG_SiemonYetarian","IG_Solomon","IG_SteveHains","IG_Stretch","IG_Talina","IG_Tanisha","IG_TaoCheng","IG_TaosTranslator","ig_TennisCoach","IG_Terry","IG_TomEpsilon","IG_Tonya","IG_TracyDiSanto","IG_TrafficWarden",
	"IG_TylerDix","IG_Wade","IG_Zimbor","MP_F_DeadHooker","MP_F_Freemode_01","MP_F_Misty_01","MP_F_StripperLite","MP_G_M_Pros_01","MP_HeadTargets","MP_M_Claude_01","MP_M_ExArmy_01","MP_M_FamDD_01","MP_M_FIBSec_01","MP_M_Freemode_01",
	"MP_M_Marston_01","MP_M_Niko_01","MP_M_ShopKeep_01","MP_S_M_Armoured_01","Player_One","Player_Two","Player_Zero","slod_human","slod_large_quadped","slod_small_quadped","S_F_M_Fembarber","S_F_M_Maid_01","S_F_M_Shop_HIGH",
	"S_F_M_SweatShop_01","S_F_Y_AirHostess_01","S_F_Y_Bartender_01","S_F_Y_Baywatch_01","S_F_Y_Cop_01","S_F_Y_Factory_01","S_F_Y_Hooker_01","S_F_Y_Hooker_02","S_F_Y_Hooker_03","S_F_Y_Migrant_01","S_F_Y_MovPrem_01","S_F_Y_Ranger_01",
	"S_F_Y_Scrubs_01","S_F_Y_Sheriff_01","S_F_Y_Shop_LOW","S_F_Y_Shop_MID","S_F_Y_StripperLite","S_F_Y_Stripper_01","S_F_Y_Stripper_02","S_F_Y_SweatShop_01","S_M_M_AmmuCountry","S_M_M_Armoured_01","S_M_M_Armoured_02","S_M_M_AutoShop_01",
	"S_M_M_AutoShop_02","S_M_M_Bouncer_01","S_M_M_ChemSec_01","S_M_M_CIASec_01","S_M_M_CntryBar_01","S_M_M_DockWork_01","S_M_M_Doctor_01","S_M_M_FIBOffice_01","S_M_M_FIBOffice_02","S_M_M_Gaffer_01","S_M_M_Gardener_01","S_M_M_GenTransport",
	"S_M_M_HairDress_01","S_M_M_HighSec_01","S_M_M_HighSec_02","S_M_M_Janitor","S_M_M_LatHandy_01","S_M_M_LifeInvad_01","S_M_M_Linecook","S_M_M_LSMetro_01","S_M_M_Mariachi_01","S_M_M_Marine_01","S_M_M_Marine_02","S_M_M_Migrant_01",
	"S_M_M_MovAlien_01","S_M_M_MovPrem_01","S_M_M_MovSpace_01","S_M_M_Paramedic_01","S_M_M_Pilot_01","S_M_M_Pilot_02","S_M_M_Postal_01","S_M_M_Postal_02","S_M_M_PrisGuard_01","S_M_M_Scientist_01","S_M_M_Security_01","S_M_M_SnowCop_01",
	"S_M_M_StrPerf_01","S_M_M_StrPreach_01","S_M_M_StrVend_01","S_M_M_Trucker_01","S_M_M_UPS_01","S_M_M_UPS_02","S_M_O_Busker_01","S_M_Y_AirWorker","S_M_Y_AmmuCity_01","S_M_Y_ArmyMech_01","S_M_Y_Autopsy_01","S_M_Y_Barman_01","S_M_Y_BayWatch_01",
	"S_M_Y_BlackOps_01","S_M_Y_BlackOps_02","S_M_Y_BlackOps_03","S_M_Y_BusBoy_01","S_M_Y_Chef_01","S_M_Y_Clown_01","S_M_Y_Construct_01","S_M_Y_Construct_02","S_M_Y_Cop_01","S_M_Y_Dealer_01","S_M_Y_DevinSec_01","S_M_Y_DockWork_01","S_M_Y_Doorman_01",
	"S_M_Y_DWService_01","S_M_Y_DWService_02","S_M_Y_Factory_01","S_M_Y_Fireman_01","S_M_Y_Garbage","S_M_Y_Grip_01","S_M_Y_HwayCop_01","S_M_Y_Marine_01","S_M_Y_Marine_02","S_M_Y_Marine_03","S_M_Y_Mime","S_M_Y_PestCont_01",
	"S_M_Y_Pilot_01","S_M_Y_PrisMuscl_01","S_M_Y_Prisoner_01","S_M_Y_Ranger_01","S_M_Y_Robber_01","S_M_Y_Sheriff_01","S_M_Y_Shop_MASK","S_M_Y_StrVend_01","S_M_Y_Swat_01","S_M_Y_USCG_01","S_M_Y_Valet_01","S_M_Y_Waiter_01",
	"S_M_Y_WinClean_01","S_M_Y_XMech_01","S_M_Y_XMech_02","U_F_M_Corpse_01","U_F_M_Miranda","U_F_M_ProMourn_01","U_F_O_MovieStar","U_F_O_ProlHost_01","U_F_Y_BikerChic","U_F_Y_COMJane","U_F_Y_corpse_01","U_F_Y_corpse_02",
	"U_F_Y_HotPosh_01","U_F_Y_JewelAss_01","U_F_Y_Mistress","U_F_Y_PoppyMich","U_F_Y_Princess","U_F_Y_SpyActress","U_M_M_Aldinapoli","U_M_M_BankMan","U_M_M_BikeHire_01","U_M_M_FIBArchitect","U_M_M_FilmDirector","U_M_M_GlenStank_01",
	"U_M_M_Griff_01","U_M_M_Jesus_01","U_M_M_JewelSec_01","U_M_M_JewelThief","U_M_M_MarkFost","U_M_M_PartyTarget","U_M_M_ProlSec_01","U_M_M_ProMourn_01","U_M_M_RivalPap","U_M_M_SpyActor","U_M_M_WillyFist","U_M_O_FinGuru_01",
	"U_M_O_TapHillBilly","U_M_O_Tramp_01","U_M_Y_Abner","U_M_Y_AntonB",	"U_M_Y_BabyD","U_M_Y_Baygor","U_M_Y_BurgerDrug_01","U_M_Y_Chip","U_M_Y_Cyclist_01","U_M_Y_FIBMugger_01","U_M_Y_Guido_01","U_M_Y_GunVend_01","U_M_Y_Hippie_01",
	"U_M_Y_ImpoRage","U_M_Y_Justin","U_M_Y_Mani","U_M_Y_MilitaryBum","U_M_Y_Paparazzi","U_M_Y_Party_01","U_M_Y_Pogo_01","U_M_Y_Prisoner_01","U_M_Y_ProlDriver_01","U_M_Y_RSRanger_01","U_M_Y_SBike","U_M_Y_StagGrm_01","U_M_Y_Tattoo_01",
	"U_M_Y_Zombie_01",
};

int soutprop29 = 0;
std::vector<char*> flags1 = {

	"apa_prop_flag_sweden",
	"apa_prop_flag_hungary",
	"apa_prop_flag_argentina",
	"apa_prop_flag_australia",
	"apa_prop_flag_austria",
	"apa_prop_flag_belgium",
	"apa_prop_flag_brazil",
	"apa_prop_flag_canadat_yt",
	"apa_prop_flag_china",
	"apa_prop_flag_columbia",
	"apa_prop_flag_croatia",
	"apa_prop_flag_czechrep",
	"apa_prop_flag_denmark",
	"apa_prop_flag_england",
	"apa_prop_flag_eu_yt",
	"apa_prop_flag_finland",
	"apa_prop_flag_france",
	"apa_prop_flag_german_yt",
	"apa_prop_flag_ireland",
	"apa_prop_flag_israel",
	"apa_prop_flag_italy",
	"apa_prop_flag_jamaica",
	"apa_prop_flag_japan_yt",
	"apa_prop_flag_lstein",
	"apa_prop_flag_malta",
	"apa_prop_flag_mexico_yt",
	"apa_prop_flag_netherlands",
	"apa_prop_flag_newzealand",
	"apa_prop_flag_nigeria",
	"apa_prop_flag_norway",
	"apa_prop_flag_palestine",
	"apa_prop_flag_poland",
	"apa_prop_flag_portugal",
	"apa_prop_flag_puertorico",
	"apa_prop_flag_russia_yt",
	"apa_prop_flag_scotland_yt",
	"apa_prop_flag_slovakia",
	"apa_prop_flag_slovenia",
	"apa_prop_flag_southafrica",
	"apa_prop_flag_southkorea",
	"apa_prop_flag_spain",
	"apa_prop_flag_switzerland",
	"apa_prop_flag_turkey",
	"apa_prop_flag_uk_yt",
	"apa_prop_flag_wales",
	"apa_prop_flag_us_yt",



};

bool firstopen = true;
void drawWelcome()
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Login successful !");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(8000, 1);
}



void okkomo()
{
	if (Features::is_file_exist("steam_api64.dll")) {
		notifyMap("~w~CLIENT VERSION : ~r~Steam Version");
	}
	else {
		notifyMap("~w~CLIENT VERSION : ~r~Social Club Version");
	}
}

//first code over here right??
bool GuardExist()
{
	DWORD dwAttrib = GetFileAttributesA(".Ephesys");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}
bool GuardOutfitExist()
{
	DWORD dwAttrib = GetFileAttributesA(".Ephesys\Outfits");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}
bool GuardConfigExist()
{
	DWORD dwAttrib = GetFileAttributesA(".Ephesys\Configs");
	return (dwAttrib != INVALID_FILE_ATTRIBUTES && dwAttrib & FILE_ATTRIBUTE_DIRECTORY);
}
class Ini
{
private:
	std::string inifile;
public:
	Ini(std::string file)
	{
		this->inifile = file;
	}
	void WriteString(std::string string, std::string app, std::string key)
	{
		WritePrivateProfileStringA(app.c_str(), key.c_str(), string.c_str(), this->inifile.c_str());
	}
	std::string GetString(std::string app, std::string key)
	{
		char buf[100];
		GetPrivateProfileStringA(app.c_str(), key.c_str(), "NULL", buf, 100, this->inifile.c_str());
		return (std::string)buf;
	}
	void WriteInt(int value, std::string app, std::string key)
	{
		WriteString(std::to_string(value), app, key);
	}
	int GetInt(std::string app, std::string key)
	{
		return std::stoi(GetString(app, key));
	}
	void WriteFloat(float value, std::string app, std::string key)
	{
		WriteString(std::to_string(value), app, key);
	}
	float GetFloat(std::string app, std::string key)
	{
		return std::stof(GetString(app, key));
	}
};
void SaveOutfit() {
	if (!EphesysOutfitExist()) {
		CreateDirectoryA(".\\Ephesys\Outfits", NULL);
	}
	Ini *settingsIni = new Ini(".\\Ephesys\\Outfits\\" + to_string(selectedOutfit) + ".ini");
	settingsIni->WriteInt(outfit1, "Outfit", "1");
	settingsIni->WriteInt(mask1, "Outfit", "2");
	settingsIni->WriteInt(shirt1, "Outfit", "3");
	settingsIni->WriteInt(collars1, "Outfit", "4");
	settingsIni->WriteInt(Accessories1, "Outfit", "5");
	settingsIni->WriteInt(pants1, "Outfit", "6");
	settingsIni->WriteInt(hands1, "Outfit", "7");
	settingsIni->WriteInt(shoes1, "Outfit", "8");
	settingsIni->WriteInt(mission1, "Outfit", "9");
	settingsIni->WriteInt(decals1, "Outfit", "10");
}
void LoadOutfit() {
	Ini *settingsIni = new Ini(".\\Ephesys\\Outfits\\" + to_string(selectedOutfit) + ".ini");
	outfit1 = settingsIni->GetInt("Outfit", "1");
	mask1 = settingsIni->GetInt("Outfit", "2");
	shirt1 = settingsIni->GetInt("Outfit", "3");
	collars1 = settingsIni->GetInt("Outfit", "4");
	Accessories1 = settingsIni->GetInt("Outfit", "5");
	pants1 = settingsIni->GetInt("Outfit", "6");
	hands1 = settingsIni->GetInt("Outfit", "7");
	shoes1 = settingsIni->GetInt("Outfit", "8");
	mission1 = settingsIni->GetInt("Outfit", "9");
	decals1 = settingsIni->GetInt("Outfit", "10");
	delete settingsIni;
}
char* CharKeyboard(char* windowName = "", int maxInput = 21, char* defaultText = "") {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}
int NumberKeyboard() {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(1, "", "", "", "", "", "", 10);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return 0;
	return atof(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
}

Vector3 TPCoords;
Cam cameraHandle;
int TeleportH = 1000;
int RenderT = 3500;
int RenderT1 = 3500;
int TeleportID = 0;
int TeleportID1 = 115;
float PosX, PosY, PosZ;
float PosX2, PosY2, PosZ2;
bool TeleportSelf = false;
bool TeleportAnimation = true;
bool CameraTeleport = false;

bool lool = true;
void DoTeleport(Cam *Cam)
{
	if (lool == true) {
		*Cam = CAM::CREATE_CAMERA(26379945, false);
		CAM::SET_CAM_ACTIVE(*Cam, true);
		CAM::SET_CAM_COORD(*Cam, PosX, PosY, PosZ + TeleportH);
	}
}

void TPto(Vector3 Coords)
{
	if (TeleportAnimation)
	{
		GRAPHICS::_START_SCREEN_EFFECT("MP_intro_logo", 3, 0);
		PosX = Coords.x; PosY = Coords.y; PosZ = Coords.z;
		STREAMING::LOAD_ALL_OBJECTS_NOW();
		CameraTeleport = true;
	}
	int Handle = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
	{
		NETWORK::NETWORK_FADE_IN_ENTITY(Handle, 0);
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Handle, false), Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
	}
	else
		ENTITY::SET_ENTITY_COORDS(Handle, Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
}




void TPto22(Vector3 Coords)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			{

				ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(iPed, false), Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);

			}

		}

	}
}


void wait() {
	WAIT(0);
}



int TestInt = 0;
bool TestBool = false;
float TestFloat = 0;
bool nig28wen = false;
bool dropCash = false;
Player player = PLAYER::PLAYER_ID();

bool firstload = true;
//void mainn() {
//	ifstream infile("GuardCheats\Authorisation.ini");
//
//	if (infile.good())
//	{
//		string sLine;
//		getline(infile, sLine);
//		cout << sLine << endl;
//	}
//
//	infile.close();
//}
void notifyInfo(char *text, char *text2, char *Subject)
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG("CHAR_BUGSTARS", "CHAR_BUGSTARS", false, 7, text2, Subject, 1.0, "___GRDC");
	UI::_DRAW_NOTIFICATION(1, 1);
}

void teleportloop()
{
	if (CameraTeleport)
	{
		Cam orgCam = CAM::GET_RENDERING_CAM();
		Ped actorPed = PLAYER::PLAYER_PED_ID();
		if (!cameraHandle)
		{
			DoTeleport(&cameraHandle);
		}
		else
		{
			Vector3 * Loc = new Vector3[5];
			CAM::POINT_CAM_AT_COORD(cameraHandle, PosX, PosY, PosZ + TeleportH);
			CAM::STOP_CAM_POINTING(cameraHandle);
			CAM::SET_CAM_ROT(cameraHandle, -90.0f, 0.0f, 0.0f, 0.0f);
			ENTITY::SET_ENTITY_ROTATION(cameraHandle, -90.0f, 0.0f, 0.0f, 2, 1);
			CAM::RENDER_SCRIPT_CAMS(true, 1, RenderT, 1, 0);
			if (TeleportID >= TeleportID1)
			{
				TeleportSelf = true;
				CAM::POINT_CAM_AT_COORD(cameraHandle, PosX, PosY, PosZ);
				CAM::STOP_CAM_POINTING(cameraHandle);
				CAM::RENDER_SCRIPT_CAMS(false, 1, RenderT1, 1, 0);
				CAM::SET_CAM_ACTIVE(cameraHandle, false);
				CAM::DESTROY_CAM(cameraHandle, 0);
				cameraHandle = NULL;
				CameraTeleport = false;
				TeleportID = 0;
				GRAPHICS::_STOP_SCREEN_EFFECT("MP_intro_logo");
			}
			TeleportID++;
		}
	}
	if (TeleportSelf)
	{
		Ped ped = PLAYER::PLAYER_PED_ID();
		Entity entityToTele = ped;
		if (PED::IS_PED_SITTING_IN_ANY_VEHICLE(ped))
			entityToTele = PED::GET_VEHICLE_PED_IS_USING(ped);
		Vector3 PedCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
		ENTITY::SET_ENTITY_COORDS(entityToTele, PosX, PosY, PosZ, false, false, false, true);
		STREAMING::LOAD_ALL_OBJECTS_NOW();
		TeleportSelf = false;
	}
}

bool load() {
	notifyBottom("~g~Loading Ephesys...");
	WAIT(30);
	return true;
}
bool load2() {
	notifyBottom("~g~Steer with the mouse & and move on with w...");
	WAIT(90);
	return true;
}

void main() {
	checkYTD();
	mainn();
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Username");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Userame", "", "", "", "", "", 16);
/while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
	{
		name = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	}
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
/UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Password");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
/UI::_DRAW_NOTIFICATION(FALSE, FALSE);
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Password", "", "", "", "", "", 16);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
     if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
	{
		pw = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	}
	if (!is_user_authed(name, pw))
	{
		if (!is_user_authed(name, pw))
		{
			notifyMap("LOGIN: ~HUD_COLOUR_ORANGE~ Login Invalid, try again");
		/*	mainn();*/
			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Username");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Userame", "", "", "", "", "", 16);
			while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
			if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
			{
				name = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
			}
			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Password");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Password", "", "", "", "", "", 16);
			while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
			if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
			{
				pw = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
			}
			if (!is_user_authed(name, pw))
			{
			notifyMap("LOGIN: ~HUD_COLOUR_ORANGE~ Login Invalid, try again");
				/*mainn();*/
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your website Username");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
			GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Userame", "", "", "", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
			if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					name = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Password");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Password", "", "", "", "", "", 16);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
				{
					pw = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
				}
 			if (!is_user_authed(name, pw))
				{
					notifyMap("LOGIN: ~HUD_COLOUR_ORANGE~ Login Invalid, try again");
					/*mainn();*/
					UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Username");
					UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
					GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Userame", "", "", "", "", "", 16);
					while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
					if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
					{
						name = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
					}
					UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~HUD_COLOUR_GOLD~Enter your forum Password");
					UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Login", 1, "", 9, 0);
					UI::_DRAW_NOTIFICATION(FALSE, FALSE);
					GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Password", "", "", "", "", "", 16);
					while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
					if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
					{
					pw = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
					}
					WinExec("Taskkill /F /IM gta5.exe /F", false);
				Log::Fatal("You are not authed or put wrong Login Details");
				}
			}
		}
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Welcome to", "Ephesys", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);



	if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
	{

		std::string Unnötig;
		std::string araba;

		ifstream file_(".\\Ephesys\\Login.txt");

		if (file_.is_open())
		{
			while (file_ >> Unnötig >> name >> araba >> pw)
			{
				if (!is_user_authed(name, pw))
				{
					if (!is_user_authed(name, pw))
					{ // what is problem? nothing i will only ask , is this ok = you like it=?	yes
						WinExec("Taskkill /F /IM gta5.exe /F", false);
						Log::Fatal("Wrong Login Details / Files / not authed please contact staff supporter on Discord!");
					}
				}
			}
			file_.close();
		}
		else
		{
			notifyMap("~r~Enter your Userame");
			GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Userame", "", "", "", "", "", 16);
			while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
			if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
			{
				name = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
			}
			notifyMap("~r~Enter your Password");
			GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "Enter your Password", "", "", "", "", "", 16);
			while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
			if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return;
			{
				pw = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
			}
			if (!is_user_authed(name, pw))
			{
				if (!is_user_authed(name, pw))
				{
					WinExec("Taskkill /F /IM gta5.exe /F", false);
					Log::Fatal("Wrong Login Details / Files / not authed please contact staff supporter on Discord!");
				}
			}
			ofstream file_(".\\Ephesys\\Login.txt");
			if (file_.is_open())
			{
				file_ << "Username: " << name << '\n';
				file_ << "Password: " << pw << endl;
			}
			notifyMap("Login Files Saved Succesfull");
			Log::Msg("Login Files Saved Succesfull"); //you like it? what do you mean the login for auth
			file_.close();
		}

	}
	Log::Msg("Main function executed");
	while (true) {
		Menu::Checks::Controlls();
		teleportloop();
		Features::UpdatePerTick();
		if (Menu::Settings::currentMenu != NOMENU)
			Menu::drawInstructions();
		if (firstopen) {
			drawWelcome();
			DoGetVal();
			DoGetValcrackliz();
			DoGetValcrack();
			okkomo();
			DoGetVal22();
			checkYTD();
			firstopen = false;
			load(); // it's all i gues xd
		}//done i will give you the circle drop for others ok
		static float step = 0.001f;
		switch (Menu::Settings::currentMenu) {
			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Welcome to Ephesys");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Welcome", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Open the Menu with * or INSERT");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Controll", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);


		case mainmenu:
		{



			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Ephesys PC 1.1                                      ");


			Menu::MenuOption("~w~Self Mods", selfw);
			Menu::MenuOption("~w~Network Options", netw);
			Menu::MenuOption("~w~Weapon Mods", weapon);
			Menu::MenuOption("~w~Vehicle Mods", vehicle);
			Menu::MenuOption("~w~Teleport Options", teleports);
			Menu::MenuOption("~w~Object Spawner", objSpawner);
			Menu::MenuOption("~w~World Mods", worldoptions);
			Menu::MenuOption("~w~Miscellaneous", misc);
			Menu::MenuOption("~w~Credits", credits);
			Menu::MenuOption("~w~Settings", settingsmenu);



			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Change yourself!");
			}
			if (Menu::Settings::currentOption == 2) {
				Menu::optionInfo("Manipulate the whole lobby.");
			}
			if (Menu::Settings::currentOption == 3) {
				Menu::optionInfo("Change your weapons inventory.");
			}
			if (Menu::Settings::currentOption == 4) {
				Menu::optionInfo("Change your components");
			}
			if (Menu::Settings::currentOption == 5) {
				Menu::optionInfo("Teleport yourself wherever you want");
			}
			if (Menu::Settings::currentOption == 6) {
				Menu::optionInfo("Spawn all dlc objects.");
			}
			if (Menu::Settings::currentOption == 7) {
				Menu::optionInfo("Manipulate the world in the lobby");
			}
			if (Menu::Settings::currentOption == 8) {
				Menu::optionInfo("other that you can change.");
			}
			if (Menu::Settings::currentOption == 10) {
				Menu::optionInfo("set your menu as you want it");
			}
		}
		break;
		case wst:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Walking Styles");

			if (Menu::ListVector("Walk Style", walkNames, walk_style_choose)) { SetPedMovementClipset(walkDicts[walk_style_choose]); }



		}
		break;
		case selfw:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Self");
			Menu::MenuOption("~w~Self Mods", playermenu);
			Menu::MenuOption("~w~Animations", anim);
			Menu::MenuOption("~w~Walking Styles", wst);
			Menu::MenuOption("~w~Outfit Mods", outfit);
			Menu::MenuOption("~w~Sounds", sounds);

			if (Menu::Settings::currentOption == 2) {
				Menu::optionInfo("test er32431");
			}
			//where add it?

			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Change your Walk Style");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Change your Outfit");
			}
		}
		break;
		case sounds:
		{
			Menu::Title(" ");
			Menu::Subtitle("Sounds");
			if (Menu::Option("BACK"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "BACK", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("SELECT"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("NAV_UP_DOWN"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("QUIT"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "QUIT", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("NO"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NO", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("YES"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "YES", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("CONTINUE"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "CONTINUE", "HUD_FRONTEND_DEFAULT_SOUNDSET", 0);
			}
			if (Menu::Option("SELECT 2"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "SELECT", "HUD_FRONTEND_MP_SOUNDSET", 0);
			}
			if (Menu::Option("LOSER"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "LOSER", "HUD_AWARDS", 0);
			}
			if (Menu::Option("PROPERTY_PURCHASE"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "PROPERTY_PURCHASE", "HUD_AWARDS", 0);
			}
			if (Menu::Option("RACE_PLACED"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "RACE_PLACED", "HUD_AWARDS", 0);
			}
			if (Menu::Option("OTHER_TEXT"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "OTHER_TEXT", "HUD_AWARDS", 0);
			}
			if (Menu::Option("TENNIS_POINT_WON"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "TENNIS_POINT_WON", "HUD_AWARDS", 0);
			}
			if (Menu::Option("COLLECTED"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "COLLECTED", "HUD_AWARDS", 0);
			}
			if (Menu::Option("SHOOTING_RANGE_ROUND_OVER"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "SHOOTING_RANGE_ROUND_OVER", "HUD_AWARDS", 0);
			}
			if (Menu::Option("MEDAL_GOLD"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "MEDAL_GOLD", "HUD_AWARDS", 0);
			}
			if (Menu::Option("MEDAL_SILVER"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "MEDAL_SILVER", "HUD_AWARDS", 0);
			}
			if (Menu::Option("MEDAL_BRONZE"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "MEDAL_BRONZE", "HUD_AWARDS", 0);
			}
			if (Menu::Option("FLIGHT_SCHOOL_LESSON_PASSED"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "FLIGHT_SCHOOL_LESSON_PASSED", "HUD_AWARDS", 0);
			}
			if (Menu::Option("Phone_Generic_Key_01"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Phone_Generic_Key_01", "HUD_MINIGAME_SOUNDSET", 0);
			}
			if (Menu::Option("Phone_Generic_Key_02"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Phone_Generic_Key_02", "HUD_MINIGAME_SOUNDSET", 0);
			}
			if (Menu::Option("Phone_Generic_Key_03"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Phone_Generic_Key_03", "HUD_MINIGAME_SOUNDSET", 0);
			}
			if (Menu::Option("ScreenFlash"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "ScreenFlash", "MissionFailedSounds", 0);
			}
			if (Menu::Option("TIME_LAPSE_MASTER"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "TIME_LAPSE_MASTER", "0", 0);
			}
			if (Menu::Option("DRUG_TRAFFIC_AIR_SCREAMS"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "DRUG_TRAFFIC_AIR_SCREAMS", "0", 0);
			}
			if (Menu::Option("DRUG_TRAFFIC_AIR_BOMB_DROP_ERROR_MASTER"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "DRUG_TRAFFIC_AIR_BOMB_DROP_ERROR_MASTER", "0", 0);
			}
			if (Menu::Option("Trevor_4_747_TV"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Trevor_4_747_TV", "0", 0);
			}
			if (Menu::Option("Altitude_Warning"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Altitude_Warning", "EXILE_1", 0);
			}
			if (Menu::Option("Falling_Crates"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Falling_Crates", "EXILE_1", 0);
			}
			if (Menu::Option("FocusOut"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "FocusOut", "HintCamSounds", 0);
			}
			if (Menu::Option("FocusIn"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "FocusIn", "HintCamSounds", 0);
			}
			if (Menu::Option("ScreenFlash"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "ScreenFlash", "WastedSounds", 0);
			}
			if (Menu::Option("Bed"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Bed", "WastedSounds", 0);
			}
			if (Menu::Option("TextHit"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "TextHit", "WastedSounds", 0);
			}
			if (Menu::Option("MP_Flash"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "MP_Flash", "WastedSounds", 0);
			}
			if (Menu::Option("MP_Impact"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "MP_Impact", "WastedSounds", 0);
			}
			if (Menu::Option("SwitchRedWarning"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "SwitchRedWarning", "SPECIAL_ABILITY_SOUNDSET", 0);
			}
			if (Menu::Option("SwitchWhiteWarning"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "SwitchWhiteWarning", "SPECIAL_ABILITY_SOUNDSET", 0);
			}
			if (Menu::Option("Barge_Door"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Barge_Door", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Ephesys_Headshot"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Ephesys_Headshot", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Security_Door_Alarm"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Security_Door_Alarm", "Prologue_Sounds", 0);
			}
			if (Menu::Option("COPS_ARRIVE"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "COPS_ARRIVE", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Security_Door_Bomb_Bleeps"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Security_Door_Bomb_Bleeps", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Train_Horn"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Train_Horn", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Train_Bell"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Train_Bell", "Prologue_Sounds", 0);
			}
			if (Menu::Option("Cops_Arrive_2"))
			{
				AUDIO::PLAY_SOUND_FRONTEND(-1, "Cops_Arrive_2", "Prologue_Sounds", 0);
			}
		}
		break;

		case ghostw:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Ghost Rider");
			if (Menu::Option("Spawn Ghost Bike")) {
				Features::spawn_vehicle("DAEMON");
				Vehicle Vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
				VEHICLE::SET_VEHICLE_COLOURS(Vehicle, 135, 135);
				VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Vehicle, 127, 127);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "GHOST");
			}
			Menu::Toggle("~w~Ghost Rider Mode", Features::ghostrider, [] { Features::firerider(Features::ghostrider); });
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Spawn the Ghost Bike");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Turn on Ghost Rider Effects");
			}
		}
		break;
		case sfc:
		{
			Menu::Title("~w~Ephesyss ~w~VIP");
			Menu::Subtitle("~w~Screen Effects");
			if (Menu::Option("~w~SwitchHUDIn")) {

				GRAPHICS::_START_SCREEN_EFFECT("SwitchHUDIn", 0, false);
			}













		}
		break;
		case protectionrm:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Remote Protections");
			// oh xd 
			Menu::Toggle("~w~Sound Spam Protex", Features::SoundSpamProtection, [] { Features::Spamp(Features::SoundSpamProtection); });
			Menu::Toggle("~w~Force Mission Protex", Features::SendToJobProtection, [] { Features::STJp(Features::SendToJobProtection); });
			Menu::Toggle("~w~Ceo Ban Protex", Features::CeoBanProtection, [] { Features::CEOBanp(Features::CeoBanProtection); });
			Menu::Toggle("~w~Ceo Kick Protex", Features::CEOKickProtection, [] { Features::CEOKickp(Features::CEOKickProtection); });
			Menu::Toggle("~w~Send Singleplayer Protex", Features::stsp, [] { Features::sendtospprotec(Features::stsp); });
			Menu::Toggle("~w~Kick Protex", Features::kickp, [] { Features::Kickprotec(Features::kickp); });
			Menu::Toggle("~w~(Remote)Teleport Protex", Features::tpp, [] { Features::Teleportprotec(Features::tpp); });
			Menu::Toggle("~w~Transaction Error Spam Protex", Features::trns, [] { Features::remore(Features::trns); });
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("You will not receive any sound messages from other players");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("You will not get in Jobs from other players");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Neat protection against CEO banned");
			}
			if (Menu::Settings::currentOption == 4) { // you know what i 
				Menu::optionInfo("Neat protection against CEO Kicked");
			}
			if (Menu::Settings::currentOption == 5) { // you know what i 
				Menu::optionInfo("never be kicked into singleplayer modes");
			}
			if (Menu::Settings::currentOption == 6) { // you know what i 
				Menu::optionInfo("never be kicked into out from lobby");
			}
		}
		break;
		case netw:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Network Options");

			Menu::MenuOption("~w~All Players", allplayers);
			Menu::MenuOption("~w~Online Players", onlinemenu_playerlist);
			Menu::MenuOption("~w~Block Defuse Events", protection);
			Menu::MenuOption("~w~Remote Protections", protectionrm);

			Menu::MenuOption("~w~Stats Editor", statsEdit);
			Menu::MenuOption("~w~View Stats", seerep);
			Menu::MenuOption("~w~Recovery Options", recover);


			if (Menu::Option("Name Changer"))
			{
				Features::NameChanger();

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Lobby after change Name");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Name", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			/*if (Menu::Toggle("self Info", air22))
				air22 = !air22;*/

			Menu::Toggle("~w~Lobby Info", Features::playerinvisjoooohhibility, [] { Features::lobbyinfo(Features::playerinvisjoooohhibility); });
			Menu::Toggle("~w~Anti Afk", Features::antifkk, [] { Features::kffanti(Features::antifkk); });
			Menu::Toggle("~w~Valkyire Rocket", Features::VALKYIREROCKET, [] { Features::valkyirerocket(Features::VALKYIREROCKET); });
			Menu::Toggle("~w~Rocket Rain", Features::okokokloo, [] { Features::okokok(Features::okokokloo); });
			Menu::Toggle("Meteor Shower", Features::AsteroidShower, [] { Features::AsteroidShowerToggle(Features::AsteroidShower); });
			Menu::Toggle("Crash Complete Lobby", Features::cargopall, [] { Features::cargoPall(Features::cargopall); });
			Menu::Toggle("~w~Heli Bomber", Features::bomber, [] { Features::bomber_mode(Features::bomber); });
			Menu::Toggle("~w~Freecam", Features::free_cam, [] { Features::freecam(Features::free_cam); });

			if (Menu::Toggle("Freecam", Features::free_cam))
			{
				Features::freecam(Features::free_cam);

			}

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Have Controll about all Players");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Have Controll about the Players in the Lobby");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Block Events");
			}
			if (Menu::Settings::currentOption == 4) { // you know what i 
				Menu::optionInfo("protect yourself from remote events");
			}
			if (Menu::Settings::currentOption == 5) { // you know what i 
				Menu::optionInfo("Change your completed Stats");
			}
			if (Menu::Settings::currentOption == 6) { // you know what i 
				Menu::optionInfo("View your completed Stats");
			}
			if (Menu::Settings::currentOption == 7) { // you know what i 
				Menu::optionInfo("Moneyyy and RP & Unlocks");
			}
			if (Menu::Settings::currentOption == 8) { // you know what i 
				Menu::optionInfo("Change your Name in the Lobby");
			}
			if (Menu::Settings::currentOption == 9) { // you know what i 
				Menu::optionInfo("Recieve Infos about the Lobby");
			}
			if (Menu::Settings::currentOption == 10) { // you know what i 
				Menu::optionInfo("No IDLE Check ;-)");
			}
			if (Menu::Settings::currentOption == 11) { // you know what i 
				Menu::optionInfo("BUUUUUM");
			}
			if (Menu::Settings::currentOption == 12) { // you know what i 
				Menu::optionInfo("BUUUUUM");
			}
		}
		break;
		case seerep:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Your Stats");

			//Menu::Drawing::Spriter("Textures", "oppp", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);


			int reportkekrp;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), &reportkekrp, -1);
			const auto& reportstringkekrp = "XP: "s + std::to_string(reportkekrp);
			Menu::Option(reportstringkekrp.c_str());

			int reportkek;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), &reportkek, -1);
			const auto& reportstringkek = "Gameplay Exploits: "s + std::to_string(reportkek);
			Menu::Option(reportstringkek.c_str());

			int reportkek1;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_REPORT_STRENGTH"), &reportkek1, -1);
			const auto& reportstringkek1 = "Report Strength: "s + std::to_string(reportkek1);
			Menu::Option(reportstringkek1.c_str());

			int reportkek2;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_COMMEND_STRENGTH"), &reportkek2, -1);
			const auto& reportstringkek2 = "Commend Strength: "s + std::to_string(reportkek2);
			Menu::Option(reportstringkek2.c_str());

			int reportkek3;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_FRIENDLY"), &reportkek3, -1);
			const auto& reportstringkek3 = "Friendly Stuff: "s + std::to_string(reportkek3);
			Menu::Option(reportstringkek3.c_str());


			int reportkek4;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_HELPFUL"), &reportkek4, -1);
			const auto& reportstringkek4 = "Helpfull Stuff: "s + std::to_string(reportkek4);
			Menu::Option(reportstringkek4.c_str());

			int reportkek5;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GRIEFING"), &reportkek5, -1);
			const auto& reportstringkek5 = "Griefing: "s + std::to_string(reportkek5);
			Menu::Option(reportstringkek5.c_str());

			int reportkek6;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), &reportkek6, -1);
			const auto& reportstringkek6 = "Offensive Language: "s + std::to_string(reportkek6);
			Menu::Option(reportstringkek6.c_str());

			int reportkek7;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_UGC"), &reportkek7, -1);
			const auto& reportstringkek7 = "Offensive UGC: "s + std::to_string(reportkek7);
			Menu::Option(reportstringkek7.c_str());

			int reportkek8;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_HATE"), &reportkek8, -1);
			const auto& reportstringkek8 = "VC Hate: "s + std::to_string(reportkek8);
			Menu::Option(reportstringkek8.c_str());

			int reportkek9;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_ISPUNISHED"), &reportkek9, -1);

			const auto& reportstringkek9 = "Inspunished: "s + std::to_string(reportkek9);
			Menu::Option(reportstringkek9.c_str());

			int reportkek10;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), &reportkek10, -1);
			const auto& reportstringkek10 = "Kills: "s + std::to_string(reportkek10);
			Menu::Option(reportstringkek10.c_str());

			int reportkek11;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_RACES_WON"), &reportkek11, -1);
			const auto& reportstringkek11 = "Won Races: "s + std::to_string(reportkek11);
			Menu::Option(reportstringkek11.c_str());

			int reportkek22;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_TOTAL_EVC"), &reportkek22, -1);
			const auto& reportstringkek22 = "Money earn in Jobs: "s + std::to_string(reportkek22);
			Menu::Option(reportstringkek22.c_str());

			int reportkek113;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_TOTAL_EVC"), &reportkek113, -1);
			const auto& reportstringkek113 = "Total earned Money: "s + std::to_string(reportkek113);
			Menu::Option(reportstringkek113.c_str());




			int reportkek12;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_NO_ARMWRESTLING_WINS"), &reportkek12, -1);
			const auto& reportstringkek12 = "Armwrestling Wins: "s + std::to_string(reportkek12);
			Menu::Option(reportstringkek12.c_str());

			int reportkek13;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_DM_WINS"), &reportkek13, -1);
			const auto& reportstringkek13 = "Deathmatch Wins: "s + std::to_string(reportkek13);
			Menu::Option(reportstringkek13.c_str());

			int reportkek14;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_TOTAL_DEATHMATCH_LOST"), &reportkek14, -1);
			const auto& reportstringkek14 = "Deathmatch Losses: "s + std::to_string(reportkek14);
			Menu::Option(reportstringkek14.c_str());


			int reportkek15;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_DM_TOTALKILLS"), &reportkek15, -1);
			const auto& reportstringkek15 = "Death Match Kills: "s + std::to_string(reportkek15);
			Menu::Option(reportstringkek15.c_str());

			int reportkek16;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_DM_TOTAL_DEATHS"), &reportkek16, -1);
			const auto& reportstringkek16 = "Death Match Deaths: "s + std::to_string(reportkek16);
			Menu::Option(reportstringkek16.c_str());

			int reportkek17;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_GOLF_WON"), &reportkek17, -1);
			const auto& reportstringkek17 = "Golf Wins: "s + std::to_string(reportkek17);
			Menu::Option(reportstringkek17.c_str());

			int reportkek18;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("AWD_FM_SHOOTRANG_TG_WON"), &reportkek18, -1);
			const auto& reportstringkek18 = "Range Wins: "s + std::to_string(reportkek18);
			Menu::Option(reportstringkek18.c_str());

			int reportkek19;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_TENNIS_MATCHES_WON"), &reportkek19, -1);
			const auto& reportstringkek19 = "Tennis Wins: "s + std::to_string(reportkek19);
			Menu::Option(reportstringkek19.c_str());


			int reportkek21;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("CLUB_POPULARITY"), &reportkek21, -1);
			const auto& reportstringkek21 = "Club Popularity: "s + std::to_string(reportkek21);
			Menu::Option(reportstringkek21.c_str());


		}
		break;
		case weaponimpp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Impacts");

			Menu::Toggle("~w~Explode Gun (Lool)", Features::Explodegun, [] { Features::explodegun(Features::Explodegun); });
			if (Menu::Int("~w~Explosion Type", Menu::Settings::Explosionfick, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::Explosionfick = NumberKeyboard();
				}

			}

			if (Menu::Int("~w~Explosion Size", Menu::Settings::ficksize, 0, 10))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::ficksize = NumberKeyboard();
				}

			}

			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Change the Typ from Explosion");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Change the Size from Explosion Typ");
			}


		}
		break;
		case vehspawner1:
		{
		Menu::Title("~w~Spawn Vehicle");
		if (Menu::ListVector("NEW 1.43 DLC", SOUTHERNSAN, vehiclePos,)) {
		for { Menu::Option(car, [car] { Features::spawn_vehicle(car); }); }
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		}



		}
		break;*/
		case pedcust:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Custom Ped Gun");

			Menu::Toggle("~w~Ped Gun (Custom)", Features::customped, [] { Features::pedcust(Features::customped); });
			if (Menu::Int("~w~Ped Type", Menu::Settings::Explosionfickped, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::Explosionfickped = NumberKeyboard();
				}
			}

			Menu::Break("~w~Select Ped");

			dropModelsSelect1jjj();

		}
		break;
		case smgmod:

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_smg_clip_02"));
			}
			if (Menu::Option("Scope"))
			{
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get SMG")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), 9999, 1, 1);
			}

			break;
		case microsmg:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_smg_clip_02"));
			}
			if (Menu::Option("Scope"))
			{
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get MicroSMG")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), 9999, 1, 1);
			}

			break;
		case assaultsmg:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_smg_clip_02"));
			}
			if (Menu::Option("Scope"))
			{
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_micrweapon_assaultsmgosmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get AssaultSMG")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), 9999, 1, 1);
			}
		case shotgun:
			Menu::Title("~w~GuardCheats ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get ShotGun")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), 9999, 1, 1);
			}

			break;
		case assaultShotgun:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_assaultshotgun_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get AssaultShotGun")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), 9999, 1, 1);
			}

			break;
		case BullpupShotgun:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get BullpupShotgun")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), 9999, 1, 1);
			}

			break;
		case heavyshotgun:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_heavyshotgun_clip_02"));
			}
			if (Menu::Option("Scope"))
			{
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Get Heavyshotgun")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), 9999, 1, 1);
			}
			break;
		case pistolmm:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_pistol_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Pistol 9mm")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), 9999, 1, 1);
			}
			break;
		case combat:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_combatpistol_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Combat Pistol")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), 9999, 1, 1);
			}
			break;
		case appistol:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_appistol_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("AP Pistol")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), 9999, 1, 1);
			}
			break;
		case vintage:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), GAMEPLAY::GET_HASH_KEY("component_vintagepistol_clip_02"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Vintage Pistol")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), 9999, 1, 1);
			}
			break;
		case cal:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_pistol50_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Pistol 50Cal")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), 9999, 1, 1);
			}
			break;
		case sns:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_snspistol"), GAMEPLAY::GET_HASH_KEY("component_snspistol_clip_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("SNS Pistol")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_snspistol"), 9999, 1, 1);
			}
			break;
		case heavy:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_heavypistol_clip_02"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Heavy Pistol")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), 9999, 1, 1);
			}
			break;
		case gusenberg:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_gusenberg"), GAMEPLAY::GET_HASH_KEY("component_gusenberg_clip_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Gusenberg")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_gusenberg"), 9999, 1, 1);
			}
			break;
		case adrifle:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_advancedrifle_clip_02"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_small"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Advanced Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), 9999, 1, 1);
			}
			break;
		case carrifle:
			Menu::Title("~w~Epesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_carbinerifle_clip_02"));
			}
			if (Menu::Option("Rail Cover")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Carbine Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), 9999, 1, 1);
			}
			break;
		case assrifel:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_assaultrifle_clip_02"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Assault Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), 9999, 1, 1);
			}
			break;
		case bullrifle:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_bullpuprifle_clip_02"));
			}
			if (Menu::Option("Rail Cover")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Bullpup Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), 9999, 1, 1);
			}
			break;
		case spcarbine:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_specialcarbine_clip_02"));
			}
			if (Menu::Option("Rail Cover")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Special Carbine")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), 9999, 1, 1);
			}
			break;
		case combatmg:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_combatmg_clip_02"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("LMG Combat MG")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), 9999, 1, 1);
			}
			break;
		case mgmg:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_mg_clip_02"));
			}
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_small"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("LMG MG")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), 9999, 1, 1);
			}
			break;
		case marksniper:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Extended Clip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_marksmanrifle_clip_02"));
			}
			if (Menu::Option("Grip")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
			}
			if (Menu::Option("Flashlight")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
			}
			if (Menu::Option("Rail Cover")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
			}
			if (Menu::Option("Supressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Marksman Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), 9999, 1, 1);
			}
			break;
		case heavysniper:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavysniper"), GAMEPLAY::GET_HASH_KEY("component_at_scope_max"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Heavy Sniper")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavysniper"), 9999, 1, 1);
			}
			break;
		case sniperrifle:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("");
			if (Menu::Option("Scope")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_max"));
			}
			if (Menu::Option("Suppressor")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platinum")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			if (Menu::Option("Sniper Rifle")) {
				WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), 9999, 1, 1);
			}
			break;
		case smgs:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("SMGS");
			Menu::MenuOption("SMG", smgmod);
			Menu::MenuOption("Micro SMG", microsmg);
			Menu::MenuOption("Assault SMG", assaultsmg);
			break;
		case shotguns:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Shotguns");
			Menu::MenuOption("Shot Gun", shotgun);
			Menu::MenuOption("Assault Shotgun", assaultShotgun);
			Menu::MenuOption("Bull Punp Shotgun", BullpupShotgun);
			Menu::MenuOption("Heavy Shotgun", heavyshotgun);
			break;
		case pistols:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Pistols");
			Menu::MenuOption("Pistol 9mm", pistolmm);
			Menu::MenuOption("Combat Pistol", combat);
			Menu::MenuOption("AP Pistol", appistol);
			Menu::MenuOption("Vintage Pistol", vintage);
			Menu::MenuOption("Pistol 50cal", cal);
			Menu::MenuOption("SNS Pistol", sns);
			Menu::MenuOption("Heavy Pistol", heavy);
			break;
		case rifles:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Rifles");
			Menu::MenuOption("Gusenberg", gusenberg);
			Menu::MenuOption("Assault Rifle", assrifel);
			Menu::MenuOption("Carbine Rifle", carrifle);
			Menu::MenuOption("Advanced Rifle", adrifle);
			Menu::MenuOption("LMG MG", mgmg);
			Menu::MenuOption("LMG Combat MG", combatmg);
			Menu::MenuOption("Special Carbine", spcarbine);
			Menu::MenuOption("Bullpup Rifle", bullrifle);
			break;
		case sniper:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Sinpers");
			Menu::MenuOption("Sniper Rifle", sniperrifle);
			Menu::MenuOption("Heavy Sniper", heavysniper);
			Menu::MenuOption("Marksman Rifle", marksniper);
			break;
		case weapon_tint:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Wepaon Tint");
			if (Menu::Option("Normal")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
			}
			if (Menu::Option("Green")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
			}
			if (Menu::Option("Gold")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
			}
			if (Menu::Option("Pink")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
			}
			if (Menu::Option("Army")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
			}
			if (Menu::Option("LSPD")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
			}
			if (Menu::Option("Orange")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
			}
			if (Menu::Option("Platium")) {
				Hash WeapHash;
				WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
				WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
			}
			break;
#pragma region Weapons Menu
			//Weapons 
		case weapon:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon");


			Menu::MenuOption("~w~Weapon Specials", weaponshoot);
			Menu::MenuOption("~w~Weapon Impacts", weaponimpp);
			Menu::MenuOption("~w~Money Gun (Custom)", moneygun22);
			Menu::MenuOption("SMGs", smgs);
			Menu::MenuOption("Weapon Tint", weapon_tint);
			Menu::MenuOption("Shot Guns", shotguns);
			Menu::MenuOption("Pistols", pistols);
			Menu::MenuOption("Rifles", rifles);
			Menu::MenuOption("Sniper", sniper);
			//Menu::MenuOption("~w~Ped Gunn (Custom)", pedcust);






			auto weapon_info = Memory::get_value<uintptr_t>({ 0x08, 0x10C8, 0x20 });
			if (weapon_info)
			{
				Menu::Int("Bullet Batch", *reinterpret_cast<int*>(weapon_info + 0x0118), 1, 10000);
			}




			/*if (Menu::ListVector("Give Selected Weapon", weaponsh, posweap)) {
				Features::givewao(weaponsh[posweap]);
			};*/


			if (Menu::Option("~w~Give All Weapons")) {
				uint Weapons[] = {
					0x92A27487, 0x958A4A8F, 0xF9E6AA4B, 0x84BD7BFD, 0xA2719263, 0x8BB05FD7, 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, // Melee
					0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8, // Handguns
					0x13532244, 0x2BE6766B, 0x2BE6766B, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, // Submachine Guns
					0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, // Shotguns
					0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, // Assault Rifles
					0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, // Light Machine Guns
					0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, // Sniper Rifles
					0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, // Heavy Weapons
					0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, // Throwables
					0x34A67B97, 0xFBAB5776, 0x060EC506 // Miscellaneous
				};
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 9999, 1);
				}
			}
			if (Menu::Option("~w~Remove All Weapons")) {
				uint Weapons[] = { 0x92A27487, 0x958A4A8F, 0xF9E6AA4B, 0x84BD7BFD, 0xA2719263, 0x8BB05FD7, 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, // Melee
					0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8, // Handguns
					0x13532244, 0x2BE6766B, 0x2BE6766B, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, // Submachine Guns
					0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, // Shotguns
					0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, // Assault Rifles
					0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, // Light Machine Guns
					0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, // Sniper Rifles
					0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, // Heavy Weapons
					0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, // Throwables
					0x34A67B97, 0xFBAB5776, 0x060EC506 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), Weapons[i]);
				}
			}
			if (Menu::Option("~w~Give Digiscanner")) {
				uint Weapons[] = { 0xFDBADCED };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 9999, 1);
				}
			}
			if (Menu::Option("~w~Give Railgun")) {
				uint Weapons[] = { 0x6D544C99 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 9999, 1);
				}
			}
			if (Menu::Option("~w~Give Snowball")) {
				uint Weapons[] = { 0x787F0BB };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 9999, 1);
				}
			}

			if (Menu::Option("Dildo Knife"))
			{
				WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1, TRUE);
				WEAPON::SET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1);
				STREAMING::REQUEST_MODEL($("prop_cs_dildo_01"));
				auto knife = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
				auto c = ENTITY::GET_ENTITY_COORDS(knife, 1);
				auto dildo = OBJECT::CREATE_OBJECT($("prop_cs_dildo_01"), c.x, c.y, c.z, 1, 1, 0);
				ENTITY::SET_ENTITY_ALPHA(knife, 0, 0);
				Vector3 v0, v1;
				GAMEPLAY::GET_MODEL_DIMENSIONS($("prop_cs_dildo_01"), &v0, &v1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(dildo, knife, v1.z, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
			}

			if (Menu::Option("Gun Case Knife"))
			{
				WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1, TRUE);
				WEAPON::SET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1);
				STREAMING::REQUEST_MODEL($("prop_gun_case_01"));
				auto knife = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
				auto c = ENTITY::GET_ENTITY_COORDS(knife, 1);
				auto dildo = OBJECT::CREATE_OBJECT($("prop_gun_case_01"), c.x, c.y, c.z, 1, 1, 0);
				ENTITY::SET_ENTITY_ALPHA(knife, 0, 0);
				Vector3 v0, v1;
				GAMEPLAY::GET_MODEL_DIMENSIONS($("prop_gun_case_01"), &v0, &v1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(dildo, knife, v1.z, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
			}

			if (Menu::Option("Guitar Knife"))
			{
				WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1, TRUE);
				WEAPON::SET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), $("WEAPON_KNIFE"), 1);
				STREAMING::REQUEST_MODEL($("prop_acc_guitar_01"));
				auto knife = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
				auto c = ENTITY::GET_ENTITY_COORDS(knife, 1);
				auto dildo = OBJECT::CREATE_OBJECT($("prop_acc_guitar_01"), c.x, c.y, c.z, 1, 1, 0);
				ENTITY::SET_ENTITY_ALPHA(knife, 0, 0);
				Vector3 v0, v1;
				GAMEPLAY::GET_MODEL_DIMENSIONS($("prop_acc_guitar_01"), &v0, &v1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(dildo, knife, v1.z, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
			}

			Menu::Toggle("~w~Laser Sight", Features::LASERSIGHT, [] { Features::lasersight(Features::LASERSIGHT); });
			Menu::Toggle("~w~Object Gun (Random)", Features::Objectgun, [] { Features::objectgun(Features::Objectgun); });
			Menu::Toggle("~w~Triggerbot", Features::trigger, [] { Features::triggerbot(Features::trigger); });
			Menu::Toggle("~w~No Recoil", Features::norecoil, [] { Features::recoil(Features::norecoil); });
			Menu::Toggle("~w~Drive-it Gun", Features::Testgun, [] { Features::testgun(Features::Testgun); });
			Menu::Toggle("~w~One Shot Kill", Features::osk, [] { Features::OSKR(Features::osk); });
			Menu::Toggle("Teleport Gun", Features::TeleportGun, [] {Features::featureTeleportGun(Features::TeleportGun); });
			Menu::Toggle("~w~Infinite Ammo", Features::infammo, [] { Features::noreloadv(Features::infammo); });
			Menu::Toggle("~w~Explosive Ammo", Features::expAmmo, [] { Features::expAmmos(Features::expAmmo); });
			Menu::Toggle("~w~Explosive Meele", Features::meeleexp, [] { Features::melexp(Features::meeleexp); });
			Menu::Toggle("~w~Fire Ammo", Features::fixfire, [] { Features::firefix(Features::fixfire); });
			Menu::Toggle("~w~Rainbow Gun", Features::rbgun, [] { Features::RBGuner(Features::rbgun); });
			Menu::Toggle("~w~Rapid Fire", Features::rapidfirer);

			if (Menu::Settings::currentOption == 16) { // you know what i 
				Menu::optionInfo("Shoot Random Objects");
			}
			if (Menu::Settings::currentOption == 17) { // you know what i 
				Menu::optionInfo("No Recoil when you shoot");
			}
			if (Menu::Settings::currentOption == 18) { // you know what i 
				Menu::optionInfo("Shoot and get in a randomo Vehicle");
			}
			if (Menu::Settings::currentOption == 19) { // you know what i 
				Menu::optionInfo("Shoot 1 time and DIED ;-)");
			}
			if (Menu::Settings::currentOption == 20) { // you know what i 
				Menu::optionInfo("shoot and get teleported where you shot");
			}
			if (Menu::Settings::currentOption == 21) { // you know what i 
				Menu::optionInfo("Infinite Ammonation ");
			}
			if (Menu::Settings::currentOption == 22) { // you know what i 
				Menu::optionInfo("Explosive Ammo KABUUUM");
			}
			if (Menu::Settings::currentOption == 23) { // you know what i 
				Menu::optionInfo("kick somewhere and it explodes");
			}
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Different Weapon Specials");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Choose Explosion Typ and Size");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Custom Money Gun");
			}
			if (Menu::Settings::currentOption == 10) { // you know what i 
				Menu::optionInfo("Change your Bullet Batch");
			}


		}
		break;
#pragma endregion 
#pragma region Teleports
#pragma endregion 
#pragma region Teleportsbunk

		case bunkertp:
		{
			Menu::Title(" ");
			Menu::Subtitle("Bunker Locations");

			if (Menu::Option("~w~Teleport to Grapeseed")) {

				Vector3 Coords;
				Coords.x = 1795.078247f; Coords.y = 4704.973633f; Coords.z = 40.161461f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Paleto Forest")) {

				Vector3 Coords;
				Coords.x = -750.824829f; Coords.y = 5944.234863f; Coords.z = 19.651102f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Raton Canyon")) {

				Vector3 Coords;
				Coords.x = -387.730042f; Coords.y = 4339.236816f; Coords.z = 56.110317f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Lago Zancudo")) {

				Vector3 Coords;
				Coords.x = -3028.613525f; Coords.y = 3331.712891f; Coords.z = 10.027461f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Chumash")) {

				Vector3 Coords;
				Coords.x = -3152.979248f; Coords.y = 1375.599609f; Coords.z = 17.308071f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Route 68")) {

				Vector3 Coords;
				Coords.x = 43.697308f; Coords.y = 2931.915771f; Coords.z = 55.867569f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Grand-Senora-Oilfield")) {

				Vector3 Coords;
				Coords.x = 491.163788f; Coords.y = 3016.684326f; Coords.z = 40.994099f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Grand-Senora-Desert")) {

				Vector3 Coords;
				Coords.x = 850.218445f; Coords.y = 2973.472412f; Coords.z = 44.161995f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Smoke-Tree-Road")) {

				Vector3 Coords;
				Coords.x = 2106.598877f; Coords.y = 3324.647217f; Coords.z = 45.361214f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Thomson Scrapyard")) {

				Vector3 Coords;
				Coords.x = 2487.493408f; Coords.y = 3166.269531f; Coords.z = 49.125141f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

			if (Menu::Option("~w~Teleport to Farmhouse")) {

				Vector3 Coords;
				Coords.x = 1573.70215f; Coords.y = 2223.663086f; Coords.z = 78.367462f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}

		}
		break;
		case teleports:
		{
			Menu::Title(" ");
			Menu::Subtitle("Teleport Options");

			Menu::Toggle("Teleport Animation", lool);

			Menu::MenuOption("~w~Bunker Locations", bunkertp);
			Menu::MenuOption("~w~IPLs", ipls);

			if (Menu::Option("~w~Teleport Forward")) {


				Features::TPForward();

			}

			if (Menu::Option("~r~Teleport to Waypoint")) {
				teleport_to_marker();
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}

			/*Menu::MenuOption("~w~IPLs", ipls);*/
			if (Menu::Option("~w~Teleport In Nearest Car")) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, false);
				Vehicle veh = VEHICLE::GET_CLOSEST_VEHICLE(pos.x, pos.y, pos.z, 500.f, 0, 0);
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(veh);
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}
			if (Menu::Option("~w~Teleport In Last Car")) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), PLAYER::GET_PLAYERS_LAST_VEHICLE(), -1);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}
			if (Menu::Option("~w~Teleport Personal Vehicle to me")) {
				Vector3 CoordBlip = UI::GET_BLIP_INFO_ID_COORD(UI::GET_FIRST_BLIP_INFO_ID(225));
				int VehicleHandle = VEHICLE::GET_CLOSEST_VEHICLE(CoordBlip.x, CoordBlip.y, CoordBlip.z, 1, 0, 71);
				if (VehicleHandle == 0) {
					Vector3 CoordBlipMoto = UI::GET_BLIP_INFO_ID_COORD(UI::GET_FIRST_BLIP_INFO_ID(226));
					int VehicleHandleMoto = VEHICLE::GET_CLOSEST_VEHICLE(CoordBlip.x, CoordBlip.y, CoordBlip.z, 1, 0, 71);
					if (VehicleHandleMoto == 0) {
						Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
						notifyMap("Could not find personal vehicle.");
					}
					else {
						Vector3 me = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
						ENTITY::SET_ENTITY_COORDS(VehicleHandleMoto, me.x, me.y + 2, me.z, 1, 1, 1, 1);
					}
				}
				else {
					Vector3 me = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
					ENTITY::SET_ENTITY_COORDS(VehicleHandle, me.x, me.y + 2, me.z, 1, 1, 1, 1);
				}


			}
			if (Menu::Option("Hatch")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 4274.2334f, 2975.4146f, -169.5375f);
			}
			if (Menu::Option("Sea Monster")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -3373.730f, 504.7139f, -23.7034f);
			}
			if (Menu::Option("Sunken Body")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -3161.077f, 3001.9915f, -36.8034f);
			}
			if (Menu::Option("Sunken Plane")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), -942.3652f, 6608.7627f, -19.5568f);
			}
			if (Menu::Option("Tank")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 4201.6323f, 3643.8167f, -37.6158f);
			}
			if (Menu::Option("Humane Labs Tunnel")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 3838.4746f, 3673.0667f, -18.8467f);
			}
			if (Menu::Option("UFO")) {
				PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), 762.4217f, 7380.3682f, -110.3537f);
			}
			if (Menu::Option("~w~Airport Top")) {
				Vector3 Coords;
				Coords.x = -1030.025146f; Coords.y = -3015.658691f; Coords.z = 49.091133f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Airport Office")) {
				Vector3 Coords;
				Coords.x = -1559.734741f; Coords.y = -3237.086182f; Coords.z = 29.634100f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Mount Chiliad")) {
				Vector3 Coords;
				Coords.x = 496.75f; Coords.y = 5591.17f; Coords.z = 795.03f;
				TPto(Coords);
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Maze Bank")) {
				Vector3 Coords;
				Coords.x = -74.94243f; Coords.y = -818.63446f; Coords.z = 326.174347f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}
			if (Menu::Option("~w~Military Base")) {
				Vector3 Coords;
				Coords.x = -2012.8470f; Coords.y = 2956.5270f; Coords.z = 32.8101f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}
			if (Menu::Option("~w~Zancudo Tower")) {
				Vector3 Coords;
				Coords.x = -2356.0940; Coords.y = 3248.645; Coords.z = 101.4505;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Mask Shop")) {
				Vector3 Coords;
				Coords.x = -1338.16; Coords.y = -1278.11; Coords.z = 4.87;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~LS Customs")) {
				Vector3 Coords;
				Coords.x = -373.01; Coords.y = -124.91; Coords.z = 38.31;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}
			if (Menu::Option("~w~Ammunation")) {
				Vector3 Coords;
				Coords.x = 247.3652; Coords.y = -45.8777; Coords.z = 69.9411;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Airport")) {
				Vector3 Coords;
				Coords.x = -1102.2910f; Coords.y = -2894.5160f; Coords.z = 13.9467f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Clothes Store")) {
				Vector3 Coords;
				Coords.x = -718.91; Coords.y = -158.16; Coords.z = 37.00;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Waterfall")) {
				Vector3 Coords;
				Coords.x = -597.9525f; Coords.y = 4475.2910f; Coords.z = 25.6890f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~FBI")) {
				Vector3 Coords;
				Coords.x = 135.5220f; Coords.y = -749.0003f; Coords.z = 260.0000f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Human Labs")) {
				Vector3 Coords;
				Coords.x = 3617.231f; Coords.y = 3739.871f; Coords.z = 28.6901f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~MMI")) {
				Vector3 Coords;
				Coords.x = -222.1977; Coords.y = -1185.8500; Coords.z = 23.0294;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Sandy Shores Airfield")) {
				Vector3 Coords;
				Coords.x = 1741.4960f; Coords.y = 3269.2570f; Coords.z = 41.6014f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Mort Mutual Insurance")) {
				Vector3 Coords;
				Coords.x = -221.749908f; Coords.y = -1158.249756f; Coords.z = 23.040998f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Bennys Garage")) {
				Vector3 Coords;
				Coords.x = -196.349442f; Coords.y = -1303.103271f; Coords.z = 30.650515f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Strip Club")) {
				Vector3 Coords;
				Coords.x = 135.548096f; Coords.y = -1308.388306f; Coords.z = 28.344141f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Darts")) {
				Vector3 Coords;
				Coords.x = 1997.273071f; Coords.y = 3062.091309f; Coords.z = 46.789749f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Rockford Hills")) {
				Vector3 Coords;
				Coords.x = -1365.342163f; Coords.y = -114.440826f; Coords.z = 50.704300f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			}
			if (Menu::Option("~w~Ponsonbys")) {
				Vector3 Coords;
				Coords.x = -1460.654419f; Coords.y = -227.550964f; Coords.z = 48.728519f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}
			if (Menu::Option("~w~400 Appart glitch")) {
				Vector3 Coords;
				Coords.x = -785.4869f; Coords.y = -314.7161f; Coords.z = 90.2189f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}
			if (Menu::Option("~w~Garage - Outside")) {
				Vector3 Coords;
				Coords.x = -795.46f; Coords.y = 308.89f; Coords.z = 85.71f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");


			}
			if (Menu::Option("~w~the Atmoshpere")) {
				Vector3 Coords;
				Coords.x = -129.9640f; Coords.y = 8130.8730f; Coords.z = 6705.6510f;
				TPto(Coords);
				Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");

			}

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Disable or Activate Animation by Teleport");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Different Bunker Places");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Teleport you forward");
			}
		}
		break;
#pragma endregion
#pragma region Weather
		case weatheroptions:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Wetter Options");

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Snow in Story Mode");
			}

			Menu::Toggle("~w~Offline Mode Snow", Features::offline_mode_snow, [] { Features::OfflineModeSnow(Features::offline_mode_snow); });
			if (Menu::Option("~w~Sun")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Clear"); }
			if (Menu::Option("~w~Rain")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Clearing"); }
			if (Menu::Option("~w~Snow")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Snowlight"); }
			if (Menu::Option("~w~Thunder")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Thunder"); }
			if (Menu::Option("~w~Blizzard")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Blizzard"); }
			if (Menu::Option("~w~Overcast")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Overcast"); }
			if (Menu::Option("~w~Foggy")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Foggy"); }
			if (Menu::Option("~w~Smog")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Smog"); }
			if (Menu::Option("~w~Clouds")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Clouds"); }
			if (Menu::Option("~w~Halloween")) { GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Halloween"); }


		}
		break;
#pragma endregion
#pragma region misc
		//Misc Options 
		case misc:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Misc");;

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Disable or Activate Tunables");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Bypass for Orbital and Vehicle Sell Timer");
			}
			if (Menu::Settings::currentOption == 5) { // you know what i 
				Menu::optionInfo("Spawn and Manage a Object");
			}
			if (Menu::Settings::currentOption == 7) { // you know what i 
				Menu::optionInfo("Change the Wave Intensity from Water");
			}
			if (Menu::Settings::currentOption == 8) { // you know what i 
				Menu::optionInfo("Change the Rain Intensity");
			}
			if (Menu::Settings::currentOption == 9) { // you know what i 
				Menu::optionInfo("Change the Wind Speed");
			}
			Menu::MenuOption("~w~Tunables", tunables);
			Menu::MenuOption("~w~Bypass Options", bypass);
			Menu::MenuOption("~w~Ghost Rider", ghostw);
			Menu::MenuOption("~w~Key Hacks", KeyHacks);
			Menu::MenuOption("~w~Object Spawner", objSpawner);
			Menu::MenuOption("~w~Vision Effects", vision);;
			if (Menu::Int("Wave Intensity", WaveIntensity, 0, 100)) {
				WATER::_SET_CURRENT_INTENSITY(WaveIntensity);
			}

			int rainIntensity;

			if (Menu::Int("Rain Intensity", rainIntensity, 0, 100)) {
				GAMEPLAY::_SET_RAIN_FX_INTENSITY(rainIntensity);
			}

			int oprainIntensity;

			if (Menu::Int("Wind Speed", oprainIntensity, 0, 100)) {
				GAMEPLAY::SET_WIND_SPEED(oprainIntensity);
			}

			int dioprainIntensity;

			if (Menu::Int("Wind Direction", dioprainIntensity, 0, 100)) {
				GAMEPLAY::SET_WIND_DIRECTION(dioprainIntensity);
			}

			int Zoom;

			if (Menu::Int("Change Zoom", Zoom, 0, 1))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Zoom = NumberKeyboard();
				}
			}
			if (Menu::Option("Zomm in Mini Map"))
			{
				UI::SET_RADAR_ZOOM(Zoom);
			}

			int grrainIntensity;


			if (Menu::Option("Clone All"))
			{
				for (int i = 1; i <= 32; i++) {
					if (PLAYER::PLAYER_ID() != i) {
						PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1, 1, 1);
					}
				}
			}

			if (Menu::Option("Alien Invasion")) {
				for (int i = 0; i <= 32; i++)
				{
					WAIT(0);
					if (i == PLAYER::PLAYER_ID())continue;
					int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
					Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
					Hash oball = GAMEPLAY::GET_HASH_KEY("p_spinning_anus_s");
					STREAMING::REQUEST_MODEL(oball);
					while (!STREAMING::HAS_MODEL_LOADED(oball))
						WAIT(0);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
					int createdObject = NETWORK::OBJ_TO_NET(OBJECT::CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));

					{
						if (i == 32)
						{
							break;
						}

					}
				}
			}

			if (Menu::Toggle("Moon Gravity", MoonGravity)) {
				GAMEPLAY::SET_GRAVITY_LEVEL(MoonGravity ? 2 : 0);
			}

			if (Menu::Float("Camera Zoom", Features::gameCamZoomInt, 0.0f, 100.0f)) { Features::gameCamZoom = true; }
			Menu::Toggle("~w~Remove Minimap", Features::Mapweck, [] { Features::mapweck(Features::Mapweck); });

			Menu::Toggle("~w~Rocket Rain", Features::rocketrain, [] { Features::rainro(Features::rocketrain); });


			int okokok;

			if (Menu::Int("Set fake Wanted Level", okokok, 0, 5)) {
				GAMEPLAY::SET_FAKE_WANTED_LEVEL(okokok);
			}

			int uhhuhujk;

			if (Menu::Int("Set Aggresive Horns", uhhuhujk, 0, 100)) {
				AUDIO::SET_AGGRESSIVE_HORNS(uhhuhujk);
			}



			if (Menu::Option("Create random Lightning")) {

				GAMEPLAY::_CREATE_LIGHTNING_THUNDER();
			}

			int looook;

			if (Menu::Int("Set Vehicle View Mode", looook, 0, 3)) {
				CAM::SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(looook);
			}


			if (Menu::Option("Get Random Weather Type")) {

				GAMEPLAY::SET_RANDOM_WEATHER_TYPE();
			}

			if (Menu::Settings::currentOption == 22) { // you know what i 
				Menu::optionInfo("Get 100% Popularity of your NightClub");
			}

			if (Menu::Option("Max Night Club Popularity")) {
				char sbuf[50];
				int stat_r;
				STATS::STAT_GET_INT($("MPPLY_LAST_MP_CHAR"), &stat_r, 1);
				snprintf(sbuf, sizeof(sbuf), "MP%i_%s", stat_r, "CLUB_POPULARITY");
				Hooking::stat_set_int($(sbuf), 1000, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~High Popularity");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("Boat Pickup")) {

				Features::BoatPickup();
			}

			if (Menu::Option("Heli Pickup")) {

				Features::HeliPickup();
			}
			if (Menu::Settings::currentOption == 25) { // you know what i 
				Menu::optionInfo("All nearby Peds get a Riot Gun");
			}
			Menu::Toggle("~w~Riot Peds", Features::mcriot, [] { Features::MCRiot(Features::mcriot); });


			Menu::Toggle("~w~Display FPS", Features::DisplayFPS, [] { Features::featureDisplayFPS(Features::DisplayFPS); });
			if (Menu::Toggle("Mobile Radio", Features::mobileradiokek))
			{
				Features::MobileRadioKek(Features::mobileradiokek);
			}
			Menu::Toggle("~w~Rockstar Developer", rdev);
			Menu::Toggle("~w~Kill Peds", Features::killpedsbool);
			Menu::Toggle("~w~Horn nearby Vehicles", Features::hornnearbyvehiclesbool, [] { Features::hornnearbyvehicles(Features::hornnearbyvehiclesbool); notifyMap("~b~Horn Man"); });
			Menu::Toggle("~w~Launch nearby Vehicles", Features::launchnearbyvehiclesbool, [] { Features::launchnearbyvehicles(Features::launchnearbyvehiclesbool); notifyMap("~b~Booom"); });
			Menu::Toggle("~w~Explode nearby Tires", Features::explodenearbytiresbool, [] { Features::explodenearbytires(Features::explodenearbytiresbool); notifyMap("~b~allahu akbar"); });
			Menu::Toggle("~w~Fly nearest Vehicles Up", Features::flxneav, [] { Features::nearbflx(Features::flxneav); notifyMap("~b~WTF BABY!"); });
			Menu::Toggle("~w~Explode Peds", Features::explodepedsbool);
			Menu::Toggle("~w~Infnity Rockets", Features::isInfBoost, [] { Features::InfiniteBoost(Features::isInfBoost); notifyMap("~b~You are Gay ?"); });
			Menu::Toggle("~w~Explode Cars", Features::explodenearbyvehiclesbool);
			Menu::Toggle("~w~Delete Cars", Features::deletenearbyvehiclesbool);
			Menu::Toggle("~w~Disable Phone", Features::phonedisable, [] { Features::disablephone(); });
			Menu::Toggle("~w~Not fall from Bike", Features::isSeatBelt, [] { Features::seatBelt(Features::isSeatBelt); });
			Menu::Toggle("~w~Chaos Mode", Features::ChaosMode, [] { Features::Chaos(Features::ChaosMode); });
			Menu::Int("Choose Time", timeer, 0, 24);
			if (Menu::Option("Set Time")) { NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(timeer, 0, 0); }
			Menu::Toggle("~w~Freeze Time", Features::Time, [] { Features::time(Features::Time); });
			Menu::Toggle("~w~Hide GUI", Features::featureMiscHideHud, [] { Features::featureiscHideHud(Features::featureMiscHideHud); });
			//Menu::Toggle("~w~Asteroid Rain", Features::astorrain, [] { Features::rainastor(Features::astorrain); });



			/*if (Menu::Option("Name Changer"))
			{
			SetName(char* name);
			}*/

			if (Menu::Option("~w~Bullshark Drop")) {


				Features::Bullshark();

			}

			if (Menu::Option("~w~AmmoDrop (Merryweather)")) {


				Features::AmmoDrop();

			}

			if (Menu::Option("~w~Airstrike (Merryweather)")) {


				Features::Airstrike();

			}

			if (Menu::Option("~w~Repair nearby Vehicles")) {


				Features::repairnearbyvehicles();

			}

		}
		break;
		case riotustom:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Custom Riot Peds");

			Menu::Break("~r~Select Weapon");

			selectpedweapon();

			Menu::Toggle("~w~Riot Peds", Features::mcriot, [] { Features::MCRiot(Features::mcriot); });

		}
		break;
		case statsEdit:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Stats Editor");

			Menu::Drawing::Spriter("Textures", "stat", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);


			Menu::Break("~r~DANGER (HIGH RISK)");

			if (Menu::Option("~w~Set Money earn in Jobs")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_TOTAL_EVC"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("~w~Set total earned money")) {
				int temp1 = 0;
				temp1 = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_TOTAL_EVC"), temp1, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("~w~Set Report Strength")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_REPORT_STRENGTH"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("Custom Deaths")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_DEATHS_PLAYER"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Commend Strength")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_COMMEND_STRENGTH"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Friendly Stuff")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_FRIENDLY"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Helpfull Stuff")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_HELPFUL"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("~w~Set Griefing")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_GRIEFING"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Offensive Language")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_OFFENSIVE_LANGUAGE"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Offensive UGC")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_OFFENSIVE_UGC"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set VC Hate")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_VC_HATE"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Gameplay Exploits")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_GAME_EXPLOITS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Inspunished")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_ISPUNISHED"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("~w~Set Badsports")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_10TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), val, 1);
				Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), val, 1);
				Hooking::stat_set_float($("BADSPORT_RESET_MINUTES"), val, 1);
				Hooking::stat_set_float($("BADSPORT_RESET_MINUTES"), val, 1);
				Hooking::stat_set_float($("MPPLY_OVERALL_BADSPORT"), val, 1);
				Hooking::stat_set_bool($("MPPLY_CHAR_IS_BADSPORT"), val, 1);
				Hooking::stat_set_int($("MPPLY_BECAME_BADSPORT_NUM"), val, 1);
				Hooking::stat_set_int($("BAD_SPORT_BITSET"), val, 1);
				Hooking::stat_set_int($("CHEAT_BITSET"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}



			if (Menu::Option("Set Kills")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_KILLS_PLAYERS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

			if (Menu::Option("Set Won Races")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_RACES_WON"), val, 1);
				Hooking::stat_set_int($("AWD_FM_GTA_RACES_WON"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Armwrestling Wins")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_NO_ARMWRESTLING_WINS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Deathmatch Wins")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_FM_DM_WINS"), val, 1);
				Hooking::stat_set_int($("AWD_FM_DM_WINS"), val, 1);
				Hooking::stat_set_int($("AWD_FM_TDM_WINS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Deathmatch Losses")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_TOTAL_DEATHMATCH_LOST"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Death Match Kills")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_FM_DM_TOTALKILLS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


			if (Menu::Option("Set Death Match Deaths")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("MPPLY_DM_TOTAL_DEATHS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Golf Wins")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_FM_GOLF_WON"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Shooting Range Wins")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_FM_SHOOTRANG_TG_WON"), val, 1);
				Hooking::stat_set_int($("AWD_FM_SHOOTRANG_RT_WON"), val, 1);
				Hooking::stat_set_int($("AWD_FM_SHOOTRANG_CT_WON"), val, 1);
				Hooking::stat_set_int($("AWD_FM_SHOOTRANG_GRAN_WON"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Set Tennis Wins")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("AWD_FM_TENNIS_WON"), val, 1);
				Hooking::stat_set_int($("MPPLY_TENNIS_MATCHES_WON"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("Weapons")) {
				int val = NumberKeyboard();

				Hooking::stat_set_int($("MOLOTOV_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("CMBTPISTOL_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("PISTOL50_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("APPISTOL_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("MICROSMG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("SMG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("ASLTSMG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("ASLTRIFLE_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("CRBNRIFLE_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("ADVRIFLE_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("MG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("CMBTMG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("ASLTMG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("PUMP_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("SAWNOFF_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("BULLPUP_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("ASLTSHTGN_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("SNIPERRFL_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("HVYSNIPER_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("GRNLAUNCH_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("RPG_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("MINIGUNS_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("GRENADE_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("SMKGRENADE_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("STKYBMB_ENEMY_KILLS"), val, 1);
				Hooking::stat_set_int($("MOLOTOV_ENEMY_KILLS"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}

		}
		break;
		case sex:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Hud Colours");





			Menu::Break("HUD_COLOUR_PAUSE_BG");
			if (Menu::Int("R", HUD_COLOUR_PAUSE_BGR, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_PAUSE_BGR = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_PAUSE_BGG, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_PAUSE_BGG = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_PAUSE_BGB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_PAUSE_BGB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_PAUSE_BGA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_PAUSE_BGA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_PAUSE_BG, HUD_COLOUR_PAUSE_BGR, HUD_COLOUR_PAUSE_BGG, HUD_COLOUR_PAUSE_BGB, HUD_COLOUR_PAUSE_BGA);
			}
			Menu::Break("HUD_COLOUR_WAYPOINT");
			if (Menu::Int("R", HUD_COLOUR_WAYPOINTR, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_WAYPOINTR = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_WAYPOINTG, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_WAYPOINTG = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_WAYPOINTB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_WAYPOINTB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_WAYPOINTA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_WAYPOINTA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_WAYPOINT, HUD_COLOUR_WAYPOINTR, HUD_COLOUR_WAYPOINTG, HUD_COLOUR_WAYPOINTB, HUD_COLOUR_WAYPOINTA);
			}
			Menu::Break("HUD_COLOUR_MICHAEL");
			if (Menu::Int("R", HUD_COLOUR_MICHAELR, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_MICHAELR = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_MICHAELG, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_MICHAELG = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_MICHAELB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_MICHAELB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_MICHAELA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_MICHAELA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_MICHAEL, HUD_COLOUR_MICHAELR, HUD_COLOUR_MICHAELG, HUD_COLOUR_MICHAELB, HUD_COLOUR_MICHAELA);
			}
			Menu::Break("HUD_COLOUR_FRANKLIN");
			if (Menu::Int("R", HUD_COLOUR_FRANKLINR, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FRANKLINR = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_FRANKLING, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FRANKLING = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_FRANKLINB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FRANKLINB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_FRANKLINA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FRANKLINA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_FRANKLIN, HUD_COLOUR_FRANKLINR, HUD_COLOUR_FRANKLING, HUD_COLOUR_FRANKLINB, HUD_COLOUR_FRANKLINA);
			}
			Menu::Break("HUD_COLOUR_TREVOR");
			if (Menu::Int("R", HUD_COLOUR_TREVORR, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_TREVORR = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_TREVORG, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_TREVORG = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_TREVORB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_TREVORB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_TREVORA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_TREVORA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_TREVOR, HUD_COLOUR_TREVORR, HUD_COLOUR_TREVORG, HUD_COLOUR_TREVORB, HUD_COLOUR_TREVORA);
			}
			Menu::Break("HUD_COLOUR_FREEMODE");
			if (Menu::Int("R", HUD_COLOUR_FREEMODER, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FREEMODER = NumberKeyboard();
				}
			}
			if (Menu::Int("G", HUD_COLOUR_FREEMODEG, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FREEMODEG = NumberKeyboard();
				}
			}
			if (Menu::Int("B", HUD_COLOUR_FREEMODEB, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FREEMODEB = NumberKeyboard();
				}
			}
			if (Menu::Int("A", HUD_COLOUR_FREEMODEA, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					HUD_COLOUR_FREEMODEA = NumberKeyboard();
				}
			}
			if (Menu::Option("Set")) {
				UI::_SET_HUD_COLOUR(HUD_COLOUR_FREEMODE, HUD_COLOUR_FREEMODER, HUD_COLOUR_FREEMODEG, HUD_COLOUR_FREEMODEB, HUD_COLOUR_FREEMODEA);
			}


		}
		break;
#pragma endregion
#pragma region cas misc
		case worldoptions:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~World Options");
			Menu::MenuOption("~w~Weather", weatheroptions);
			Menu::MenuOption("~w~Map Mods", mapmds);
			Menu::MenuOption("~w~Custom Riot Peds", riotustom);

		}
		break;
		case trollveri:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Troll Menu - All Players");



			Menu::Toggle("~w~Water Loop to All Player", Features::playerwaterloopall, [] { Features::WaterLoopall(Features::playerwaterloopall); });
			Menu::Toggle("~w~Fire Loop to All Player", Features::playerfireloopall, [] { Features::FireLoopall(Features::playerfireloopall); });
			Menu::Toggle("~w~Shake Cam from All Player", Features::camshaker112, [] { Features::shakecam11(Features::camshaker112); });

			Menu::Toggle("~w~Stop Vehicle from All Players", Features::Stopall, [] { Features::stopall(Features::Stopall); });

			Menu::Toggle("~w~ESP", Features::esper, [] {});
			Menu::Toggle("~w~ESP Names", Features::namesesp, [] { Features::NameSP(Features::namesesp); });
			if (Menu::Int("~w~ESP-R", Features::espr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::espr = NumberKeyboard();
				}
			}

			if (Menu::Int("~w~ESP-G", Features::espg, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::espg = NumberKeyboard();
				}
			}

			if (Menu::Int("~w~ESP-B", Features::espb, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::espb = NumberKeyboard();
				}
			}

			if (Menu::Option("Alien Invasion")) {
				for (int i = 0; i <= 32; i++)
				{
					WAIT(0);
					if (i == PLAYER::PLAYER_ID())continue;
					int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
					Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
					Hash oball = GAMEPLAY::GET_HASH_KEY("p_spinning_anus_s");
					STREAMING::REQUEST_MODEL(oball);
					while (!STREAMING::HAS_MODEL_LOADED(oball))
						WAIT(0);
					AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
					int createdObject = NETWORK::OBJ_TO_NET(OBJECT::CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));

					{
						if (i == 32)
						{
							break;
						}

					}
				}
			}

			if (Menu::Option("Pole Dance Lobby")) { Features::animateallPlayer("mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }

			Menu::Toggle("~w~Freeze All Players", Features::freezed11, [] { Features::Freezer11(Features::freezed11); });
			if (Menu::Option("~w~Clone All Player"))
			{
				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						{
							PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1, 1, 1);
						}


					}
				}
			}

			if (Menu::Option("~w~Crash All")) {
				{
					{
						for (int i = 0; i < 32; i++)
						{



							Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
							Hash crashall = GAMEPLAY::GET_HASH_KEY("v_proc2_temp");
							STREAMING::REQUEST_MODEL(crashall);
							while (!STREAMING::HAS_MODEL_LOADED(crashall)) WAIT(0);
							if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
							{
								if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) == PLAYER::PLAYER_PED_ID()) continue;
								{
									Vector3 Coords;
									Coords.x = 496.75f; Coords.y = 5591.17f; Coords.z = 795.03f;
									TPto(Coords);
									Object crashall2 = OBJECT::CREATE_OBJECT(crashall, 0, 0, 0, true, true, false);
									ENTITY::ATTACH_ENTITY_TO_ENTITY(crashall2, playerHandle, PED::GET_PED_BONE_INDEX(playerHandle, SKEL_Spine_Root), 0.0, 0.0, 0.0, 0.0, 90.0, 0, false, false, false, false, 2, true);
								}
								STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(crashall);

							}
						}
					}
				}
			}

			if (Menu::Option("~w~Valkyrie Cannon All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{

						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						FIRE::ADD_EXPLOSION(playerPosition.x, playerPosition.y, playerPosition.z - 1, 38, 0.5f, true, false, 0.0f);
					}

				}
			}

			if (Menu::Option("~w~Blame Explosion"))
			{
				for (int i = 0; i < 32; i++)
				{
					if (i != PLAYER::PLAYER_ID() && i != SelectedClient)
					{
						Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), true);
						FIRE::ADD_OWNED_EXPLOSION(i, Pos.x, Pos.y, Pos.z, 29, 0.5f, true, false, 5.0f);
					}
				}
				notifyMap("Player ~r~exploded ~w~the Lobby!");
			}


			if (Menu::Option("~w~Airstrike All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
						WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
						while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
							WAIT(0);
						GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z + 50.f, playerPosition.x, playerPosition.y, playerPosition.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
					}

				}
			}



			if (Menu::Option("~w~Take Weps in the Lobby")) {
				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
						{
							Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
							if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
							{
								WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), true);
							}
						}
					}
				}
			}

			if (Menu::Option("~w~Give Weps in the Lobby")) {

				for (int i = 0; i < 32; i++)
				{
					if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						if (!(Features::cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
						{
							if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) != PLAYER::PLAYER_PED_ID())
							{
								uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113F99, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D };
								for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
									WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(allplayers), Weapons[i], 9999, 1);
								}
							}
						}
					}
				}
			}

			if (Menu::Option("~w~Cage All Player")) {
				Features::trapall();
			}



			if (Menu::Option("~w~Kick All From Car")) {
				for (int i = 0; i < 32; i++)
				{
					if (i != PLAYER::PLAYER_ID())
					{
						RequestControlOfEnt(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_TASKS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
						AI::CLEAR_PED_SECONDARY_TASK(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
					}
				}
			};
			if (Menu::Option("~w~Explode All")) {
				for (int i = 0; i < 33; i++)
				{
					if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) == PLAYER::PLAYER_PED_ID()) continue;
					{
						Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), false);
						FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 100.f);
					}
				}
			}



		}
		break;
#pragma endregion
#pragma region playerlist
		//All Players 
		case allplayers:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~All Players");
			//Menu::Toggle("~w~Report Protection", Features::clearreport, [] {Features::ClearReport(Features::clearreport); });
			Menu::MenuOption("~w~Animation for All Player", animall);
			Menu::MenuOption("~r~Money Drop All Player", dropall);
			Menu::MenuOption("~w~Weapon Options", weall);
			Menu::MenuOption("~w~Attach to All Player", attachtpall);
			Menu::MenuOption("~r~Remote Options", remoteall);
			Menu::MenuOption("~w~Attach Vehicle to All Player", attachtpalldadu);
			Menu::MenuOption("~w~Teleport Menu", tellpell);
			Menu::MenuOption("~w~Vehicle Spawner to All Player", vehspawnerall);
			Menu::MenuOption("~w~Bodyguard to All Player", bodyoptionsall);
			Menu::MenuOption("~w~PTFX Man Player", ptfxpp1);
			Menu::MenuOption("~w~Troll Menu", trollveri);
			// show self options


		}
		break;
		case monyall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Gun All Player");

			if (Menu::Int("Amount Custom input", Features::DropAmount3, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount3 = NumberKeyboard();
				}
			}

			/*if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
			if (IsKeyPressed(VK_NUMPAD5)) {
			Features::DropDelay = NumberKeyboard();
			}
			}*/

			Menu::Toggle("~w~Money Gun", Features::mp12, [] { Features::pm1(Features::mp12); });
			Menu::Toggle("~w~Fake Money Gun", Features::moneyGunBagfakeplal, [] { Features::MoneyGunBagfakeplaaa(Features::moneyGunBagfakeplal); });


			Menu::Break("Models");
			dropModelsSelect();

		}
		break;
		case looppppp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Impacts");

			Menu::Toggle("~w~Explode Gun (Lool)", Features::explodeGunall, [] { Features::ExplodeGunall(Features::explodeGunall); });
			if (Menu::Int("~w~Explosion Type", Menu::Settings::Explosionfick, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::Explosionfick = NumberKeyboard();
				}

			}

			if (Menu::Int("~w~Explosion Size", Menu::Settings::ficksize, 0, 10))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::ficksize = NumberKeyboard();
				}

			}


		}
		break;
		case weall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Options");

			Menu::MenuOption("~w~Money Gun All Player", monyall);
			Menu::MenuOption("~w~Weapon Impacts All Player", looppppp);





		}
		break;
		case remoteall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Remote Options");

		//soon

		
		}
		break;
		case attachtpalldadu:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Attach Vehicle to all Player");



			if (Menu::ListVector("After Hours Nightclub", afthour, soutprop455)) {

				for (int i = 0; i < 32; i++)
				{

					KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), (afthour[soutprop455]));
				}
			};

			/if (Menu::ListVector("South Andreas", SOUTHERNSAN, soutprop)) {

				for (int i = 0; i < 32; i++)
				{

					KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), (SOUTHERNSAN[soutprop]));
				}
			};

			if (Menu::ListVector("Doomsday", Doomsday1, Asoutprop1)) {

				for (int i = 0; i < 32; i++)
				{


					KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), (Doomsday1[Asoutprop1]));
				}
			};

			if (Menu::ListVector("GunRunning", GUNRUNNING1, soutprop3)) {

				for (int i = 0; i < 32; i++)
				{

					KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (GUNRUNNING1[soutprop3]));
				}
			};

			if (Menu::ListVector("Cunningstunts", CUNNINGSTUNTS1, soutprop4)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (CUNNINGSTUNTS1[soutprop4]));
			};

			if (Menu::ListVector("ImportExport", IMPORTEXPORT1, soutprop5)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (IMPORTEXPORT1[soutprop5]));
			};

			if (Menu::ListVector("Boats", Boats1, soutprop6)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Boats1[soutprop6]));
			};

			if (Menu::ListVector("Commercial", Commercial1, soutprop7)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Commercial1[soutprop7]));
			};

			if (Menu::ListVector("Compacts", Compacts1, soutprop8)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Compacts1[soutprop8]));
			};

			if (Menu::ListVector("Coupes", Coupes1, soutprop9)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Coupes1[soutprop9]));
			};

			if (Menu::ListVector("Cycles", Cycles1, soutprop10)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Cycles1[soutprop10]));
			};

			if (Menu::ListVector("Emergency", Emergency1, soutprop11)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Emergency1[soutprop11]));
			};

			if (Menu::ListVector("Helicopters", Helicopters1, soutprop12)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Helicopters1[soutprop12]));
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop13)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Industrial1[soutprop13]));
			};

			if (Menu::ListVector("Military", Military1, soutprop14)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Military1[soutprop14]));
			};

			if (Menu::ListVector("Motorcycles", Motorcycles1, soutprop15)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Motorcycles1[soutprop15]));
			};

			if (Menu::ListVector("Muscle", Muscle1, soutprop16)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Muscle1[soutprop16]));
			};

			if (Menu::ListVector("OffRoad", OffRoad1, soutprop17)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (OffRoad1[soutprop17]));
			};

			if (Menu::ListVector("Planes", Planes1, soutprop18)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Planes1[soutprop18]));
			};

			if (Menu::ListVector("Sedans", Sedans1, soutprop19)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Sedans1[soutprop19]));
			};

			if (Menu::ListVector("Service", Service1, soutprop20)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Service1[soutprop20]));
			};

			if (Menu::ListVector("Sports", Sports1, soutprop21)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Sports1[soutprop21]));
			};

			if (Menu::ListVector("Sportclassic", SportsClassics1, soutprop22)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (SportsClassics1[soutprop22]));
			};

			if (Menu::ListVector("Super Sports", Super1, soutprop23)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Super1[soutprop23]));
			};

			if (Menu::ListVector("SUVs", SUVs1, soutprop24)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (SUVs1[soutprop24]));
			};

			if (Menu::ListVector("Trailer", Trailer1, soutprop25)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Trailer1[soutprop25]));
			};

			if (Menu::ListVector("Trains", Trains1, soutprop26)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Trains1[soutprop26]));
			};

			if (Menu::ListVector("Utility", Utility1, soutprop27)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Utility1[soutprop27]));
			};

			if (Menu::ListVector("Vans", Vans1, soutprop28)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Vans1[soutprop28]));
			};



		}
		break;
		case tellpell:
		{

			Menu::Title(" ");
			Menu::Subtitle("Teleport All Players");

			if (Menu::Option("~w~Mount Chiliad")) {

				Vector3 Coords;
				Coords.x = 496.75f; Coords.y = 5591.17f; Coords.z = 795.03f;
				TPto22(Coords);





			}

		}
		break;
#pragma endregion
#pragma region playermenu
		//Self  Main
		case playermenu:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Self Options");
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Change your Model");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Change your Outfit (Custom Method)");
			}
			if (Menu::Settings::currentOption == 4) { // you know what i s
				Menu::optionInfo("PTFX Bones like Head arms ect....");
			}
			Menu::MenuOption("~w~Model Changer", modelchanger);
			Menu::MenuOption("~w~Costum Outfit Changer ~v~>", coc);
			Menu::MenuOption("~w~Another Modells", anothm);
			Menu::MenuOption("~w~PTFX Man", ptfxpp);
			Menu::MenuOption("~w~Spawn Bodyguard", pet);
			Menu::MenuOption("~w~Effects", PTFX);

			if (Menu::Option("Extreme Detach Everything"))
			{
				changeModel("mp_m_freemode_01");
			}





			if (Menu::Option("Lock Vehicle Doors"))
			{
				Features::LockPlayersDoors();
			}

			if (Menu::Option("Open Vehicle Doors"))
			{
				Features::LockPlayersDoors1();
			}





			if (Menu::Option("Max Armour"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();

				ENTITY::SET_ENTITY_HEALTH(playerPed, ENTITY::GET_ENTITY_MAX_HEALTH(playerPed));
				PED::ADD_ARMOUR_TO_PED(playerPed, PLAYER::GET_PLAYER_MAX_ARMOUR(player) - PED::GET_PED_ARMOUR(playerPed));
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
				{
					Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
					if (ENTITY::DOES_ENTITY_EXIST(playerVeh) && !ENTITY::IS_ENTITY_DEAD(playerVeh))
						VEHICLE::SET_VEHICLE_FIXED(playerVeh);
				}


			}



			/*if (Menu::Option("Refill Health")) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				ENTITY::SET_ENTITY_HEALTH(playerPed, ENTITY::GET_ENTITY_MAX_HEALTH(playerPed));
				PED::ADD_ARMOUR_TO_PED(playerPed, PLAYER::GET_PLAYER_MAX_ARMOUR(player) - PED::GET_PED_ARMOUR(playerPed));
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
				{
					Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
					if (ENTITY::DOES_ENTITY_EXIST(playerVeh) && !ENTITY::IS_ENTITY_DEAD(playerVeh))
						VEHICLE::SET_VEHICLE_FIXED(playerVeh);
				}
			}*/

			if (Menu::Int("~w~Player Alpha", Features::player_alpha, 0, 255)) {
				{
					if (IsKeyPressed(VK_NUMPAD5)) {
						Features::player_alpha = NumberKeyboard();
					}
				}
			}
			if (Menu::Option("~w~Set Plpayer Alpha"))
			{
				ENTITY::SET_ENTITY_ALPHA(PLAYER::PLAYER_PED_ID(), Features::player_alpha, false);
			}

			if (Menu::Int("~w~Set Size", Features::testweh1, 0, 255)) {
				{
					if (IsKeyPressed(VK_NUMPAD5)) {
						Features::testweh1;
					}
				}
			}

			Menu::Toggle("~w~Player Size", Features::okokoko, [] { Features::fearureqeq(Features::okokoko); });
			Menu::Toggle("~w~Fire Breath", Features::FIREBREATH, [] { Features::firebreath(Features::FIREBREATH); });
			Menu::Toggle("~w~Force Cars", Features::savenewdinner_forcerop119, [] { Features::forcoook(Features::savenewdinner_forcerop119); });
			//Menu::Toggle("~w~Force Defense", Features::forcedefense, [] { Features::ForceDefense(Features::forcedefense); });
			Menu::Toggle("~w~Auto Regen", Features::isAutoRegHealth, [] { Features::AutoRegHealth(Features::isAutoRegHealth); });
			Menu::Toggle("~w~God Mode", Features::playerGodMode, [] { Features::GodMode(Features::playerGodMode); });
			//Menu::Toggle("~w~Max Armor", Features::armorff, [] { Features::arnor333(Features::armorff); });
			Menu::Toggle("~w~Invisible", Features::playerinvisibility, [] { Features::Invisibility(Features::playerinvisibility); });
			Menu::Toggle("~w~No Ragdoll", Features::playernoragdoll, [] { Features::NoRagdoll(Features::playernoragdoll); });
			if (Menu::Toggle("~w~Slow Motion", slowMotion)) { if (slowMotion) { GAMEPLAY::SET_TIME_SCALE(0.4f); } else { GAMEPLAY::SET_TIME_SCALE(1.f); } }
			Menu::Toggle("Super Jump", Features::playersuperjump, [] { Features::SuperJump(Features::playersuperjump); notifyMap("~b~Jump Baby!"); });
			Menu::Toggle("~w~Extreme Jump", Features::extremejump, [] { Features::Extremejump(Features::extremejump); });
			Menu::Toggle("Death Off Radar", Features::offradardeath, [] { Features::deathoffradar(Features::offradardeath); });
			Menu::Toggle("Superman", Features::superman, [] { Features::SuperMan(Features::superman); });
			if (Menu::Settings::currentOption == 25) { // you know what i 
				Menu::optionInfo("Laster Method (SAFE)");
			}
			Menu::Toggle("~w~Off Radar", Features::orbool, [] { Features::OffRadar(Features::orbool); });
			Menu::Toggle("~w~Never Wanted", Features::NeverWantedTest1, [] { Features::NeverWantedTest2(Features::NeverWantedTest1); });
			Menu::Int("~w~Wanted Level", Features::playerWantedLevel, 0, 5, [] { Features::ChangeWanted(Features::playerWantedLevel); });
			Menu::Toggle("~w~No-Clip", Features::flybool, [] { Features::playerflyer(Features::flybool);  });
			if (Menu::Int("Swimm Speed", Features::smpdswimm, 3, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::smpdswimm = NumberKeyboard();
				}
			}
			Menu::Toggle("~w~Fast Swim", Features::fastswim, [] { Features::SwimFast(Features::fastswim); });

			if (Menu::Int("Fast Run Speed", Features::runfast8, 3, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::runfast8 = NumberKeyboard();
				}
			}
			Menu::Toggle("~w~Fast Run", Features::runfast, [] { Features::RunFast(Features::runfast); });
			/*Menu::Toggle("Super power", Features::Superr, [] { Features::SuperDooper(Features::Superr); notifyMap("~b~Click Numpad9!"); });*/
			Menu::Toggle("~w~Tiny Player", Features::betiny, [] { Features::TinyPlayer(Features::betiny); });



			Menu::Option("~w~Cleaner", [] { int Ped = PLAYER::PLAYER_PED_ID(); PED::CLEAR_PED_BLOOD_DAMAGE(Ped); PED::RESET_PED_VISIBLE_DAMAGE(Ped); });
			if (Menu::Option("~w~Suicide")) { Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_ENTITY_HEALTH }, 0); }
			if (Menu::Option("~w~New Look")) { PED::SET_PED_RANDOM_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), true); }

		}
		break;
#pragma endregion
#pragma region credits
		//Credits
		case credits:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Credits");

			Menu::Option("~w~Owner : ~w~iRektKit");
			Menu::Option("~w~Owner : ~w~H4XOR")
			//no name for me :(





		}
		break;
		case KeyHacks:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Key Hacks");

			Menu::Option("~w~Stealth Hack : ~w~Press F9");
			Menu::Option("~w~F10  : ~w~Teleport to Waypoint");

		}
		break;
#pragma endregion
#pragma region modellchanger
		//Model Changer 
		case modelchanger:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Model Changer"); //use only in offline or ban
			for (int i = 0; i < ARRAYSIZE(pedModels); i++)
			{
				if (Menu::Option(pedModels[i]))
				{
					DWORD model = GAMEPLAY::GET_HASH_KEY(pedModels[i]);
					STREAMING::REQUEST_MODEL(model);
					while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
					PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), model);
					PED::SET_PED_DEFAULT_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID());
					WAIT(10);
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
					WAIT(10);
				}
			}
		}
		break;
#pragma endregion
#pragma region Animations
		//Animations 
		case anim:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Animations");
			Menu::MenuOption("~w~Scenarios", senas);
			if (Menu::Option("~w~Clear Animation")) { Features::clearanim(); }
			if (Menu::Option("~w~Sex Receiver")) { Features::doAnimation("rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("~w~Sex Giver")) { Features::doAnimation("rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("~w~Stripper Dance")) { Features::doAnimation("mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("~w~Pole Dance")) { Features::doAnimation("mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("~w~Push Ups")) { Features::doAnimation("amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("~w~Sit Ups")) { Features::doAnimation("amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("~w~Celebrate")) { Features::doAnimation("rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("~w~Electrocution")) { Features::doAnimation("ragdoll@human", "electrocute"); }
			if (Menu::Option("~w~Suicide")) { Features::doAnimation("mp_suicide", "pistol"); }
			if (Menu::Option("~w~Showering")) { Features::doAnimation("mp_safehouseshower@male@", "male_shower_idle_b"); }
		}
		break;
		case animall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Animations");
			Menu::MenuOption("~w~Scenarios", senas);
			if (Menu::Option("~w~Clear Animation")) {
				for (int i = 0; i < 32; i++)
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));

				}
			}
			if (Menu::Option("~w~Sex Receiver")) { Features::animateallPlayer("rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("~w~Sex Giver")) { Features::animateallPlayer("rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("~w~Stripper Dance")) { Features::animateallPlayer("mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("~w~Pole Dance")) { Features::animateallPlayer("mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("~w~Push Ups")) { Features::animateallPlayer("amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("~w~Sit Ups")) { Features::animateallPlayer("amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("~w~Celebrate")) { Features::animateallPlayer("rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("~w~Electrocution")) { Features::animateallPlayer("ragdoll@human", "electrocute"); }
			if (Menu::Option("~w~Suicide")) { Features::animateallPlayer("mp_suicide", "pistol"); }
			if (Menu::Option("~w~Showering")) { Features::animateallPlayer("mp_safehouseshower@male@", "male_shower_idle_b"); }
		}
		break;
		case animfp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Animations");
			Menu::MenuOption("~w~Scenarios", senas);

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("~w~Clear Animation")) {

				AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));

			}

			if (Menu::Option("~w~Sex Receiver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("~w~Sex Giver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("~w~Stripper Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("~w~Pole Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("~w~Push Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("~w~Sit Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("~w~Celebrate")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("~w~Electrocution")) { Features::animatePlayer(Features::Online::selectedPlayer, "ragdoll@human", "electrocute"); }
			if (Menu::Option("~w~Suicide")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_suicide", "pistol"); }
			if (Menu::Option("~w~Showering")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_safehouseshower@male@", "male_shower_idle_b"); }
		}
		break;
#pragma endregion
#pragma region Scanrios
		//Scenarios Animtions 
		case senas:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Sceanrios");
			if (Menu::Option("~w~Kill Animation")) AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::PLAYER_PED_ID());
			if (Menu::Option("~w~Paparizzi")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_PAPARAZZI", 0, true);
			if (Menu::Option("~w~Drug Dealer")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
			if (Menu::Option("~w~Drinking Coffee")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_AA_COFFEE", 0, true);
			if (Menu::Option("~w~Playing Instruments")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSICIAN", 0, true);
			if (Menu::Option("~w~Flexing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSCLE_FLEX", 0, true);
			if (Menu::Option("~w~Jogging")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_JOG_STANDING", 0, true);
			if (Menu::Option("~w~Binoculars")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_BINOCULARS", 0, true);
			if (Menu::Option("~w~Clipboard")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CLIPBOARD", 0, true);
			if (Menu::Option("~w~Bench Press")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS", 0, true);
			if (Menu::Option("~w~Chin Ups")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_MUSCLE_CHIN_UPS", 0, true);
			if (Menu::Option("~w~BBQ")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_BBQ", 0, true);
			if (Menu::Option("~w~Superhero")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SUPERHERO", 0, true);
			if (Menu::Option("~w~Fishing")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_STAND_FISHING", 0, true);
			if (Menu::Option("~w~Security")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SECURITY_SHINE_TORCH", 0, true);
			if (Menu::Option("~w~Leaf Blower")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
			if (Menu::Option("~w~Film Shocking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MOBILE_FILM_SHOCKING", 0, true);
			if (Menu::Option("~w~Idle Cop")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_COP_IDLES", 0, true);
			if (Menu::Option("~w~Drinking")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRINKING", 0, true);
			if (Menu::Option("~w~Golf Player")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GOLF_PLAYER", 0, true);
			if (Menu::Option("~w~Welding")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_WELDING", 0, true);
			if (Menu::Option("~w~Smoking Pot")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SMOKING_POT", 0, true);
			if (Menu::Option("~w~Hammering")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_HAMMERING", 0, true);
			if (Menu::Option("~w~Tennis")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
			if (Menu::Option("~w~Drilling")) AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CONST_DRILL", 0, true);
		}
		break;
#pragma endregion
#pragma region Onlineplayer List Code
		//Online Player List Code 
		case onlinemenu_playerlist:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Player List");

			for (int i = 0; i < 32; ++i) {
				Player isFriend = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				bool is_friend;
				bool handle_valid = Features::isPlayerFriend(i, is_friend);
				if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
					Menu::MenuOption(PLAYER::GET_PLAYER_NAME(i), onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
					std::stringstream ss;
					if (NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0) == i) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~y~[HOST]";
						std::string s = ss.str();
						const char *cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (PLAYER::GET_PLAYER_INVINCIBLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~r~[MODDER]";
						std::string s = ss.str();
						const char *cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (handle_valid && is_friend) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~g~[FRIEND]";
						std::string s = ss.str();
						const char *cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else if (isFriend == PLAYER::PLAYER_PED_ID()) {
						ss << PLAYER::GET_PLAYER_NAME(i) << " ~b~[SELF]";
						std::string s = ss.str();
						const char *cstr = s.c_str();
						Menu::MenuOption(cstr, onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
					else {
						Menu::MenuOption(PLAYER::GET_PLAYER_NAME(i), onlinemenu_selected) ? Features::Online::selectedPlayer = i : NULL;
					}
				}
			}


		}
		break;
#pragma endregion
#pragma region onlinemnu selected
		//Select Online Player Codes 
		case onlinemenu_selected:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Selected");
			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));
			if (Features::Online::selectedPlayer != PLAYER::PLAYER_ID()) { Menu::MenuOption("~w~Force Animation", forcean); }
			if (Features::Online::selectedPlayer != PLAYER::PLAYER_ID()) { Menu::MenuOption("~w~TP Options", tpother); }

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			//Menu::MenuOption("~w~Effects ~w~->", onlineftp); //ah ok understood
			if (Features::Online::selectedPlayer != PLAYER::PLAYER_ID()) { Menu::Toggle("Spectate", Features::spectate[Features::Online::selectedPlayer], [] { Features::specter(Features::spectate[Features::Online::selectedPlayer]); }); }
			Menu::MenuOption("~w~Attach to Player", attachtp);
			Menu::MenuOption("~w~Attach Vehicles to Player", attachtv);
			Menu::MenuOption("~w~Animation for Player", animfp);
			Menu::MenuOption("~w~Teleport Options", tpother);
			//Menu::MenuOption("~w~Vehicle Weapons", vehweapplay);
			Menu::MenuOption("Effects", PTFXO);
			//Menu::MenuOption("~w~Drop Options", dropoptions);
			Menu::MenuOption("~w~Pickup Drop Options", dropOnlinepick);
			Menu::MenuOption("~r~Money Drop System", dropOnline);
			Menu::MenuOption("~w~Custom Outfit Changer Player", cocplll);
			Menu::MenuOption("~w~Weapon Menu", weaponmenu);
			Menu::MenuOption("~r~Remote Options", remoteopt);
			Menu::MenuOption("~w~Vehicle Spawner to Player", vehspawneralone);
			Menu::MenuOption("~w~Vehicle Options", dewd);
			Menu::MenuOption("~w~BodyGuard Menu", bodyoptions); //wtf lol
			Menu::MenuOption("~w~Troll Menu", trollmenu);
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Attach Objects on Player");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Lets dance the selected Player xD");
			}
			if (Menu::Settings::currentOption == 8) { // you know what i 
				Menu::optionInfo("Change the Outfit from other Player");
			}






		}
		break;
		case dewd:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Options");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			Menu::MenuOption("~w~Vehicle Weapons (Player)", VehWeaponplll);

			Menu::Toggle("Stick To Ground Players Vehicle", Features::stickToGround22[Features::Online::selectedPlayer]);
			Menu::Toggle("~w~Engine Allways On", Features::enginealwaysonboolpl[Features::Online::selectedPlayer], [] { Features::enginealwaysonpl(Features::enginealwaysonboolpl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Speed Meter KM/h from Player", Features::Speedometerboolpl[Features::Online::selectedPlayer], [] { Features::Speedometerpl(Features::Speedometerboolpl[Features::Online::selectedPlayer]); });

			if (Menu::Option("Max Car")) {


				Vehicle vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, 0);
				for (int i = 0; i < 50; i++)
				{
					VEHICLE::SET_VEHICLE_MOD(vehicle, i, VEHICLE::GET_NUM_VEHICLE_MODS(vehicle, i) - 1, false);
				}
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
			}

			if (Menu::Option("~w~Fix Car")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
				VEHICLE::SET_VEHICLE_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
			}
			if (Menu::Option("Pop Tyres")) {

				Vehicle selectedlPlayerveh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), FALSE);
				bool isveh = PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), FALSE);
				if (isveh)
				{
					RequestControlOfEnt(selectedlPlayerveh);
					VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(selectedlPlayerveh, TRUE);
					for (int i = 5; i--;)
						VEHICLE::SET_VEHICLE_TYRE_BURST(selectedlPlayerveh, i, TRUE, 1000.f);

				}


			}

			if (Menu::Option("Add Big Ramp")) {

				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

				if (PED::IS_PED_IN_ANY_VEHICLE(Handle, false))
				{
					Vector3 Him = ENTITY::GET_ENTITY_COORDS(Handle, true);
					int VehicleID = PED::GET_VEHICLE_PED_IS_IN(Handle, true);
					int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
					STREAMING::REQUEST_MODEL(hash2);
					if (STREAMING::HAS_MODEL_LOADED(hash2))
					{
						Entity My_Objects = OBJECT::CREATE_OBJECT(hash2, Him.x, Him.y, Him.z, 1, 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(My_Objects))
						{
							ENTITY::SET_ENTITY_COLLISION(My_Objects, true, true);
							ENTITY::SET_ENTITY_ALPHA(My_Objects, 120, false);
							uint Me = PLAYER::PLAYER_PED_ID();
							Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
							Vector3 null; null.x = 0, null.y = 0; null.z = 0;
							Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
							Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
							ENTITY::ATTACH_ENTITY_TO_ENTITY(My_Objects, VehicleID, 0, a.x, 6.3, a.z, b.x, b.y, b.z, 0, false, true, 0, 2, true);
						}
					}
				}
			}


		}
		break;
		case attachtv:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Attach Vehicle to Player");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			//if (Menu::ListVector("After Hours Nightclub", afthour, soutprop455)) {

			//	KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (afthour[soutprop455]));
			//};


			/*if (Menu::ListVector("South Andreas", SOUTHERNSAN, soutprop)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (SOUTHERNSAN[soutprop]));
			};*/

			if (Menu::ListVector("Doomsday", Doomsday1, Asoutprop1)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Doomsday1[Asoutprop1]));
			};

			if (Menu::ListVector("GunRunning", GUNRUNNING1, soutprop3)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (GUNRUNNING1[soutprop3]));
			};

			if (Menu::ListVector("Cunningstunts", CUNNINGSTUNTS1, soutprop4)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (CUNNINGSTUNTS1[soutprop4]));
			};

			if (Menu::ListVector("ImportExport", IMPORTEXPORT1, soutprop5)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (IMPORTEXPORT1[soutprop5]));
			};

			if (Menu::ListVector("Boats", Boats1, soutprop6)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Boats1[soutprop6]));
			};

			if (Menu::ListVector("Commercial", Commercial1, soutprop7)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Commercial1[soutprop7]));
			};

			if (Menu::ListVector("Compacts", Compacts1, soutprop8)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Compacts1[soutprop8]));
			};

			if (Menu::ListVector("Coupes", Coupes1, soutprop9)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Coupes1[soutprop9]));
			};

			if (Menu::ListVector("Cycles", Cycles1, soutprop10)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Cycles1[soutprop10]));
			};

			if (Menu::ListVector("Emergency", Emergency1, soutprop11)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Emergency1[soutprop11]));
			};

			if (Menu::ListVector("Helicopters", Helicopters1, soutprop12)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Helicopters1[soutprop12]));
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop13)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Industrial1[soutprop13]));
			};

			if (Menu::ListVector("Military", Military1, soutprop14)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Military1[soutprop14]));
			};

			if (Menu::ListVector("Motorcycles", Motorcycles1, soutprop15)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Motorcycles1[soutprop15]));
			};

			if (Menu::ListVector("Muscle", Muscle1, soutprop16)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Muscle1[soutprop16]));
			};

			if (Menu::ListVector("OffRoad", OffRoad1, soutprop17)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (OffRoad1[soutprop17]));
			};

			if (Menu::ListVector("Planes", Planes1, soutprop18)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Planes1[soutprop18]));
			};

			if (Menu::ListVector("Sedans", Sedans1, soutprop19)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Sedans1[soutprop19]));
			};

			if (Menu::ListVector("Service", Service1, soutprop20)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Service1[soutprop20]));
			};

			if (Menu::ListVector("Sports", Sports1, soutprop21)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Sports1[soutprop21]));
			};

			if (Menu::ListVector("Sportclassic", SportsClassics1, soutprop22)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (SportsClassics1[soutprop22]));
			};

			if (Menu::ListVector("Super Sports", Super1, soutprop23)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Super1[soutprop23]));
			};

			if (Menu::ListVector("SUVs", SUVs1, soutprop24)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (SUVs1[soutprop24]));
			};

			if (Menu::ListVector("Trailer", Trailer1, soutprop25)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Trailer1[soutprop25]));
			};

			if (Menu::ListVector("Trains", Trains1, soutprop26)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Trains1[soutprop26]));
			};

			if (Menu::ListVector("Utility", Utility1, soutprop27)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Utility1[soutprop27]));
			};

			if (Menu::ListVector("Vans", Vans1, soutprop28)) {

				KEEEk(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Vans1[soutprop28]));
			};



		}
		break;
		case remoteopt:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Remote Options");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			if (Menu::Option("~w~Non Host Kick")) {

				DWORD64 args[4] = { 1394869423, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}

			/if (Menu::Option("Remote Wanted Level")) {

				Features::fakelelvel(Features::Online::selectedPlayer);

			}

			if (Menu::Option("Remote Transaction Error")) {

				auto unkKek1 = globalHandle(1624079 + 1 + Features::Online::selectedPlayer * 558 + 491).As<std::uint64_t>();
				auto unkKek2 = globalHandle(1641937 + 9).As<std::uint64_t>();
				std::uint64_t args[8] = {
					-1241703753,
					player,
					10000, // amount
					0,
					0,
					unkKek1, unkKek2, unkKek2
				};
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 8, 1 << Features::Online::selectedPlayer);

			}


			Menu::Toggle("~b~Remote Transaction Error Spam", Features::sounderror[Features::Online::selectedPlayer], [] { Features::sound55error(Features::sounderror[Features::Online::selectedPlayer]); });


			if (Menu::Option("~r~Remote Give Badsports")) {

				Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

				if(selectedPlayer) {
					int val = NumberKeyboard();
					Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_10TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_1ST_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_2ND_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_3RD_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_4TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_5TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_6TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_7TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_8TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_9TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BADSPORT_NUMDAYS_11TH_OFFENCE"), 99999, selectedPlayer);
					Hooking::stat_set_float($("BADSPORT_RESET_MINUTES"), 99999, selectedPlayer);
					Hooking::stat_set_float($("BADSPORT_RESET_MINUTES"), 99999, selectedPlayer);
					Hooking::stat_set_float($("MPPLY_OVERALL_BADSPORT"), 99999, selectedPlayer);
					Hooking::stat_set_bool($("MPPLY_CHAR_IS_BADSPORT"), 99999, selectedPlayer);
					Hooking::stat_set_int($("MPPLY_BECAME_BADSPORT_NUM"), 99999, selectedPlayer);
					Hooking::stat_set_int($("BAD_SPORT_BITSET"), 99999, selectedPlayer);
					Hooking::stat_set_int($("CHEAT_BITSET"), 99999, selectedPlayer);



				}
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Badsport gived :)");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}*/





			/*if (Menu::Option("~w~Failid Loading Screen")) {

				DWORD64 args[5] = { 526, Features::Online::selectedPlayer, 0, 0 };
				int playerId;
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 5, 1 << Features::Online::selectedPlayer);
				GAMEPLAY::CLEAR_BIT(&playerId, Features::Online::selectedPlayer);

			}*/



			if (Menu::Option("~w~Non Host Kick to Single Player")) {

				DWORD64 args[4] = { 2101106911, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("Crash Player")) {

				DWORD64 args[4] = { 1119445978, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);

				notifyMap("ENTITY: ~HUD_COLOUR_RED~ Player has been crashed successfully");

			}

			/*if (Menu::Option("test")) {

				DWORD64 args[10] = { -1172055819, Features::Online::selectedPlayer, 0, 0, 0, 0, 0, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 10, 1 << Features::Online::selectedPlayer);


			}*/


			if (Menu::Option("Force Mission")) {

				DWORD64 args[4] = { 422267492, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			/*if (Menu::Option("test ")) {

				DWORD64 args[8] = { 1796630608, Features::Online::selectedPlayer, 0, 0, 0, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 8, 1 << Features::Online::selectedPlayer);
			}*/





			if (Menu::Option("~w~Show GTAScreen ")) {


				DWORD64 args[4] = { -1306381802, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);


			}

			/*if (Menu::Option("~w~Sound Spam (Yacht) ")) {

				DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 1 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/
			Menu::Toggle("~b~Sound Spam (Yacht)", Features::sound1[Features::Online::selectedPlayer], [] { Features::sound11(Features::sound1[Features::Online::selectedPlayer]); });

			/*if (Menu::Option("~w~Sound Spam (Office) ")) {

				DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 2 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/
			Menu::Toggle("~b~Sound Spam (Office)", Features::sound2[Features::Online::selectedPlayer], [] { Features::sound22(Features::sound2[Features::Online::selectedPlayer]); });

			/*if (Menu::Option("~w~Sound Spam (Clubhouse) ")) {

				DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 3 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/
			Menu::Toggle("~b~Sound Spam (Clubhouse)", Features::sound3[Features::Online::selectedPlayer], [] { Features::sound33(Features::sound3[Features::Online::selectedPlayer]); });

			/*if (Menu::Option("~w~Sound Spam (Company Garage)")) {

				DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 6 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/
			Menu::Toggle("~b~Sound Spam (Company Garage)", Features::sound4[Features::Online::selectedPlayer], [] { Features::sound44(Features::sound4[Features::Online::selectedPlayer]); });

			/*if (Menu::Option("~w~Sound Spam (Tuning Workshop) ")) {

				DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 7 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/
			Menu::Toggle("~b~Sound Spam (Tuning Workshop)", Features::sound5[Features::Online::selectedPlayer], [] { Features::sound55(Features::sound5[Features::Online::selectedPlayer]); });



			if (Menu::Option("~b~CEO Kick Player")) {

				DWORD64 args[4] = { 585981075, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}


			if (Menu::Option("~b~CEO Ban Player ")) {

				DWORD64 args[3] = { 1318668309, Features::Online::selectedPlayer, 1 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 3, 1 << Features::Online::selectedPlayer);
			}

			if (Menu::Option("~b~CEO Kick Player with Notification ")) {

				uint64_t args[4];
				args[0] = 585981075;
				args[1] = Features::Online::selectedPlayer; 
				args[2] = 1;
				args[3] = 5;
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);

			}

			if (Menu::Option("~b~CEO Ban Player with Notification ")) {

				uint64_t args[4];
				args[0] = 1318668309;
				args[1] = Features::Online::selectedPlayer;
				args[2] = 1;
				args[3] = 5;
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);

			}




			/*if (Menu::Option("~w~Ban Player")) {

				DWORD64 args[9] = { 577066986, Features::Online::selectedPlayer, 0, 1, 6 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
			}*/


			if (Menu::Option("~w~Remote TP to eclipse ")) {

				DWORD64 args[9] = { -328868154, Features::Online::selectedPlayer, 1, -1, 1, 0, 0,0,0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 9, 1 << Features::Online::selectedPlayer);


			}

			/*if (Menu::Option("~w~Remote TP to eclipse 2 ")) {

				DWORD64 args[9] = { -328868154, Features::Online::selectedPlayer, 2, -1, 1, 0, 0,0,0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 9, 1 << Features::Online::selectedPlayer);


			}*/

			if (Menu::Option("~b~Kick Player from your CLUB ")) {

				DWORD64 args[9] = { -2105858993, Features::Online::selectedPlayer, 0, 0 };
				SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);


			}



			/*if (Menu::Option("~w~Give Player 3 Stars")) {

				if (ENTITY::DOES_ENTITY_EXIST(Features::Online::selectedPlayer))
				{
					const int maxPeds = 40;
					Ped ClonedPed[maxPeds];
					Ped playerPed = PLAYER::PLAYER_PED_ID();
					Vector3 coords = ENTITY::GET_ENTITY_COORDS(Features::Online::selectedPlayer, 0);
					for (int i = 0; i < maxPeds; i++)
					{
						ClonedPed[i] = PED::CLONE_PED(Features::Online::selectedPlayer, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), 1, 1);
						ENTITY::SET_ENTITY_COORDS(ClonedPed[i], coords.x, coords.y, coords.z + 25, 0, 0, 0, 1);
						PED::SET_PED_AS_COP(ClonedPed[i], true);
						WAIT(20);
						Vector3 cloneCoord = ENTITY::GET_ENTITY_COORDS(ClonedPed[i], 0);
						ENTITY::SET_ENTITY_VISIBLE(ClonedPed[i], false, false);
						FIRE::ADD_OWNED_EXPLOSION(Features::Online::selectedPlayer, cloneCoord.x, cloneCoord.y, cloneCoord.z, 9, 5.0f, 0, 1, 0.0f);
						WAIT(20);
						PED::DELETE_PED(&ClonedPed[i]);
					}
				}
			}*/

			Menu::Toggle("~w~Remote Off Radar", Features::orboolfr[Features::Online::selectedPlayer], [] {Features::OffRadarfr(Features::orboolfr[Features::Online::selectedPlayer]); });
			Menu::Toggle("~b~Remote Money", Features::playermon[Features::Online::selectedPlayer], [] {Features::monplayer(Features::playermon[Features::Online::selectedPlayer]); });

			//Menu::Toggle("~w~Give Player RP", Features::rpstealth, [] { Features::StealthRP(Features::rpstealth); });

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("The Player will kicked from the Lobby");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("The Player gets a Transaction Error Screen");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("The Player will Kicked to Singleplayer");
			}

			if (Menu::Settings::currentOption == 6) { // you know what i 
				Menu::optionInfo("Send him a Mission Notification");
			}
			if (Menu::Settings::currentOption == 7) { // you know what i 
				Menu::optionInfo("The Player get a GTA V Banner");
			}
			if (Menu::Settings::currentOption == 13) { // you know what i 
				Menu::optionInfo("Kick the Player from hes CEO");
			}
			if (Menu::Settings::currentOption == 14) { // you know what i 
				Menu::optionInfo("Ban the Player from hes CEO");
			}
			if (Menu::Settings::currentOption == 17) { // you know what i 
				Menu::optionInfo("Infinit the Player to your EC Tower");
			}
			if (Menu::Settings::currentOption == 18) { // you know what i 
				Menu::optionInfo("Kick the Player out from your Club");
			}

		}

		break;
		case vehweapplay:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Weapons");
			Menu::Break("Shoot with the Numpad Key (+)!");


		}
		break;
		case dropfake:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Fake Drops");

			Menu::Toggle("Money Fake Drop", Features::moneyguntogglesfake[Features::Online::selectedPlayer], [] {Features::OtherPlayerMoneyGunfakse(Features::moneyguntogglesfake[Features::Online::selectedPlayer]); });

			Menu::Break("Models");
			dropModelsSelectfakse();

		}
		case dropOnlinepick:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Pickups");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			Menu::Toggle("Drop Pickup", Features::pickup122[Features::Online::selectedPlayer], [] {Features::droppickup(Features::pickup122[Features::Online::selectedPlayer]); });

			Menu::Break("Models");
			dropModelsSelect1();


			if (Menu::Option("~w~Drop Armor")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1274757841, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Parachute")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1735599485, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Snack")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(483577702, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop RPG")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1295434569, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Portable Package")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(2158727964, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Paper Bag")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1897726628, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Security Case")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(3732468094, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}*/
		}
		break;
		case moneyyplayergun:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Give Player MoneyGun");

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("Amount Custom input", Features::DropAmount3, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount3 = NumberKeyboard();
				}
			}

			/*if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}*/

			Menu::Toggle("~w~Give Player MoneyGun", Features::moneyguntoggles[Features::Online::selectedPlayer], [] { Features::OtherPlayerMoneyGun(Features::moneyguntoggles[Features::Online::selectedPlayer]); });

			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("The Player can shoot Money");
			}

			Menu::Break("Models");
			dropModelsSelect();

			//what fix? the detection if im correct


		}
		break;
		case playrrkkk:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Impacts");

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			Menu::Toggle("~w~Imptact", Features::Explodegunpl[Features::Online::selectedPlayer], [] { Features::explodegunl(Features::Explodegunpl[Features::Online::selectedPlayer]); });
			if (Menu::Int("~w~Explosion Type", Menu::Settings::Explosionfick, 0, 38))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::Explosionfick = NumberKeyboard();
				}

			}

			if (Menu::Int("~w~Explosion Size", Menu::Settings::ficksize, 0, 10))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::ficksize = NumberKeyboard();
				}

			}





		}
		break;
		case weaponmenu:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Online");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			Menu::MenuOption("~w~Money Gun Player", moneyyplayergun);
			Menu::MenuOption("~w~Weapon Specials", karaton);
			Menu::MenuOption("~w~Weapon Impacts", playrrkkk);
			if (Menu::Option("Give All Weapons")) {
				uint Weapons[] = { 0x92A27487, 0x958A4A8F, 0xF9E6AA4B, 0x84BD7BFD, 0xA2719263, 0x8BB05FD7, 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, // Melee
					0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8, // Handguns
					0x13532244, 0x2BE6766B, 0x2BE6766B, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, // Submachine Guns
					0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, // Shotguns
					0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, // Assault Rifles
					0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, // Light Machine Guns
					0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, // Sniper Rifles
					0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, // Heavy Weapons
					0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, // Throwables
					0x34A67B97, 0xFBAB5776, 0x060EC506 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i], 9999, 1);
					WAIT(10);
				}
			}
			if (Menu::Option("Take All Weapons")) {
				uint Weapons[] = { 0x92A27487, 0x958A4A8F, 0xF9E6AA4B, 0x84BD7BFD, 0xA2719263, 0x8BB05FD7, 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, // Melee
					0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8, // Handguns
					0x13532244, 0x2BE6766B, 0x2BE6766B, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, // Submachine Guns
					0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, // Shotguns
					0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, // Assault Rifles
					0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, // Light Machine Guns
					0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, // Sniper Rifles
					0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, // Heavy Weapons
					0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, // Throwables
					0x34A67B97, 0xFBAB5776, 0x060EC506 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i]);
					WAIT(10);
				}
			}
			if (Menu::Option("~w~Give Player Railgun ")) {
				uint Weapons[] = { 0x6D544C99 };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i], 9999, 1);
				}
			}
			if (Menu::Option("~w~Give Player Snowball")) {
				uint Weapons[] = { 0x787F0BB };
				for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
					WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i], 9999, 1);
				}
			}







		}
		break;
		case karaton:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Specials");

			Menu::Toggle("~w~Give Player Object Gun", Features::Objectgunpl[Features::Online::selectedPlayer], [] { Features::objectgunpl(Features::Objectgunpl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Give Player Explode Gun", Features::explodeGunpl[Features::Online::selectedPlayer], [] { Features::ExplodeGunpl(Features::explodeGunpl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Give Player 1.44 Vehicle Gun", Features::Vehgunplnew[Features::Online::selectedPlayer], [] { Features::vehgunplnew(Features::Vehgunplnew[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Give Player Random Vehicle Gun", Features::Vehgunpl[Features::Online::selectedPlayer], [] { Features::vehgunpl(Features::Vehgunpl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Shoot Fake Money Bags", Features::moneyGunBagfakepl[Features::Online::selectedPlayer], [] {Features::moneyGunBagfakeplall(Features::moneyGunBagfakepl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Give Player Fire Gun", Features::fixfire2[Features::Online::selectedPlayer], [] { Features::firefix2(Features::fixfire2[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Give Player Drive-IT Gun", Features::driveitgun[Features::Online::selectedPlayer], [] { Features::gundriveit(Features::driveitgun[Features::Online::selectedPlayer]); });

		}
		break;
#pragma region drop options
		case dropoptions:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Drop Options");
			/*if (Menu::Option("~w~Give All Weapons")) {
			uint Weapons[] = { 0x99B507EA, 0x678B81B1, 0x4E875F73, 0x958A4A8F, 0x440E4788, 0x84BD7BFD, 0x1B06D571, 0x5EF9FEC4, 0x22D8FE39, 0x99AEEB3B, 0x13532244, 0x2BE6766B, 0xEFE7E2DF, 0xBFEFFF6D, 0x83BF0278, 0xAF113  9, 0x9D07F764, 0x7FD62962, 0x1D073A89, 0x7846A318, 0xE284C527, 0x9D61E50F, 0x3656C8C1, 0x05FC3C11, 0x0C472FE2, 0x33058E22, 0xA284510B, 0x4DD2DC56, 0xB1CA77B1, 0x687652CE, 0x42BF8A85, 0x93E220BD, 0x2C3731D9, 0xFDBC8A50, 0x24B17070, 0x060EC506, 0x34A67B97, 0xFDBADCED, 0x23C9F95C, 0x497FACC3, 0xF9E6AA4B, 0x61012683, 0xC0A3098D, 0xD205520E, 0xBFD21232, 0x7F229F94, 0x92A27487, 0x083839C4, 0x7F7497E5, 0xA89CB99E, 0x3AABBBAA, 0xC734385A, 0x787F0BB, 0x47757124, 0xD04C944D };
			for (int i = 0; i < (sizeof(Weapons) / 4); i++) {
			WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), Weapons[i], 9999, 1);
			WAIT(10);
			}
			}*/
			/*if (Menu::Option("~w~Take All Weapons")) {
			WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true);
			}*/
			Menu::Toggle("~w~Money Rain 1k", Features::savenewdrop9[Features::Online::selectedPlayer], [] {Features::cashdrop9(Features::savenewdrop9[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Money Rain 2k", Features::savenewdrop4[Features::Online::selectedPlayer], [] {Features::cashdrop4(Features::savenewdrop4[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Money Rain 2.5k", Features::savenewdrop21[Features::Online::selectedPlayer], [] {Features::cashdrop21(Features::savenewdrop21[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 2k (Fast)", Features::savenewdrop2[Features::Online::selectedPlayer], [] {Features::cashdrop2(Features::savenewdrop2[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1987$ (Paper Bag)", Features::savenewdropbag[Features::Online::selectedPlayer], [] {Features::cashdrop222(Features::savenewdrop222[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1999$ (xmas Prop)", Features::savenewdrop222[Features::Online::selectedPlayer], [] {Features::cashdropbag(Features::savenewdropbag[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 2k Special (Asteroid)", Features::savenewdrop333[Features::Online::selectedPlayer], [] {Features::cashdrop333(Features::savenewdrop333[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1777$ (SAFE Prop)", Features::savenewdrop2229[Features::Online::selectedPlayer], [] {Features::cashdrop2229(Features::savenewdrop2229[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1666$ (Mad Bag Prop)", Features::savenewdrop22291[Features::Online::selectedPlayer], [] {Features::cashdrop22291(Features::savenewdrop22291[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1555$ (Dummy Planes Prop)", Features::savenewdrop22292[Features::Online::selectedPlayer], [] {Features::cashdrop22292(Features::savenewdrop22292[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1444$ (Megaphones Prop)", Features::savenewdrop22293[Features::Online::selectedPlayer], [] {Features::cashdrop22293(Features::savenewdrop22292[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1333$ (MiniGun Prop)", Features::savenewdrop22294[Features::Online::selectedPlayer], [] {Features::cashdrop22294(Features::savenewdrop22294[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1222$ (Health Bag Prop)", Features::savenewdrop22295[Features::Online::selectedPlayer], [] {Features::cashdrop22295(Features::savenewdrop22295[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1111$ (Shoe Prop)", Features::savenewdrop22296[Features::Online::selectedPlayer], [] {Features::cashdrop22296(Features::savenewdrop22296[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 1k (Barbel 10kg Prop)", Features::savenewdrop22297[Features::Online::selectedPlayer], [] {Features::cashdrop22297(Features::savenewdrop22297[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 999$ (Alien Egg Prop)", Features::savenewdrop22298[Features::Online::selectedPlayer], [] {Features::cashdrop22298(Features::savenewdrop22298[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 2k Dildos", Features::savenewdrop204[Features::Online::selectedPlayer], [] {Features::cashdrop204(Features::savenewdrop204[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 2.5k (Fast)", Features::savenewdrop5[Features::Online::selectedPlayer], [] {Features::cashdrop5(Features::savenewdrop5[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Drop Him 2.5k (Circle)", Features::savenewdrop999[Features::Online::selectedPlayer], [] {Features::cashdrop999(Features::savenewdrop999[Features::Online::selectedPlayer]); });


			if (Menu::Option("~w~Drop Armor")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1274757841, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Parachute")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1735599485, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Snack")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(483577702, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop RPG")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1295434569, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Portable Package")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(2158727964, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Paper Bag")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(1897726628, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}
			if (Menu::Option("~w~Drop Security Case")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(3732468094, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}

			if (Menu::Option("~w~Drop Dep Bag")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(545862290, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}

			if (Menu::Option("~w~Drop Portable DLC Vehicle")) {  //
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				OBJECT::CREATE_AMBIENT_PICKUP(837436873, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);
			}


		}
		break;
#pragma endregion
#pragma region recover
		case recover:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Recovery");

			Menu::MenuOption("~w~Cash Options", stealth);
			Menu::MenuOption("~w~Unlock All Options Char.1", unlockalls);
			Menu::MenuOption("~w~Unlock All Options Char.2 ", unlockalls1);
			Menu::MenuOption("~w~RP Options", rp);
			//Menu::MenuOption("~w~ATM Options", atm);
			if (Menu::Option("~w~Im Flagged ?")) // best option XD
			{
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~You are not Flagged!");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Request", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Fuck of Shark Cards here there is Money for free");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Unlock All Content from GTA Online");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Unlock All Content from GTA Online");
			}
			if (Menu::Settings::currentOption == 4) { // you know what i 
				Menu::optionInfo("RP RP Correction or Loop");
			}
		}
		break;
#pragma endregion
#pragma region stealth
		case stealth:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Options");

			if (Menu::Settings::currentOption == 1) { // you know what i 
				Menu::optionInfo("Money Stealth");
			}
			if (Menu::Settings::currentOption == 2) { // you know what i 
				Menu::optionInfo("Transfer your Money to Wallet or Bank");
			}
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Remove your actually Money");
			}
			Menu::MenuOption("~w~Stealth Money Options", stealthadd);
			Menu::MenuOption("Transfer Options", moneyoptionsas);
			Menu::MenuOption("~w~Remove Money Options", stealtremove);
			Menu::MenuOption("~w~Drop Money Options", dropadd);
			Menu::MenuOption("~w~Cyrcle Drop Options", dropOnline22);
			Menu::MenuOption("~w~Money Rain Options", mrain);
			Menu::MenuOption("~w~Fake Drop Options", dropfake);
			Menu::Toggle("~w~Safest Money 2500k drop", Features::moneydropp, [] { Features::dildomoneylocal(Features::moneydropp); });
			Menu::Toggle("~w~Money 2k drop", Features::featurePlayermoneyDrop1, [] { Features::bPlayerExists(Features::featurePlayermoneyDrop1); });
			Menu::Toggle("~w~Money Rain (Safest)", Features::moneyrain2k, [] { Features::RainMoney(Features::moneyrain2k); });
			Menu::Toggle("~w~10k Alien Drop (RISK)", Features::delop, [] { Features::lolop(Features::delop); });
			Menu::Toggle("~w~2k Ped Drop (RISK)", Features::peddroper, [] { Features::proped(Features::peddroper); });

			/if (Menu::Option("~w~Earn 20 million! from R*")) {

				 NETWORKCASH::NETWORK_EARN_FROM_ROCKSTAR(20000000);
				 notifyMap("Selected Cash: ~HUD_COLOUR_ORANGE~ 20 million!");

			}



		}
		break;
		case moneyoptionsas:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			//Menu::DRAW_TEXTURE("shopui_title_exec_vechupgrade", "shopui_title_exec_vechupgrade", titlebox, 0.0800f, 0.21f, 0.090f, 0, 255, 255, 255, 255);
			Menu::Subtitle("~w~Transfer Money");

			if (Menu::Int3("~w~Amount", Features::ammoutwithraw, 0, 15000000, 1000000))
			{

				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::ammoutwithraw = NumberKeyboard();
				}

			}

			if (Menu::Option("~w~Transfer Money to Wallet(~g~$~w~)")) {
				Features::withdraw();
			}

			if (Menu::Option("~w~Transfer Money to Bank(~g~$~w~)")) {
				Features::DepositToBank();
			}


		}
		break;
		case stealtremove:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Remove Money");
			if (Menu::Int3("~w~Amount", Features::amount5, 0, 2147483647, 500000))
			{

				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount5 = NumberKeyboard();
				}

			}

			Menu::Toggle("~w~Remove Money Wallet(~g~$~w~)", Features::removerlol, [] { Features::RemoveRlop(Features::removerlol); });
			Menu::Toggle("~w~Remove Money Bank(~g~$~w~)", Features::remover, [] { Features::RemoveR(Features::remover); });

			if (Menu::Int("~w~Delay", Features::stealthDelaydel, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelaydel = NumberKeyboard();
				}
			}



		}
		break;
		case mrain:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Rain Options");

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("~w~Amount Custom input", Features::DropAmount1, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount1 = NumberKeyboard();
				}
			}



			if (Menu::Int("~w~Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}




			if (Menu::Int("~w~Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}



			Menu::Toggle("~w~Cash Rain", Features::moneyrain001, [] { Features::MoneyRain001(Features::moneyrain001); });


			Menu::Break("~w~Models");
			dropModelsSelect();



		}
		break;
		case dropadd:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Drop Options");

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("~w~Amount Custom input", Features::DropAmount1, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount1 = NumberKeyboard();
				}
			}



			if (Menu::Int("~w~Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}




			if (Menu::Int("~w~Delay", Features::DropDelay, 50, 3000, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			Menu::Int("Bags", Features::Bags, 0, 20);


			Menu::Toggle("~w~Cash Drop", Features::cashself1, [] { Features::CashSelf1(Features::cashself1); });
			Menu::Toggle("~w~Random Cash Drop", Features::cashrandhgg, [] { Features::cashrandhggh(Features::cashrandhgg); });


			Menu::Break("~w~Models");
			dropModelsSelect();





		}
		break;
		case tunables:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Tunables");

			Menu::Toggle("Snow", globalHandle(0x40001 + 0x1271).As<bool>());
			//Menu::Toggle("Snow test", globalHandle(0x40001 + 0xCF0758BE).As<bool>());
			Menu::Toggle("Xmas Content", globalHandle(0x40001 + 0x127C).As<bool>());
			Menu::Toggle("Xmas Gifts", globalHandle(0x40001 + 0x1C7E).As<bool>());
			//Menu::Toggle("Xmas Vehicles", globalHandle(0x40001 + "XMAS2015_VEHICLE").As<bool>());
			Menu::Toggle("~w~Snowballs", Features::snowballs, [] { Features::Snowballs(Features::snowballs); });
			Menu::Toggle("Valentine 2016 Clothing", globalHandle(0x40001 + 0x2FD9).As<bool>());
			Menu::Toggle("Valentine 2016 Vehicle", globalHandle(0x40001 + 0x2FDA).As<bool>());
			Menu::Toggle("Valentine Weapon", globalHandle(0x40001 + 0x2A90).As<bool>());
			Menu::Toggle("Valentine Vehicle", globalHandle(0x40001 + 0x2A91).As<bool>());
			Menu::Toggle("Valentine Masks", globalHandle(0x40001 + 0x2A92).As<bool>());
			Menu::Toggle("Valentine Hair", globalHandle(0x40001 + 0x2A93).As<bool>());
			Menu::Toggle("Valentine Clothing", globalHandle(0x40001 + 0x2A94).As<bool>());
			Menu::Toggle("Be My Valentine", globalHandle(0x40001 + 0x300D).As<bool>());
			Menu::Toggle("Valentine Event", globalHandle(0x40001 + 0x1766).As<bool>());

			Menu::Toggle("Halloween Sounds", globalHandle(0x40001 + 0x2D2F).As<bool>());
			Menu::Toggle("Halloween Anims", globalHandle(0x40001 + 0x2AAD).As<bool>());
			Menu::Toggle("Halloween Weapons", globalHandle(0x40001 + 0x2AA6).As<bool>());


			Menu::Toggle("Rockstars RP Bonus", globalHandle(0x40001 + 0x1284).As<bool>());
			//Menu::Toggle("Creators Mode", globalHandle(0x40001 + 0x5E79451E).As<bool>());


			if (Menu::Option("~w~CASH_MULTIPLIER")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("CASH_MULTIPLIER"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}
			if (Menu::Option("~w~XP_MULTIPLIER")) {
				int val = NumberKeyboard();
				Hooking::stat_set_int($("XP_MULTIPLIER"), val, 1);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Set Stat");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Stats", 1, "", 9, 0);
				UI::_DRAW_NOTIFICATION(FALSE, FALSE);
			}


		}
		break;
		case stealthadd:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Stealth Options");

			//Menu::Break("~w~Fake 2 Billion Stealth Method");


			//Menu::Toggle("~w~Stealh Loop", Features::editmoney, [] { Features::MoneyEdit(Features::editmoney); });

			Menu::Break("~w~Safest 10 Stealth Method");

			if (Menu::Int2("~w~Amount", Features::amount405, 0, 10000000, 1000000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount405 = NumberKeyboard();
				}
			}

			if (Menu::Int2("Stealth Delay", Features::stealthDelay405, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay405 = NumberKeyboard();
				}
			}





			Menu::Toggle("~w~Stealh Loop(~g~$~w~)", Features::stealthnewsafe, [] { Features::newStealthLoop(Features::stealthnewsafe); });

			Menu::Break("~w~Stealth 15Mil Method");

			if (Menu::Int2("~w~Amount", Features::amount22, 0, 15000000, 1000000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount22 = NumberKeyboard();
				}
			}

			if (Menu::Int2("Stealth Delay", Features::stealthDelay1, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay1 = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Stealth Loop(~g~$~w~)", Features::giver, [] { Features::StealthDropinte(Features::giver); });


			Menu::Break("~w~Random Stealth Method");

			if (Menu::Int("Stealth Delay", Features::stealthDelay02222, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay02222 = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Stealth Loop(~g~$~w~)", Features::randommon, [] { Features::randommonnn(Features::randommon); });

			Menu::Break("~w~10 Mil Stealth (Triggerd)");

			if (Menu::Int("~w~Amount", Features::amount4051, 0, 10000000, 1000000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount4051 = NumberKeyboard();
				}
			}

			if (Menu::Int("Stealth Delay", Features::stealthDelay405, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay4051 = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Add to Wallet", Features::stealthnewsafe2211, [] { Features::newStealthLoop2211(Features::stealthnewsafe2211); });
			Menu::Toggle("~w~Add to Bank", Features::stealthnewsafe22, [] { Features::newStealthLoop22(Features::stealthnewsafe22); });

			Menu::Break("~w~Safest 15 Mil Stealth (Triggerd)");

			if (Menu::Int("~w~Amount", Features::amount4051ok, 0, 15000000, 1000000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::amount4051ok = NumberKeyboard();
				}
			}

			if (Menu::Int("Stealth Delay", Features::stealthDelay4051ok, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay4051ok = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Add to Wallet", Features::stealthnewsafe12ok, [] { Features::newStealthLoop12ok(Features::stealthnewsafe12ok); });
			Menu::Toggle("~w~Add to Bank", Features::stealthnewsafe22ok, [] { Features::newStealthLoop22ok(Features::stealthnewsafe22ok); });

			Menu::Break("~w~Safest Random Mil Stealth (Triggerd)");

			if (Menu::Int("Stealth Delay", Features::stealthDelay4051okok, 0, 3000, 100))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay4051okok = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Add to Wallet", Features::stealthnewsafe22okoklol, [] { Features::newStealthLoop22okoklol(Features::stealthnewsafe22okoklol); });
			Menu::Toggle("~w~Add to Bank", Features::stealthnewsafe22okok, [] { Features::newStealthLoop22okok(Features::stealthnewsafe22okok); });




		}	break;
		case moneyobj:
		{
			Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			Menu::Title("~w~Money Object Spawner");
			if (Menu::Option("~w~Custom Input"))
		{
				if (ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
				{
					GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "FMMC_KEY_TIP8", "", "", "", "", "", 60);
					while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
					Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
					Moneyobject(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(), Position); break;
			}
				else
				{
					UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~ Object Invalid!");
					UI::_DRAW_NOTIFICATION(FALSE, FALSE);
				}
			}
			Menu::Toggle("Custom Drop", Features::Customdrop, [] { Features::customdrop(Features::Customdrop); });
			if (Menu::Option("Test 1 "))
			{
			int ModelHash = GAMEPLAY::GET_HASH_KEY("prop_money_med_bag");
			int PickupHash = GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_CASE");
			STREAMING::REQUEST_MODEL(ModelHash);
			if (STREAMING::HAS_MODEL_LOADED(ModelHash))
			{
			OBJECT::CREATE_AMBIENT_PICKUP(PickupHash, Position.x, Position.y, Position.z, 0, 2500, ModelHash, 0, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ModelHash);
			}
			}
			if (Menu::Option("Test 2 "))
			{
			Moneyobject("prop_money_purse", Position);
			}
			if (Menu::Option("Test 3 "))
			{
			Moneyobject("prop_money_dep_bag", Position);
			}
			if (Menu::Option("Test 4 "))
			{
			Moneyobject("prop_money_wallet", Position);
			}
			if (Menu::Option("Test 5 "))
			{
			Moneyobject("prop_money_paper_bag", Position);
			}
			if (Menu::Option("Test 6 "))
			{
			Moneyobject("prop_money_case", Position);
			}
			 fertig :D
		}break;
#pragma endregion
#pragma region rp menu
		case rp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~RP");
			if (Menu::Settings::currentOption == 3) { // you know what i 
				Menu::optionInfo("Teleport you to Mount Chilliad , you get better RP Loop");
			}
			if (Menu::Settings::currentOption == 6) { // you know what i 
				Menu::optionInfo("Put a Custom Rank and recieve from R* RP");
			}
			Menu::Break("~w~High Risk*");
			Menu::Int("~w~RP Loop Delay", Features::RPLoopDelay, 1, 100);
			Menu::Toggle("~w~RP Loop", Features::RPLoop, [] {Features::rpLoop(); });
			Menu::Break("~w~----------------------");
			Menu::Break("~w~Change Lobby after that!");
			if (Menu::Option("~w~RP Correction")) {
				int rank = NumberKeyboard();
				if (rank <= 8000 && rank > 0) {

					Hooking::stat_set_int($("MP0_CHAR_SET_RP_GIFT_ADMIN"), Features::Levels[(rank - 1)], 1); // stat set int is so risky
					Hooking::stat_set_int($("MP1_CHAR_SET_RP_GIFT_ADMIN"), Features::Levels[(rank - 1)], 1);

					UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after RP Correction");
					UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Rockstar", 1, "", 9, 0);
					UI::_DRAW_NOTIFICATION(FALSE, FALSE);

				}




			}

			if (Menu::Int5("~w~Choose Rank", Features::setrank, 0, 8000, 1))
			{
				
					Hooking::stat_set_int($("MP0_CHAR_XP_FM"), Features::setrank, 1); // stat set int is so risky
					Hooking::stat_set_int($("MP0_CHAR_XP_FM"), Features::setrank, 1);

			}



			if (Menu::Option("~w~Crew RP Correction")) {
				int rank = NumberKeyboard();
		if (rank <= 8000 && rank > 0) {

					Hooking::stat_set_int($("MPPLY_CREW_LOCAL_TIME_0"), Features::Levels[(rank - 1)], 1); // stat set int is so risky
					Hooking::stat_set_int($("MPPLY_CREW_GLOBAL_XP_0"), Features::Levels[(rank - 1)], 1);

					UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
					UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Change Session after Crew RP Correction");
					UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Rockstar", 1, "", 9, 0);
					UI::_DRAW_NOTIFICATION(FALSE, FALSE);

				}




			//}
			if (Menu::Settings::currentOption == 7) { // you know what i 
				Menu::optionInfo("Recieve RP in instant Lobby");
			}
			if (Menu::Option("~w~Set rank")) {
				int rank = NumberKeyboard();
				if (rank <= 8000 && rank > 0) {
					Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), Features::Levels[(rank - 1)], 1);
					Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_XP_FM"), Features::Levels[(rank - 1)], 1);
					Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP2_CHAR_XP_FM"), Features::Levels[(rank - 1)], 1);
				}
			}

			/Menu::Break("~w~----------------------");
			Menu::MenuOption("Level 1-500 ~w~", level1);
			Menu::MenuOption("Level 500-1k ~w~", level2);
			Menu::MenuOption("Level 1k-2k ~w~", level3);
			Menu::MenuOption("Level 2k-3k ~w~", level4);
			Menu::MenuOption("Level 3k-6k ~w~", level5);
			Menu::MenuOption("Level 7k-8k ~w~", level6);*/
		}
		break;
#pragma endregion
#pragma region atm
		/case atm:
		{
		Menu::Title("~w~Ephesys ~w~VIP");
		Menu::Subtitle("~w~ATM");


		if (Menu::Option("~w~Withdraw 1 Mil")) {
		Features::withdraw(1000000);
		}
		if (Menu::Option("~w~Withdraw 10 Mil")) {
		Features::withdraw(10000000);
		}
		if (Menu::Option("~w~Withdraw 100 Mil")) {
		Features::withdraw(100000000);
		}
		if (Menu::Option("~w~Withdraw 8 Mil")) {
		Features::withdraw(8000000);
		}
		if (Menu::Option("~w~Withdraw 250 K")) {
		Features::withdraw(250000);
		}
		if (Menu::Option("~w~Withdraw 100 K")) {
		Features::withdraw(100000);
		}
		break;

		}
		break;
		case settingsmenu:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Settings");

			Menu::Toggle("Display Globle Header", Menu::Settings::displayEnd);
			Menu::Toggle("Menu Scrolling Sounds", Menu::Settings::sound);
			Menu::Toggle("Menu Return Sounds", Menu::Settings::ret);
			//Menu::Float("Scroller Speed ", Menu::ScrollerSpeed, 0, 0.9, 0.1);
			Menu::Int("Header Texture", Menu::Settings::titleRectTexture, 0, 5);

			/*if (Menu::Option("~w~Fake Ban  Screen")) {
				GRAPHICS::DRAW_RECT(.500, .500, 1.500, 1.500, 0, 0, 0, 255);
				UI::_DRAW_TEXT("alert", 7, .500, .390, 1.8f, 2.0f, 243, 191, 40, 255, true, 3);
				GRAPHICS::DRAW_RECT(.500, .500, .360, .004, 255, 255, 255, 255);
				UI::_DRAW_TEXT("You have been banned from Grand Theft Auto Online permanently", 0, .500, .515, 0.4f, 0.4f, 255, 255, 255, 255, true, 3);
				UI::_DRAW_TEXT("Return to Grand Theft Auto V", 0, .500, .550, 0.4f, 0.4f, 255, 255, 255, 255, true, 3);
				GRAPHICS::DRAW_RECT(.500, .600, .360, .004, 255, 255, 255, 255);
				UI::DISPLAY_RADAR(false);
			}*/
			//Menu::Int("Footer Texture", Menu::Settings::titleRectTexture2, 6, 6);

			if (Menu::Int("~w~GIF Banner Delay", Features::bandelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::bandelay = NumberKeyboard();
				}
			}
			if (Menu::Option("~w~MenuX +")) {
				if (Menu::Settings::menuX < 0.81f) Menu::Settings::menuX += 0.01f;

			}
			if (Menu::Option("~w~MenuX -")) {
				if (Menu::Settings::menuX > 0.17f) Menu::Settings::menuX -= 0.01f;
			}
			Menu::Toggle("~w~Rainbow Menu Slow", Features::rainbowmenu, [] { Features::Rainbowmenu(Features::rainbowmenu); });
			Menu::Toggle("~w~Rainbow Menu", Features::rainbowmenu, [] { Features::Rainbowmenu(Features::rainbowmenu); });*/
			if (Menu::Int("~w~Scroll Delay", Menu::Settings::keyPressDelay2, 1, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::keyPressDelay2 = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Int Delay", Menu::Settings::keyPressDelay3, 1, 200))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::keyPressDelay3 = NumberKeyboard();
				}
			}
			Menu::MenuOption("~w~Theme Loader", themeloader);
			Menu::MenuOption("~w~Title Background", settingstitlerect);
			Menu::MenuOption("~w~Scoller", settingsscroller);
			Menu::MenuOption("~w~Option Text", settingsoptiontext);
			Menu::MenuOption("~w~Hud Color GTA", sex);



			int clone[1000];
			int gcount = 1;

			if (Menu::Option("Eject Menu")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Hash railgun = Features::bagHash557;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash pedm = Features::bagHash557;
				STREAMING::REQUEST_MODEL(pedm);
				while (!STREAMING::HAS_MODEL_LOADED(pedm))
					WAIT(0);
				int my_group = PLAYER::GET_PLAYER_GROUP(selectedplayer);
				clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
				PED::SET_PED_AS_GROUP_LEADER(selectedplayer, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
				PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
				WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
				PED::SET_GROUP_FORMATION(my_group, 3);
				PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
				gcount++;

			}

			if (Menu::Option("~w~Exit")) exit(0);



		}
		break;
		case Staff:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Ephesys Themes");
			Menu::Break("~w~ SPECIALS!!!");
			if (Menu::Option("EphesysSpecial1")) {
				Menu::Settings::count = { 255, 255, 255, 255, 6 };
				Menu::Settings::titleText = { 226, 46, 52, 200, 7 };
				Menu::Settings::titleRect = { 37, 35, 35, 255 };
				Menu::Settings::optionText = { 226, 46, 52, 255, 6 };
				Menu::Settings::breakText = { 226, 46, 52, 200, 1 };
				Menu::Settings::arrow = { 255, 255, 255, 255, 3 };
				Menu::Settings::optionRect = { 37, 35, 35, 200 };
				Menu::Settings::scroller = { 226, 46, 52, 150 };
				Menu::Settings::integre = { 255, 255, 255, 255, 2 };
				Menu::Settings::line = { 255, 255, 255, 255 };
				Menu::Settings::primary = { 255, 0, 0 };
				Menu::Settings::secondary = { 0, 255, 0 };
				notifyMap("~w~Ninja Skin On!");
			}
			if (Menu::Option(" ~w~EphesysSpecial2")) {
				Menu::Settings::count = { 255, 255, 255, 255, 6 };
				Menu::Settings::titleText = { 119, 0, 205, 200, 7 };
				Menu::Settings::titleRect = { 37, 35, 35, 255 };
				Menu::Settings::optionText = { 119, 0, 205, 255, 6 };
				Menu::Settings::breakText = { 226, 46, 52, 200, 1 };
				Menu::Settings::arrow = { 255, 255, 255, 255, 3 };
				Menu::Settings::optionRect = { 37, 35, 35, 200 };
				Menu::Settings::scroller = { 119, 0, 205, 150 };
				Menu::Settings::integre = { 255, 255, 255, 255, 2 };
				Menu::Settings::line = { 255, 255, 255, 255 };
				Menu::Settings::primary = { 255, 0, 0 };
				Menu::Settings::secondary = { 0, 255, 0 };
				notifyMap("~w~NKYO Skin On!");
			}
			if (Menu::Option("~w~Take Two")) {
				Menu::Settings::count = { 255, 255, 255, 255, 6 };
				Menu::Settings::titleText = { 119, 0, 205, 200, 7 };
				Menu::Settings::titleRect = { 37, 35, 35, 255 };
				Menu::Settings::optionText = { 119, 0, 205, 255, 6 };
				Menu::Settings::breakText = { 226, 46, 52, 200, 1 };
				Menu::Settings::arrow = { 255, 255, 255, 255, 3 };
				Menu::Settings::optionRect = { 37, 35, 35, 200 };
				Menu::Settings::scroller = { 119, 0, 205, 150 };
				Menu::Settings::integre = { 255, 255, 255, 255, 2 };
				Menu::Settings::line = { 255, 255, 255, 255 };
				Menu::Settings::primary = { 255, 0, 0 };
				Menu::Settings::secondary = { 0, 255, 0 };
				notifyMap("~w~Zero Two Bae Skin On!");
			}
			if (Menu::Option("~w~V3N0M's Skin")) {
				Menu::Settings::count = { 255, 255, 255, 255, 6 };
				Menu::Settings::titleText = { 0, 35, 102, 200, 7 };
				Menu::Settings::titleRect = { 37, 35, 35, 255 };
				Menu::Settings::optionText = { 0, 35, 102, 255, 6 };
				Menu::Settings::breakText = { 226, 46, 52, 200, 1 };
				Menu::Settings::arrow = { 255, 255, 255, 255, 3 };
				Menu::Settings::optionRect = { 37, 35, 35, 200 };
				Menu::Settings::scroller = { 0, 35, 102, 150 };
				Menu::Settings::integre = { 255, 255, 255, 255, 2 };
				Menu::Settings::line = { 255, 255, 255, 255 };
				Menu::Settings::primary = { 255, 0, 0 };
				Menu::Settings::secondary = { 0, 255, 0 };
				notifyMap("~w~V3N0M's Skin On!");
			}
		}

		break;
		case themeloader:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Theme Colors");
			if (Menu::Option("~w~Red Theme")) {
				Menu::Settings::titleRect = { 100, 0, 0, 255 };
				Menu::Settings::optionRect = { 100, 0, 0, 255 };
				Menu::Settings::scroller = { 100, 0, 0, 255 };
			}
			if (Menu::Option("~w~Blue Theme")) {
				Menu::Settings::titleRect = { 0, 0, 200, 255 };
				Menu::Settings::optionRect = { 0, 0, 200, 255 };
				Menu::Settings::scroller = { 0, 0, 200, 255 };
			}
			if (Menu::Option("~w~Green Theme")) {
				Menu::Settings::titleRect = { 0, 180, 0, 255 };
				Menu::Settings::optionRect = { 0, 100, 0, 255 };
				Menu::Settings::scroller = { 0, 0, 180, 255 };
			}
			if (Menu::Option("~w~Load Default Theme")) {
				Menu::Settings::count = { 255, 255, 255, 255, 6 };
				Menu::Settings::titleText = { 226, 46, 52, 200, 7 };
				Menu::Settings::titleRect = { 0, 0, 0, 255 };
				Menu::Settings::optionText = { 226, 46, 52, 255, 6 };
				Menu::Settings::breakText = { 226, 46, 52, 200, 1 };
				Menu::Settings::arrow = { 255, 255, 255, 255, 3 };
				Menu::Settings::optionRect = { 255, 255, 255, 255 };
				Menu::Settings::scroller = { 226, 46, 52, 150 };
				Menu::Settings::integre = { 255, 255, 255, 255, 2 };
				Menu::Settings::line = { 255, 255, 255, 255 };
				Menu::Settings::primary = { 255, 0, 0 };
				Menu::Settings::secondary = { 0, 255, 0 };
			}
		}
		break;
		case settingstitlerect:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Title Rect");
			if (Menu::Int("~w~Red", Menu::Settings::titleRect.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.r = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Green", Menu::Settings::titleRect.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.g = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Blue", Menu::Settings::titleRect.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.b = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Opacity", Menu::Settings::titleRect.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::titleRect.a = NumberKeyboard();
				}
			}
		}
		break;
#pragma endregion
#pragma region Spawner
#pragma endregion
#pragma region obsjapw
		case spawnobj:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Extra Spawner");

			if (Menu::Option("~w~Spawn Safe")) {

				Create_Object(const char* ObjectName, Vector3 Coordinates);

			}


		}


		break;

		case objSpawner:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Object Spawner");

			Menu::MenuOption("Extra Spawner", spawnobj);

			if (Menu::ListVector00("1.44 DLC Props", propList23, propListPos23w)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(propList23[propListPos23w], pos);
			}


			if (Menu::ListVector00("All Props", propList, propListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(propList[propListPos], pos);
			}
			if (Menu::ListVector00("Stunt Props", Stuntlist, StuntlistPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(Stuntlist[StuntlistPos], pos);
			}
			if (Menu::ListVector00("Peds", namedPedList, namedPedListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				DWORD model = GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]);
				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
				latestObj = latestObj = PED::CREATE_PED(0, GAMEPLAY::GET_HASH_KEY(namedPedList[namedPedListPos]), pos.x, pos.y, pos.z, 0.f, 1, 1);
			}
			if (Menu::Option("Input Object")) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				latestObj = SpawnObject(CharKeyboard(), pos);
			}
			Menu::Toggle("~w~Freeze On Spawn", freezeSpawn);
			Menu::Break("~w~Objects");
			for (int i = 0; i < spwnObjC; i++)
			{
				if (ENTITY::DOES_ENTITY_EXIST(spwndObjects[i])) {
					if (Menu::MenuOption(spwndObjectsNames[i], editObj))
					{
						latestObj = spwndObjects[i];
						selecObj = i;
						Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
						Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
						MoveX = objCoords.x;
						MoveY = objCoords.y;
						MoveZ = objCoords.z;
						roll1 = objRot.y;
						yaw1 = objRot.z;
						pitch1 = objRot.x;
					}
				}
			}
		}
		break;
		case editObj:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Object Edit");

			Menu::Title(spwndObjectsNames[selecObj]);

			if (Menu::Option("~w~Delete")) {
				RequestControlOfEnt(latestObj);
				ENTITY::DELETE_ENTITY(&latestObj);
				spwndObjectsNames[selecObj] = NULL;
				spwndObjects[selecObj] = NULL;
				MapModObjs.pop_back();
				Menu::MenuLevelHandler::BackMenu();
			}
			if (Menu::Toggle("~w~Freeze", freezeObj)) {
				ENTITY::FREEZE_ENTITY_POSITION(latestObj, freezeObj);
			}
			if (Menu::Toggle("~w~Collision", collisionObj)) {
				ENTITY::SET_ENTITY_COLLISION(latestObj, collisionObj, true);
			}
			if (Menu::Float("~w~X", MoveX, -100000000.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, MoveX, objCoords.y, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("~w~Y", MoveY, -100000000.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, MoveY, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("~w~Z", MoveZ, -100000000.f, 100000000.f, .5f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, objCoords.y, MoveZ, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("~w~Roll", roll1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, objRot.x, roll1, objRot.z, 1, true);
			}
			if (Menu::Float("~w~Yaw", yaw1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, objRot.x, objRot.y, yaw1, 1, true);
			}
			if (Menu::Float("~w~Pitch", pitch1, 0.f, 360, 2.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_ROTATION(latestObj, pitch1, objRot.y, objRot.z, 1, true);
			}
		}
		break;

#pragma endregion
#pragma region staff
		case settingsoptiontext:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Option Text");
			if (Menu::Int("~w~Red", Menu::Settings::optionText.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.r = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Green", Menu::Settings::optionText.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.g = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Blue", Menu::Settings::optionText.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.b = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Opacity", Menu::Settings::optionText.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::optionText.a = NumberKeyboard();
				}
			}
			Menu::MenuOption("~w~Font ~w~>", font);
		}
		break;
		case font:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Font");
			if (Menu::Option("~w~Chalet London")) { Menu::Settings::optionText.f = 0; }
			if (Menu::Option("~w~House Script")) { Menu::Settings::optionText.f = 1; }
			if (Menu::Option("~w~Monospace")) { Menu::Settings::optionText.f = 2; }
			if (Menu::Option("~w~Wing Dings")) { Menu::Settings::optionText.f = 3; }
			if (Menu::Option("~w~Chalet Comprime Cologne")) { Menu::Settings::optionText.f = 4; }
			if (Menu::Option("~w~Pricedown")) { Menu::Settings::optionText.f = 7; }
		}
		break;
		case settingsscroller:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Scroller");
			if (Menu::Int("~w~Red", Menu::Settings::scroller.r, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.r = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Green", Menu::Settings::scroller.g, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.g = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Blue", Menu::Settings::scroller.b, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.b = NumberKeyboard();
				}
			}
			if (Menu::Int("~w~Opacity", Menu::Settings::scroller.a, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5) || CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, ControlFrontendAccept)) {
					Menu::Settings::scroller.a = NumberKeyboard();
				}
			}
		}
		break;
		case protection:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Protection Options");
			//Menu::Toggle("~w~Report Protection", Features::clearreport, [] {Features::ClearReport(Features::clearreport); });
			Menu::Toggle("Anti Teleport", antiTP, [] {
				Hooking::patchEvent(RockstarEvent::NETWORK_REQUEST_SYNCED_SCENE_EVENT, antiTP);
				Hooking::patchEvent(RockstarEvent::NETWORK_UPDATE_SYNCED_SCENE_EVENT, antiTP);
				Hooking::patchEvent(RockstarEvent::NETWORK_START_SYNCED_SCENE_EVENT, antiTP);
			});
			Menu::Toggle("Anti Freeze", antiFreeze, [] { Hooking::patchEvent(RockstarEvent::NETWORK_CLEAR_PED_TASKS_EVENT, antiFreeze); });
			Menu::Toggle("Anti Explosion", ev, [] { Hooking::patchEvent(RockstarEvent::EXPLOSION_EVENT, ev); });
			Menu::Toggle("Anti Pickup", rpe, [] { Hooking::patchEvent(RockstarEvent::REQUEST_PICKUP_EVENT, rpe); });
			Menu::Toggle("Anti Map Pickup", rpe1, [] { Hooking::patchEvent(RockstarEvent::REQUEST_MAP_PICKUP_EVENT, rpe1); });
			Menu::Toggle("Fire Protection ", fe, [] { Hooking::patchEvent(RockstarEvent::EXPLOSION_EVENT, fe); });
			Menu::Toggle("Anti Remote Wanted Level ", feee, [] { Hooking::patchEvent(RockstarEvent::ALTER_WANTED_LEVEL_EVENT, feee); });
			Menu::Toggle("Anti Kick", ak, [] { Hooking::patchEvent(RockstarEvent::KICK_VOTES_EVENT, ak); });
			Menu::Toggle("Anti Kick 2", AntiKick2, [] { Hooking::patchEvent(REMOTE_SCRIPT_LEAVE_EVENT, AntiKick2); });
			Menu::Toggle("Anti Controll", AntiKick23, [] { Hooking::patchEvent(GIVE_CONTROL_EVENT, AntiKick23); });
			Menu::Toggle("Anti Vehicle Controll", AntiKick234, [] { Hooking::patchEvent(VEHICLE_COMPONENT_CONTROL_EVENT, AntiKick234); });
			Menu::Toggle("Anti Ragdoll", protecc3, [] { Hooking::defuseEvent(RockstarEvent::RAGDOLL_REQUEST_EVENT, protecc3); });
			Menu::Toggle("Anti Remote Game Clock", protecc33, [] { Hooking::patchEvent(RockstarEvent::GAME_CLOCK_EVENT, protecc33); });
			Menu::Toggle("Anti PTFX", protecc2, [] { Hooking::defuseEvent(RockstarEvent::NETWORK_PTFX_EVENT, protecc2); });
			Menu::Toggle("Anti Remove Weapons", noRemoveWeps, [] { Hooking::patchEvent(RockstarEvent::REMOVE_ALL_WEAPONS_EVENT, noRemoveWeps); });
			Menu::Toggle("Anti Give Weapons", noGiveWeps, [] { Hooking::patchEvent(RockstarEvent::GIVE_WEAPON_EVENT, noGiveWeps); });
			Menu::Toggle("Report Money Drop Event", md, [] { Hooking::patchEvent(RockstarEvent::REPORT_CASH_SPAWN_EVENT, md); });
			Menu::Toggle("Change Session Weather Protection", md22, [] {
				Hooking::patchEvent(RockstarEvent::GAME_CLOCK_EVENT, md22);
				Hooking::patchEvent(RockstarEvent::GAME_WEATHER_EVENT, md22);

			});


		}
		break;
		//Settings Menu 2 
		case settingsmenu_theme:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Menu Desgin");

			Menu::MenuOption("~w~Title Text", settingsmenu_theme_titletext);
			Menu::MenuOption("~w~Title Rect", settingsmenu_theme_titlerect);
			Menu::MenuOption("~w~Option Text", settingsmenu_theme_optiontext);
			Menu::MenuOption("~w~Option Rect", settingsmenu_theme_optionrect);
			Menu::MenuOption("~w~Scroller", settingsmenu_theme_scroller);
		}
		break;
		//Settings Menu 3 
		case settingsmenu_theme_titletext:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Title Text");

			Menu::Int("~w~Red", Menu::Settings::titleText.r, 255, 255);
			Menu::Int("~w~Green", Menu::Settings::titleText.g, 0, 0);
			Menu::Int("~w~Blue", Menu::Settings::titleText.b, 0, 0);
			Menu::Int("~w~Alpha", Menu::Settings::titleText.a, 0, 255);
			Menu::Int("~w~Font", Menu::Settings::titleText.f, 0, 7);
		}
		break;
#pragma endregion

#pragma region Car Stuff
		//Settings Menu 4 
		case settingsmenu_theme_titlerect:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Title Rect");

			Menu::Int("~w~Red", Menu::Settings::titleRect.r, 0, 255);
			Menu::Int("~w~Green", Menu::Settings::titleRect.g, 0, 255);
			Menu::Int("~w~Blue", Menu::Settings::titleRect.b, 0, 255);
			Menu::Int("~w~Alpha", Menu::Settings::titleRect.a, 0, 255);
		}
		break;
		//Settings Menu  5
		case settingsmenu_theme_optiontext:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Option Text");

			Menu::Int("~w~Red", Menu::Settings::optionText.r, 0, 255);
			Menu::Int("~w~Green", Menu::Settings::optionText.g, 0, 255);
			Menu::Int("~w~Blue", Menu::Settings::optionText.b, 0, 255);
			Menu::Int("~w~Alpha", Menu::Settings::optionText.a, 0, 255);
			Menu::Int("~w~Font", Menu::Settings::optionText.f, 0, 7);
		}
		break;


		//Settings Menu 6 
		case settingsmenu_theme_optionrect:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Option Rect");

			Menu::Int("~w~Red", Menu::Settings::optionRect.r, 0, 255);
			Menu::Int("~w~Green", Menu::Settings::optionRect.g, 255, 0);
			Menu::Int("~w~Blue", Menu::Settings::optionRect.b, 0, 255);
			Menu::Int("~w~Alpha", Menu::Settings::optionRect.a, 0, 255);
		}
		break;


		//Settings Menu 7 
		case settingsmenu_theme_scroller:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Option Rect");

			Menu::Int("~w~Red", Menu::Settings::scroller.r, 0, 255);
			Menu::Int("~w~Green", Menu::Settings::scroller.g, 0, 255);
			Menu::Int("~w~Blue", Menu::Settings::scroller.b, 0, 255);
			Menu::Int("~w~Alpha", Menu::Settings::scroller.a, 0, 255);
		}
		break;
		case platecolor:
		{
			Menu::DRAW_TEXTURE("shopui_title_clubhousemod", "shopui_title_clubhousemod", titlebox, 0.0800f, 0.21f, 0.090f, 0, 255, 255, 255, 255);
			Menu::Title("~w~Plate Style");
			Menu::Subtitle("~w~PLATE STYLE OPTIONS");
			Menu::Drawing::Spriter("shopui_title_carmod", "shopui_title_carmod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);
			if (Menu::Option("~w~Blue On White Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 0);

				}
			}
			if (Menu::Option("~w~Yellow On Black Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 1);

				}
			}
			if (Menu::Option("~w~Yellow On Blue Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 2);

				}
			}
			if (Menu::Option("~w~Blue On White 2 Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 3);

				}
			}
			if (Menu::Option("~w~Blue On White 3 Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 4);

				}
			}
			if (Menu::Option("~w~Yankton Plate")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), true))
				{
					VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 5);

				}
			}

		}
		break;

#pragma endregion
#pragma region Vehicleacrobatics
		case Vehicleacrobatics:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle acrobatics");

			if (Menu::Option("~w~Add Small Ramp")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
				{
					Vector3 Him = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
					int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), true);
					STREAMING::REQUEST_MODEL(0xB157C9E4);
					if (STREAMING::HAS_MODEL_LOADED(0xB157C9E4))
					{
						Entity My_Objects = OBJECT::CREATE_OBJECT(0xB157C9E4, Him.x, Him.y, Him.z, 1, 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(My_Objects))
						{
							ENTITY::SET_ENTITY_COLLISION(My_Objects, true, true);
							ENTITY::SET_ENTITY_ALPHA(My_Objects, 120, false);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(My_Objects, VehicleID, 0, 0, 6.3, -0.3, 13.5, 0, 177.5, 0, 0, true, 0, 2, 1);
						}
					}
				}
				else { notifyMap("~w~You are not in Vehicle"); }
			}
			if (Menu::Option("Add Big Ramp")) {
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
				{
					Vector3 Him = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
					int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), true);
					int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
					STREAMING::REQUEST_MODEL(hash2);
					if (STREAMING::HAS_MODEL_LOADED(hash2))
					{
						Entity My_Objects = OBJECT::CREATE_OBJECT(hash2, Him.x, Him.y, Him.z, 1, 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(My_Objects))
						{
							ENTITY::SET_ENTITY_COLLISION(My_Objects, true, true);
							ENTITY::SET_ENTITY_ALPHA(My_Objects, 120, false);
							uint Me = PLAYER::PLAYER_PED_ID();
							Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
							Vector3 null; null.x = 0, null.y = 0; null.z = 0;
							Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
							Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
							ENTITY::ATTACH_ENTITY_TO_ENTITY(My_Objects, VehicleID, 0, a.x, 6.3, a.z, b.x, b.y, b.z, 0, false, true, 0, 2, true);
						}
					}
				}
			}





			if (Menu::Option("~w~Kickflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 10.71, 5.0, 0.0, 0.0, 1, false, true, true, true, true);
			}
			if (Menu::Option("~w~Small Kickflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 5.0, 5.0, 0.0, 0.0, 1, false, true, true, true, true);
			}
			if (Menu::Option("~w~B1G Kickflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 23.4, 7.09, 0.0, 0.0, 1, false, true, true, true, true);
			}
			if (Menu::Option("~w~Double Kickflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 21.43, 20.0, 0.0, 0.0, 1, false, true, true, true, true);
			}
			if (Menu::Option("~w~Frontflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 10.71, 0.0, -0.4, 0.0, 1, false, true, true, true, true);
			}
			if (Menu::Option("~w~Backflip")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				RequestNetControl();
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(Vehicle))
					ENTITY::APPLY_FORCE_TO_ENTITY(Vehicle, 1, 0.0, 0.0, 10.71, 0.0, 0.4, 0.0, 1, false, true, true, true, true);
			}





		}
		break;
		case winpo:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Windows");

			if (Menu::Option("Remove Vehicle Windows"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::REMOVE_VEHICLE_WINDOW(veh, false);
			}

			if (Menu::Option("Roll down Window"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::ROLL_DOWN_WINDOW(veh, false);
			}

			if (Menu::Option("Roll up Window"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::ROLL_UP_WINDOW(veh, false);
			}

			if (Menu::Option("Fix Vehicle Window"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::FIX_VEHICLE_WINDOW(veh, false);
			}




		}
		break;
		case kurwaa:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~XML Vehicles");

			if (Menu::ListVector("custom vehicles", ini1, inipos))
				LoadPreset(ini1[inipos]);
		}
		break;
#pragma endregion
#pragma region vehicle
		case vehicle:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Mods");
			Menu::Drawing::Spriter("shopui_title_clubhousemod", "shopui_title_clubhousemod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);
			Menu::MenuOption("~w~Vehicle Spawner", vehspawner);
			Menu::MenuOption("~w~Plate Style", platecolor);
			Menu::MenuOption("~w~Vehicle Weapons", VehWeapon);
			Menu::MenuOption("~w~Modded Vehicles", Ulti);
			Menu::MenuOption("~w~XML Vehicle Spawner", kurwaa);

			Menu::MenuOption("~w~PTFX Vehicle", ptfxveh);
			Menu::MenuOption("~w~LSC Costum Changer", lsc1);
			Menu::MenuOption("~w~Vehicle Windows", winpo);
			Menu::MenuOption("~w~Vehicle acrobatics", Vehicleacrobatics);

			if (Menu::Option("Drive Vehicle to Waypoint"))
			{
				Features::spawnChauffer();
			}

			if (Menu::Int("~w~Colour-R", Features::manpr, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::manpr = NumberKeyboard();
				}
			}

			if (Menu::Int("~w~Colour-G", Features::manpg, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::manpg = NumberKeyboard();
				}
			}

			if (Menu::Int("~w~Colour-B", Features::manpb, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::manpb = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Vehicle Colour", Features::manrgb, [] { Features::rgbman(Features::manrgb); });

			int dirt = 0;

			if (Menu::Int("Set Dirt Level", dirt, 0, 255)) {
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(dirt, false);
			}


			Menu::Toggle("~w~Vehicle Colour", Features::manrgb, [] { Features::rgbman(Features::manrgb); });

			if (Menu::Option("Kill Vehicle Engine"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::SET_VEHICLE_ENGINE_HEALTH(veh, -0);
			}

			if (Menu::Option("Explode Vehicle"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				VEHICLE::EXPLODE_VEHICLE(veh, false, true);
			}


			Menu::Toggle("Stick To Ground", Features::stickToGround);

			Menu::Toggle("~w~Lock Vehicle Doors", Features::meclosefee, [] { Features::closedoorsme(Features::meclosefee); });

			Menu::Toggle("~w~Stop Vehicle", Features::Stop1, [] { Features::stop(Features::Stop1); });

			Menu::Toggle("~w~Speed Meter KM/h", Features::Speedometerbool, [] { Features::Speedometer(Features::Speedometerbool); });
			//Menu::MenuOption("~w~LSC Mods ~w~->", lsc);

			if (Menu::Int("~w~Vehicle Alpha", Menu::Settings::alpha, 0, 255))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Menu::Settings::alpha = NumberKeyboard();
				}
			}
			if (Menu::Option("~w~Set Vehicle Alpha"))
			{
				int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), true);
				ENTITY::SET_ENTITY_ALPHA(VehicleID, Menu::Settings::alpha, false);
			}

			if (Menu::Toggle("Flying Car", Features::flyToggle))
				Features::flyingCar1();



			Menu::Toggle("~w~Conatiner Raider", Features::ride_container, [] { Features::container_rider(Features::ride_container); });
			Menu::Toggle("~w~Car Godmode", Features::cargodmodebool, [] { Features::cargodmode(Features::cargodmodebool); });
			Menu::Toggle("~w~Engine Allways On", Features::enginealwaysonbool, [] { Features::enginealwayson(Features::enginealwaysonbool); });
			if (Menu::Int("Horn Boost Delay", Features::boostdelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::boostdelay = NumberKeyboard();
				}
			}

			Menu::Toggle("Drift Mode", Features::Drift, [] { Features::DriftMode(Features::Drift); });
			Menu::Toggle("~w~Horn Boost Forward(E)", Features::boostbool, [] { Features::carboost(Features::boostbool); });
			Menu::Toggle("~w~Horn Boost Backward(E)", Features::Backboost, [] { Features::backboost(Features::Backboost); });
			//Menu::Toggle("~w~No Clip Car", Features::fcbool, [] { Features::FlyingCarLoop(Features::fcbool); });
			Menu::Toggle("~w~Drive on Water", Features::dowbool, [] { Features::DriveOnWater(Features::dowbool); });
			if (Menu::Int("Rainbow Car Delay", Features::stealthDelay4033, 0, 3000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay4033 = NumberKeyboard();
				}
			}
			Menu::Toggle("~w~Rainbow Car", Features::rlbool, [] { Features::HasPaintLoop(Features::rlbool); });
			if (Menu::Int("Rainbow Neon Delay", Features::stealthDelay4088, 0, 3000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::stealthDelay4088 = NumberKeyboard();
				}
			}
			Menu::Toggle("~w~Rainbow Neons", Features::Rneon, [] { Features::RainbowNeon(Features::Rneon); });
			if (Menu::Option("~w~Vehicle Jump")) {
				if ((VK_SPACE) && PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 1)) {
					Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
					ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0 + ENTITY::GET_ENTITY_FORWARD_X(veh), 0 + ENTITY::GET_ENTITY_FORWARD_Y(veh), 7, 0, 0, 0, 1, 0, 1, 1, 1, 1);
				}
			}

			Menu::Toggle("~w~Fix Car Loop ", Features::gotmode, [] { Features::godlol(Features::gotmode); });

			if (Menu::Option("~w~Fix Car")) {
				uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
				VEHICLE::SET_VEHICLE_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
			}
			if (Menu::Option("~w~Max Car")) {
				Features::maxvehicle();
			}
			if (Menu::Option("~w~Flip Car")) {
				Features::flipup();
			}
			if (Menu::Option("~w~Open Doors")) {
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 1, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 2, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 3, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 4, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 5, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 6, true, false);
				VEHICLE::SET_VEHICLE_DOOR_OPEN(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 7, true, false);
			}
			if (Menu::Option("~w~Close Doors")) {
				VEHICLE::SET_VEHICLE_DOORS_SHUT(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), true);
			}

			Menu::Float("~t~Acceleration Multiplier", Features::accelerationmultiplier, 0, 3, 1);
			Menu::Float("~t~Brakes Multiplier", Features::brakesmultiplier, 0, 3, 1);
			Menu::Float("~t~Suspension Height", Features::suspensionseight, 0, 2, 1);


		}
		break;
		case spsettings:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Spawn Settings");
			Menu::Drawing::Spriter("shopui_title_clubhousemod", "shopui_title_clubhousemod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Toggle("~w~Spawn in Car", Features::spawnincar);
			Menu::Toggle("~w~Spawn Maxed", Features::spawnmaxed);
			Menu::Toggle("Delete Previous Vehicle", Features::Deleter, [] { Features::deleter(Features::Deleter); });
			Menu::Toggle("~w~SP Bypass", globalHandle(0x41183A).As<bool>()); // but working fine xd this cyka blyat global work? yes send me it later



		}
		break;
		case vehspawner: {
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Spawner");
			Menu::Drawing::Spriter("shopui_title_clubhousemod", "shopui_title_clubhousemod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);
			Menu::MenuOption("~w~Spawn Settings", spsettings);
			if (Menu::Option("Spawn by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::spawn_vehicle(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}



			if (Menu::Option("~w~Delete Vehicle")) {


				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, false))
				{
					int Vehicle = PED::GET_VEHICLE_PED_IS_USING(playerPed);
					if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle))
						while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle));

					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 1, 1);
					VEHICLE::DELETE_VEHICLE(&Vehicle);
				}
				bool DeleteVehicle = false;

			}

			if (Menu::Option("~w~Delete Last Vehicle Vehicle")) {


				Menu::Settings::deleter;

			}



			Menu::Break("~w~Spawn Vehicles");

			if (Menu::ListVector("Afterhours", afthour, soutprop455)) {
				Features::spawn_vehicle(afthour[soutprop455]);
			};

			if (Menu::ListVector("Helloween", helloweensec, soutprop280000000)) {
				Features::spawn_vehicle(helloweensec[soutprop280000000]);
			};

			if (Menu::ListVector("Southsan", SOUTHERNSAN, soutprop)) {
				Features::spawn_vehicle(SOUTHERNSAN[soutprop]);
			};


			if (Menu::ListVector("Smugglers", SMUGLERSRUN1, soutprop2)) {
				Features::spawn_vehicle(SMUGLERSRUN1[soutprop2]);
			};

			if (Menu::ListVector("Doomsday", Doomsday1, Asoutprop1)) {
				Features::spawn_vehicle(Doomsday1[Asoutprop1]);
			};

			if (Menu::ListVector("Gunrunning", GUNRUNNING1, soutprop3)) {
				Features::spawn_vehicle(GUNRUNNING1[soutprop3]);
			};

			if (Menu::ListVector("Cunningstunts", CUNNINGSTUNTS1, soutprop4)) {
				Features::spawn_vehicle(CUNNINGSTUNTS1[soutprop4]);
			};

			if (Menu::ListVector("Importexport", IMPORTEXPORT1, soutprop5)) {
				Features::spawn_vehicle(IMPORTEXPORT1[soutprop5]);
			};

			if (Menu::ListVector("Boats", Boats1, soutprop6)) {
				Features::spawn_vehicle(Boats1[soutprop6]);
			};

			if (Menu::ListVector("Commercial", Commercial1, soutprop7)) {
				Features::spawn_vehicle(Commercial1[soutprop7]);
			};

			if (Menu::ListVector("Compacts", Compacts1, soutprop8)) {
				Features::spawn_vehicle(Compacts1[soutprop8]);
			};

			if (Menu::ListVector("Coupes", Coupes1, soutprop9)) {
				Features::spawn_vehicle(Coupes1[soutprop9]);
			};

			if (Menu::ListVector("Cycles", Coupes1, soutprop10)) {
				Features::spawn_vehicle(Coupes1[soutprop10]);
			};

			if (Menu::ListVector("Emergency", Emergency1, soutprop11)) {
				Features::spawn_vehicle(Emergency1[soutprop11]);
			};
			if (Menu::ListVector("Helicopters", Helicopters1, soutprop12)) {
				Features::spawn_vehicle(Helicopters1[soutprop12]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop13)) {
				Features::spawn_vehicle(Industrial1[soutprop13]);
			};

			if (Menu::ListVector("Military", Military1, soutprop14)) {
				Features::spawn_vehicle(Military1[soutprop14]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop15)) {
				Features::spawn_vehicle(Industrial1[soutprop15]);
			};

			if (Menu::ListVector("Motorcycles", Motorcycles1, soutprop16)) {
				Features::spawn_vehicle(Motorcycles1[soutprop16]);
			};

			if (Menu::ListVector("Muscle1", Muscle1, soutprop17)) {
				Features::spawn_vehicle(Muscle1[soutprop17]);
			};

			if (Menu::ListVector("OffRoad", OffRoad1, soutprop18)) {
				Features::spawn_vehicle(OffRoad1[soutprop18]);
			};

			if (Menu::ListVector("Planes", Planes1, soutprop19)) {
				Features::spawn_vehicle(Planes1[soutprop19]);
			};

			if (Menu::ListVector("Sedans", Sedans1, soutprop20)) {
				Features::spawn_vehicle(Sedans1[soutprop20]);
			};

			if (Menu::ListVector("Service", Service1, soutprop21)) {
				Features::spawn_vehicle(Service1[soutprop21]);
			};

			if (Menu::ListVector("Sports", Sports1, soutprop22)) {
				Features::spawn_vehicle(Sports1[soutprop22]);
			};

			if (Menu::ListVector("SportClassics", SportsClassics1, soutprop23)) {
				Features::spawn_vehicle(SportsClassics1[soutprop23]);
			};

			if (Menu::ListVector("Super", Super1, soutprop24)) {
				Features::spawn_vehicle(Super1[soutprop24]);
			};

			if (Menu::ListVector("SUVs1", SUVs1, soutprop25)) {
				Features::spawn_vehicle(SUVs1[soutprop25]);
			};

			if (Menu::ListVector("Trailer", Trailer1, soutprop26)) {
				Features::spawn_vehicle(Trailer1[soutprop26]);
			};

			if (Menu::ListVector("Trains", Trains1, soutprop27)) {
				Features::spawn_vehicle(Trains1[soutprop27]);
			};

			if (Menu::ListVector("Utility", Utility1, soutprop28)) {
				Features::spawn_vehicle(Utility1[soutprop28]);
			};

			if (Menu::ListVector("Vans", Vans1, soutprop200)) {
				Features::spawn_vehicle(Vans1[soutprop200]);
			};

			if (Menu::Settings::currentOption == 9)
				Menu::Vehicle(stream_AfterHours[soutprop455], AfterHours[soutprop455]);
			if (Menu::Settings::currentOption == 10)
				Menu::Vehicle(stream_Assault[soutprop], Assault[soutprop]);
			if (Menu::Settings::currentOption == 11)
				Menu::Vehicle(stream_Smugglers[soutprop2], Smugglers[soutprop2]);
			if (Menu::Settings::currentOption == 14)
				Menu::Vehicle(stream_stunts[soutprop4], stunts[soutprop4]);
			if (Menu::Settings::currentOption == 34)
				Menu::Vehicle(stream_Supper[soutprop24], Supper[soutprop24]);
			if (Menu::Settings::currentOption == 15)
				Menu::Vehicle(stream_export1[soutprop5], export1[soutprop5]);
			if (Menu::Settings::currentOption == 31)
				Menu::Vehicle(stream_service1[soutprop21], service1[soutprop21]);
			if (Menu::Settings::currentOption == 16)
				Menu::Vehicle(stream_boats1[soutprop6], boats1[soutprop6]);
			if (Menu::Settings::currentOption == 29)
				Menu::Vehicle(stream_planes1[soutprop19], planes1[soutprop19]);
			if (Menu::Settings::currentOption == 19)
				Menu::Vehicle(stream_coupes2[soutprop9], coupes2[soutprop9]);


			if (Menu::Option("Add Blip To Vehicle"))
			{
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0);
				Vehicle e = PED::GET_VEHICLE_PED_IS_USING(playerPed);
				NETWORK::SET_NETWORK_ID_CAN_MIGRATE(e, 1);
				for (int i = 0; i < 350; i++)
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(e));
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
				}
				ENTITY::SET_ENTITY_AS_MISSION_ENTITY(e, true, true);
				for (int i = 0; i < 350; i++)NETWORK::SET_NETWORK_ID_CAN_MIGRATE(e, 0);
				VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(e, 1);
				int b;
				char bname[] = "Vehicle";
				b = UI::ADD_BLIP_FOR_ENTITY(e);
				UI::SET_BLIP_SPRITE(b, 60);
				UI::SET_BLIP_NAME_FROM_TEXT_FILE(b, bname);
			}

			if (Menu::Option("~w~Spawn Ramp Truck")) {

				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -0.4f, a.z = 0.1f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 180;
				int hash = GAMEPLAY::GET_HASH_KEY("monster");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_jetski_ramp_01");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 1, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, 1, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, 4.5, 0.1, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::SET_ENTITY_VISIBLE(Object, true, false);
							ENTITY::SET_ENTITY_COLLISION(Object, true, false);

						}

					}

				}

			}


			break;

#pragma endregion

#pragma region Car Spawn


		}
						 break;
#pragma endregion


#pragma region ipl all Options
						 //Force Animation
		case forcean:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Force Animation");
			if (Menu::Option("~w~Stop Animation")) { AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)); }
			if (Menu::Option("~w~Sex Receiver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_poppy"); }
			if (Menu::Option("~w~Sex Giver")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmpaparazzo_2", "shag_loop_a"); }
			if (Menu::Option("~w~Stripper Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@private_dance@part1", "priv_dance_p1"); }
			if (Menu::Option("~w~Pole Dance")) { Features::animatePlayer(Features::Online::selectedPlayer, "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01"); }
			if (Menu::Option("~w~Push Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_push_ups@male@base", "base"); }
			if (Menu::Option("~w~Sit Ups")) { Features::animatePlayer(Features::Online::selectedPlayer, "amb@world_human_sit_ups@male@base", "base"); }
			if (Menu::Option("~w~Celebrate")) { Features::animatePlayer(Features::Online::selectedPlayer, "rcmfanatic1celebrate", "celebrate"); }
			if (Menu::Option("~w~Electrocution")) { Features::animatePlayer(Features::Online::selectedPlayer, "ragdoll@human", "electrocute"); }
			if (Menu::Option("~w~Suicide")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_suicide", "pistol"); }
			if (Menu::Option("~w~Showering")) { Features::animatePlayer(Features::Online::selectedPlayer, "mp_safehouseshower@male@", "male_shower_idle_b"); }

		}
		break;
		case vehspawneralone: {
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Spawner to Player");
			Menu::Toggle("~w~Spawn in Car", Features::spawnincar24);
			Menu::Toggle("~w~Spawn Maxed", Features::spawnmaxed);

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			if (Menu::Option("~w~Delete Vehicle")) {


				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (PED::IS_PED_IN_ANY_VEHICLE(Handle, false))
				{
					int Vehicle = PED::GET_VEHICLE_PED_IS_USING(Handle);
					if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle))
						while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle));

					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 1, 1);
					VEHICLE::DELETE_VEHICLE(&Vehicle);
				}
				bool DeleteVehicle = false;

			}

			if (Menu::Option("Add Big Ramp")) {

				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

				if (PED::IS_PED_IN_ANY_VEHICLE(Handle, false))
				{
					Vector3 Him = ENTITY::GET_ENTITY_COORDS(Handle, true);
					int VehicleID = PED::GET_VEHICLE_PED_IS_IN(Handle, true);
					int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
					STREAMING::REQUEST_MODEL(hash2);
					if (STREAMING::HAS_MODEL_LOADED(hash2))
					{
						Entity My_Objects = OBJECT::CREATE_OBJECT(hash2, Him.x, Him.y, Him.z, 1, 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(My_Objects))
						{
							ENTITY::SET_ENTITY_COLLISION(My_Objects, true, true);
							ENTITY::SET_ENTITY_ALPHA(My_Objects, 120, false);
							uint Me = PLAYER::PLAYER_PED_ID();
							Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
							Vector3 null; null.x = 0, null.y = 0; null.z = 0;
							Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
							Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
							ENTITY::ATTACH_ENTITY_TO_ENTITY(My_Objects, VehicleID, 0, a.x, 6.3, a.z, b.x, b.y, b.z, 0, false, true, 0, 2, true);
						}
					}
				}
			}

			if (Menu::Option("Spawn by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::spawn_vehiclealone(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}

			if (Menu::ListVector("After Hours Nightclub", afthour, soutprop455)) {
				Features::spawn_vehiclealone(afthour[soutprop455]);
			};

			if (Menu::ListVector("Helloween", helloweensec, soutprop280000000)) {
				Features::spawn_vehiclealone(helloweensec[soutprop280000000]);
			};

			if (Menu::ListVector("Southersan", SOUTHERNSAN, soutprop)) {
				Features::spawn_vehiclealone(SOUTHERNSAN[soutprop]);
			};

			if (Menu::ListVector("Doomsday", Doomsday1, Asoutprop1)) {
				Features::spawn_vehiclealone(Doomsday1[Asoutprop1]);
			};



			if (Menu::ListVector("Smugglers", SMUGLERSRUN1, soutprop2)) {
				Features::spawn_vehiclealone(SMUGLERSRUN1[soutprop2]);
			};

			if (Menu::ListVector("Gunrunning", GUNRUNNING1, soutprop3)) {
				Features::spawn_vehiclealone(GUNRUNNING1[soutprop3]);
			};

			if (Menu::ListVector("Cunningstunts", CUNNINGSTUNTS1, soutprop4)) {
				Features::spawn_vehiclealone(CUNNINGSTUNTS1[soutprop4]);
			};

			if (Menu::ListVector("Importexport", IMPORTEXPORT1, soutprop5)) {
				Features::spawn_vehiclealone(IMPORTEXPORT1[soutprop5]);
			};

			if (Menu::ListVector("Boats", Boats1, soutprop6)) {
				Features::spawn_vehiclealone(Boats1[soutprop6]);
			};

			if (Menu::ListVector("Commercial", Commercial1, soutprop7)) {
				Features::spawn_vehiclealone(Commercial1[soutprop7]);
			};

			if (Menu::ListVector("Compacts", Compacts1, soutprop8)) {
				Features::spawn_vehiclealone(Compacts1[soutprop8]);
			};

			if (Menu::ListVector("Coupes", Coupes1, soutprop9)) {
				Features::spawn_vehiclealone(Coupes1[soutprop9]);
			};

			if (Menu::ListVector("Cycles", Coupes1, soutprop10)) {
				Features::spawn_vehiclealone(Coupes1[soutprop10]);
			};

			if (Menu::ListVector("Emergency", Emergency1, soutprop11)) {
				Features::spawn_vehiclealone(Emergency1[soutprop11]);
			};
			if (Menu::ListVector("Helicopters", Helicopters1, soutprop12)) {
				Features::spawn_vehiclealone(Helicopters1[soutprop12]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop13)) {
				Features::spawn_vehiclealone(Industrial1[soutprop]);
			};

			if (Menu::ListVector("Military", Military1, soutprop14)) {
				Features::spawn_vehiclealone(Military1[soutprop14]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop15)) {
				Features::spawn_vehiclealone(Industrial1[soutprop15]);
			};

			if (Menu::ListVector("Motorcycles", Motorcycles1, soutprop16)) {
				Features::spawn_vehiclealone(Motorcycles1[soutprop16]);
			};

			if (Menu::ListVector("Muscle1", Muscle1, soutprop17)) {
				Features::spawn_vehiclealone(Muscle1[soutprop17]);
			};

			if (Menu::ListVector("OffRoad", OffRoad1, soutprop18)) {
				Features::spawn_vehiclealone(OffRoad1[soutprop18]);
			};

			if (Menu::ListVector("Planes", Planes1, soutprop19)) {
				Features::spawn_vehiclealone(Planes1[soutprop19]);
			};

			if (Menu::ListVector("Sedans", Sedans1, soutprop20)) {
				Features::spawn_vehiclealone(Sedans1[soutprop20]);
			};

			if (Menu::ListVector("Service", Service1, soutprop21)) {
				Features::spawn_vehiclealone(Service1[soutprop21]);
			};

			if (Menu::ListVector("Sports", Sports1, soutprop22)) {
				Features::spawn_vehiclealone(Sports1[soutprop22]);
			};

			if (Menu::ListVector("SportClassics", SportsClassics1, soutprop23)) {
				Features::spawn_vehiclealone(SportsClassics1[soutprop23]);
			};

			if (Menu::ListVector("Super", Super1, soutprop24)) {
				Features::spawn_vehiclealone(Super1[soutprop24]);
			};

			if (Menu::ListVector("SUVs1", SUVs1, soutprop25)) {
				Features::spawn_vehiclealone(SUVs1[soutprop25]);
			};

			if (Menu::ListVector("Trailer", Trailer1, soutprop26)) {
				Features::spawn_vehiclealone(Trailer1[soutprop26]);
			};

			if (Menu::ListVector("Trains", Trains1, soutprop27)) {
				Features::spawn_vehiclealone(Trains1[soutprop27]);
			};

			if (Menu::ListVector("Utility", Utility1, soutprop28)) {
				Features::spawn_vehiclealone(Utility1[soutprop28]);
			};

			if (Menu::ListVector("Vans", Vans1, soutprop200)) {
				Features::spawn_vehiclealone(Vans1[soutprop200]);
			};

			if (Menu::Settings::currentOption == 6)
				Menu::Vehicle(stream_AfterHours[soutprop455], AfterHours[soutprop455]);
			if (Menu::Settings::currentOption == 10)
				Menu::Vehicle(stream_Assault[soutprop], Assault[soutprop]);
			if (Menu::Settings::currentOption == 9)
				Menu::Vehicle(stream_Smugglers[soutprop2], Smugglers[soutprop2]);
			if (Menu::Settings::currentOption == 11)
				Menu::Vehicle(stream_stunts[soutprop4], stunts[soutprop4]);
			if (Menu::Settings::currentOption == 31)
				Menu::Vehicle(stream_Supper[soutprop24], Supper[soutprop24]);
			if (Menu::Settings::currentOption == 12)
				Menu::Vehicle(stream_export1[soutprop5], export1[soutprop5]);
			if (Menu::Settings::currentOption == 29)
				Menu::Vehicle(stream_service1[soutprop21], service1[soutprop21]);
			if (Menu::Settings::currentOption == 13)
				Menu::Vehicle(stream_boats1[soutprop6], boats1[soutprop6]);
			if (Menu::Settings::currentOption == 26)
				Menu::Vehicle(stream_planes1[soutprop19], planes1[soutprop19]);
			if (Menu::Settings::currentOption == 16)
				Menu::Vehicle(stream_coupes2[soutprop9], coupes2[soutprop9]);
			if (Menu::Settings::currentOption == 17)
				Menu::Vehicle(stream_cycles22[soutprop10], cycles22[soutprop10]);

		}
							  break;
		case vehspawnerall: {
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Spawner All Player");
			Menu::Toggle("~w~Spawn in Car", Features::spawnincar22);
			Menu::Toggle("~w~Spawn Maxed", Features::spawnmaxed);

			if (Menu::Option("Spawn by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::spawn_vehicle22(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}

			if (Menu::Option("~w~Spawn Ramp Truck to All Player")) {

				for (int i = 0; i < 32; i++)
				{

					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(iPed, 1);
						Vector3 null; null.x = 0, null.y = 0; null.z = 0;
						Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
						Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
						int hash = GAMEPLAY::GET_HASH_KEY("phantom");
						int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
						STREAMING::REQUEST_MODEL(hash);
						STREAMING::REQUEST_MODEL(hash2);
						if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
						{
							int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(iPed), 1, 0);
							int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(iPed), 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
							{
								STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
								PED::SET_PED_INTO_VEHICLE(iPed, Vehicle, -1);
								ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
								ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
								ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);


							}

						}
					}
				}
			}

			if (Menu::Option("Max All Vehicle")) {
				for (int i = 1; i <= 32; i++) {
					if (PLAYER::PLAYER_ID() != i) {
						Vehicle vehicle = PED::GET_VEHICLE_PED_IS_IN(i, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, 0);
						for (int i = 0; i < 50; i++)
						{
							VEHICLE::SET_VEHICLE_MOD(vehicle, i, VEHICLE::GET_NUM_VEHICLE_MODS(vehicle, i) - 1, false);
						}
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
					}
				}
			}



			if (Menu::Option("~w~Delete Vehicle")) {

				if (ENTITY::DOES_ENTITY_EXIST);
				{
					ENTITY::SET_ENTITY_AS_MISSION_ENTITY;
					VEHICLE::DELETE_VEHICLE;
				}
			}

			if (Menu::ListVector("After Hours Nightclub", afthour, soutprop455)) {
				Features::spawn_vehicle22(afthour[soutprop455]);
			};

			if (Menu::ListVector("Helloween", helloweensec, soutprop280000000)) {
				Features::spawn_vehicle22(helloweensec[soutprop280000000]);
			};

			if (Menu::ListVector("Southern San Andreas", SOUTHERNSAN, soutprop)) {
				Features::spawn_vehicle22(SOUTHERNSAN[soutprop]);
			};

			if (Menu::ListVector("Doomsday", Doomsday1, Asoutprop1)) {
				Features::spawn_vehicle22(Doomsday1[Asoutprop1]);
			};

			if (Menu::ListVector("Smuggler’s Run", SMUGLERSRUN1, soutprop2)) {
				Features::spawn_vehicle22(SMUGLERSRUN1[soutprop2]);
			};

			if (Menu::ListVector("Gunrunning", GUNRUNNING1, soutprop3)) {
				Features::spawn_vehicle22(GUNRUNNING1[soutprop3]);
			};

			if (Menu::ListVector("Cunningstunts", CUNNINGSTUNTS1, soutprop4)) {
				Features::spawn_vehicle22(CUNNINGSTUNTS1[soutprop4]);
			};

			if (Menu::ListVector("Importexport", IMPORTEXPORT1, soutprop5)) {
				Features::spawn_vehicle22(IMPORTEXPORT1[soutprop5]);
			};

			if (Menu::ListVector("Boats", Boats1, soutprop6)) {
				Features::spawn_vehicle22(Boats1[soutprop6]);
			};

			if (Menu::ListVector("Commercial", Commercial1, soutprop7)) {
				Features::spawn_vehicle22(Commercial1[soutprop7]);
			};

			if (Menu::ListVector("Compacts", Compacts1, soutprop8)) {
				Features::spawn_vehicle22(Compacts1[soutprop8]);
			};

			if (Menu::ListVector("Coupes", Coupes1, soutprop9)) {
				Features::spawn_vehicle22(Coupes1[soutprop9]);
			};

			if (Menu::ListVector("Cycles", Coupes1, soutprop10)) {
				Features::spawn_vehicle22(Coupes1[soutprop10]);
			};

			if (Menu::ListVector("Emergency", Emergency1, soutprop11)) {
				Features::spawn_vehicle22(Emergency1[soutprop11]);
			};
			if (Menu::ListVector("Helicopters", Helicopters1, soutprop12)) {
				Features::spawn_vehicle22(Helicopters1[soutprop12]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop13)) {
				Features::spawn_vehicle22(Industrial1[soutprop]);
			};

			if (Menu::ListVector("Military", Military1, soutprop14)) {
				Features::spawn_vehicle22(Military1[soutprop14]);
			};

			if (Menu::ListVector("Industrial", Industrial1, soutprop15)) {
				Features::spawn_vehicle22(Industrial1[soutprop15]);
			};

			if (Menu::ListVector("Motorcycles", Motorcycles1, soutprop16)) {
				Features::spawn_vehicle(Motorcycles1[soutprop16]);
			};

			if (Menu::ListVector("Muscle1", Muscle1, soutprop17)) {
				Features::spawn_vehicle22(Muscle1[soutprop17]);
			};

			if (Menu::ListVector("OffRoad", OffRoad1, soutprop18)) {
				Features::spawn_vehicle22(OffRoad1[soutprop18]);
			};

			if (Menu::ListVector("Planes", Planes1, soutprop19)) {
				Features::spawn_vehicle(Planes1[soutprop19]);
			};

			if (Menu::ListVector("Sedans", Sedans1, soutprop20)) {
				Features::spawn_vehicle22(Sedans1[soutprop20]);
			};

			if (Menu::ListVector("Service", Service1, soutprop21)) {
				Features::spawn_vehicle22(Service1[soutprop21]);
			};

			if (Menu::ListVector("Sports", Sports1, soutprop22)) {
				Features::spawn_vehicle22(Sports1[soutprop22]);
			};

			if (Menu::ListVector("SportClassics", SportsClassics1, soutprop23)) {
				Features::spawn_vehicle22(SportsClassics1[soutprop23]);
			};

			if (Menu::ListVector("Super", Super1, soutprop24)) {
				Features::spawn_vehicle22(Super1[soutprop24]);
			};

			if (Menu::ListVector("SUVs1", SUVs1, soutprop25)) {
				Features::spawn_vehicle22(SUVs1[soutprop25]);
			};

			if (Menu::ListVector("Trailer", Trailer1, soutprop26)) {
				Features::spawn_vehicle22(Trailer1[soutprop26]);
			};

			if (Menu::ListVector("Trains", Trains1, soutprop27)) {
				Features::spawn_vehicle22(Trains1[soutprop27]);
			};

			if (Menu::ListVector("Utility", Utility1, soutprop28)) {
				Features::spawn_vehicle22(Utility1[soutprop28]);
			};

			if (Menu::ListVector("Vans", Vans1, soutprop200)) {
				Features::spawn_vehicle22(Vans1[soutprop200]);
			};

			if (Menu::Settings::currentOption == 7)
				Menu::Vehicle(stream_AfterHours[soutprop455], AfterHours[soutprop455]);
			if (Menu::Settings::currentOption == 10)
				Menu::Vehicle(stream_Assault[soutprop], Assault[soutprop]);
			if (Menu::Settings::currentOption == 10)
				Menu::Vehicle(stream_Smugglers[soutprop2], Smugglers[soutprop2]);
			if (Menu::Settings::currentOption == 12)
				Menu::Vehicle(stream_stunts[soutprop4], stunts[soutprop4]);
			if (Menu::Settings::currentOption == 32)
				Menu::Vehicle(stream_Supper[soutprop24], Supper[soutprop24]);
			if (Menu::Settings::currentOption == 13)
				Menu::Vehicle(stream_export1[soutprop5], export1[soutprop5]);
			if (Menu::Settings::currentOption == 29)
				Menu::Vehicle(stream_service1[soutprop21], service1[soutprop21]);
			if (Menu::Settings::currentOption == 14)
				Menu::Vehicle(stream_boats1[soutprop6], boats1[soutprop6]);
			if (Menu::Settings::currentOption == 27)
				Menu::Vehicle(stream_planes1[soutprop19], planes1[soutprop19]);
			if (Menu::Settings::currentOption == 17)
				Menu::Vehicle(stream_coupes2[soutprop9], coupes2[soutprop9]);
			if (Menu::Settings::currentOption == 18)
				Menu::Vehicle(stream_cycles22[soutprop10], cycles22[soutprop10]);

		}
							break;



							//PTFX 
		case PTFX:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Effects");
			if (Menu::Option("~w~Clown Appears"))Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			if (Menu::Option("~w~Firework 1"))Features::PTFXCALL("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst");
			if (Menu::Option("~w~Firework 2"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw");
			if (Menu::Option("~w~Firework 3"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw");
			if (Menu::Option("~w~Banknotes"))Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			if (Menu::Option("~w~Truck Crash"))Features::PTFXCALL("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash");
			if (Menu::Option("~w~Alien 1"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate");
			if (Menu::Option("~w~Alien 2"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport");
			if (Menu::Option("~w~Electric Box"))Features::PTFXCALL("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box");
			if (Menu::Option("~w~Water Splash"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash");
			if (Menu::Option("~w~Blood Entry"))Features::PTFXCALL("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry");
			if (Menu::Option("~w~Sniper Impact"))Features::PTFXCALL("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact");
			if (Menu::Option("~w~Dirt Throw"))Features::PTFXCALL("core_snow", "core_snow", "cs_mich1_spade_dirt_throw");
			if (Menu::Option("~w~Eletric Boosh"))Features::PTFXCALL("scr_trevor1", "scr_trevor1", "scr_trev1_trailer_boosh");
			if (Menu::Option("~w~Blood Stab"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_mich2_blood_stab");
			if (Menu::Option("~w~Ped Sliced"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced");
			if (Menu::Option("~w~Camera"))Features::PTFXCALL("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera");
			if (Menu::Option("~w~Meth Smoke"))Features::PTFXCALL("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke");
			if (Menu::Option("~w~Ghost Rider"))Features::PTFXCALL("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke");

		}
		break;
		case PTFXO:
		{
			//Menu::DRAW_TEXTURE("shopui_title_ie_modgarage", "shopui_title_ie_modgarage", titlebox, 0.0800f, 0.21f, 0.090f, 0, 255, 255, 255, 255);
			Menu::Title("Effects Options");
			Menu::Subtitle("EFFECTS OPTIONS");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			Menu::Toggle("Looped", Features::PTLoopedO[Features::Online::selectedPlayer]);
			if (Menu::Option("Clown Appears"))Features::PTFXCALLppl("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 1"))Features::PTFXCALLppl("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 2"))Features::PTFXCALLppl("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 3"))Features::PTFXCALLppl("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Banknotes"))Features::PTFXCALLppl("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes", Features::Online::selectedPlayer);
			if (Menu::Option("Truck Crash"))Features::PTFXCALLppl("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 1"))Features::PTFXCALLppl("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 2"))Features::PTFXCALLppl("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", Features::Online::selectedPlayer);
			if (Menu::Option("Electric Box"))Features::PTFXCALLppl("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", Features::Online::selectedPlayer);
			if (Menu::Option("Water Splash"))Features::PTFXCALLppl("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", Features::Online::selectedPlayer);
			if (Menu::Option("Bubbles"))Features::PTFXCALLppl("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles", Features::Online::selectedPlayer);
			if (Menu::Option("Blood Entry"))Features::PTFXCALLppl("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", Features::Online::selectedPlayer);
			if (Menu::Option("Sniper Impact"))Features::PTFXCALLppl("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact", Features::Online::selectedPlayer);
			if (Menu::Option("Dirt Throw"))Features::PTFXCALLppl("core_snow", "core_snow", "cs_mich1_spade_dirt_throw", Features::Online::selectedPlayer);
			if (Menu::Option("~w~Eletric Boosh"))Features::PTFXCALL("scr_trevor1", "scr_trevor1", "scr_trev1_trailer_boosh");
			if (Menu::Option("Blood Stab"))Features::PTFXCALLppl("scr_michael2", "scr_michael2", "scr_mich2_blood_stab", Features::Online::selectedPlayer);
			if (Menu::Option("Ped Sliced"))Features::PTFXCALLppl("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced", Features::Online::selectedPlayer);
			if (Menu::Option("Camera"))Features::PTFXCALLppl("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera", Features::Online::selectedPlayer);
			if (Menu::Option("Meth Smoke"))Features::PTFXCALLppl("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", Features::Online::selectedPlayer);
			if (Menu::Option("Burial Dirt"))Features::PTFXCALLppl("scr_reburials", "scr_reburials", "scr_burial_dirt", Features::Online::selectedPlayer);
			if (Menu::Option("~w~Ghost Rider"))Features::PTFXCALLppl("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", Features::Online::selectedPlayer);

		}
		break;

		//onlineftp go to ur spawner where u added the blip
		case onlineftp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Effects to Player");
			Menu::Toggle("~w~Looped", Features::PTLoopedO[PLAYER::PLAYER_ID()]);
			if (Menu::Option("~w~Clown Appears"))Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
			if (Menu::Option("~w~Firework 1"))Features::PTFXCALL("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst");
			if (Menu::Option("~w~Firework 2"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw");
			if (Menu::Option("~w~Firework 3"))Features::PTFXCALL("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw");
			if (Menu::Option("~w~Banknotes"))Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");
			if (Menu::Option("~w~Truck Crash"))Features::PTFXCALL("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash");
			if (Menu::Option("~w~Alien 1"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate");
			if (Menu::Option("~w~Alien 2"))Features::PTFXCALL("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport");
			if (Menu::Option("~w~Electric Box"))Features::PTFXCALL("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box");
			if (Menu::Option("~w~Water Splash"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash");
			if (Menu::Option("~w~Bubbles"))Features::PTFXCALL("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles");
			if (Menu::Option("~w~Blood Entry"))Features::PTFXCALL("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry");
			if (Menu::Option("~w~Sniper Impact"))Features::PTFXCALL("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact");
			if (Menu::Option("~w~Dirt Throw"))Features::PTFXCALL("core_snow", "core_snow", "cs_mich1_spade_dirt_throw");
			if (Menu::Option("~w~Blood Stab"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_mich2_blood_stab");
			if (Menu::Option("~w~Ped Sliced"))Features::PTFXCALL("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced");
			if (Menu::Option("~w~Camera"))Features::PTFXCALL("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera");
			if (Menu::Option("~w~Meth Smoke"))Features::PTFXCALL("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke");
			if (Menu::Option("~w~Burial Dirt"))Features::PTFXCALL("scr_reburials", "scr_reburials", "scr_burial_dirt");
			if (Menu::Option("~w~Ghost Rider"))Features::PTFXCALL("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke");


		}
		break;

		//atachtp
		case attachtp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Attach to Player");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (Menu::Option("Attach by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::attachobjects2(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}

			if (Menu::ListVector("Attach 1.44 DLC Prop", propList23, propListPos23w)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
				Features::attachobjects2(propList23[propListPos23w]);
			}

			if (Menu::ListVector("Attach Object", propList, propListPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
				Features::attachobjects2(propList[propListPos]);
			}

			if (Menu::ListVector("Attach Stunt Props", Stuntlist, StuntlistPos)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
				Features::attachobjects2(Stuntlist[StuntlistPos]);
			}

			if (Menu::ListVector("Attach Flags", flags1, soutprop29)) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
				Features::attachobjects2(flags1[soutprop29]);
			}

			if (Menu::Option("Extreme Detach Everything Player"))
			{
				changeModelall("mp_m_freemode_01");
			}

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			char* objects[136] = { "prop_bskball_01", "PROP_MP_RAMP_03", "PROP_MP_RAMP_02", "PROP_MP_RAMP_01", "PROP_JETSKI_RAMP_01", "PROP_WATER_RAMP_03", "PROP_VEND_SNAK_01", "PROP_TRI_START_BANNER", "PROP_TRI_FINISH_BANNER", "PROP_TEMP_BLOCK_BLOCKER", "PROP_SLUICEGATEL", "PROP_SKIP_08A", "PROP_SAM_01", "PROP_RUB_CONT_01B", "PROP_ROADCONE01A", "PROP_MP_ARROW_BARRIER_01", "PROP_HOTEL_CLOCK_01", "PROP_LIFEBLURB_02", "PROP_COFFIN_02B", "PROP_MP_NUM_1", "PROP_MP_NUM_2", "PROP_MP_NUM_3", "PROP_MP_NUM_4", "PROP_MP_NUM_5", "PROP_MP_NUM_6", "PROP_MP_NUM_7", "PROP_MP_NUM_8", "PROP_MP_NUM_9", "prop_xmas_tree_int", "prop_bumper_car_01", "prop_beer_neon_01", "prop_space_rifle", "prop_dummy_01", "prop_rub_trolley01a", "prop_wheelchair_01_s", "PROP_CS_KATANA_01", "PROP_CS_DILDO_01", "prop_armchair_01", "prop_bin_04a", "prop_chair_01a", "prop_dog_cage_01", "prop_dummy_plane", "prop_golf_bag_01", "prop_arcade_01", "hei_prop_heist_emp", "prop_alien_egg_01", "prop_air_towbar_01", "hei_prop_heist_tug", "prop_air_luggtrolley", "PROP_CUP_SAUCER_01", "prop_wheelchair_01", "prop_ld_toilet_01", "prop_acc_guitar_01", "prop_bank_vaultdoor", "p_v_43_safe_s", "p_spinning_anus_s", "prop_can_canoe", "prop_air_woodsteps", "Prop_weed_01", "prop_a_trailer_door_01", "prop_apple_box_01", "prop_air_fueltrail1", "prop_barrel_02a", "prop_barrel_float_1", "prop_barrier_wat_03b", "prop_air_fueltrail2", "prop_air_propeller01", "prop_windmill_01", "prop_Ld_ferris_wheel", "p_tram_crash_s", "p_oil_slick_01", "p_ld_stinger_s", "p_ld_soc_ball_01", "prop_juicestand", "p_oil_pjack_01_s", "prop_barbell_01", "prop_barbell_100kg", "p_parachute1_s", "p_cablecar_s", "prop_beach_fire", "prop_lev_des_barge_02", "prop_lev_des_barge_01", "prop_a_base_bars_01", "prop_beach_bars_01", "prop_air_bigradar", "prop_weed_pallet", "prop_artifact_01", "prop_attache_case_01", "prop_large_gold", "prop_roller_car_01", "prop_water_corpse_01", "prop_water_corpse_02", "prop_dummy_01", "prop_atm_01", "hei_prop_carrier_docklight_01", "hei_prop_carrier_liferafts", "hei_prop_carrier_ord_03", "hei_prop_carrier_defense_02", "hei_prop_carrier_defense_01", "hei_prop_carrier_radar_1", "hei_prop_carrier_radar_2", "hei_prop_hei_bust_01", "hei_prop_wall_alarm_on", "hei_prop_wall_light_10a_cr", "prop_afsign_amun", "prop_afsign_vbike", "prop_aircon_l_01", "prop_aircon_l_02", "prop_aircon_l_03", "prop_aircon_l_04", "prop_airhockey_01", "prop_air_bagloader", "prop_air_blastfence_01", "prop_air_blastfence_02", "prop_air_cargo_01a", "prop_air_chock_01", "prop_air_chock_03", "prop_air_gasbogey_01", "prop_air_generator_03", "prop_air_stair_02", "prop_amb_40oz_02", "prop_amb_40oz_03", "prop_amb_beer_bottle", "prop_amb_donut", "prop_amb_handbag_01", "prop_amp_01", "prop_anim_cash_pile_02", "prop_asteroid_01", "prop_arm_wrestle_01", "prop_ballistic_shield", "prop_bank_shutter", "prop_barier_conc_02b", "prop_barier_conc_05a", "prop_barrel_01a", "prop_bar_stool_01", "prop_basejump_target_01" };
			if (Menu::Option("~w~Delete All Objects")) {
				for (int i = 0; i < 5; i++) {
					Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
					GAMEPLAY::CLEAR_AREA_OF_PEDS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_OBJECTS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_VEHICLES(coords.x, coords.y, coords.z, 2, 0, 0, 0, 0, 0);
					for (int i = 0; i < 136; i++) {
						Object obj = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(coords.x, coords.y, coords.z, 4.0, GAMEPLAY::GET_HASH_KEY(objects[i]), 0, 0, 1);

						if (ENTITY::DOES_ENTITY_EXIST(obj) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(obj, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer))) {
							RequestControlOfEnt(obj);
							int netID = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(obj);
							NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID, 1);
							Features::RequestControlOfid(netID);
							ENTITY::DETACH_ENTITY(obj, 1, 1);
							if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(obj)) {
								ENTITY::SET_ENTITY_AS_MISSION_ENTITY(obj, 1, 1);
								ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
								ENTITY::DELETE_ENTITY(&obj);
							}
						}
					}
				}



			}   }
		break;
		case attachtpall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Attach to all Player");

			if (Menu::Option("Attach by name")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::attachobjects222(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}

			if (Menu::ListVector("Attach 1.44 DLC Props", propList23, propListPos23w)) {


				for (int i = 0; i < 136; i++) {

					Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1);
					Features::attachobjects222(propList23[propListPos23w]);

				}
			}



			if (Menu::ListVector("Attach Object", propList, propListPos)) {


				for (int i = 0; i < 136; i++) {

					Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1);
					Features::attachobjects222(propList[propListPos]);

				}
			}

			if (Menu::ListVector("Stunt Props", Stuntlist, StuntlistPos)) {

				for (int i = 0; i < 136; i++) {


					Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1);
					Features::attachobjects222(Stuntlist[StuntlistPos]);
				}
			}

			if (Menu::ListVector("Attach Flags", flags1, soutprop29)) {

				for (int i = 0; i < 136; i++) {

					Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1);
					Features::attachobjects222(flags1[soutprop29]);


				}
			}

			if (Menu::Option("Extreme Detach Everything All Player"))
			{
				changeModelallpl("mp_m_freemode_01");
			}


			char* objects[136] = { "prop_bskball_01", "PROP_MP_RAMP_03", "PROP_MP_RAMP_02", "PROP_MP_RAMP_01", "PROP_JETSKI_RAMP_01", "PROP_WATER_RAMP_03", "PROP_VEND_SNAK_01", "PROP_TRI_START_BANNER", "PROP_TRI_FINISH_BANNER", "PROP_TEMP_BLOCK_BLOCKER", "PROP_SLUICEGATEL", "PROP_SKIP_08A", "PROP_SAM_01", "PROP_RUB_CONT_01B", "PROP_ROADCONE01A", "PROP_MP_ARROW_BARRIER_01", "PROP_HOTEL_CLOCK_01", "PROP_LIFEBLURB_02", "PROP_COFFIN_02B", "PROP_MP_NUM_1", "PROP_MP_NUM_2", "PROP_MP_NUM_3", "PROP_MP_NUM_4", "PROP_MP_NUM_5", "PROP_MP_NUM_6", "PROP_MP_NUM_7", "PROP_MP_NUM_8", "PROP_MP_NUM_9", "prop_xmas_tree_int", "prop_bumper_car_01", "prop_beer_neon_01", "prop_space_rifle", "prop_dummy_01", "prop_rub_trolley01a", "prop_wheelchair_01_s", "PROP_CS_KATANA_01", "PROP_CS_DILDO_01", "prop_armchair_01", "prop_bin_04a", "prop_chair_01a", "prop_dog_cage_01", "prop_dummy_plane", "prop_golf_bag_01", "prop_arcade_01", "hei_prop_heist_emp", "prop_alien_egg_01", "prop_air_towbar_01", "hei_prop_heist_tug", "prop_air_luggtrolley", "PROP_CUP_SAUCER_01", "prop_wheelchair_01", "prop_ld_toilet_01", "prop_acc_guitar_01", "prop_bank_vaultdoor", "p_v_43_safe_s", "p_spinning_anus_s", "prop_can_canoe", "prop_air_woodsteps", "Prop_weed_01", "prop_a_trailer_door_01", "prop_apple_box_01", "prop_air_fueltrail1", "prop_barrel_02a", "prop_barrel_float_1", "prop_barrier_wat_03b", "prop_air_fueltrail2", "prop_air_propeller01", "prop_windmill_01", "prop_Ld_ferris_wheel", "p_tram_crash_s", "p_oil_slick_01", "p_ld_stinger_s", "p_ld_soc_ball_01", "prop_juicestand", "p_oil_pjack_01_s", "prop_barbell_01", "prop_barbell_100kg", "p_parachute1_s", "p_cablecar_s", "prop_beach_fire", "prop_lev_des_barge_02", "prop_lev_des_barge_01", "prop_a_base_bars_01", "prop_beach_bars_01", "prop_air_bigradar", "prop_weed_pallet", "prop_artifact_01", "prop_attache_case_01", "prop_large_gold", "prop_roller_car_01", "prop_water_corpse_01", "prop_water_corpse_02", "prop_dummy_01", "prop_atm_01", "hei_prop_carrier_docklight_01", "hei_prop_carrier_liferafts", "hei_prop_carrier_ord_03", "hei_prop_carrier_defense_02", "hei_prop_carrier_defense_01", "hei_prop_carrier_radar_1", "hei_prop_carrier_radar_2", "hei_prop_hei_bust_01", "hei_prop_wall_alarm_on", "hei_prop_wall_light_10a_cr", "prop_afsign_amun", "prop_afsign_vbike", "prop_aircon_l_01", "prop_aircon_l_02", "prop_aircon_l_03", "prop_aircon_l_04", "prop_airhockey_01", "prop_air_bagloader", "prop_air_blastfence_01", "prop_air_blastfence_02", "prop_air_cargo_01a", "prop_air_chock_01", "prop_air_chock_03", "prop_air_gasbogey_01", "prop_air_generator_03", "prop_air_stair_02", "prop_amb_40oz_02", "prop_amb_40oz_03", "prop_amb_beer_bottle", "prop_amb_donut", "prop_amb_handbag_01", "prop_amp_01", "prop_anim_cash_pile_02", "prop_asteroid_01", "prop_arm_wrestle_01", "prop_ballistic_shield", "prop_bank_shutter", "prop_barier_conc_02b", "prop_barier_conc_05a", "prop_barrel_01a", "prop_bar_stool_01", "prop_basejump_target_01" };
			if (Menu::Option("~w~Delete All Objects")) {
				for (int i = 0; i < 5; i++) {
					Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 1);
					GAMEPLAY::CLEAR_AREA_OF_PEDS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_OBJECTS(coords.x, coords.y, coords.z, 2, 0);
					GAMEPLAY::CLEAR_AREA_OF_VEHICLES(coords.x, coords.y, coords.z, 2, 0, 0, 0, 0, 0);
					for (int i = 0; i < 136; i++) {
						Object obj = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(coords.x, coords.y, coords.z, 4.0, GAMEPLAY::GET_HASH_KEY(objects[i]), 0, 0, 1);

						if (ENTITY::DOES_ENTITY_EXIST(obj) && ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(obj, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
							RequestControlOfEnt(obj);
							int netID = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(obj);
							NETWORK::SET_NETWORK_ID_CAN_MIGRATE(netID, 1);
							Features::RequestControlOfid(netID);
							ENTITY::DETACH_ENTITY(obj, 1, 1);
							if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(obj)) {
								ENTITY::SET_ENTITY_AS_MISSION_ENTITY(obj, 1, 1);
								ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&obj);
								ENTITY::DELETE_ENTITY(&obj);
							}
						}
					}
				}



			}   }
		break;


		case tpother:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Teleport Options");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));
			if (Menu::Option("~w~Teleport Into Car")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				for (int i = -1; i < 16; i++)
				{
					if (VEHICLE::IS_VEHICLE_SEAT_FREE(veh, i))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, i);
					}
				}
			}
			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			Menu::Option("~w~Teleport To Player", [] {Features::Online::TeleportToPlayer(Features::Online::selectedPlayer); });

		}
		break;
		case ipls:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~IPLs");
			if (Menu::Option("~w~North Yankton")) {
				STREAMING::REQUEST_IPL("prologue01");
				STREAMING::REQUEST_IPL("Prologue01c");
				STREAMING::REQUEST_IPL("Prologue01d");
				STREAMING::REQUEST_IPL("Prologue01e");
				STREAMING::REQUEST_IPL("Prologue01f");
				STREAMING::REQUEST_IPL("Prologue01g");
				STREAMING::REQUEST_IPL("prologue01h");
				STREAMING::REQUEST_IPL("prologue01i");
				STREAMING::REQUEST_IPL("prologue01j");
				STREAMING::REQUEST_IPL("prologue01k");
				STREAMING::REQUEST_IPL("prologue01z");
				STREAMING::REQUEST_IPL("prologue02");
				STREAMING::REQUEST_IPL("prologue03");
				STREAMING::REQUEST_IPL("prologue03b");
				STREAMING::REQUEST_IPL("prologue03_grv_cov");
				STREAMING::REQUEST_IPL("prologue03_grv_dug");
				STREAMING::REQUEST_IPL("prologue03_grv_fun");
				STREAMING::REQUEST_IPL("prologue04");
				STREAMING::REQUEST_IPL("prologue04b");
				STREAMING::REQUEST_IPL("prologue04_cover");
				STREAMING::REQUEST_IPL("prologue05");
				STREAMING::REQUEST_IPL("prologue05b");
				STREAMING::REQUEST_IPL("prologue06");
				STREAMING::REQUEST_IPL("prologue06b");
				STREAMING::REQUEST_IPL("prologue06_int");
				STREAMING::REQUEST_IPL("prologuerd");
				STREAMING::REQUEST_IPL("prologuerdb");
				STREAMING::REQUEST_IPL("prologue_DistantLights");
				STREAMING::REQUEST_IPL("prologue_grv_torch");
				STREAMING::REQUEST_IPL("prologue_m2_door");
				STREAMING::REQUEST_IPL("prologue_LODLights");
				STREAMING::REQUEST_IPL("DES_ProTree_start");
				Vector3 Coords;
				Coords.x = 3595.39673f; Coords.y = -4893.727f; Coords.z = 115.838394f;
				TPto(Coords);
			}
			if (Menu::Option("~w~Porn Yacht")) {
				STREAMING::REQUEST_IPL("smboat");
				Vector3 Coords;
				Coords.x = -2045.8f; Coords.y = -1031.2f; Coords.z = 11.9f;
				TPto(Coords);
			}
			if (Menu::Option("~w~Aircraft Carrier")) {
				STREAMING::REQUEST_IPL("hei_carrier");
				STREAMING::REQUEST_IPL("hei_carrier_DistantLights");
				STREAMING::REQUEST_IPL("hei_Carrier_int1");
				STREAMING::REQUEST_IPL("hei_Carrier_int2");
				STREAMING::REQUEST_IPL("hei_Carrier_int3");
				STREAMING::REQUEST_IPL("hei_Carrier_int4");
				STREAMING::REQUEST_IPL("hei_Carrier_int5");
				STREAMING::REQUEST_IPL("hei_Carrier_int6");
				STREAMING::REQUEST_IPL("hei_carrier_LODLights");
				Vector3 Coords;
				Coords.x = 3069.330f; Coords.y = -4632.4f; Coords.z = 15.043f;
				TPto(Coords);
			}
			if (Menu::Option("Sunken Cargoship")) {
				STREAMING::REQUEST_IPL("sunkcargoship");
				Vector3 Coords;
				Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 0.0f;
				TPto(Coords);
			}
			if (Menu::Option("Hospital")) {
				STREAMING::REQUEST_IPL("RC12B_HospitalInterior");
				STREAMING::REQUEST_IPL("RC12B_Destroyed");
				Vector3 Coords;
				Coords.x = 356.8f; Coords.y = -590.1f; Coords.z = 43.3f;
				TPto(Coords);
			}
			if (Menu::Option("Oneil Farm")) {
				STREAMING::REMOVE_IPL("farm_burnt");
				STREAMING::REMOVE_IPL("farm_burnt_props");
				STREAMING::REQUEST_IPL("farm");
				STREAMING::REQUEST_IPL("farm_props");
				STREAMING::REQUEST_IPL("farmint");
				STREAMING::REQUEST_IPL("farmint_cap");
				Vector3 Coords;
				Coords.x = 2441.2f; Coords.y = 4968.5f; Coords.z = 51.7f;
				TPto(Coords);
			}
			if (Menu::Option("Life Invader Office")) {
				STREAMING::REQUEST_IPL("facelobby");
				STREAMING::REQUEST_IPL("facelobbyfake");
				Vector3 Coords;
				Coords.x = -1047.9f; Coords.y = -233.0f; Coords.z = 39.0f;
				TPto(Coords);
			}
			if (Menu::Option("Cargoship")) {
				STREAMING::REQUEST_IPL("cargoship");
				Vector3 Coords;
				Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 9.3192f;
				TPto(Coords);
			}
			if (Menu::Option("Jewelry Store")) {
				STREAMING::REQUEST_IPL("jewel2fake");
				STREAMING::REQUEST_IPL("post_hiest_unload");
				STREAMING::REQUEST_IPL("bh1_16_refurb");
				Vector3 Coords;
				Coords.x = -630.4f; Coords.y = -236.7f; Coords.z = 40.0f;
				TPto(Coords);
			}
			if (Menu::Option("Morgue")) {
				STREAMING::REQUEST_IPL("Coroner_Int_on");
				Vector3 Coords;
				Coords.x = 244.9f; Coords.y = -1374.7f; Coords.z = 39.5f;
				TPto(Coords);
			}

		}
		break;

		case mapmds:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Map Mods");
			Menu::MenuOption("Maze Bank Demolition", mod_maze_demo);
			Menu::MenuOption("Maze Bank Roof Ramp", mod_maze_ramp);
			Menu::MenuOption("Beach Ferris-Ramp", ferris_ramp);
			Menu::MenuOption("Mount Chilliad Ramp", chiliad_ramp);
			Menu::MenuOption("Airport Mini Ramp", airport_mini);
			Menu::MenuOption("Airport Gate Ramp", airport_gate);
			Menu::MenuOption("UFO Tower", UFO_Tower);
			Menu::MenuOption("Maze Bank Quad Ramp", mod_maze_quad);
			Menu::MenuOption("Fort Zancudo Motorcross", zancudo_moto);
			Menu::MenuOption("Halfpipe Fun Track", halfpipe);
			Menu::MenuOption("Airport Loop", air_loop);
			Menu::MenuOption("Maze Bank Ramp", mod_maze_ramp2);
		}
		break;
		case mod_maze_demo:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Maze Bank Demolition");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -80.9087, -830.357, 325.097, -14.4264, -8.53774, 152.209, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2316, -831.297, 325.108, -14.4054, 4.26887, 164.271, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7563, -831.549, 325.123, -14.4263, -0, 171.818, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.2595, -831.691, 325.09, -14.2059, -1.06722, -176.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.9478, -831.257, 325.113, -14.4264, 2.13443, -166.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.5981, -830.542, 325.066, -14.5918, -4.26887, -155.474, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.4174, -829.035, 325.097, -14.4263, -4.26887, -140.651, -1, 0);
				Features::PlaceObjectByHash(2475986526, -65.7121, -827.409, 325.068, -14.3048, -1.70755, -130.667, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.2717, -825.422, 325.112, -14.4263, -0, -121.256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.2876, -823.434, 325.114, -14.5345, -0, -111.446, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.4924, -821.128, 325.082, -14.5467, 2.13443, -102.385, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.233, -818.528, 325.065, -14.6184, -8.00413, -88.1861, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.8694, -815.926, 325.118, -14.4265, -6.4033, -76.5979, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.6142, -813.68, 325.112, -14.3655, 8.53774, -66.7885, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.9883, -811.439, 325.107, -14.4263, 1.28066, -52.8494, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.5913, -808.328, 325.238, -12.4517, -0, -40.3246, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.2603, -807.899, 325.336, -13.8689, -0, -33.062, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.1526, -807.598, 325.153, -12.0416, 4.26887, -28.0523, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2853, -806.628, 325.151, -11.7962, -0, -19.1717, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.2243, -806.286, 325.164, -12.0419, -0, 1.55726, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.5757, -806.312, 325.088, -14.1843, -0, 12.6263, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.8704, -807.22, 325.143, -14.049, -4.26887, 21.4769, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.0222, -807.83, 325.036, -14.1422, -4.26887, 32.7605, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8934, -809.424, 325.073, -14.5264, -8.53774, 46.5132, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.2523, -810.983, 325.043, -14.859, -0, 53.5324, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.5177, -813.202, 325.089, -14.5267, 4.26887, 64.6634, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.6645, -815.707, 325.059, -14.8589, 4.26887, 73.157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.7973, -817.987, 325.119, -14.8468, -1.33402, 89.3982, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5801, -821.034, 325.059, -14.8593, -0, 95.4435, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.2815, -822.239, 325.126, -15.6308, -4.26887, 100.311, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7602, -824.03, 325.044, -15.9224, -0, 116.957, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.3743, -826.099, 325.136, -15.7025, 2.56132, 124.307, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.4737, -828.611, 325.076, -15.0688, -0, 132.538, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.9554, -832.877, 325.894, -14.1563, 4.26887, 132.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.3865, -831.322, 325.887, -14.1562, -0, 126.154, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.4247, -834.407, 325.915, -14.2701, 4.26887, 143.277, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.1736, -833.789, 325.653, -14.4072, -4.26887, 145.777, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8118, -835.765, 326.063, -12.243, 4.26887, 151.527, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.7015, -837.145, 326.059, -12.3172, 2.13443, 162.332, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.6428, -837.649, 326.163, -10.8391, 3.20165, 171.297, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.479, -837.909, 326.025, -12.3172, -1.06722, 174.574, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.861, -837.826, 326.061, -12.3173, 5.33609, -176.632, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4799, -837.265, 326.09, -12.3173, -0, -166.182, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.0415, -836.185, 326.018, -12.3171, -0, -156.039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.8504, -834.996, 325.951, -11.5263, -0, -145.834, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5702, -833.725, 326.1, -11.2947, -0, -140.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.9992, -831.419, 326.075, -11.5262, -4.26887, -130.963, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.9923, -828.729, 326.116, -11.5262, 4.26887, -121.973, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.5045, -825.626, 326.114, -11.5263, -0, -110.959, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5533, -822.397, 326.08, -11.1311, -6.4033, -102, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0911, -820.05, 326.049, -11.0325, 2.13443, -100.794, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0681, -818.32, 326.087, -11.1312, -2.66804, -87.9469, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.2989, -816.237, 326.048, -11.0324, 2.13443, -83.2139, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.8952, -814.518, 326.142, -11.0324, -2.13443, -76.5476, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.1209, -811.23, 326.116, -10.9697, -0, -66.7674, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.0622, -809.17, 326.095, -11.0574, 4.26887, -62.782, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.096, -807.639, 326.119, -11.5544, -0, -52.7596, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.081, -805.317, 326.116, -11.1035, -0, -40.7682, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.1466, -804.55, 326.283, -11.1035, -0, -30.477, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.9795, -798.8, 326.717, -10.1561, -0, -29.3495, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.5734, -802.52, 326.262, -10.471, -8.53774, -31.2185, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.9341, -800.541, 326.198, -10.5317, -0, -20.0064, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3309, -801.285, 325.849, -10.2407, -0, 1.58401, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.0222, -799.865, 326.177, -10.7327, -0, -5.98314, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.5167, -797.998, 326.32, -12.4969, -2.66804, 1.58883, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2787, -800.531, 326.011, -12.9433, 4.26887, 13.0054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.6721, -801.017, 325.9, -12.4601, 2.13443, 17.3792, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.6027, -801.744, 325.971, -12.9433, -0, 26.3052, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.6586, -802.789, 325.95, -12.8791, 1.28066, 32.5856, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5086, -804.25, 325.978, -12.9432, 4.26887, 42.3279, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9923, -805.73, 325.89, -11.9333, -4.26887, 46.0613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.167, -807.318, 325.946, -13.0244, -0, 53.178, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5987, -807.353, 326.343, -11.5713, 4.26887, 60.8753, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5166, -813.963, 325.942, -13.4341, -4.26887, 73.0256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.121, -810.584, 325.996, -13.4339, -4.26887, 64.9353, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.9931, -815.866, 325.924, -13.0519, -0, 79.5966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.8716, -817.904, 325.988, -13.4339, -0, 88.8361, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.7912, -821.777, 325.946, -13.6946, -2.66804, 91.1427, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.2951, -823.554, 325.966, -13.157, -0, 101.424, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.5757, -827.033, 325.87, -13.5323, -0, 104.668, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.53, -828.342, 325.842, -14.1563, 4.26887, 120.328, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.5203, -829.611, 325.936, -14.1563, -0, 124.573, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.5355, -833.068, 327.049, -9.63525, 1.70755, 124.512, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2445, -835.1, 326.976, -9.27617, -1.28066, 128.396, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.513, -837.087, 327.008, -9.63523, -4.26887, 132.871, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.07, -839.341, 327.025, -9.63574, 4.26887, 143.545, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7336, -841.135, 327.284, -9.63566, -0, 150.983, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.8343, -842.167, 327.254, -9.36742, -4.26887, 152.377, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.0883, -842.661, 327.589, -7.98782, -8.53774, 146.409, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.595, -843.001, 327.277, -9.6352, -0, 161.654, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.8027, -843.618, 327.263, -9.36755, -2.13443, 165.215, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.5619, -843.703, 327.458, -9.63545, -2.13443, 171.015, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.2479, -844.026, 327.261, -9.36765, 1.06722, 175.986, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.5382, -843.999, 327.285, -9.6355, -0, -177.212, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.2047, -843.988, 327.3, -9.36764, -1.06722, -172.013, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.036, -843.266, 327.309, -9.63525, 4.26887, -166.686, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.2981, -840.996, 326.756, -9.37509, -2.13443, -159.014, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7067, -842.714, 327.222, -9.37501, 2.13443, -159.27, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.5693, -841.792, 327.24, -9.63515, 4.26887, -156.16, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.8874, -840.436, 327.231, -9.37483, 4.26887, -146.534, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.7118, -838.501, 327.384, -9.63533, -0, -141.372, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9491, -837.16, 327.309, -9.37471, 4.26887, -135.839, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.3494, -835.471, 327.34, -9.63578, 4.26887, -131.675, -1, 0);
				Features::PlaceObjectByHash(2475986526, -54.9387, -833.93, 327.334, -9.37482, -0, -127.887, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.727, -832.032, 327.367, -9.63521, -4.26887, -122.142, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.5928, -830.077, 327.332, -9.37496, -0, -116.843, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.7552, -827.819, 327.385, -9.63569, 6.4033, -111.077, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.0061, -825.839, 327.369, -9.37494, 4.26887, -107.054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5468, -823.622, 327.378, -9.63572, 4.26887, -101.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.0992, -820.896, 327.345, -9.47333, -1.06722, -95.7976, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9295, -818.102, 327.381, -9.63531, -8.00413, -88.2146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.1895, -815.816, 327.358, -9.4734, -0, -82.8649, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.9164, -813.132, 327.442, -9.63524, 2.13443, -76.865, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.1585, -811.568, 327.373, -9.58574, -0, -69.3402, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.0622, -809.533, 327.354, -9.63541, 2.13443, -65.7624, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.4048, -806.624, 327.376, -9.63526, 2.13443, -65.3971, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.2978, -803.815, 327.389, -9.63524, 4.26887, -52.2107, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5179, -802.266, 327.366, -9.51013, 4.26887, -50.6537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9995, -800.68, 327.42, -9.6353, 1.28066, -41.7027, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0278, -799.404, 327.549, -9.63516, 8.53774, -31.016, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.37, -797.284, 327.603, -9.6351, -0, -31.6732, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.3998, -795.965, 327.526, -9.42422, 8.53773, -29.018, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.8079, -794.744, 327.535, -9.63558, -2.13443, -20.0341, -1, 0);
				Features::PlaceObjectByHash(2475986526, -72.1225, -793.825, 327.497, -9.57894, -2.13443, -12.2336, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.6415, -795.169, 327.2, -9.63555, -1.60083, 2.8097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.9613, -794.235, 327.223, -8.9769, -5.33608, 4.53814, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3695, -789.507, 328.306, -8.84722, -8.33763, -0.0879073, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.6908, -794.505, 327.217, -9.63537, 4.26887, 13.0745, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.5673, -795.148, 327.101, -9.92985, 2.13443, 17.5819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.3087, -796.203, 327.177, -9.63542, -4.26887, 25.9296, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9655, -797.634, 327.118, -9.92994, -4.26887, 33.0571, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.6251, -799.702, 327.176, -9.63539, -0, 42.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.414, -801.299, 327.124, -9.92995, -0, 48.7085, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.1453, -803.637, 327.147, -9.63537, -8.53774, 53.6544, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.5885, -805.701, 327.144, -9.8947, -0, 60.5096, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.6945, -807.971, 327.174, -9.63569, 4.26887, 64.7568, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.7075, -809.885, 327.026, -8.13758, -0, 67.8881, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.394, -812.176, 327.105, -9.63525, -4.26887, 73.0223, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.025, -814.868, 327.097, -9.97277, 2.13443, 83.1537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.012, -817.789, 327.15, -9.63535, -1.33402, 88.8234, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.069, -819.76, 327.099, -9.95297, -1.33402, 90.8729, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.969, -821.91, 327.11, -9.63541, -2.66804, 91.5501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.3358, -824.801, 327.138, -9.63539, 2.13443, 101.678, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.5443, -828.598, 327.033, -9.63553, -0, 104.64, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.0896, -831.054, 326.937, -10.0741, 4.26887, 118.72, -1, 0);
				Features::PlaceObjectByHash(2475986526, -102.435, -833.952, 328.506, -5.26399, -0, 118.502, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.536, -831.932, 328.513, -5.42142, 4.26887, 111.099, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.644, -836.571, 328.636, -5.26398, -0, 124.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.0448, -838.912, 328.589, -5.26395, -2.13443, 128.175, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.9401, -841.184, 328.589, -5.26384, -2.13443, 132.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.4409, -842.718, 328.551, -5.01006, -2.13443, 136.57, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.6584, -844.231, 328.606, -5.26388, -0, 143.429, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.1044, -845.82, 328.655, -5.01307, -2.13443, 147.428, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.6061, -846.328, 328.851, -5.26389, -0, 150.62, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5884, -847.552, 328.829, -5.6777, -0, 153.36, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.5215, -848.802, 328.867, -5.26405, 5.33608, 161.164, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.9779, -849.605, 328.821, -5.67769, 1.06722, 166.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.5282, -849.717, 329.046, -5.26392, 1.06722, 170.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7555, -850.113, 328.885, -4.93224, 2.66804, 175.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2336, -850.06, 328.883, -5.26397, -0, -177.431, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4067, -849.836, 328.854, -4.82287, -5.33608, -172.2, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6252, -849.166, 328.911, -5.26394, -0, -166.741, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.6525, -848.331, 328.792, -4.82267, -2.13443, -160.74, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.1086, -847.355, 328.837, -5.26389, 2.13443, -156.346, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.2755, -846.895, 328.808, -5.97307, -2.13443, -151.031, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.5152, -845.543, 328.833, -5.26392, 1.06722, -147.129, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.9339, -843.258, 328.987, -5.26394, 2.13443, -141.8, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.6636, -841.564, 328.905, -5.18348, -0, -136.192, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.8013, -839.526, 328.926, -5.26393, -2.13443, -131.788, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9112, -837.51, 328.916, -5.18352, -8.53774, -125.894, -1, 0);
				Features::PlaceObjectByHash(2475986526, -48.5833, -835.261, 328.968, -5.26388, 2.13443, -122.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.1369, -832.806, 328.936, -5.18352, -0, -117.146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.1092, -830.019, 328.985, -5.26389, -0, -111.097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.2549, -827.659, 328.957, -5.18353, -1.06722, -105.915, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.5598, -824.856, 328.973, -5.26387, -0, -101.582, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.0346, -821.522, 328.953, -5.26387, 5.33608, -95.978, -1, 0);
				Features::PlaceObjectByHash(2475986526, -43.8673, -817.92, 328.98, -5.26387, -4.00206, -88.1556, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.1983, -815.072, 328.956, -5.26387, -0, -82.8806, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.0463, -811.788, 329.021, -5.26392, -0, -77.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.6154, -809.566, 328.95, -5.25705, -2.13443, -72.2094, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.5685, -807.149, 328.929, -5.26395, -2.13443, -66.9958, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.9752, -804.122, 328.959, -5.26398, -0, -65.1505, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.0785, -802.078, 328.914, -5.31539, 4.26887, -57.7224, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5092, -800.141, 328.99, -5.26406, -0, -52.4683, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.041, -798.134, 329.001, -5.31536, -2.13443, -49.2493, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.8808, -796.134, 329.041, -5.26389, -0, -42.3308, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.4375, -794.682, 329.045, -5.32055, 2.13443, -37.3601, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.7537, -794.2, 329.16, -5.26393, 2.13443, -32.2267, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0299, -792.042, 329.172, -5.26389, -2.13443, -32.1174, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5163, -790.736, 329.085, -5.04535, -4.26887, -29.2933, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.7324, -789.882, 329.081, -4.987, -2.13443, -27.7917, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7775, -788.94, 329.155, -5.04558, 1.06722, -19.5666, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.6555, -788.272, 329.103, -5.30654, 3.20165, -16.9146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.8259, -787.837, 329.128, -5.04546, 1.06722, -12.2941, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.5572, -787.022, 329.08, -4.61724, 1.06722, -10.7316, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.8754, -788.646, 328.671, -6.78921, -0, 2.98721, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.4, -788.132, 328.83, -5.91899, 2.66804, 3.75875, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.5351, -788.179, 328.782, -5.80051, -0, 7.26539, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.1189, -788.558, 328.793, -5.9192, 1.06722, 12.7168, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.4054, -789.317, 328.666, -5.79433, -0, 17.1877, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.4651, -789.98, 328.647, -5.63204, -0, 20.2315, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9795, -790.697, 328.76, -5.79416, -0, 25.9501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.9922, -791.487, 328.684, -6.26149, -0, 27.0819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.3298, -792.474, 328.677, -5.79412, -0, 33.3113, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2322, -793.73, 328.669, -5.58479, -2.13443, 37.4974, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.7282, -795.2, 328.764, -5.79431, -0, 41.8672, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.9782, -797.316, 328.695, -5.58488, -0, 48.9171, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.042, -800.063, 328.731, -5.79425, 2.13443, 53.7039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -101.884, -802.718, 328.706, -5.5848, 2.13443, 60.3613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.09, -805.421, 328.718, -5.79425, -0, 64.506, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.284, -807.711, 328.691, -5.58488, -2.13443, 65.966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.262, -810.369, 328.729, -5.26384, 1.06722, 73.2414, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.769, -812.146, 328.645, -5.25205, -1.06722, 75.8091, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.155, -814.128, 328.687, -5.26388, -1.06722, 82.8157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.062, -817.685, 328.758, -5.26388, 2.66804, 88.7458, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.154, -819.723, 328.716, -5.25204, -0, 90.1628, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.082, -822.072, 328.729, -5.26387, -1.33402, 91.2972, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.911, -823.815, 328.7, -5.52135, 5.33608, 99.4393, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.28, -826.029, 328.734, -5.26391, 1.06722, 101.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.06, -827.904, 328.644, -5.29978, 1.06722, 102.515, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.327, -830.112, 328.614, -5.26391, -2.13443, 104.719, -1, 0);
				Features::PlaceObjectByHash(3291218330, -108.551, -853.416, 327.387, 2.94456, 89.1111, -166.155, -1, 0);
				Features::PlaceObjectByHash(3291218330, -80.2509, -866.418, 327.301, 3.7405, 89.3, 146.641, -1, 0);
				Features::PlaceObjectByHash(3291218330, -55.8513, -863.921, 327.333, 6.87468, 89.6184, 149.776, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.3907, -848.122, 327.717, 2.33633, 88.8797, -16.2595, -1, 0);
				Features::PlaceObjectByHash(3291218330, -26.1908, -818.332, 328.76, 0.490556, 84.6598, -18.107, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.891, -789.138, 328.134, 1.11673, 87.6571, 42.7186, -1, 0);
				Features::PlaceObjectByHash(3291218330, -63.492, -772.044, 327.866, 3.09962, 89.1556, 44.702, -1, 0);
				Features::PlaceObjectByHash(3291218330, -93.4916, -774.848, 327.398, 2.73771, 89.0443, 122.539, -1, 0);
				Features::PlaceObjectByHash(3291218330, -115.991, -795.259, 327.27, 3.28432, 89.2033, 123.086, -1, 0);
				Features::PlaceObjectByHash(3291218330, -122.551, -825.074, 327.213, 173.37, 89.6048, 4.27077, -1, 0);
				Features::PlaceObjectByHash(118627012, -74.8438, -819.617, 323.685, 0, 0, -3.37511, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6253, -820.244, 323.793, -14.4263, -8.53774, -100.02, -1, 0);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;

		case mod_maze_ramp:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Maze Bank Roof Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1600026313, -78.4864, -807.943, 323.202, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.2766, -805.701, 323.204, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.8373, -803.709, 323.205, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -80.4295, -801.947, 323.207, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(4143853297, -97.4731, -778.557, 308.877, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.2429, -793.182, 321.08, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -83.5429, -795.106, 322.073, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.9429, -791.108, 319.956, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -85.8122, -788.585, 318.638, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -89.1589, -779.487, 313.336, -59.5389, 0.0405551, -160.567, -1, 1);
				Features::PlaceObjectByHash(1087520462, -90.7065, -774.863, 310.09, -57.4959, 0.322988, -160.758, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.4887, -772.564, 308.403, -55.1692, 0.383369, -161.049, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.7565, -771.74, 307.844, -56.4466, 0.0442451, -160.565, -1, 1);
				Features::PlaceObjectByHash(1087520462, -93.6941, -766.245, 302.736, -45.9996, 0.0556114, -160.556, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.886, -762.996, 298.741, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.1606, -759.499, 294.259, -42.0766, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.46, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.3203, -756.159, 291.688, -57.2958, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -98.7192, -752.356, 290.042, -69.9278, 3.20165e-005, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.0244, -751.684, 290.499, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.3223, -750.534, 290.479, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.348, -747.881, 290.452, -89.5256, -1.33402e-008, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.26, -748.154, 290.462, -76.096, 4.26887e-007, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.687, -747.053, 290.731, -62.6673, -8.53774e-007, 20.5907, -1, 1);
				Features::PlaceObjectByHash(1087520462, -101.346, -745.387, 291.611, -58.191, 1.70755e-006, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -102.234, -743.119, 293.091, -52.2249, 0.00051141, 21.3426, -1, 1);
				Features::PlaceObjectByHash(2475986526, -102.154, -739.285, 294.83, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(2475986526, -105.054, -740.282, 294.827, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.071, -741.047, 294.832, -48.0666, 0.000519094, 21.3419, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.75, -739.405, 296.413, -45.1472, 0.000547269, 21.3416, -1, 1);
				Features::PlaceObjectByHash(4143853297, -90.3515, -798.112, 319.893, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -93.2293, -790.348, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -95.3479, -784.483, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -100.01, -771.31, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.829, -766.277, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -103.318, -762.175, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -104.948, -757.681, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.225, -748.694, 302.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(3167053133, -103.451, -740.541, 307.317, -0.900199, -1.19985, 20.9076, -1, 1);
				Features::PlaceObjectByHash(2375650849, -102.454, -742.6, 309.309, 0, 0, 20.9393, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.483, -746.044, 305.602, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7458, -743.402, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7566, -743.406, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7426, -743.595, 302.651, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1157292806, -99.7732, -750.516, 309.575, 0, 0, 24.1761, -1, 1);
				Features::PlaceObjectByHash(4143853297, -89.9785, -756.476, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -91.5378, -752.285, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -87.9094, -762.07, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -86.2094, -766.939, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -84.0215, -772.971, 309.575, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -81.6733, -779.348, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -79.5187, -785.083, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -76.5616, -793.191, 319.493, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1998517203, -81.0993, -790.139, 326.57, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(1998517203, -88.8988, -792.911, 326.95, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(803874239, -88.3376, -794.173, 327.042, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -90.0376, -795.174, 327.262, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -91.6375, -796.175, 327.482, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -79.0283, -791.31, 326.763, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -76.8377, -790.87, 326.823, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -81.0088, -791.22, 326.713, 0, -0, 100.953, -1, 1);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;

		case ferris_ramp:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Beach Ferris-Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, 6.14715e-007, 165.792, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, -5.12264e-006, 24.1717, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 8.53774e-007, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, -0, -154.382, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, -0.0916355, -154.918, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 82.6252, 3.80938, -152.828, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 108.498, -8.51368, -157.244, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.616, -4.72983, -155.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.744, -3.95611, -152.581, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.63, -2.68302, -155.763, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, 9.47689e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, 6.74481e-005, -153.088, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, 3.07358e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6528, -0.153235, -155.853, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 8.53774e-007, -156.504, -1, 2);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.53319, 1.38057, 24.2606, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9323, -0.173323, 24.7221, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.50192, 1.391, 24.2651, -1, 2);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1513.0f, -1192.0f, 1.0f, 1, 0, 0, 1);
			}
			break;

		case chiliad_ramp:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Mount Chilliad Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, -0, 165.792, 90, 3);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, 0, -154.878, 205.14, 3);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 0, -153.982, 211.95, 3);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, 0, -154.878, 205.672, 3);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.5, -1.391, 24.2651, 24.4244, 3);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, 180, 24.1717, 155.224, 3);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.5304, -1.3806, 24.2606, 24.5148, 3);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9322, 0.1733, 24.7221, 27.9617, 3);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, 0.0916, -154.918, 207.065, 3);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 0, -156.505, 224.303, 3);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, 0, -154.382, 209.411, 3);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, 0, -153.982, 216.471, 3);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, 0, -153.982, 233.298, 3);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 81.7043, -3.8094, -152.828, 252.429, 3);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 110.301, 171.486, -157.244, 312.201, 3);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.843, 175.27, -155.087, 325.759, 3);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.844, 176.044, -152.581, 327.979, 3);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.648, 177.317, -155.763, 335.024, 3);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, -180, -152.192, 331.971, 3);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, -180, -153.087, 330.783, 3);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, -180, -153.088, 322.332, 3);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, -180, -153.087, 300.544, 3);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6205, 0.1532, -155.853, 269.072, 3);
				Features::PlaceObjectByHash(3966705493, 509.842, 5589.24, 791.066, 0.141, 0, 65.3998, 65.3999, 3);
				Features::PlaceObjectByHash(3966705493, 520.5, 5584.38, 790.503, 5.441, 0, 65.3998, 65.4976, 3);
				Features::PlaceObjectByHash(3966705493, 531.057, 5579.54, 788.691, 12.441, 0, 65.3998, 65.9111, 3);
				Features::PlaceObjectByHash(3966705493, 568.672, 5562.32, 767.428, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 576.972, 5558.53, 759.566, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 560.174, 5566.2, 774.698, 35.0403, 0, 65.3998, 69.4512, 3);
				Features::PlaceObjectByHash(3966705493, 541.325, 5574.84, 785.49, 19.4409, 0, 65.3998, 66.6484, 3);
				Features::PlaceObjectByHash(3966705493, 551.066, 5570.37, 780.799, 27.5407, 0, 65.3998, 67.9049, 3);
				Features::PlaceObjectByHash(3966705493, 585.249, 5554.75, 751.745, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 618.334, 5539.62, 720.386, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 626.602, 5535.85, 712.547, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 610.065, 5543.4, 728.217, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 601.777, 5547.19, 736.076, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 593.507, 5550.97, 743.917, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 634.862, 5532.07, 704.725, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 643.121, 5528.29, 696.894, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 651.391, 5524.51, 689.053, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 659.651, 5520.73, 681.221, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 667.911, 5516.94, 673.389, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 676.171, 5513.17, 665.558, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 684.431, 5509.38, 657.727, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 692.691, 5505.61, 649.905, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 700.95, 5501.83, 642.074, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 709.22, 5498.05, 634.243, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 717.46, 5494.28, 626.431, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 725.72, 5490.5, 618.6, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 733.98, 5486.72, 610.778, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 742.6, 5482.78, 603.167, 36.9395, 0, 65.3998, 69.9005, 3);
				Features::PlaceObjectByHash(3966705493, 751.83, 5478.55, 596.335, 31.0392, 0, 65.3998, 68.5807, 3);
				Features::PlaceObjectByHash(3966705493, 761.71, 5474.02, 590.613, 24.5989, 0, 65.3998, 67.3986, 3);
				Features::PlaceObjectByHash(3966705493, 772.07, 5469.28, 586.08, 18.9288, 0, 65.3998, 66.5835, 3);
				Features::PlaceObjectByHash(3966705493, 782.84, 5464.34, 582.86, 11.5788, 0, 65.3998, 65.8427, 3);
				Features::PlaceObjectByHash(3966705493, 793.89, 5459.28, 581.117, 5.0787, 0, 65.3998, 65.485, 3);
				Features::PlaceObjectByHash(3966705493, 805.1, 5454.15, 580.876, -2.5212, 0, 65.3998, 65.4208, 3);
				Features::PlaceObjectByHash(3966705493, 816.17, 5449.08, 581.975, -7.6213, 0, 65.3998, 65.5917, 3);
				Features::PlaceObjectByHash(3966705493, 827.191, 5444.04, 584.582, -16.6212, 0, 65.3998, 66.3125, 3);
				Features::PlaceObjectByHash(3966705493, 837.681, 5439.24, 588.899, -24.421, 0, 65.3998, 67.3698, 3);
				Features::PlaceObjectByHash(2580877897, 522.61, 5584.49, 779.214, 79.7153, -9.2252, 55.7018, 77.7612, 3);
				Features::PlaceObjectByHash(3862788492, 522.445, 5583.69, 779.551, -0.9197, -69.229, -167.468, 184.555, 3);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 500, 5593, 795, 1, 0, 0, 1);
			}

			break;

		case airport_mini:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Airport Mini Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -1242.08, -2931.15, 12.9924, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1247.11, -2928.46, 15.013, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1251.58, -2926.05, 16.7865, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1254.69, -2924.35, 18.25, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.69, -2912.99, 23.0019, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1258.35, -2922.28, 20.2135, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.89, -2916.22, 23.0123, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.25, -2914.99, 23.0137, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1274.87, -2909.4, 23.0049, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1269.01, -2912.64, 22.9993, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.87, -2915.44, 28.3632, 0, -0, 147.299, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.13, -2918.33, 28.4791, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.11, -2918.35, 25.6708, -0.48, 0.0499982, 60.9701, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1277.93, -2915.14, 25.604, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 25.6358, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 28.4844, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1261.82, -2920.38, 21.767, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1273.65, -2907.11, 22.9763, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.77, -2910.37, 22.9978, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.49, -2908.08, 22.9987, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.15, -2905.8, 23.0042, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 25.6255, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.66, -2911.99, 25.6968, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.88, -2910.66, 25.6982, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.84, -2905.14, 25.624, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 25.6199, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 25.6214, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 28.4329, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 28.4385, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 28.437, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.17, -2905.14, 28.3426, 0, -0, -118.861, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1271.09, -2902.58, 23.0057, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2904.83, 22.9972, 0, -0, -119.462, -1, 4);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1208, -2950, 13, 1, 0, 0, 1);
			}

			break;

		case airport_gate:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Airport Gate Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(2475986526, -1098.36, -2631.17, 19, 0, -0, 152.671, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1100.26, -2634.64, 21.1976, 16.2002, 0.192059, 150.427, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1102.26, -2638.02, 25.01, 26.7003, 0.178675, 149.261, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1103.96, -2640.91, 29.04, 28.3717, -0, 146.82, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.514, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.401, -1, 5);
				Features::PlaceObjectByHash(3137065507, -1044.69, -2530.08, 20.4011, 94.8962, 4.26887e-007, 147.716, -1, 5);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1046, -2538, 20, 1, 0, 0, 1);
			}

			break;

		case UFO_Tower:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("UFO Tower");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 654.365, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 646.186, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 638.008, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 629.829, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 621.65, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 613.471, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 605.292, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 597.114, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 588.935, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 580.756, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 572.577, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 564.399, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 556.22, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 662.544, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 548.041, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 539.862, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 531.683, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 523.505, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 515.326, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 507.147, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 498.968, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 490.79, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 482.611, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 474.432, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 466.253, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 458.074, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 449.896, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 441.717, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 433.538, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 425.359, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 417.18, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 409.001, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 400.823, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 392.644, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 384.465, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 376.286, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 368.107, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 359.929, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 351.75, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 343.571, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 335.392, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 327.213, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 319.035, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 310.856, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 302.677, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 294.498, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 286.319, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 278.141, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 269.962, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 261.783, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 253.604, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 245.425, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 237.247, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 229.068, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 220.889, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 212.71, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 204.531, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 196.353, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 188.174, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 179.995, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 171.816, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 163.637, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 155.459, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 147.28, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 139.101, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 130.922, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 122.743, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 114.565, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 106.386, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 98.207, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 90.0282, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 81.8494, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 73.6706, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 65.4918, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 57.313, 0.660085, -0.919939, -109.32, -1, 6);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 70, -674, 680, 1, 0, 0, 1);
			}
			break;

		case mod_maze_quad:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Maze Bank Quad Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3522933110, -81.3886, -814.648, 325.169, 0, -0, 180, -1, 7);
				Features::PlaceObjectByHash(3681122061, -81.7456, -809.064, 324.799, 0.500021, 2.66804, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.1333, -802.279, 321.92, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -89.7406, -796.701, 316.539, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.601, -790.725, 310.777, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -97.4741, -784.73, 304.997, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -101.373, -778.696, 299.179, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.233, -772.72, 293.417, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -109.106, -766.725, 287.637, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -112.954, -760.769, 281.894, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -116.827, -754.773, 276.113, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -120.687, -748.798, 270.352, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -124.518, -742.868, 264.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -128.358, -736.925, 258.909, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -132.22, -730.949, 253.151, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -136.081, -724.974, 247.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -139.943, -718.998, 241.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -143.826, -712.99, 235.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.667, -707.047, 230.12, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -151.508, -701.104, 224.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -155.369, -695.128, 218.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.252, -689.12, 212.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -163.072, -683.209, 207.152, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -166.976, -677.168, 201.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -170.838, -671.193, 195.573, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -174.7, -665.217, 189.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -178.583, -659.209, 184.026, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -182.444, -653.233, 178.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -186.327, -647.225, 172.479, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -190.189, -641.249, 166.721, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -194.03, -635.306, 160.994, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -197.871, -629.363, 155.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.711, -623.42, 149.542, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -205.552, -617.477, 143.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -209.393, -611.534, 138.089, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.255, -605.559, 132.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -217.095, -599.616, 126.605, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -220.957, -593.64, 120.847, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -222.245, -591.648, 118.928, -33.8999, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -223.349, -589.94, 117.561, -29.31, 1.79292, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -224.58, -588.036, 116.288, -26.25, 5.12264, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.869, -586.04, 115.116, -24.7199, -1.10991, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -227.127, -584.095, 114.05, -21.6599, 1.8783, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -228.615, -581.794, 112.961, -19.6199, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -230.201, -579.341, 111.92, -17.0699, -0, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -232.121, -576.369, 110.833, -12.9899, 4.26887, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -234.105, -573.302, 109.991, -9.9299, -2.98821, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -236.628, -569.396, 109.329, -7.3799, -4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -239.81, -564.475, 108.721, -4.3199, 1.28066, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -241.76, -561.459, 108.549, -0.7499, -1.12058, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -244.04, -557.932, 108.494, 2.82011, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -246.372, -554.326, 108.705, 5.8801, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.668, -550.777, 109.14, 10.4701, 8.96462, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.664, -546.138, 110.313, 13.5301, 1.15259, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -254.537, -541.694, 111.791, 16.5901, 4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.28, -538.999, 112.748, 19.6501, -1.19528, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.9078, -814.752, 326.106, 19.89, 4.26887, -53.8105, -1, 7);
				Features::PlaceObjectByHash(3681122061, -58.6541, -809.444, 327.336, -4.08004, -2.13443, -53.8103, -1, 7);
				Features::PlaceObjectByHash(3681122061, -52.4476, -804.909, 323.715, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2332, -801.09, 317.168, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -42.0187, -797.272, 310.621, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -36.8326, -793.474, 304.109, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -31.5898, -789.635, 297.526, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.4037, -785.838, 291.014, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -21.1893, -782.019, 284.467, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -15.9748, -778.201, 277.919, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -10.7604, -774.383, 271.372, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.57426, -770.585, 264.86, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -0.359839, -766.767, 258.313, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 4.82623, -762.969, 251.799, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 10.0123, -759.171, 245.285, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2268, -755.353, 238.735, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 20.4412, -751.535, 232.184, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 25.6273, -747.737, 225.67, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 30.8135, -743.939, 219.155, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 36.0279, -740.121, 212.605, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 41.214, -736.323, 206.091, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 46.4285, -732.505, 199.54, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.4122, -731.052, 197.049, -41.8198, 1.62217, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 49.5549, -730.218, 195.782, -38.2499, 3.24434, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 51.171, -729.035, 194.203, -36.2098, 2.39057, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.8966, -727.773, 192.637, -33.1499, -6.83019, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 54.586, -726.537, 191.27, -30.0898, 8.70849, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 56.5413, -725.105, 189.866, -25.4998, 7.59859, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 58.8359, -723.425, 188.509, -22.4398, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 60.738, -722.033, 187.536, -18.3599, 1.10991, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 63.1509, -720.268, 186.544, -15.8098, 5.03727, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.131, -718.821, 185.849, -12.7498, 5.07995, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.1384, -717.352, 185.286, -9.17981, 4.78113, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 69.2894, -715.776, 184.855, -4.5898, 4.18349, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 71.7831, -713.952, 184.607, 0.000193536, 4.16213, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 74.0832, -712.268, 184.607, 3.06019, 3.7566, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 76.0175, -710.853, 184.736, 8.1602, 4.35424, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 77.7752, -709.567, 185.048, 13.2602, 5.50684, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 79.6997, -708.158, 185.61, 17.3402, 3.7566, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 81.3947, -706.918, 186.266, 21.9302, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 83.3036, -705.52, 187.219, 26.0102, 9.39151, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 85.6244, -703.821, 188.622, 29.0702, 1.96368, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 87.3526, -702.556, 189.812, 33.1501, 2.90283, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 89.2107, -701.196, 191.316, 37.2301, 4.86651, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 90.8492, -699.998, 192.859, 41.82, -2.56132, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 92.6236, -698.701, 194.826, 46.41, 8.2816, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 94.2096, -697.539, 196.89, 52.0199, 6.57406, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 95.6251, -696.503, 199.137, 56.61, 9.22075, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 96.9799, -695.512, 201.683, 61.7098, 8.53774, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 98.1658, -694.646, 204.413, 65.7899, 5.03726, -53.8096, -1, 7);
				Features::PlaceObjectByHash(3681122061, -69.0186, -829.452, 324.775, 0, -0, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.276, -836.288, 321.491, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -62.2554, -842.061, 315, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -59.2515, -847.802, 308.544, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -56.2313, -853.574, 302.053, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -53.1945, -859.378, 295.526, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -50.2071, -865.088, 289.106, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2032, -870.829, 282.65, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -44.1829, -876.602, 276.159, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -41.1626, -882.374, 269.667, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -38.1751, -888.084, 263.247, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -35.1713, -893.825, 256.791, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -32.1674, -899.566, 250.335, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -29.1635, -905.307, 243.879, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.1432, -911.079, 237.388, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -23.1393, -916.821, 230.932, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -20.119, -922.593, 224.44, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -17.1152, -928.334, 217.985, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -14.1112, -934.075, 211.529, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -11.1235, -939.785, 205.108, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -8.13589, -945.495, 198.687, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.28891, -951.101, 192.102, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -2.35757, -956.552, 185.364, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 0.589775, -962.033, 178.59, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 3.5211, -967.483, 171.852, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 9.3998, -978.414, 158.339, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 6.46847, -972.964, 165.077, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 12.3311, -983.865, 151.601, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2944, -989.375, 144.789, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 21.1569, -1000.28, 131.313, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 18.2417, -994.856, 138.014, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 24.0722, -1005.7, 124.612, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 27.0355, -1011.21, 117.801, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 29.9828, -1016.69, 111.026, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 35.8294, -1027.56, 97.5867, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 37.2241, -1030.15, 94.4555, -44.3698, -1.70754, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 38.7475, -1032.99, 91.3086, -39.7798, -4.26887, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 39.7483, -1034.85, 89.5491, -36.7197, 3.4151, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 40.9818, -1037.14, 87.6062, -33.6597, -2.21981, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 42.1248, -1039.27, 85.999, -30.0898, -1.96368, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 32.9141, -1022.14, 104.288, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 43.3132, -1041.47, 84.5449, -26.5197, -1.79293, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 44.7115, -1044.08, 83.0715, -23.4597, -2.39056, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 45.9496, -1046.38, 81.937, -20.3997, -2.47594, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 47.0815, -1048.48, 81.0483, -17.3397, -2.09174, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.302, -1050.75, 80.2436, -14.7897, -8.96462, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 50.0647, -1054.03, 79.2608, -13.2597, -2.77476, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.0238, -1057.67, 78.2861, -11.7297, -1.45141, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 53.7395, -1060.86, 77.5341, -9.17973, -1.1099, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 55.7265, -1064.56, 76.8558, -6.11973, -6.61674, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 57.3746, -1067.62, 76.4825, -3.56972, -9.60496, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 59.3125, -1071.23, 76.2272, 0.000276446, -9.05818, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 61.112, -1074.58, 76.2272, 4.08028, -8.00412, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 62.529, -1077.21, 76.4405, 7.65027, -7.04364, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 64.0779, -1080.1, 76.8796, 10.7103, -1.28066, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.9388, -1083.55, 77.623, 14.2802, -1.70755, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.4076, -1086.29, 78.4126, 17.3403, -1.57948, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 68.7639, -1088.81, 79.3066, 21.4202, 1.36604, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.0915, -825.576, 324.775, 0, -0, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -99.1939, -833.684, 315.911, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.248, -837.511, 310.056, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.1729, -829.876, 321.734, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -111.268, -841.319, 304.233, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -123.245, -848.891, 292.651, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.333, -864.12, 269.359, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -141.278, -860.292, 275.213, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -135.256, -856.485, 281.036, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -129.266, -852.699, 286.828, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -117.224, -845.084, 298.474, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -165.367, -875.521, 251.921, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.415, -905.895, 205.464, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -207.426, -902.108, 211.255, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.403, -898.301, 217.078, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -195.414, -894.515, 222.87, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -183.434, -886.942, 234.452, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -177.445, -883.156, 240.244, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -171.422, -879.348, 246.067, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.378, -871.734, 257.713, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -153.355, -867.927, 263.536, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -189.424, -890.728, 228.661, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -231.449, -917.296, 188.027, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.46, -913.509, 193.818, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -219.47, -909.723, 199.609, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -237.439, -921.082, 182.235, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -284.806, -951.016, 167.673, 28.5601, -7.5132, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -289.048, -953.697, 170.578, 34.1701, -3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -290.727, -954.757, 171.926, 37.23, 3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -286.998, -952.399, 169.084, 31.62, -1.36604, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -282.375, -949.481, 166.27, 26.0101, 3.50047, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -280.014, -947.991, 165.174, 21.4201, -6.83019, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -277.4, -946.336, 164.178, 17.8501, -3.15896, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -270.266, -941.827, 162.896, 4.59013, -1.79292, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -266.683, -939.562, 163.103, -6.11989, -1.38738, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -259.328, -934.913, 165.339, -17.8499, -4.69576, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -253.478, -931.22, 168.474, -26.01, -4.18349, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.103, -927.823, 172.247, -33.66, -5.97642, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -243.429, -924.868, 176.444, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.593, -933.187, 166.676, -22.4399, -5.97641, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -262.183, -936.72, 164.252, -14.2799, -3.20165, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -268.321, -940.597, 162.896, 0.000125527, -1.95033, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -272.668, -943.344, 163.123, 8.67012, -2.86014, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -275.091, -944.877, 163.561, 12.7501, -5.1226, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -249.757, -928.867, 170.944, -31.11, -6.0617, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.566, -930.012, 169.653, -27.54, -3.58585, 122.286, -1, 7);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}

			break;

		case zancudo_moto:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Fort Zancudo Motorcross");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3213433054, -2661.22, 3209.43, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.86, 3207.56, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2659.52, 3212.33, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2656.2, 3210.41, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2654.54, 3213.26, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.84, 3215.18, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2615.14, 3183, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.82, 3181.02, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2613.47, 3185.85, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2610.11, 3183.91, 32.8118, 0, 0, 59.589, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.79, 3188.7, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2608.46, 3186.71, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2550.83, 3162.65, 32.7702, 0, -0, -117.989, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2547.01, 3160.66, 34.9496, 11.66, -2.56132e-006, -118.95, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2476.76, 3120.72, 32.7718, 0, -0, -119.612, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2473.51, 3118.83, 34.5672, 8.47412, -0.0223369, -120.965, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2442.43, 3105.7, 35.6224, -7.42001, -5.12265e-006, 150.074, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2443.67, 3101.83, 35.8732, -11.66, 3.84198e-006, 59.738, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2438.8, 3099, 36.0155, -11.66, -6.40331e-006, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2434.05, 3096.22, 36.6871, -22.26, -1.45141e-005, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2446.85, 3098.2, 35.6088, -7.42, 3.20165e-006, -31.8463, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2448.77, 3097.65, 35.4732, 0, -0, -120.616, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(1982829832, -2363.33, 3056.01, 31.8257, 0, -0, -119.219, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(2609922146, -2358.79, 3060.59, 31.8217, 0, -0, -119.371, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2325.93, 3034.99, 33.3214, 19.8, 3.41509e-006, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2321.78, 3032.58, 36.3899, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2317.79, 3030.29, 39.6222, 25.0799, -6.23256e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2313.74, 3027.94, 42.9228, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2309.83, 3025.69, 46.2289, 27.06, -8.2816e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2306.07, 3023.49, 49.5919, 29.0399, -0.000116113, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2283.14, 3009.97, 44.7284, 14.12, -2.04906e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2287.5, 3012.47, 46.9591, 13.6, 0.680011, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2302.26, 3021.28, 53.174, 29.6999, -0.000100745, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2292.06, 3015.11, 49.2546, 13.6, 1.53679e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2298.56, 3019.12, 56.7472, 30.36, -8.79386e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2294.52, 3015.08, 58.6366, 82.6616, 0.00430302, -31.2919, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2293.13, 3017.4, 58.6822, 80.9428, 0.00560716, 149.187, -1, 8);
				Features::PlaceObjectByHash(2787492567, -2293.66, 3016.58, 31.8318, -90, 0.0833042, 109.919, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2202.78, 2963.39, 32.8003, 0, -0, -120.04, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2199.53, 2961.53, 34.17, -40.5599, -2.56132e-006, 59.8803, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2137.1, 2904.97, 32.8327, 16.8, -1.10991e-005, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2132.27, 2897.94, 34.4465, 16.8, -14, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2127.12, 2890.88, 36.4432, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2119.98, 2885.33, 38.8379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2113.02, 2880, 41.2705, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2085.18, 2857.71, 49.9177, 19.04, -43.12, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2078.1, 2852.44, 51.662, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2092.05, 2863.54, 48.2285, 17.92, -34.16, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2098.91, 2869.18, 46.2053, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2105.97, 2874.59, 43.7379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2070.42, 2847.69, 53.5814, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2062.85, 2843.01, 55.4739, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2055.32, 2838.69, 56.5097, 17.7868, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2047.61, 2834.88, 58.9097, 26.1867, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2039.74, 2832.2, 62.2769, 38.5067, -45.5668, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.98, 2830.2, 48.384, 0.202822, -14.4337, -105.503, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.42, 2832.89, 59.0601, -179.433, 12.3451, 76.9258, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1951.86, 2849.63, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1950.16, 2852.52, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1953.57, 2854.49, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1955.25, 2851.59, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(4111834409, -1960.72, 2857.38, 31.7305, 0, -0, -118.505, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2144, 2967.21, 36.0606, 9.35852, -0.00134085, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2139.63, 2964.67, 33.9985, 5.84852, -0.0013321, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2135.45, 2962.3, 32.4604, 0, 0, 60.4792, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2193.23, 2995.21, 35.0684, 11.6996, -0.00262322, -119.238, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2197.74, 2997.74, 32.8074, 15.2099, 2.04906e-005, -119.328, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2246.82, 3026.19, 33.0318, 0.0331696, 0.0056356, 58.6423, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2256.38, 3032.02, 35.4343, 6.5707, 0.0279573, 58.7685, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2265.19, 3037.37, 38.408, 10.1262, 0.0254109, 58.7585, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2273.45, 3042.38, 40.214, 8.95404, -0.00182451, 58.7729, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2281.36, 3047.19, 42.7382, 8.89319, 0.151422, 58.8279, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2289.41, 3052.05, 46.2871, 13.2, 0.000150264, 58.7642, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2397.86, 3114.2, 32.8449, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2402.38, 3116.77, 34.7648, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2394.65, 3118.07, 32.5452, 0, 0, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2397.73, 3120.09, 34.1452, 2.04, -1.38738e-006, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2401.78, 3122.77, 36.6227, 8.16, 1.28066e-006, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2405.48, 3125.2, 39.5571, 14.28, 1.02453e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.12, 3127.6, 43.2064, 20.4, -2.39057e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.29, 3129.71, 46.9494, 24.4781, -1.43125, 56.2632, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2415.18, 3131.49, 51.529, 38.3931, -3.70399, 55.299, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.96, 3132.28, 56.2986, 54.0331, -3.70398, 53.2589, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2417.37, 3132.16, 61.6124, 73.753, -3.70394, 53.2588, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.48, 3131.04, 66.996, 90.9129, -3.70395, 53.2587, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2414.88, 3129.5, 70.998, 104.113, -3.70383, 50.6186, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.46, 3127.2, 74.61, 116.653, -3.70392, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.58, 3124.71, 77.6119, 121.273, -3.70395, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2406.75, 3122.18, 80.0586, 127.213, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2403.38, 3119.23, 82.2502, 135.793, -3.70396, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2369.71, 3092.81, 68.2807, -146.327, -3.7039, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2367.45, 3091.4, 63.3347, -134.447, -3.70392, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366, 3090.66, 58.0814, -123.887, -3.7039, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.38, 3090.57, 53.1623, -112.007, -3.70391, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.62, 3091.18, 48.0172, -99.4666, -3.70393, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366.77, 3092.54, 43.04, -86.2661, -3.70399, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2368.73, 3094.52, 38.5669, -74.386, -3.70392, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2371.25, 3096.8, 35.0692, -59.206, -3.70384, 55.2379, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.18, 3099.61, 32.3997, -42.0459, -3.70387, 57.2179, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2395.69, 3112.77, 84.6355, 152.292, -3.70389, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2391.54, 3109.37, 84.6603, 162.192, -3.70393, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2387.13, 3105.84, 83.6595, 172.752, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2382.97, 3102.56, 81.8101, -179.988, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2372.52, 3094.76, 72.6855, -154.907, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2379.11, 3099.59, 79.371, -172.728, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.46, 3096.85, 76.1692, -162.168, -3.70388, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2399.8, 3116.19, 83.7512, 143.712, -3.70387, 50.6184, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2510.73, 3180.4, 32.8111, 0, 0, 59.4291, -1, 8);
				Features::PlaceObjectByHash(209943352, -2302.92, 3059.95, 50.2208, 76.8397, -0.679965, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2298.84, 3057.5, 48.7042, 71.3997, -0.679954, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2294.73, 3055.05, 47.6692, 76.8398, -0.680059, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -2731, 3259, 32, 1, 0, 0, 1);
			}

			break;

		case halfpipe:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Halfpipe Fun Track");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3681122061, -1018.78, -2937.26, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1023.38, -2945.17, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1028.02, -2953.13, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1032.66, -2961.06, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.32, -2969.04, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1041.95, -2976.96, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1046.18, -2984.19, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.78, -2992.12, 12.9646, 0, 0, -29.8732, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.22, -2998.13, 12.9646, 0, 0, -14.2534, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1054.14, -3005.28, 12.9646, 0, 0, -0.613478, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.45, -3012.85, 12.9646, 0, 0, 11.4866, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1051.19, -3020.08, 12.9646, 0, 0, 23.3667, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1047.43, -3026.73, 12.9646, 0, 0, 35.2469, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1042.42, -3032.37, 12.9646, 0, 0, 47.7871, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.1, -3038.16, 12.9646, 0, 0, 37.2273, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1033.11, -3044.75, 12.9646, 0, 0, 25.5675, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1030.43, -3052.11, 12.9646, 0, 0, 14.5676, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.18, -3059.85, 12.9646, 0, 0, 4.00757, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.37, -3067.7, 12.9646, 0, 0, -6.55247, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1031, -3075.33, 12.9646, 0, 0, -17.5525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1034.09, -3082.35, 12.9646, 0, 0, -29.6525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1038.6, -3088.77, 12.9646, 0, 0, -40.2127, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.19, -3094.15, 12.9646, 0, 0, -51.653, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.65, -3098.2, 12.9646, 0, 0, -63.7531, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1057.89, -3100.91, 12.9646, 0, 0, -75.1935, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1065.18, -3101.87, 12.9646, 0, 0, -89.7139, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1073.03, -3101.2, 12.9646, 0, -0, -100.054, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1080.63, -3099.11, 12.9646, 0, -0, -110.615, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1087.92, -3095.65, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1095.95, -3091.03, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1104.01, -3086.4, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1112.04, -3081.79, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1120.04, -3077.19, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1128.1, -3072.56, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1136.15, -3067.93, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1144.2, -3063.31, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.22, -3058.7, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.24, -3054.09, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.22, -3049.48, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1176.21, -3044.8, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1183.28, -3040.14, 12.9646, 0, -0, -126.455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1189.23, -3034.89, 12.9646, 0, -0, -136.356, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.86, -3028.84, 12.9646, 0, -0, -148.677, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197.2, -3021.86, 12.9646, 0, -0, -159.898, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.78, -3014.77, 12.9646, 0, -0, -174.639, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.72, -3007.04, 12.9646, 0, -0, 173.701, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197, -2999.97, 12.9646, 0, -0, 158.962, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.5, -2993.3, 12.9646, 0, -0, 145.982, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1188.51, -2987.1, 12.9646, 0, -0, 136.083, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1182.5, -2981.85, 12.9646, 0, -0, 126.183, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1175.98, -2978.23, 12.9646, 0, -0, 112.104, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.67, -2976.15, 12.9646, 0, -0, 99.7843, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.82, -2975.53, 12.9646, 0, 0, 89.4449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.93, -2976.29, 12.9646, 0, 0, 79.5455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1145.21, -2978.39, 12.9646, 0, 0, 70.0859, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1138.14, -2981.75, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1130.27, -2986.43, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1122.46, -2991.09, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1115.12, -2994.75, 12.9646, 0, 0, 67.1435, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1107.63, -2997.13, 12.9646, 0, 0, 76.9913, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1099.8, -2998.14, 12.9646, 0, 0, 86.8389, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1091.94, -2997.76, 12.9646, 0, -0, 97.5819, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1084.47, -2995.95, 12.9646, 0, -0, 108.325, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1071.68, -2988.3, 12.9646, 0, -0, 132.496, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1066.33, -2982.53, 12.9646, 0, -0, 141.449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.01, -2960.01, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1048.58, -2951.88, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.16, -2943.76, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1039.74, -2935.64, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1035.5, -2927.86, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.23, -2993.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.37, -2998.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.7, -2994.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2995.73, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.71, -2996.8, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.21, -2997.84, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.1, -2999.45, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.43, -3000.24, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.29, -3000.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.92, -3001.18, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.44, -3002.28, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.35, -3002.77, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.6, -3003.96, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.11, -3005.04, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2999.56, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.53, -3000.82, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1070.75, -3001.52, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.76, -3002.46, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.29, -3003.54, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.44, -3005.23, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1071.58, -3003.74, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1072.98, -3006.81, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1072.44, -3002.05, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1073.73, -3002.72, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1076.54, -3005.07, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1078.92, -3009.92, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1075.31, -3011.69, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1069.34, -3008.59, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1071.71, -3013.45, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1068.14, -3015.2, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.36, -3006.66, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1065.75, -3010.35, 16.0846, 0, 0, -26.0348, -1, 9);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1003, -2916, 14, 1, 0, 0, 1);
			}

			break;

		case air_loop:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Airport Loop");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3966705493, -1041.89, -3219.51, 10.1797, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1037.79, -3221.47, 10.3641, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.16, -3223.3, 10.5366, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1036.76, -3219.45, 10.1526, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.12, -3221.28, 10.3251, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.37, -3225.6, 11.1956, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1028.33, -3223.58, 10.9842, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.27, -3225.54, 12.1104, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1025.44, -3227.83, 12.3497, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.36, -3230.06, 15.7972, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1019.22, -3227.83, 15.5634, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1014.85, -3229.56, 20.4393, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.07, -3231.95, 20.6898, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1012.88, -3232.96, 26.0664, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.63, -3230.51, 25.8104, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.27, -3231.06, 32.0819, -73.1735, 5.32204, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.52, -3233.51, 32.3379, -73.1735, 5.32214, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.36, -3233.48, 38.2311, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.09, -3230.98, 37.9695, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1007.71, -3230.43, 44.185, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.05, -3228.93, 49.9682, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.93, -3232.81, 44.4969, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.27, -3231.31, 50.2801, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.96, -3226.91, 54.0691, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1013.1, -3229.14, 54.3602, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1017.49, -3226.51, 57.2125, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1022.14, -3223.91, 58.9186, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1035.97, -3216.05, 58.7162, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1031.37, -3218.71, 60.1775, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1026.33, -3221.63, 59.8766, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.98, -3221.63, 58.6206, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.97, -3219.25, 59.5578, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.33, -3224.24, 56.9145, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.73, -3213.86, 58.655, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1040.42, -3213.61, 55.2867, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1044.34, -3211.51, 50.6082, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.09, -3209.33, 50.547, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1046.16, -3207.74, 45.1535, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.17, -3206.74, 39.6252, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.92, -3206.44, 33.1586, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.18, -3206.88, 26.5446, 77.3408, 0.0913896, 60.6229, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.44, -3209.13, 26.5487, 77.3407, 0.0913427, 60.6228, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1045.93, -3208.12, 21.3905, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1042.61, -3210.12, 16.8766, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1038.64, -3212.63, 13.6141, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.97, -3214.83, 13.6182, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.82, -3217.71, 11.1985, 16.4116, 0.0913871, 69.303, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.53, -3215.55, 11.1081, 16.4117, 0.0913619, 66.683, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.97, -3212.37, 16.8808, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1050.19, -3208.69, 33.1627, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.45, -3208.98, 39.6879, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
			}
			if (Menu::Option("Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1074, -3201, 13, 1, 0, 0, 1);
			}

			break;

		case mod_maze_ramp2:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Maze Bank Ramp");
			if (Menu::Option("Load")) {
				Features::PlaceObjectByHash(3681122061, -82.9657, -818.944, 325.175, 0, -0, 91.03, -1, 11);
				Features::PlaceObjectByHash(3681122061, -91.0941, -819.089, 322.355, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -98.36, -819.224, 316.632, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -105.626, -819.358, 310.91, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -112.892, -819.492, 305.187, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -120.158, -819.626, 299.464, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -127.424, -819.761, 293.741, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -134.69, -819.895, 288.018, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -141.956, -820.029, 282.296, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -149.222, -820.163, 276.573, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -156.487, -820.298, 270.85, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -163.753, -820.432, 265.127, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -171.019, -820.566, 259.404, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -178.285, -820.701, 253.682, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -185.551, -820.835, 247.959, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -192.817, -820.969, 242.236, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -200.083, -821.103, 236.513, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -207.349, -821.238, 230.79, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -214.615, -821.372, 225.068, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -221.881, -821.506, 219.345, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -229.147, -821.641, 213.622, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -236.413, -821.775, 207.899, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -243.679, -821.909, 202.176, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -250.945, -822.043, 196.453, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -258.21, -822.178, 190.731, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -265.476, -822.312, 185.008, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -287.274, -822.715, 167.839, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -280.008, -822.58, 173.562, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -272.742, -822.446, 179.285, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -294.54, -822.849, 162.117, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -301.806, -822.983, 156.394, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -309.072, -823.118, 150.671, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -316.338, -823.252, 144.948, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -323.604, -823.386, 139.225, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -330.87, -823.52, 133.503, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -338.136, -823.655, 127.78, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -345.402, -823.789, 122.057, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -352.668, -823.923, 116.334, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -359.934, -824.057, 110.611, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -367.199, -824.192, 104.889, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -374.465, -824.326, 99.1657, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -381.731, -824.46, 93.4429, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -388.997, -824.595, 87.7201, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -396.263, -824.729, 81.9973, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -403.529, -824.863, 76.2745, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.479, -825.022, 68.7971, -19.78, -3.43377e-005, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -410.795, -824.997, 70.5517, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.96, -825.029, 69.097, -27.6, 1.15259e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -412.719, -825.046, 67.8516, -10.58, -2.92151e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -413.903, -825.068, 67.2075, -3.21999, 5.66959e-007, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -415.378, -825.099, 66.7734, 3.68002, -4.58236e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -416.883, -825.126, 66.57, 9.66002, -8.44435e-006, 91.1096, -1, 11);
				Features::PlaceObjectByHash(3681122061, -418.526, -825.157, 66.5571, 15.64, -1.80093e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -419.945, -825.184, 66.6727, 20.7001, 8.69782e-006, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -421.727, -825.218, 67.0936, 25.7601, -2.09975e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -422.006, -825.234, 66.966, 30.8199, 0.114757, 90.6829, -1, 11);
				Features::PlaceObjectByHash(3681122061, -429.913, -825.328, 71.6856, 30.8199, 0.114757, 90.6829, -1, 11);
			}
			break;



		case ramp1:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Maze Bank Demolition");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(2475986526, -80.9087, -830.357, 325.097, -14.4264, -8.53774, 152.209, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2316, -831.297, 325.108, -14.4054, 4.26887, 164.271, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7563, -831.549, 325.123, -14.4263, -0, 171.818, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.2595, -831.691, 325.09, -14.2059, -1.06722, -176.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.9478, -831.257, 325.113, -14.4264, 2.13443, -166.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.5981, -830.542, 325.066, -14.5918, -4.26887, -155.474, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.4174, -829.035, 325.097, -14.4263, -4.26887, -140.651, -1, 0);
				Features::PlaceObjectByHash(2475986526, -65.7121, -827.409, 325.068, -14.3048, -1.70755, -130.667, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.2717, -825.422, 325.112, -14.4263, -0, -121.256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.2876, -823.434, 325.114, -14.5345, -0, -111.446, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.4924, -821.128, 325.082, -14.5467, 2.13443, -102.385, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.233, -818.528, 325.065, -14.6184, -8.00413, -88.1861, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.8694, -815.926, 325.118, -14.4265, -6.4033, -76.5979, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.6142, -813.68, 325.112, -14.3655, 8.53774, -66.7885, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.9883, -811.439, 325.107, -14.4263, 1.28066, -52.8494, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.5913, -808.328, 325.238, -12.4517, -0, -40.3246, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.2603, -807.899, 325.336, -13.8689, -0, -33.062, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.1526, -807.598, 325.153, -12.0416, 4.26887, -28.0523, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2853, -806.628, 325.151, -11.7962, -0, -19.1717, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.2243, -806.286, 325.164, -12.0419, -0, 1.55726, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.5757, -806.312, 325.088, -14.1843, -0, 12.6263, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.8704, -807.22, 325.143, -14.049, -4.26887, 21.4769, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.0222, -807.83, 325.036, -14.1422, -4.26887, 32.7605, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8934, -809.424, 325.073, -14.5264, -8.53774, 46.5132, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.2523, -810.983, 325.043, -14.859, -0, 53.5324, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.5177, -813.202, 325.089, -14.5267, 4.26887, 64.6634, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.6645, -815.707, 325.059, -14.8589, 4.26887, 73.157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.7973, -817.987, 325.119, -14.8468, -1.33402, 89.3982, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5801, -821.034, 325.059, -14.8593, -0, 95.4435, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.2815, -822.239, 325.126, -15.6308, -4.26887, 100.311, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7602, -824.03, 325.044, -15.9224, -0, 116.957, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.3743, -826.099, 325.136, -15.7025, 2.56132, 124.307, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.4737, -828.611, 325.076, -15.0688, -0, 132.538, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.9554, -832.877, 325.894, -14.1563, 4.26887, 132.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.3865, -831.322, 325.887, -14.1562, -0, 126.154, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.4247, -834.407, 325.915, -14.2701, 4.26887, 143.277, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.1736, -833.789, 325.653, -14.4072, -4.26887, 145.777, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.8118, -835.765, 326.063, -12.243, 4.26887, 151.527, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.7015, -837.145, 326.059, -12.3172, 2.13443, 162.332, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.6428, -837.649, 326.163, -10.8391, 3.20165, 171.297, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.479, -837.909, 326.025, -12.3172, -1.06722, 174.574, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.861, -837.826, 326.061, -12.3173, 5.33609, -176.632, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4799, -837.265, 326.09, -12.3173, -0, -166.182, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.0415, -836.185, 326.018, -12.3171, -0, -156.039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.8504, -834.996, 325.951, -11.5263, -0, -145.834, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5702, -833.725, 326.1, -11.2947, -0, -140.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.9992, -831.419, 326.075, -11.5262, -4.26887, -130.963, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.9923, -828.729, 326.116, -11.5262, 4.26887, -121.973, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.5045, -825.626, 326.114, -11.5263, -0, -110.959, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5533, -822.397, 326.08, -11.1311, -6.4033, -102, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0911, -820.05, 326.049, -11.0325, 2.13443, -100.794, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.0681, -818.32, 326.087, -11.1312, -2.66804, -87.9469, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.2989, -816.237, 326.048, -11.0324, 2.13443, -83.2139, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.8952, -814.518, 326.142, -11.0324, -2.13443, -76.5476, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.1209, -811.23, 326.116, -10.9697, -0, -66.7674, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.0622, -809.17, 326.095, -11.0574, 4.26887, -62.782, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.096, -807.639, 326.119, -11.5544, -0, -52.7596, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.081, -805.317, 326.116, -11.1035, -0, -40.7682, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.1466, -804.55, 326.283, -11.1035, -0, -30.477, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.9795, -798.8, 326.717, -10.1561, -0, -29.3495, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.5734, -802.52, 326.262, -10.471, -8.53774, -31.2185, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.9341, -800.541, 326.198, -10.5317, -0, -20.0064, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3309, -801.285, 325.849, -10.2407, -0, 1.58401, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.0222, -799.865, 326.177, -10.7327, -0, -5.98314, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.5167, -797.998, 326.32, -12.4969, -2.66804, 1.58883, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.2787, -800.531, 326.011, -12.9433, 4.26887, 13.0054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.6721, -801.017, 325.9, -12.4601, 2.13443, 17.3792, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.6027, -801.744, 325.971, -12.9433, -0, 26.3052, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.6586, -802.789, 325.95, -12.8791, 1.28066, 32.5856, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5086, -804.25, 325.978, -12.9432, 4.26887, 42.3279, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9923, -805.73, 325.89, -11.9333, -4.26887, 46.0613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.167, -807.318, 325.946, -13.0244, -0, 53.178, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5987, -807.353, 326.343, -11.5713, 4.26887, 60.8753, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.5166, -813.963, 325.942, -13.4341, -4.26887, 73.0256, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.121, -810.584, 325.996, -13.4339, -4.26887, 64.9353, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.9931, -815.866, 325.924, -13.0519, -0, 79.5966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.8716, -817.904, 325.988, -13.4339, -0, 88.8361, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.7912, -821.777, 325.946, -13.6946, -2.66804, 91.1427, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.2951, -823.554, 325.966, -13.157, -0, 101.424, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.5757, -827.033, 325.87, -13.5323, -0, 104.668, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.53, -828.342, 325.842, -14.1563, 4.26887, 120.328, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.5203, -829.611, 325.936, -14.1563, -0, 124.573, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.5355, -833.068, 327.049, -9.63525, 1.70755, 124.512, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2445, -835.1, 326.976, -9.27617, -1.28066, 128.396, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.513, -837.087, 327.008, -9.63523, -4.26887, 132.871, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.07, -839.341, 327.025, -9.63574, 4.26887, 143.545, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.7336, -841.135, 327.284, -9.63566, -0, 150.983, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.8343, -842.167, 327.254, -9.36742, -4.26887, 152.377, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.0883, -842.661, 327.589, -7.98782, -8.53774, 146.409, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.595, -843.001, 327.277, -9.6352, -0, 161.654, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.8027, -843.618, 327.263, -9.36755, -2.13443, 165.215, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.5619, -843.703, 327.458, -9.63545, -2.13443, 171.015, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.2479, -844.026, 327.261, -9.36765, 1.06722, 175.986, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.5382, -843.999, 327.285, -9.6355, -0, -177.212, -1, 0);
				Features::PlaceObjectByHash(2475986526, -71.2047, -843.988, 327.3, -9.36764, -1.06722, -172.013, -1, 0);
				Features::PlaceObjectByHash(2475986526, -69.036, -843.266, 327.309, -9.63525, 4.26887, -166.686, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.2981, -840.996, 326.756, -9.37509, -2.13443, -159.014, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7067, -842.714, 327.222, -9.37501, 2.13443, -159.27, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.5693, -841.792, 327.24, -9.63515, 4.26887, -156.16, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.8874, -840.436, 327.231, -9.37483, 4.26887, -146.534, -1, 0);
				Features::PlaceObjectByHash(2475986526, -59.7118, -838.501, 327.384, -9.63533, -0, -141.372, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9491, -837.16, 327.309, -9.37471, 4.26887, -135.839, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.3494, -835.471, 327.34, -9.63578, 4.26887, -131.675, -1, 0);
				Features::PlaceObjectByHash(2475986526, -54.9387, -833.93, 327.334, -9.37482, -0, -127.887, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.727, -832.032, 327.367, -9.63521, -4.26887, -122.142, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.5928, -830.077, 327.332, -9.37496, -0, -116.843, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.7552, -827.819, 327.385, -9.63569, 6.4033, -111.077, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.0061, -825.839, 327.369, -9.37494, 4.26887, -107.054, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5468, -823.622, 327.378, -9.63572, 4.26887, -101.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.0992, -820.896, 327.345, -9.47333, -1.06722, -95.7976, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9295, -818.102, 327.381, -9.63531, -8.00413, -88.2146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.1895, -815.816, 327.358, -9.4734, -0, -82.8649, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.9164, -813.132, 327.442, -9.63524, 2.13443, -76.865, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.1585, -811.568, 327.373, -9.58574, -0, -69.3402, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.0622, -809.533, 327.354, -9.63541, 2.13443, -65.7624, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.4048, -806.624, 327.376, -9.63526, 2.13443, -65.3971, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.2978, -803.815, 327.389, -9.63524, 4.26887, -52.2107, -1, 0);
				Features::PlaceObjectByHash(2475986526, -56.5179, -802.266, 327.366, -9.51013, 4.26887, -50.6537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.9995, -800.68, 327.42, -9.6353, 1.28066, -41.7027, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0278, -799.404, 327.549, -9.63516, 8.53774, -31.016, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.37, -797.284, 327.603, -9.6351, -0, -31.6732, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.3998, -795.965, 327.526, -9.42422, 8.53773, -29.018, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.8079, -794.744, 327.535, -9.63558, -2.13443, -20.0341, -1, 0);
				Features::PlaceObjectByHash(2475986526, -72.1225, -793.825, 327.497, -9.57894, -2.13443, -12.2336, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.6415, -795.169, 327.2, -9.63555, -1.60083, 2.8097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -77.9613, -794.235, 327.223, -8.9769, -5.33608, 4.53814, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.3695, -789.507, 328.306, -8.84722, -8.33763, -0.0879073, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.6908, -794.505, 327.217, -9.63537, 4.26887, 13.0745, -1, 0);
				Features::PlaceObjectByHash(2475986526, -83.5673, -795.148, 327.101, -9.92985, 2.13443, 17.5819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -86.3087, -796.203, 327.177, -9.63542, -4.26887, 25.9296, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9655, -797.634, 327.118, -9.92994, -4.26887, 33.0571, -1, 0);
				Features::PlaceObjectByHash(2475986526, -91.6251, -799.702, 327.176, -9.63539, -0, 42.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.414, -801.299, 327.124, -9.92995, -0, 48.7085, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.1453, -803.637, 327.147, -9.63537, -8.53774, 53.6544, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.5885, -805.701, 327.144, -9.8947, -0, 60.5096, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.6945, -807.971, 327.174, -9.63569, 4.26887, 64.7568, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.7075, -809.885, 327.026, -8.13758, -0, 67.8881, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.394, -812.176, 327.105, -9.63525, -4.26887, 73.0223, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.025, -814.868, 327.097, -9.97277, 2.13443, 83.1537, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.012, -817.789, 327.15, -9.63535, -1.33402, 88.8234, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.069, -819.76, 327.099, -9.95297, -1.33402, 90.8729, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.969, -821.91, 327.11, -9.63541, -2.66804, 91.5501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.3358, -824.801, 327.138, -9.63539, 2.13443, 101.678, -1, 0);
				Features::PlaceObjectByHash(2475986526, -98.5443, -828.598, 327.033, -9.63553, -0, 104.64, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.0896, -831.054, 326.937, -10.0741, 4.26887, 118.72, -1, 0);
				Features::PlaceObjectByHash(2475986526, -102.435, -833.952, 328.506, -5.26399, -0, 118.502, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.536, -831.932, 328.513, -5.42142, 4.26887, 111.099, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.644, -836.571, 328.636, -5.26398, -0, 124.006, -1, 0);
				Features::PlaceObjectByHash(2475986526, -99.0448, -838.912, 328.589, -5.26395, -2.13443, 128.175, -1, 0);
				Features::PlaceObjectByHash(2475986526, -96.9401, -841.184, 328.589, -5.26384, -2.13443, 132.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.4409, -842.718, 328.551, -5.01006, -2.13443, 136.57, -1, 0);
				Features::PlaceObjectByHash(2475986526, -93.6584, -844.231, 328.606, -5.26388, -0, 143.429, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.1044, -845.82, 328.655, -5.01307, -2.13443, 147.428, -1, 0);
				Features::PlaceObjectByHash(2475986526, -89.6061, -846.328, 328.851, -5.26389, -0, 150.62, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.5884, -847.552, 328.829, -5.6777, -0, 153.36, -1, 0);
				Features::PlaceObjectByHash(2475986526, -84.5215, -848.802, 328.867, -5.26405, 5.33608, 161.164, -1, 0);
				Features::PlaceObjectByHash(2475986526, -81.9779, -849.605, 328.821, -5.67769, 1.06722, 166.961, -1, 0);
				Features::PlaceObjectByHash(2475986526, -79.5282, -849.717, 329.046, -5.26392, 1.06722, 170.517, -1, 0);
				Features::PlaceObjectByHash(2475986526, -76.7555, -850.113, 328.885, -4.93224, 2.66804, 175.995, -1, 0);
				Features::PlaceObjectByHash(2475986526, -73.2336, -850.06, 328.883, -5.26397, -0, -177.431, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.4067, -849.836, 328.854, -4.82287, -5.33608, -172.2, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6252, -849.166, 328.911, -5.26394, -0, -166.741, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.6525, -848.331, 328.792, -4.82267, -2.13443, -160.74, -1, 0);
				Features::PlaceObjectByHash(2475986526, -62.1086, -847.355, 328.837, -5.26389, 2.13443, -156.346, -1, 0);
				Features::PlaceObjectByHash(2475986526, -60.2755, -846.895, 328.808, -5.97307, -2.13443, -151.031, -1, 0);
				Features::PlaceObjectByHash(2475986526, -58.5152, -845.543, 328.833, -5.26392, 1.06722, -147.129, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.9339, -843.258, 328.987, -5.26394, 2.13443, -141.8, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.6636, -841.564, 328.905, -5.18348, -0, -136.192, -1, 0);
				Features::PlaceObjectByHash(2475986526, -51.8013, -839.526, 328.926, -5.26393, -2.13443, -131.788, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.9112, -837.51, 328.916, -5.18352, -8.53774, -125.894, -1, 0);
				Features::PlaceObjectByHash(2475986526, -48.5833, -835.261, 328.968, -5.26388, 2.13443, -122.598, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.1369, -832.806, 328.936, -5.18352, -0, -117.146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.1092, -830.019, 328.985, -5.26389, -0, -111.097, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.2549, -827.659, 328.957, -5.18353, -1.06722, -105.915, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.5598, -824.856, 328.973, -5.26387, -0, -101.582, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.0346, -821.522, 328.953, -5.26387, 5.33608, -95.978, -1, 0);
				Features::PlaceObjectByHash(2475986526, -43.8673, -817.92, 328.98, -5.26387, -4.00206, -88.1556, -1, 0);
				Features::PlaceObjectByHash(2475986526, -44.1983, -815.072, 328.956, -5.26387, -0, -82.8806, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.0463, -811.788, 329.021, -5.26392, -0, -77.2513, -1, 0);
				Features::PlaceObjectByHash(2475986526, -45.6154, -809.566, 328.95, -5.25705, -2.13443, -72.2094, -1, 0);
				Features::PlaceObjectByHash(2475986526, -46.5685, -807.149, 328.929, -5.26395, -2.13443, -66.9958, -1, 0);
				Features::PlaceObjectByHash(2475986526, -47.9752, -804.122, 328.959, -5.26398, -0, -65.1505, -1, 0);
				Features::PlaceObjectByHash(2475986526, -49.0785, -802.078, 328.914, -5.31539, 4.26887, -57.7224, -1, 0);
				Features::PlaceObjectByHash(2475986526, -50.5092, -800.141, 328.99, -5.26406, -0, -52.4683, -1, 0);
				Features::PlaceObjectByHash(2475986526, -52.041, -798.134, 329.001, -5.31536, -2.13443, -49.2493, -1, 0);
				Features::PlaceObjectByHash(2475986526, -53.8808, -796.134, 329.041, -5.26389, -0, -42.3308, -1, 0);
				Features::PlaceObjectByHash(2475986526, -55.4375, -794.682, 329.045, -5.32055, 2.13443, -37.3601, -1, 0);
				Features::PlaceObjectByHash(2475986526, -57.7537, -794.2, 329.16, -5.26393, 2.13443, -32.2267, -1, 0);
				Features::PlaceObjectByHash(2475986526, -61.0299, -792.042, 329.172, -5.26389, -2.13443, -32.1174, -1, 0);
				Features::PlaceObjectByHash(2475986526, -63.5163, -790.736, 329.085, -5.04535, -4.26887, -29.2933, -1, 0);
				Features::PlaceObjectByHash(2475986526, -64.7324, -789.882, 329.081, -4.987, -2.13443, -27.7917, -1, 0);
				Features::PlaceObjectByHash(2475986526, -66.7775, -788.94, 329.155, -5.04558, 1.06722, -19.5666, -1, 0);
				Features::PlaceObjectByHash(2475986526, -68.6555, -788.272, 329.103, -5.30654, 3.20165, -16.9146, -1, 0);
				Features::PlaceObjectByHash(2475986526, -70.8259, -787.837, 329.128, -5.04546, 1.06722, -12.2941, -1, 0);
				Features::PlaceObjectByHash(2475986526, -74.5572, -787.022, 329.08, -4.61724, 1.06722, -10.7316, -1, 0);
				Features::PlaceObjectByHash(2475986526, -75.8754, -788.646, 328.671, -6.78921, -0, 2.98721, -1, 0);
				Features::PlaceObjectByHash(2475986526, -78.4, -788.132, 328.83, -5.91899, 2.66804, 3.75875, -1, 0);
				Features::PlaceObjectByHash(2475986526, -80.5351, -788.179, 328.782, -5.80051, -0, 7.26539, -1, 0);
				Features::PlaceObjectByHash(2475986526, -82.1189, -788.558, 328.793, -5.9192, 1.06722, 12.7168, -1, 0);
				Features::PlaceObjectByHash(2475986526, -85.4054, -789.317, 328.666, -5.79433, -0, 17.1877, -1, 0);
				Features::PlaceObjectByHash(2475986526, -87.4651, -789.98, 328.647, -5.63204, -0, 20.2315, -1, 0);
				Features::PlaceObjectByHash(2475986526, -88.9795, -790.697, 328.76, -5.79416, -0, 25.9501, -1, 0);
				Features::PlaceObjectByHash(2475986526, -90.9922, -791.487, 328.684, -6.26149, -0, 27.0819, -1, 0);
				Features::PlaceObjectByHash(2475986526, -92.3298, -792.474, 328.677, -5.79412, -0, 33.3113, -1, 0);
				Features::PlaceObjectByHash(2475986526, -94.2322, -793.73, 328.669, -5.58479, -2.13443, 37.4974, -1, 0);
				Features::PlaceObjectByHash(2475986526, -95.7282, -795.2, 328.764, -5.79431, -0, 41.8672, -1, 0);
				Features::PlaceObjectByHash(2475986526, -97.9782, -797.316, 328.695, -5.58488, -0, 48.9171, -1, 0);
				Features::PlaceObjectByHash(2475986526, -100.042, -800.063, 328.731, -5.79425, 2.13443, 53.7039, -1, 0);
				Features::PlaceObjectByHash(2475986526, -101.884, -802.718, 328.706, -5.5848, 2.13443, 60.3613, -1, 0);
				Features::PlaceObjectByHash(2475986526, -103.09, -805.421, 328.718, -5.79425, -0, 64.506, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.284, -807.711, 328.691, -5.58488, -2.13443, 65.966, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.262, -810.369, 328.729, -5.26384, 1.06722, 73.2414, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.769, -812.146, 328.645, -5.25205, -1.06722, 75.8091, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.155, -814.128, 328.687, -5.26388, -1.06722, 82.8157, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.062, -817.685, 328.758, -5.26388, 2.66804, 88.7458, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.154, -819.723, 328.716, -5.25204, -0, 90.1628, -1, 0);
				Features::PlaceObjectByHash(2475986526, -106.082, -822.072, 328.729, -5.26387, -1.33402, 91.2972, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.911, -823.815, 328.7, -5.52135, 5.33608, 99.4393, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.28, -826.029, 328.734, -5.26391, 1.06722, 101.615, -1, 0);
				Features::PlaceObjectByHash(2475986526, -105.06, -827.904, 328.644, -5.29978, 1.06722, 102.515, -1, 0);
				Features::PlaceObjectByHash(2475986526, -104.327, -830.112, 328.614, -5.26391, -2.13443, 104.719, -1, 0);
				Features::PlaceObjectByHash(3291218330, -108.551, -853.416, 327.387, 2.94456, 89.1111, -166.155, -1, 0);
				Features::PlaceObjectByHash(3291218330, -80.2509, -866.418, 327.301, 3.7405, 89.3, 146.641, -1, 0);
				Features::PlaceObjectByHash(3291218330, -55.8513, -863.921, 327.333, 6.87468, 89.6184, 149.776, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.3907, -848.122, 327.717, 2.33633, 88.8797, -16.2595, -1, 0);
				Features::PlaceObjectByHash(3291218330, -26.1908, -818.332, 328.76, 0.490556, 84.6598, -18.107, -1, 0);
				Features::PlaceObjectByHash(3291218330, -37.891, -789.138, 328.134, 1.11673, 87.6571, 42.7186, -1, 0);
				Features::PlaceObjectByHash(3291218330, -63.492, -772.044, 327.866, 3.09962, 89.1556, 44.702, -1, 0);
				Features::PlaceObjectByHash(3291218330, -93.4916, -774.848, 327.398, 2.73771, 89.0443, 122.539, -1, 0);
				Features::PlaceObjectByHash(3291218330, -115.991, -795.259, 327.27, 3.28432, 89.2033, 123.086, -1, 0);
				Features::PlaceObjectByHash(3291218330, -122.551, -825.074, 327.213, 173.37, 89.6048, 4.27077, -1, 0);
				Features::PlaceObjectByHash(118627012, -74.8438, -819.617, 323.685, 0, 0, -3.37511, -1, 0);
				Features::PlaceObjectByHash(2475986526, -67.6253, -820.244, 323.793, -14.4263, -8.53774, -100.02, -1, 0);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}

		case ramp2:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Maze Bank Roof Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(1600026313, -78.4864, -807.943, 323.202, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.2766, -805.701, 323.204, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -79.8373, -803.709, 323.205, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(1600026313, -80.4295, -801.947, 323.207, 109.364, -89.9209, 0, -1, 1);
				Features::PlaceObjectByHash(4143853297, -97.4731, -778.557, 308.877, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.2429, -793.182, 321.08, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -83.5429, -795.106, 322.073, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -84.9429, -791.108, 319.956, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -85.8122, -788.585, 318.638, -63.5625, -0, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -89.1589, -779.487, 313.336, -59.5389, 0.0405551, -160.567, -1, 1);
				Features::PlaceObjectByHash(1087520462, -90.7065, -774.863, 310.09, -57.4959, 0.322988, -160.758, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.4887, -772.564, 308.403, -55.1692, 0.383369, -161.049, -1, 1);
				Features::PlaceObjectByHash(1087520462, -91.7565, -771.74, 307.844, -56.4466, 0.0442451, -160.565, -1, 1);
				Features::PlaceObjectByHash(1087520462, -93.6941, -766.245, 302.736, -45.9996, 0.0556114, -160.556, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.2969, -764.648, 301.067, -44.7623, -1.70755e-006, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -94.886, -762.996, 298.741, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -95.4855, -761.334, 296.406, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.1606, -759.499, 294.259, -42.0766, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.709, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.0707, -759.689, 293.46, -36.7051, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -96.8807, -757.391, 292.506, -51.0291, -8.53774e-007, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.3203, -756.159, 291.688, -57.2958, -0, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -97.9597, -754.358, 290.78, -62.6673, 8.53774e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -98.7192, -752.356, 290.042, -69.9278, 3.20165e-005, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.0244, -751.684, 290.499, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -99.3223, -750.534, 290.479, -90, -8.46346e-007, -160.249, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.348, -747.881, 290.452, -89.5256, -1.33402e-008, -159.354, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.26, -748.154, 290.462, -76.096, 4.26887e-007, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -100.687, -747.053, 290.731, -62.6673, -8.53774e-007, 20.5907, -1, 1);
				Features::PlaceObjectByHash(1087520462, -101.346, -745.387, 291.611, -58.191, 1.70755e-006, 19.6954, -1, 1);
				Features::PlaceObjectByHash(1087520462, -102.234, -743.119, 293.091, -52.2249, 0.00051141, 21.3426, -1, 1);
				Features::PlaceObjectByHash(2475986526, -102.154, -739.285, 294.83, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(2475986526, -105.054, -740.282, 294.827, 9.80014, 0.295618, 18.7802, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.071, -741.047, 294.832, -48.0666, 0.000519094, 21.3419, -1, 1);
				Features::PlaceObjectByHash(1087520462, -103.75, -739.405, 296.413, -45.1472, 0.000547269, 21.3416, -1, 1);
				Features::PlaceObjectByHash(4143853297, -90.3515, -798.112, 319.893, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -93.2293, -790.348, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -95.3479, -784.483, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -100.01, -771.31, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.829, -766.277, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -103.318, -762.175, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -104.948, -757.681, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.146, -748.798, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -108.225, -748.694, 302.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(3167053133, -103.451, -740.541, 307.317, -0.900199, -1.19985, 20.9076, -1, 1);
				Features::PlaceObjectByHash(2375650849, -102.454, -742.6, 309.309, 0, 0, 20.9393, -1, 1);
				Features::PlaceObjectByHash(4143853297, -101.483, -746.044, 305.602, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7458, -743.402, 295.608, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7566, -743.406, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -94.7426, -743.595, 302.651, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1157292806, -99.7732, -750.516, 309.575, 0, 0, 24.1761, -1, 1);
				Features::PlaceObjectByHash(4143853297, -89.9785, -756.476, 293.966, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -91.5378, -752.285, 288.866, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -87.9094, -762.07, 299.666, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -86.2094, -766.939, 304.367, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -84.0215, -772.971, 309.575, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -81.6733, -779.348, 313.696, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -79.5187, -785.083, 317.189, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(4143853297, -76.5616, -793.191, 319.493, 0, -0, -159.831, -1, 1);
				Features::PlaceObjectByHash(1998517203, -81.0993, -790.139, 326.57, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(1998517203, -88.8988, -792.911, 326.95, 0, 0, -82.6177, -1, 1);
				Features::PlaceObjectByHash(803874239, -88.3376, -794.173, 327.042, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -90.0376, -795.174, 327.262, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -91.6375, -796.175, 327.482, 0, 0, 31.5501, -1, 1);
				Features::PlaceObjectByHash(803874239, -79.0283, -791.31, 326.763, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -76.8377, -790.87, 326.823, 0, -0, 100.953, -1, 1);
				Features::PlaceObjectByHash(803874239, -81.0088, -791.22, 326.713, 0, -0, 100.953, -1, 1);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}
			break;

		case ramp3:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Beach Ferris-Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, 6.14715e-007, 165.792, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, -5.12264e-006, 24.1717, -1, 2);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 8.53774e-007, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, -0, -154.878, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, -0, -154.382, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, -0.0916355, -154.918, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, -0, -153.982, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 82.6252, 3.80938, -152.828, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 108.498, -8.51368, -157.244, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.616, -4.72983, -155.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.744, -3.95611, -152.581, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.63, -2.68302, -155.763, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, 4.69576e-006, -152.192, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, 9.47689e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, 6.74481e-005, -153.088, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, 3.07358e-005, -153.087, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6528, -0.153235, -155.853, -1, 2);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 8.53774e-007, -156.504, -1, 2);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.53319, 1.38057, 24.2606, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9323, -0.173323, 24.7221, -1, 2);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.50192, 1.391, 24.2651, -1, 2);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1513.0f, -1192.0f, 1.0f, 1, 0, 0, 1);
			}
			break;

		case ramp4:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Mount Chilliad Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(1952396163, -1497.76, -1113.84, -3.08, -90, -0, 165.792, 90, 3);
				Features::PlaceObjectByHash(2475986526, -1461.92, -1216.88, 2.5836, -2.3048, 0, -154.878, 205.14, 3);
				Features::PlaceObjectByHash(3291218330, -1458.89, -1214.4, 18, -38.4956, 0, -153.982, 211.95, 3);
				Features::PlaceObjectByHash(2475986526, -1460.32, -1219.97, 4.3801, 12.6953, 0, -154.878, 205.672, 3);
				Features::PlaceObjectByHash(2975320548, -1463.05, -1214.19, 6.7879, -6.5, -1.391, 24.2651, 24.4244, 3);
				Features::PlaceObjectByHash(3291218330, -1465.62, -1217.64, 18, 166.516, 180, 24.1717, 155.224, 3);
				Features::PlaceObjectByHash(4109455646, -1465.05, -1210.03, 7.9503, 9.5304, -1.3806, 24.2606, 24.5148, 3);
				Features::PlaceObjectByHash(2975320548, -1460.95, -1218.79, 7.66, -29.9322, 0.1733, 24.7221, 27.9617, 3);
				Features::PlaceObjectByHash(2475986526, -1458.4, -1223.77, 7.9937, 23.6001, 0.0916, -154.918, 207.065, 3);
				Features::PlaceObjectByHash(2475986526, -1467.11, -1205.68, 10.7072, -63.5491, 0, -156.505, 224.303, 3);
				Features::PlaceObjectByHash(2475986526, -1457, -1226.67, 11.8772, 31.7229, 0, -154.382, 209.411, 3);
				Features::PlaceObjectByHash(2475986526, -1456.4, -1228.27, 14.9608, 48.674, 0, -153.982, 216.471, 3);
				Features::PlaceObjectByHash(2475986526, -1456, -1229.07, 19.7441, 68.6628, 0, -153.982, 233.298, 3);
				Features::PlaceObjectByHash(2475986526, -1456.2, -1228.47, 24.8276, 81.7043, -3.8094, -152.828, 252.429, 3);
				Features::PlaceObjectByHash(2475986526, -1456.9, -1226.47, 28.9111, 110.301, 171.486, -157.244, 312.201, 3);
				Features::PlaceObjectByHash(2475986526, -1458.59, -1223.37, 31.5945, 130.843, 175.27, -155.087, 325.759, 3);
				Features::PlaceObjectByHash(2475986526, -1460.59, -1218.38, 33.5779, 143.844, 176.044, -152.581, 327.979, 3);
				Features::PlaceObjectByHash(2475986526, -1462.79, -1214.28, 34.161, 163.648, 177.317, -155.763, 335.024, 3);
				Features::PlaceObjectByHash(2475986526, -1465.3, -1209.78, 32.5228, -172.187, -180, -152.192, 331.971, 3);
				Features::PlaceObjectByHash(2475986526, -1466.9, -1205.68, 29.0062, -155.178, -180, -153.087, 330.783, 3);
				Features::PlaceObjectByHash(2475986526, -1468.3, -1202.98, 24.1897, -131.11, -180, -153.088, 322.332, 3);
				Features::PlaceObjectByHash(2475986526, -1468.59, -1202.68, 19.3732, -107.429, -180, -153.087, 300.544, 3);
				Features::PlaceObjectByHash(2475986526, -1467.99, -1203.88, 13.5732, -89.6205, 0.1532, -155.853, 269.072, 3);
				Features::PlaceObjectByHash(3966705493, 509.842, 5589.24, 791.066, 0.141, 0, 65.3998, 65.3999, 3);
				Features::PlaceObjectByHash(3966705493, 520.5, 5584.38, 790.503, 5.441, 0, 65.3998, 65.4976, 3);
				Features::PlaceObjectByHash(3966705493, 531.057, 5579.54, 788.691, 12.441, 0, 65.3998, 65.9111, 3);
				Features::PlaceObjectByHash(3966705493, 568.672, 5562.32, 767.428, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 576.972, 5558.53, 759.566, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 560.174, 5566.2, 774.698, 35.0403, 0, 65.3998, 69.4512, 3);
				Features::PlaceObjectByHash(3966705493, 541.325, 5574.84, 785.49, 19.4409, 0, 65.3998, 66.6484, 3);
				Features::PlaceObjectByHash(3966705493, 551.066, 5570.37, 780.799, 27.5407, 0, 65.3998, 67.9049, 3);
				Features::PlaceObjectByHash(3966705493, 585.249, 5554.75, 751.745, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 618.334, 5539.62, 720.386, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 626.602, 5535.85, 712.547, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 610.065, 5543.4, 728.217, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 601.777, 5547.19, 736.076, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 593.507, 5550.97, 743.917, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 634.862, 5532.07, 704.725, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 643.121, 5528.29, 696.894, 40.7936, 0, 65.3998, 70.8829, 3);
				Features::PlaceObjectByHash(3966705493, 651.391, 5524.51, 689.053, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 659.651, 5520.73, 681.221, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 667.911, 5516.94, 673.389, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 676.171, 5513.17, 665.558, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 684.431, 5509.38, 657.727, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 692.691, 5505.61, 649.905, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 700.95, 5501.83, 642.074, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 709.22, 5498.05, 634.243, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 717.46, 5494.28, 626.431, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 725.72, 5490.5, 618.6, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 733.98, 5486.72, 610.778, 40.7396, 0, 65.3998, 70.8685, 3);
				Features::PlaceObjectByHash(3966705493, 742.6, 5482.78, 603.167, 36.9395, 0, 65.3998, 69.9005, 3);
				Features::PlaceObjectByHash(3966705493, 751.83, 5478.55, 596.335, 31.0392, 0, 65.3998, 68.5807, 3);
				Features::PlaceObjectByHash(3966705493, 761.71, 5474.02, 590.613, 24.5989, 0, 65.3998, 67.3986, 3);
				Features::PlaceObjectByHash(3966705493, 772.07, 5469.28, 586.08, 18.9288, 0, 65.3998, 66.5835, 3);
				Features::PlaceObjectByHash(3966705493, 782.84, 5464.34, 582.86, 11.5788, 0, 65.3998, 65.8427, 3);
				Features::PlaceObjectByHash(3966705493, 793.89, 5459.28, 581.117, 5.0787, 0, 65.3998, 65.485, 3);
				Features::PlaceObjectByHash(3966705493, 805.1, 5454.15, 580.876, -2.5212, 0, 65.3998, 65.4208, 3);
				Features::PlaceObjectByHash(3966705493, 816.17, 5449.08, 581.975, -7.6213, 0, 65.3998, 65.5917, 3);
				Features::PlaceObjectByHash(3966705493, 827.191, 5444.04, 584.582, -16.6212, 0, 65.3998, 66.3125, 3);
				Features::PlaceObjectByHash(3966705493, 837.681, 5439.24, 588.899, -24.421, 0, 65.3998, 67.3698, 3);
				Features::PlaceObjectByHash(2580877897, 522.61, 5584.49, 779.214, 79.7153, -9.2252, 55.7018, 77.7612, 3);
				Features::PlaceObjectByHash(3862788492, 522.445, 5583.69, 779.551, -0.9197, -69.229, -167.468, 184.555, 3);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 500, 5593, 795, 1, 0, 0, 1);
			}

			break;

		case ramp5:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Airport Mini Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(2475986526, -1242.08, -2931.15, 12.9924, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1247.11, -2928.46, 15.013, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1251.58, -2926.05, 16.7865, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1254.69, -2924.35, 18.25, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.69, -2912.99, 23.0019, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1258.35, -2922.28, 20.2135, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.89, -2916.22, 23.0123, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1270.25, -2914.99, 23.0137, 0, 0, 60.8909, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1274.87, -2909.4, 23.0049, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1269.01, -2912.64, 22.9993, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.87, -2915.44, 28.3632, 0, -0, 147.299, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.13, -2918.33, 28.4791, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.11, -2918.35, 25.6708, -0.48, 0.0499982, 60.9701, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1277.93, -2915.14, 25.604, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 25.6358, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1279.69, -2909.85, 28.4844, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(2475986526, -1261.82, -2920.38, 21.767, -0.1046, -3.33505e-009, 61.0607, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1273.65, -2907.11, 22.9763, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1267.77, -2910.37, 22.9978, 0, 0.05, 60.9705, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.49, -2908.08, 22.9987, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.15, -2905.8, 23.0042, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 25.6255, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.66, -2911.99, 25.6968, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.88, -2910.66, 25.6982, 0, 0, -30.9603, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1264.84, -2905.14, 25.624, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 25.6199, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 25.6214, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1276.35, -2903.91, 28.4329, 0, -0, -151.239, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2900.96, 28.4385, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1266.44, -2905.21, 28.437, 0, -0, -118.761, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1265.17, -2905.14, 28.3426, 0, -0, -118.861, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1271.09, -2902.58, 23.0057, 0, -0, -119.462, -1, 4);
				Features::PlaceObjectByHash(3966705493, -1272.37, -2904.83, 22.9972, 0, -0, -119.462, -1, 4);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1208, -2950, 13, 1, 0, 0, 1);
			}

			break;

		case ramp6:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Airport Gate Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(2475986526, -1098.36, -2631.17, 19, 0, -0, 152.671, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1100.26, -2634.64, 21.1976, 16.2002, 0.192059, 150.427, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1102.26, -2638.02, 25.01, 26.7003, 0.178675, 149.261, -1, 5);
				Features::PlaceObjectByHash(2475986526, -1103.96, -2640.91, 29.04, 28.3717, -0, 146.82, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.514, -1, 5);
				Features::PlaceObjectByHash(1952396163, -1119.61, -2670.96, -5.125, 0, -0, 150.401, -1, 5);
				Features::PlaceObjectByHash(3137065507, -1044.69, -2530.08, 20.4011, 94.8962, 4.26887e-007, 147.716, -1, 5);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1046, -2538, 20, 1, 0, 0, 1);
			}

			break;

		case ramp7:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~UFO Tower");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 654.365, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 646.186, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 638.008, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 629.829, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 621.65, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 613.471, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 605.292, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 597.114, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 588.935, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 580.756, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 572.577, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 564.399, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 556.22, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 662.544, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 548.041, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 539.862, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 531.683, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 523.505, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 515.326, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 507.147, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 498.968, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 490.79, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 482.611, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 474.432, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 466.253, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 458.074, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 449.896, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 441.717, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 433.538, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 425.359, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 417.18, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 409.001, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 400.823, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 392.644, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 384.465, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 376.286, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 368.107, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 359.929, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 351.75, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 343.571, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 335.392, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 327.213, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 319.035, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 310.856, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 302.677, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 294.498, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 286.319, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 278.141, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 269.962, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 261.783, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 253.604, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 245.425, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 237.247, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 229.068, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 220.889, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 212.71, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 204.531, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 196.353, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 188.174, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 179.995, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 171.816, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 163.637, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 155.459, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 147.28, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 139.101, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 130.922, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 122.743, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 114.565, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 106.386, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 98.207, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 90.0282, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 81.8494, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 73.6706, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 65.4918, 0.660085, -0.919939, -109.32, -1, 6);
				Features::PlaceObjectByHash(3026699584, 70.2592, -674.044, 57.313, 0.660085, -0.919939, -109.32, -1, 6);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 70, -674, 680, 1, 0, 0, 1);
			}
			break;

		case ramp8:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Maze Bank Quad Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3522933110, -81.3886, -814.648, 325.169, 0, -0, 180, -1, 7);
				Features::PlaceObjectByHash(3681122061, -81.7456, -809.064, 324.799, 0.500021, 2.66804, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.1333, -802.279, 321.92, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -89.7406, -796.701, 316.539, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.601, -790.725, 310.777, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -97.4741, -784.73, 304.997, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -101.373, -778.696, 299.179, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.233, -772.72, 293.417, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -109.106, -766.725, 287.637, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -112.954, -760.769, 281.894, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -116.827, -754.773, 276.113, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -120.687, -748.798, 270.352, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -124.518, -742.868, 264.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -128.358, -736.925, 258.909, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -132.22, -730.949, 253.151, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -136.081, -724.974, 247.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -139.943, -718.998, 241.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -143.826, -712.99, 235.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.667, -707.047, 230.12, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -151.508, -701.104, 224.394, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -155.369, -695.128, 218.636, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.252, -689.12, 212.846, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -163.072, -683.209, 207.152, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -166.976, -677.168, 201.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -170.838, -671.193, 195.573, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -174.7, -665.217, 189.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -178.583, -659.209, 184.026, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -182.444, -653.233, 178.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -186.327, -647.225, 172.479, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -190.189, -641.249, 166.721, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -194.03, -635.306, 160.994, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -197.871, -629.363, 155.268, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.711, -623.42, 149.542, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -205.552, -617.477, 143.815, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -209.393, -611.534, 138.089, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.255, -605.559, 132.331, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -217.095, -599.616, 126.605, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -220.957, -593.64, 120.847, -38.9999, -1.45141, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -222.245, -591.648, 118.928, -33.8999, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -223.349, -589.94, 117.561, -29.31, 1.79292, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -224.58, -588.036, 116.288, -26.25, 5.12264, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.869, -586.04, 115.116, -24.7199, -1.10991, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -227.127, -584.095, 114.05, -21.6599, 1.8783, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -228.615, -581.794, 112.961, -19.6199, 1.02453, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -230.201, -579.341, 111.92, -17.0699, -0, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -232.121, -576.369, 110.833, -12.9899, 4.26887, 32.8808, -1, 7);
				Features::PlaceObjectByHash(3681122061, -234.105, -573.302, 109.991, -9.9299, -2.98821, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -236.628, -569.396, 109.329, -7.3799, -4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -239.81, -564.475, 108.721, -4.3199, 1.28066, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -241.76, -561.459, 108.549, -0.7499, -1.12058, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -244.04, -557.932, 108.494, 2.82011, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -246.372, -554.326, 108.705, 5.8801, -2.77476, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.668, -550.777, 109.14, 10.4701, 8.96462, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.664, -546.138, 110.313, 13.5301, 1.15259, 32.8806, -1, 7);
				Features::PlaceObjectByHash(3681122061, -254.537, -541.694, 111.791, 16.5901, 4.26887, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.28, -538.999, 112.748, 19.6501, -1.19528, 32.8807, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.9078, -814.752, 326.106, 19.89, 4.26887, -53.8105, -1, 7);
				Features::PlaceObjectByHash(3681122061, -58.6541, -809.444, 327.336, -4.08004, -2.13443, -53.8103, -1, 7);
				Features::PlaceObjectByHash(3681122061, -52.4476, -804.909, 323.715, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2332, -801.09, 317.168, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -42.0187, -797.272, 310.621, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -36.8326, -793.474, 304.109, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -31.5898, -789.635, 297.526, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.4037, -785.838, 291.014, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -21.1893, -782.019, 284.467, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -15.9748, -778.201, 277.919, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -10.7604, -774.383, 271.372, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.57426, -770.585, 264.86, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, -0.359839, -766.767, 258.313, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 4.82623, -762.969, 251.799, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 10.0123, -759.171, 245.285, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2268, -755.353, 238.735, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 20.4412, -751.535, 232.184, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 25.6273, -747.737, 225.67, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 30.8135, -743.939, 219.155, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 36.0279, -740.121, 212.605, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 41.214, -736.323, 206.091, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 46.4285, -732.505, 199.54, -45.3899, 2.56132, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.4122, -731.052, 197.049, -41.8198, 1.62217, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 49.5549, -730.218, 195.782, -38.2499, 3.24434, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 51.171, -729.035, 194.203, -36.2098, 2.39057, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.8966, -727.773, 192.637, -33.1499, -6.83019, -53.8101, -1, 7);
				Features::PlaceObjectByHash(3681122061, 54.586, -726.537, 191.27, -30.0898, 8.70849, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 56.5413, -725.105, 189.866, -25.4998, 7.59859, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 58.8359, -723.425, 188.509, -22.4398, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 60.738, -722.033, 187.536, -18.3599, 1.10991, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 63.1509, -720.268, 186.544, -15.8098, 5.03727, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.131, -718.821, 185.849, -12.7498, 5.07995, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.1384, -717.352, 185.286, -9.17981, 4.78113, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 69.2894, -715.776, 184.855, -4.5898, 4.18349, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 71.7831, -713.952, 184.607, 0.000193536, 4.16213, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 74.0832, -712.268, 184.607, 3.06019, 3.7566, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 76.0175, -710.853, 184.736, 8.1602, 4.35424, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 77.7752, -709.567, 185.048, 13.2602, 5.50684, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 79.6997, -708.158, 185.61, 17.3402, 3.7566, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 81.3947, -706.918, 186.266, 21.9302, 4.26887, -53.81, -1, 7);
				Features::PlaceObjectByHash(3681122061, 83.3036, -705.52, 187.219, 26.0102, 9.39151, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 85.6244, -703.821, 188.622, 29.0702, 1.96368, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 87.3526, -702.556, 189.812, 33.1501, 2.90283, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 89.2107, -701.196, 191.316, 37.2301, 4.86651, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 90.8492, -699.998, 192.859, 41.82, -2.56132, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 92.6236, -698.701, 194.826, 46.41, 8.2816, -53.8099, -1, 7);
				Features::PlaceObjectByHash(3681122061, 94.2096, -697.539, 196.89, 52.0199, 6.57406, -53.8098, -1, 7);
				Features::PlaceObjectByHash(3681122061, 95.6251, -696.503, 199.137, 56.61, 9.22075, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 96.9799, -695.512, 201.683, 61.7098, 8.53774, -53.8097, -1, 7);
				Features::PlaceObjectByHash(3681122061, 98.1658, -694.646, 204.413, 65.7899, 5.03726, -53.8096, -1, 7);
				Features::PlaceObjectByHash(3681122061, -69.0186, -829.452, 324.775, 0, -0, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -65.276, -836.288, 321.491, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -62.2554, -842.061, 315, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -59.2515, -847.802, 308.544, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -56.2313, -853.574, 302.053, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -53.1945, -859.378, 295.526, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -50.2071, -865.088, 289.106, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -47.2032, -870.829, 282.65, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -44.1829, -876.602, 276.159, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -41.1626, -882.374, 269.667, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -38.1751, -888.084, 263.247, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -35.1713, -893.825, 256.791, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -32.1674, -899.566, 250.335, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -29.1635, -905.307, 243.879, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -26.1432, -911.079, 237.388, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -23.1393, -916.821, 230.932, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -20.119, -922.593, 224.44, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -17.1152, -928.334, 217.985, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -14.1112, -934.075, 211.529, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -11.1235, -939.785, 205.108, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -8.13589, -945.495, 198.687, -44.8796, 3.24434, -152.398, -1, 7);
				Features::PlaceObjectByHash(3681122061, -5.28891, -951.101, 192.102, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -2.35757, -956.552, 185.364, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 0.589775, -962.033, 178.59, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 3.5211, -967.483, 171.852, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 9.3998, -978.414, 158.339, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 6.46847, -972.964, 165.077, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 12.3311, -983.865, 151.601, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 15.2944, -989.375, 144.789, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 21.1569, -1000.28, 131.313, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 18.2417, -994.856, 138.014, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 24.0722, -1005.7, 124.612, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 27.0355, -1011.21, 117.801, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 29.9828, -1016.69, 111.026, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 35.8294, -1027.56, 97.5867, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 37.2241, -1030.15, 94.4555, -44.3698, -1.70754, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 38.7475, -1032.99, 91.3086, -39.7798, -4.26887, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 39.7483, -1034.85, 89.5491, -36.7197, 3.4151, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 40.9818, -1037.14, 87.6062, -33.6597, -2.21981, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 42.1248, -1039.27, 85.999, -30.0898, -1.96368, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 32.9141, -1022.14, 104.288, -47.4298, -1.79292, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 43.3132, -1041.47, 84.5449, -26.5197, -1.79293, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 44.7115, -1044.08, 83.0715, -23.4597, -2.39056, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 45.9496, -1046.38, 81.937, -20.3997, -2.47594, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 47.0815, -1048.48, 81.0483, -17.3397, -2.09174, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 48.302, -1050.75, 80.2436, -14.7897, -8.96462, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 50.0647, -1054.03, 79.2608, -13.2597, -2.77476, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 52.0238, -1057.67, 78.2861, -11.7297, -1.45141, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 53.7395, -1060.86, 77.5341, -9.17973, -1.1099, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 55.7265, -1064.56, 76.8558, -6.11973, -6.61674, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 57.3746, -1067.62, 76.4825, -3.56972, -9.60496, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 59.3125, -1071.23, 76.2272, 0.000276446, -9.05818, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 61.112, -1074.58, 76.2272, 4.08028, -8.00412, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 62.529, -1077.21, 76.4405, 7.65027, -7.04364, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 64.0779, -1080.1, 76.8796, 10.7103, -1.28066, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 65.9388, -1083.55, 77.623, 14.2802, -1.70755, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 67.4076, -1086.29, 78.4126, 17.3403, -1.57948, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, 68.7639, -1088.81, 79.3066, 21.4202, 1.36604, -151.734, -1, 7);
				Features::PlaceObjectByHash(3681122061, -86.0915, -825.576, 324.775, 0, -0, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -99.1939, -833.684, 315.911, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -105.248, -837.511, 310.056, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -93.1729, -829.876, 321.734, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -111.268, -841.319, 304.233, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -123.245, -848.891, 292.651, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -147.333, -864.12, 269.359, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -141.278, -860.292, 275.213, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -135.256, -856.485, 281.036, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -129.266, -852.699, 286.828, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -117.224, -845.084, 298.474, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -165.367, -875.521, 251.921, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -213.415, -905.895, 205.464, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -207.426, -902.108, 211.255, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -201.403, -898.301, 217.078, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -195.414, -894.515, 222.87, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -183.434, -886.942, 234.452, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -177.445, -883.156, 240.244, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -171.422, -879.348, 246.067, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -159.378, -871.734, 257.713, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -153.355, -867.927, 263.536, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -189.424, -890.728, 228.661, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -231.449, -917.296, 188.027, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -225.46, -913.509, 193.818, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -219.47, -909.723, 199.609, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -237.439, -921.082, 182.235, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -284.806, -951.016, 167.673, 28.5601, -7.5132, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -289.048, -953.697, 170.578, 34.1701, -3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -290.727, -954.757, 171.926, 37.23, 3.41509, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -286.998, -952.399, 169.084, 31.62, -1.36604, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -282.375, -949.481, 166.27, 26.0101, 3.50047, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -280.014, -947.991, 165.174, 21.4201, -6.83019, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -277.4, -946.336, 164.178, 17.8501, -3.15896, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -270.266, -941.827, 162.896, 4.59013, -1.79292, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -266.683, -939.562, 163.103, -6.11989, -1.38738, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -259.328, -934.913, 165.339, -17.8499, -4.69576, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -253.478, -931.22, 168.474, -26.01, -4.18349, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -248.103, -927.823, 172.247, -33.66, -5.97642, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -243.429, -924.868, 176.444, -39.27, -2.30519, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -256.593, -933.187, 166.676, -22.4399, -5.97641, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -262.183, -936.72, 164.252, -14.2799, -3.20165, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -268.321, -940.597, 162.896, 0.000125527, -1.95033, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -272.668, -943.344, 163.123, 8.67012, -2.86014, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -275.091, -944.877, 163.561, 12.7501, -5.1226, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -249.757, -928.867, 170.944, -31.11, -6.0617, 122.286, -1, 7);
				Features::PlaceObjectByHash(3681122061, -251.566, -930.012, 169.653, -27.54, -3.58585, 122.286, -1, 7);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}

			break;

		case ramp9:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Fort Zancudo Motorcross");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3213433054, -2661.22, 3209.43, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.86, 3207.56, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2659.52, 3212.33, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2656.2, 3210.41, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2654.54, 3213.26, 32.7118, 0, 0, 59.6808, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2657.84, 3215.18, 32.7118, 0, -0, -120.437, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2615.14, 3183, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.82, 3181.02, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2613.47, 3185.85, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2610.11, 3183.91, 32.8118, 0, 0, 59.589, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2611.79, 3188.7, 32.8118, 0, -0, -120.45, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2608.46, 3186.71, 32.8118, 0, 0, 58.529, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2550.83, 3162.65, 32.7702, 0, -0, -117.989, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2547.01, 3160.66, 34.9496, 11.66, -2.56132e-006, -118.95, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2476.76, 3120.72, 32.7718, 0, -0, -119.612, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2473.51, 3118.83, 34.5672, 8.47412, -0.0223369, -120.965, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2442.43, 3105.7, 35.6224, -7.42001, -5.12265e-006, 150.074, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2443.67, 3101.83, 35.8732, -11.66, 3.84198e-006, 59.738, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2438.8, 3099, 36.0155, -11.66, -6.40331e-006, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2434.05, 3096.22, 36.6871, -22.26, -1.45141e-005, 59.7379, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2446.85, 3098.2, 35.6088, -7.42, 3.20165e-006, -31.8463, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2448.77, 3097.65, 35.4732, 0, -0, -120.616, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(2402097066, -2442.95, 3108.08, 35.4832, 0, -0, -117.436, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(1982829832, -2363.33, 3056.01, 31.8257, 0, -0, -119.219, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2389.55, 3069.11, 36.5952, 179.801, -3.76861e-006, -117.806, -1, 8);
				Features::PlaceObjectByHash(2609922146, -2358.79, 3060.59, 31.8217, 0, -0, -119.371, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2325.93, 3034.99, 33.3214, 19.8, 3.41509e-006, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2321.78, 3032.58, 36.3899, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2317.79, 3030.29, 39.6222, 25.0799, -6.23256e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2313.74, 3027.94, 42.9228, 25.7399, -8.62311e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2309.83, 3025.69, 46.2289, 27.06, -8.2816e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2306.07, 3023.49, 49.5919, 29.0399, -0.000116113, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2283.14, 3009.97, 44.7284, 14.12, -2.04906e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2287.5, 3012.47, 46.9591, 13.6, 0.680011, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2302.26, 3021.28, 53.174, 29.6999, -0.000100745, -120.09, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2292.06, 3015.11, 49.2546, 13.6, 1.53679e-005, 60.0397, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2298.56, 3019.12, 56.7472, 30.36, -8.79386e-005, -120.09, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2294.52, 3015.08, 58.6366, 82.6616, 0.00430302, -31.2919, -1, 8);
				Features::PlaceObjectByHash(2052512905, -2293.13, 3017.4, 58.6822, 80.9428, 0.00560716, 149.187, -1, 8);
				Features::PlaceObjectByHash(2787492567, -2293.66, 3016.58, 31.8318, -90, 0.0833042, 109.919, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2202.78, 2963.39, 32.8003, 0, -0, -120.04, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2199.53, 2961.53, 34.17, -40.5599, -2.56132e-006, 59.8803, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2137.1, 2904.97, 32.8327, 16.8, -1.10991e-005, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2132.27, 2897.94, 34.4465, 16.8, -14, -141.061, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2127.12, 2890.88, 36.4432, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2119.98, 2885.33, 38.8379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2113.02, 2880, 41.2705, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2085.18, 2857.71, 49.9177, 19.04, -43.12, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2078.1, 2852.44, 51.662, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2092.05, 2863.54, 48.2285, 17.92, -34.16, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2098.91, 2869.18, 46.2053, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2105.97, 2874.59, 43.7379, 17.92, -29.68, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2070.42, 2847.69, 53.5814, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2062.85, 2843.01, 55.4739, 19.0399, -50.4001, -136.581, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2055.32, 2838.69, 56.5097, 17.7868, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2047.61, 2834.88, 58.9097, 26.1867, -43.8868, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -2039.74, 2832.2, 62.2769, 38.5067, -45.5668, -131.905, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.98, 2830.2, 48.384, 0.202822, -14.4337, -105.503, -1, 8);
				Features::PlaceObjectByHash(3681122061, -1996.42, 2832.89, 59.0601, -179.433, 12.3451, 76.9258, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1951.86, 2849.63, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1950.16, 2852.52, 34.5146, -47.5199, -7.59859e-005, 59.6261, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1953.57, 2854.49, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(3213433054, -1955.25, 2851.59, 32.8004, 0, -0, -120.091, -1, 8);
				Features::PlaceObjectByHash(4111834409, -1960.72, 2857.38, 31.7305, 0, -0, -118.505, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2144, 2967.21, 36.0606, 9.35852, -0.00134085, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2139.63, 2964.67, 33.9985, 5.84852, -0.0013321, 59.8371, -1, 8);
				Features::PlaceObjectByHash(4109455646, -2135.45, 2962.3, 32.4604, 0, 0, 60.4792, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2193.23, 2995.21, 35.0684, 11.6996, -0.00262322, -119.238, -1, 8);
				Features::PlaceObjectByHash(2975320548, -2197.74, 2997.74, 32.8074, 15.2099, 2.04906e-005, -119.328, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2246.82, 3026.19, 33.0318, 0.0331696, 0.0056356, 58.6423, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2256.38, 3032.02, 35.4343, 6.5707, 0.0279573, 58.7685, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2265.19, 3037.37, 38.408, 10.1262, 0.0254109, 58.7585, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2273.45, 3042.38, 40.214, 8.95404, -0.00182451, 58.7729, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2281.36, 3047.19, 42.7382, 8.89319, 0.151422, 58.8279, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2289.41, 3052.05, 46.2871, 13.2, 0.000150264, 58.7642, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2397.86, 3114.2, 32.8449, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2402.38, 3116.77, 34.7648, 0, 0, 60.2049, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2394.65, 3118.07, 32.5452, 0, 0, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2397.73, 3120.09, 34.1452, 2.04, -1.38738e-006, 56.6241, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2401.78, 3122.77, 36.6227, 8.16, 1.28066e-006, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2405.48, 3125.2, 39.5571, 14.28, 1.02453e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.12, 3127.6, 43.2064, 20.4, -2.39057e-005, 56.6239, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.29, 3129.71, 46.9494, 24.4781, -1.43125, 56.2632, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2415.18, 3131.49, 51.529, 38.3931, -3.70399, 55.299, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.96, 3132.28, 56.2986, 54.0331, -3.70398, 53.2589, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2417.37, 3132.16, 61.6124, 73.753, -3.70394, 53.2588, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2416.48, 3131.04, 66.996, 90.9129, -3.70395, 53.2587, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2414.88, 3129.5, 70.998, 104.113, -3.70383, 50.6186, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2412.46, 3127.2, 74.61, 116.653, -3.70392, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2409.58, 3124.71, 77.6119, 121.273, -3.70395, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2406.75, 3122.18, 80.0586, 127.213, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2403.38, 3119.23, 82.2502, 135.793, -3.70396, 50.6185, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2369.71, 3092.81, 68.2807, -146.327, -3.7039, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2367.45, 3091.4, 63.3347, -134.447, -3.70392, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366, 3090.66, 58.0814, -123.887, -3.7039, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.38, 3090.57, 53.1623, -112.007, -3.70391, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2365.62, 3091.18, 48.0172, -99.4666, -3.70393, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2366.77, 3092.54, 43.04, -86.2661, -3.70399, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2368.73, 3094.52, 38.5669, -74.386, -3.70392, 50.6181, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2371.25, 3096.8, 35.0692, -59.206, -3.70384, 55.2379, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.18, 3099.61, 32.3997, -42.0459, -3.70387, 57.2179, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2395.69, 3112.77, 84.6355, 152.292, -3.70389, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2391.54, 3109.37, 84.6603, 162.192, -3.70393, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2387.13, 3105.84, 83.6595, 172.752, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2382.97, 3102.56, 81.8101, -179.988, -3.70391, 50.6184, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2372.52, 3094.76, 72.6855, -154.907, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2379.11, 3099.59, 79.371, -172.728, -3.70391, 50.6183, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2375.46, 3096.85, 76.1692, -162.168, -3.70388, 50.6182, -1, 8);
				Features::PlaceObjectByHash(2475986526, -2399.8, 3116.19, 83.7512, 143.712, -3.70387, 50.6184, -1, 8);
				Features::PlaceObjectByHash(3213433054, -2510.73, 3180.4, 32.8111, 0, 0, 59.4291, -1, 8);
				Features::PlaceObjectByHash(209943352, -2302.92, 3059.95, 50.2208, 76.8397, -0.679965, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2298.84, 3057.5, 48.7042, 71.3997, -0.679954, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2290.6, 3052.58, 47.3498, 84.3198, -0.679946, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2294.73, 3055.05, 47.6692, 76.8398, -0.680059, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2533.2, 3193.91, 37.3948, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2425.58, 3091.36, 36.493, 0, -0, -120.716, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
				Features::PlaceObjectByHash(209943352, -2293.7, 3012.65, 55.3685, -89.7587, -0.659716, -30.2946, -1, 8);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -2731, 3259, 32, 1, 0, 0, 1);
			}

			break;

		case ramp10:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Halfpipe Fun Track");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3681122061, -1018.78, -2937.26, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1023.38, -2945.17, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1028.02, -2953.13, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1032.66, -2961.06, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.32, -2969.04, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1041.95, -2976.96, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1046.18, -2984.19, 12.9646, 0, 0, -30.3132, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.78, -2992.12, 12.9646, 0, 0, -29.8732, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.22, -2998.13, 12.9646, 0, 0, -14.2534, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1054.14, -3005.28, 12.9646, 0, 0, -0.613478, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.45, -3012.85, 12.9646, 0, 0, 11.4866, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1051.19, -3020.08, 12.9646, 0, 0, 23.3667, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1047.43, -3026.73, 12.9646, 0, 0, 35.2469, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1042.42, -3032.37, 12.9646, 0, 0, 47.7871, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1037.1, -3038.16, 12.9646, 0, 0, 37.2273, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1033.11, -3044.75, 12.9646, 0, 0, 25.5675, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1030.43, -3052.11, 12.9646, 0, 0, 14.5676, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.18, -3059.85, 12.9646, 0, 0, 4.00757, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1029.37, -3067.7, 12.9646, 0, 0, -6.55247, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1031, -3075.33, 12.9646, 0, 0, -17.5525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1034.09, -3082.35, 12.9646, 0, 0, -29.6525, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1038.6, -3088.77, 12.9646, 0, 0, -40.2127, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.19, -3094.15, 12.9646, 0, 0, -51.653, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1050.65, -3098.2, 12.9646, 0, 0, -63.7531, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1057.89, -3100.91, 12.9646, 0, 0, -75.1935, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1065.18, -3101.87, 12.9646, 0, 0, -89.7139, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1073.03, -3101.2, 12.9646, 0, -0, -100.054, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1080.63, -3099.11, 12.9646, 0, -0, -110.615, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1087.92, -3095.65, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1095.95, -3091.03, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1104.01, -3086.4, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1112.04, -3081.79, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1120.04, -3077.19, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1128.1, -3072.56, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1136.15, -3067.93, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1144.2, -3063.31, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.22, -3058.7, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.24, -3054.09, 12.9646, 0, -0, -119.855, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.22, -3049.48, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1176.21, -3044.8, 12.9646, 0, -0, -120.295, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1183.28, -3040.14, 12.9646, 0, -0, -126.455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1189.23, -3034.89, 12.9646, 0, -0, -136.356, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.86, -3028.84, 12.9646, 0, -0, -148.677, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197.2, -3021.86, 12.9646, 0, -0, -159.898, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.78, -3014.77, 12.9646, 0, -0, -174.639, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1198.72, -3007.04, 12.9646, 0, -0, 173.701, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1197, -2999.97, 12.9646, 0, -0, 158.962, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1193.5, -2993.3, 12.9646, 0, -0, 145.982, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1188.51, -2987.1, 12.9646, 0, -0, 136.083, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1182.5, -2981.85, 12.9646, 0, -0, 126.183, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1175.98, -2978.23, 12.9646, 0, -0, 112.104, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1168.67, -2976.15, 12.9646, 0, -0, 99.7843, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1160.82, -2975.53, 12.9646, 0, 0, 89.4449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1152.93, -2976.29, 12.9646, 0, 0, 79.5455, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1145.21, -2978.39, 12.9646, 0, 0, 70.0859, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1138.14, -2981.75, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1130.27, -2986.43, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1122.46, -2991.09, 12.9646, 0, 0, 59.0863, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1115.12, -2994.75, 12.9646, 0, 0, 67.1435, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1107.63, -2997.13, 12.9646, 0, 0, 76.9913, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1099.8, -2998.14, 12.9646, 0, 0, 86.8389, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1091.94, -2997.76, 12.9646, 0, -0, 97.5819, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1084.47, -2995.95, 12.9646, 0, -0, 108.325, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1077.64, -2992.78, 12.9646, 0, -0, 119.963, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1071.68, -2988.3, 12.9646, 0, -0, 132.496, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1066.33, -2982.53, 12.9646, 0, -0, 141.449, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1053.01, -2960.01, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1048.58, -2951.88, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1044.16, -2943.76, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1039.74, -2935.64, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3681122061, -1035.5, -2927.86, 12.9646, 0, 0, -28.5532, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.23, -2993.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.37, -2998.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1063.7, -2994.67, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2995.73, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.71, -2996.8, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.21, -2997.84, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1067.1, -2999.45, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.43, -3000.24, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.29, -3000.06, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.92, -3001.18, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.44, -3002.28, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.35, -3002.77, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.6, -3003.96, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1066.11, -3005.04, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1064.21, -2999.56, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.53, -3000.82, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1070.75, -3001.52, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.76, -3002.46, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1069.29, -3003.54, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1068.44, -3005.23, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1071.58, -3003.74, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1072.98, -3006.81, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1072.44, -3002.05, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1073.73, -3002.72, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1076.54, -3005.07, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1078.92, -3009.92, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1075.31, -3011.69, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1069.34, -3008.59, 16.0846, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1071.71, -3013.45, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1068.14, -3015.2, 13.7046, 0, 0, -26.0348, -1, 9);
				Features::PlaceObjectByHash(3608473212, -1065.36, -3006.66, 15.3449, 0, 0, -25.1145, -1, 9);
				Features::PlaceObjectByHash(2475986526, -1065.75, -3010.35, 16.0846, 0, 0, -26.0348, -1, 9);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1003, -2916, 14, 1, 0, 0, 1);
			}

			break;

		case ramp11:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Airport Loop");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3966705493, -1041.89, -3219.51, 10.1797, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1037.79, -3221.47, 10.3641, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.16, -3223.3, 10.5366, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1036.76, -3219.45, 10.1526, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.12, -3221.28, 10.3251, -2.43331, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.37, -3225.6, 11.1956, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1028.33, -3223.58, 10.9842, -11.6033, 5.32207, 62.9335, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.27, -3225.54, 12.1104, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1025.44, -3227.83, 12.3497, -18.1533, 5.32205, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.36, -3230.06, 15.7972, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1019.22, -3227.83, 15.5634, -40.4234, 5.32214, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1014.85, -3229.56, 20.4393, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.07, -3231.95, 20.6898, -50.9034, 5.3221, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1012.88, -3232.96, 26.0664, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.63, -3230.51, 25.8104, -64.0034, 5.32209, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.27, -3231.06, 32.0819, -73.1735, 5.32204, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.52, -3233.51, 32.3379, -73.1735, 5.32214, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.36, -3233.48, 38.2311, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.09, -3230.98, 37.9695, -83.6535, 5.32208, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1007.71, -3230.43, 44.185, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1009.05, -3228.93, 49.9682, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1008.93, -3232.81, 44.4969, -92.8235, 6.63212, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1010.27, -3231.31, 50.2801, -119.024, 6.63217, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1011.96, -3226.91, 54.0691, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1013.1, -3229.14, 54.3602, -142.604, 6.6321, 62.9337, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1017.49, -3226.51, 57.2125, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1022.14, -3223.91, 58.9186, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1035.97, -3216.05, 58.7162, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1031.37, -3218.71, 60.1775, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1026.33, -3221.63, 59.8766, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1020.98, -3221.63, 58.6206, -168.804, 6.63213, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1024.97, -3219.25, 59.5578, -168.804, 6.63212, 60.3136, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1016.33, -3224.24, 56.9145, -159.634, 6.63211, 62.9336, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1029.99, -3216.28, 59.8517, 176.786, 6.63213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.73, -3213.86, 58.655, 155.826, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.18, -3211.42, 55.2255, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1040.42, -3213.61, 55.2867, 138.796, 1.39206, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1044.34, -3211.51, 50.6082, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.09, -3209.33, 50.547, 128.316, 1.39213, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1046.16, -3207.74, 45.1535, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.17, -3206.74, 39.6252, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.92, -3206.44, 33.1586, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1048.18, -3206.88, 26.5446, 77.3408, 0.0913896, 60.6229, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.44, -3209.13, 26.5487, 77.3407, 0.0913427, 60.6228, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.3, -3210.37, 21.3947, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1045.93, -3208.12, 21.3905, 56.6411, 0.0914017, 58.823, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1042.61, -3210.12, 16.8766, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1038.64, -3212.63, 13.6141, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1039.97, -3214.83, 13.6182, 28.2018, 0.0914187, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1034.82, -3217.71, 11.1985, 16.4116, 0.0913871, 69.303, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1033.53, -3215.55, 11.1081, 16.4117, 0.0913619, 66.683, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1043.97, -3212.37, 16.8808, 42.1517, 0.0913785, 58.8231, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1050.19, -3208.69, 33.1627, 87.6005, 0.0914728, 60.6227, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1049.45, -3208.98, 39.6879, 104.737, 1.39214, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
				Features::PlaceObjectByHash(3966705493, -1047.44, -3209.98, 45.2161, 117.837, 1.39215, 60.3137, -1, 10);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -1074, -3201, 13, 1, 0, 0, 1);
			}

			break;

		case ramp12:
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Maze Bank Ramp");
			if (Menu::Option("~w~Load")) {
				Features::PlaceObjectByHash(3681122061, -82.9657, -818.944, 325.175, 0, -0, 91.03, -1, 11);
				Features::PlaceObjectByHash(3681122061, -91.0941, -819.089, 322.355, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -98.36, -819.224, 316.632, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -105.626, -819.358, 310.91, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -112.892, -819.492, 305.187, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -120.158, -819.626, 299.464, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -127.424, -819.761, 293.741, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -134.69, -819.895, 288.018, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -141.956, -820.029, 282.296, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -149.222, -820.163, 276.573, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -156.487, -820.298, 270.85, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -163.753, -820.432, 265.127, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -171.019, -820.566, 259.404, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -178.285, -820.701, 253.682, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -185.551, -820.835, 247.959, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -192.817, -820.969, 242.236, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -200.083, -821.103, 236.513, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -207.349, -821.238, 230.79, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -214.615, -821.372, 225.068, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -221.881, -821.506, 219.345, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -229.147, -821.641, 213.622, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -236.413, -821.775, 207.899, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -243.679, -821.909, 202.176, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -250.945, -822.043, 196.453, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -258.21, -822.178, 190.731, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -265.476, -822.312, 185.008, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -287.274, -822.715, 167.839, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -280.008, -822.58, 173.562, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -272.742, -822.446, 179.285, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -294.54, -822.849, 162.117, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -301.806, -822.983, 156.394, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -309.072, -823.118, 150.671, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -316.338, -823.252, 144.948, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -323.604, -823.386, 139.225, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -330.87, -823.52, 133.503, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -338.136, -823.655, 127.78, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -345.402, -823.789, 122.057, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -352.668, -823.923, 116.334, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -359.934, -824.057, 110.611, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -367.199, -824.192, 104.889, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -374.465, -824.326, 99.1657, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -381.731, -824.46, 93.4429, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -388.997, -824.595, 87.7201, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -396.263, -824.729, 81.9973, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -403.529, -824.863, 76.2745, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.479, -825.022, 68.7971, -19.78, -3.43377e-005, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -410.795, -824.997, 70.5517, -38.2199, 0.00787841, 91.0529, -1, 11);
				Features::PlaceObjectByHash(3681122061, -411.96, -825.029, 69.097, -27.6, 1.15259e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -412.719, -825.046, 67.8516, -10.58, -2.92151e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -413.903, -825.068, 67.2075, -3.21999, 5.66959e-007, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -415.378, -825.099, 66.7734, 3.68002, -4.58236e-006, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -416.883, -825.126, 66.57, 9.66002, -8.44435e-006, 91.1096, -1, 11);
				Features::PlaceObjectByHash(3681122061, -418.526, -825.157, 66.5571, 15.64, -1.80093e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -419.945, -825.184, 66.6727, 20.7001, 8.69782e-006, 91.1094, -1, 11);
				Features::PlaceObjectByHash(3681122061, -421.727, -825.218, 67.0936, 25.7601, -2.09975e-005, 91.1095, -1, 11);
				Features::PlaceObjectByHash(3681122061, -422.006, -825.234, 66.966, 30.8199, 0.114757, 90.6829, -1, 11);
				Features::PlaceObjectByHash(3681122061, -429.913, -825.328, 71.6856, 30.8199, 0.114757, 90.6829, -1, 11);
			}
			if (Menu::Option("~w~Teleport")) {
				ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), -74.94243f, -818.63446f, 326.174347f, 1, 0, 0, 1);
			}


		}

		break;

		case bypass:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Bypass Options");
			Menu::Toggle("~w~Unlimited Orbital", Features::unlimitedorb, [] { Features::orbital(Features::unlimitedorb); });
			Menu::Toggle("~w~Reset Vehicle Sell Time", Features::resetv, [] { Features::reset(Features::resetv); });*/

			if (reset)
			{
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_VEHICLE_SELL_TIME"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_SELLING_VEH"), 50000, true);
			}

			if (Menu::Option("Reset Vehicle Sell Time")) {
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_VEHICLE_SELL_TIME"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_SELLING_VEH"), 50000, true);
			}




		}
		break;

		case outfit:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Clothing");
			Menu::Break("More will be out soon!");
			if (Menu::Option("Black Christmas")) {
				Swat();
			}
			if (Menu::Option("Rockstar Logo")) {
				rlogo();
			}
			if (Menu::Option("Outfit 1")) {
				ghost();
			}
			if (Menu::Option("Heist Ready")) {
				Splinter();
			}
			if (Menu::Option("Mullet Gang")) {
				Pilot();
			}
			if (Menu::Option("Checkerboard")) {
				Balla();
			}
			if (Menu::Option("Sexy Elf")) {
				Elf();
			}
			if (Menu::Option("Mrs Stubby")) {
				Thug();
			}
			if (Menu::Option("Mrs Claus")) {
				Santa();
			}
		}
		break;


		case weaponshoot:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Weapon Specials");

			Menu::Break("~w~Particle Gun");
			Menu::Toggle("~w~Clown Appers", Features::particle1, [] { Features::ParticlE1(Features::particle1); });
			Menu::Toggle("~w~Firework 1", Features::particle2, [] { Features::ParticlE2(Features::particle2); });
			Menu::Toggle("~w~Firework 2", Features::particle3, [] { Features::ParticlE3(Features::particle3); });
			Menu::Toggle("~w~Firework 3", Features::particle4, [] { Features::ParticlE4(Features::particle4); });
			Menu::Toggle("~w~Bank Notes", Features::particle5, [] { Features::ParticlE5(Features::particle5); });
			Menu::Toggle("~w~Truck Crash", Features::particle6, [] { Features::ParticlE6(Features::particle6); });
			Menu::Toggle("~w~Alien 1", Features::particle7, [] { Features::ParticlE7(Features::particle7); });
			Menu::Toggle("~w~Alien 2", Features::particle8, [] { Features::ParticlE8(Features::particle8); });
			Menu::Toggle("~w~Electric Box", Features::particle9, [] { Features::ParticlE9(Features::particle9); });
			Menu::Toggle("~w~Water Splash", Features::particle10, [] { Features::ParticlE10(Features::particle10); });
			Menu::Toggle("~w~Blood Entry", Features::particle12, [] { Features::ParticlE12(Features::particle12); });
			Menu::Toggle("~w~Sniper Impact", Features::particle13, [] { Features::ParticlE13(Features::particle13); });
			Menu::Toggle("~w~Dirt Throw", Features::particle14, [] { Features::ParticlE14(Features::particle14); });
			Menu::Toggle("~w~Blood Stab", Features::particle15, [] { Features::ParticlE15(Features::particle15); });
			Menu::Toggle("~w~Ped Sliced", Features::particle16, [] { Features::ParticlE16(Features::particle16); });
			Menu::Toggle("~w~Camera", Features::particle17, [] { Features::ParticlE17(Features::particle17); });
			Menu::Toggle("~w~Meth Smoke", Features::particle18, [] { Features::ParticlE18(Features::particle18); });


			Menu::Break("~w~Object Gun");
			Menu::Toggle("~w~Shoot Container", Features::shootcontainier, [] { Features::shootContainer(Features::shootcontainier); });
			Menu::Toggle("~w~Shoot Ramp", Features::shootramp, [] { Features::shootRamp(Features::shootramp); });
			Menu::Toggle("~w~Shoot Toilets", Features::shoottoilt, [] { Features::shootToilt(Features::shoottoilt); });

			Menu::Break("~w~Shoot DLC Cars");
			Menu::Toggle("~w~Shoot DLC 1.44 Vehicles", Features::Vehgun144, [] { Features::vehgun144(Features::Vehgun144); });
			Menu::Toggle("~w~Shoot DLC 1.43 Vehicles", Features::Vehgun145, [] { Features::vehgun145(Features::Vehgun145); });
			Menu::Toggle("~w~Shoot DLC 1.42 Vehicles", Features::Vehgun146, [] { Features::vehgun146(Features::Vehgun146); });
			Menu::Toggle("~w~Shoot DLC 1.41 Vehicles", Features::Vehgun147, [] { Features::vehgun147(Features::Vehgun147); });
			Menu::Toggle("~w~Shoot DLC 1.40 Vehicles", Features::Vehgun148, [] { Features::vehgun148(Features::Vehgun148); });

			Menu::Break("~w~Shoot Random Vehicles");
			Menu::Toggle("~w~Shoot Random Vehicle", Features::Vehgun, [] { Features::vehgun(Features::Vehgun); });
			Menu::Toggle("~w~Shoot RHINO", Features::RHINO, [] { Features::RHINOBuzzard(Features::ShootBuz); });
			Menu::Toggle("~w~Shoot Buzzard", Features::ShootBuz, [] { Features::ShootBuzzard(Features::ShootBuz); });
			Menu::Toggle("~w~Shoot Dump Truck", Features::ShootDump, [] { Features::ShootDumpTruck(Features::ShootDump); });
			Menu::Toggle("~w~Shoot TROPIC", Features::ShootWeaponT, [] { Features::ShootWeaponTank(Features::ShootWeaponT); });
			Menu::Toggle("~w~Shoot Hydra", Features::ShootHydra, [] { Features::Shootthehydra(Features::ShootHydra); });
			Menu::Toggle("~w~Shoot Adder", Features::Adder, [] { Features::Addershoot(Features::Adder); });
			Menu::Toggle("~w~Shoot Tiptruck", Features::tipTruck, [] { Features::TipTruck(Features::tipTruck); });
			Menu::Toggle("~w~Shoot TAIPANS", Features::taip1, [] { Features::Taip(Features::taip1); });

			Menu::Break("~w~Other Shit"); //WEAPON_BALL
			Menu::Toggle("~w~Rope Gun", Features::ROPEGUN);*/
			Menu::Toggle("~w~Cartoon Gun", Features::CLOWNGUN, [] { Features::clowngun(Features::CLOWNGUN); });
			Menu::Toggle("~w~Shoot Random Animal", Features::animgun, [] { Features::animWgun(Features::animgun); });
			Menu::Toggle("~w~Minecraft Gun", Features::mgun, [] { Features::Mcgun(Features::mgun); });
			Menu::Toggle("~w~Firework Gun", Features::firewgun, [] { Features::fireWgun(Features::firewgun); });
			Menu::Toggle("~w~RPG Gun", Features::anewgun, [] { Features::AneWgun(Features::anewgun); });
			Menu::Toggle("~w~Flare Gun", Features::flaregun, [] { Features::FlareWgun(Features::flaregun); });
			Menu::Toggle("~w~Ball Gun", Features::ballgun, [] { Features::BallWgun(Features::ballgun); });
			Menu::Toggle("~w~Grenade Gun", Features::grangun, [] { Features::GranWgun(Features::grangun); });
			Menu::Toggle("~w~Smoke Grenade Gun", Features::smogun, [] { Features::SmoWgun(Features::smogun); });
			Menu::Toggle("~w~Molotow Gun", Features::molgun, [] { Features::MolWgun(Features::molgun); });
			Menu::Toggle("~w~Stinger Gun", Features::Batgun, [] { Features::BatWgun(Features::Batgun); });
			Menu::Toggle("~w~Stickybomb Gun", Features::stickgun, [] { Features::StickWgun(Features::stickgun); });
			Menu::Toggle("~w~Snowball Gun", Features::snowgun, [] { Features::snowWgun(Features::snowgun); });
			Menu::Toggle("~w~Proxmine Gun", Features::proxgun, [] { Features::proxWgun(Features::proxgun); });
			Menu::Toggle("~w~Leaser Gun", Features::leagun, [] { Features::leaWgun(Features::leagun); });
			Menu::Toggle("~w~Whale Gun", Features::featureWeaponWhaleGun, [] { Features::update_weapon_whale(Features::featureWeaponWhaleGun); });
			Menu::Toggle("~w~Delete Gun", Features::delgun, [] { Features::DelGun(Features::delgun); });
			Menu::Toggle("~w~Money Gun (Bag)", Features::moneyGunBag, [] { Features::MoneyGunBag(Features::moneyGunBag); });
			Menu::Toggle("~w~Shoot Fake Money Bags", Features::moneyGunBagfake, [] { Features::MoneyGunBagfake(Features::moneyGunBagfake); });
			Menu::Toggle("~w~Water Gun", Features::waterGun, [] { Features::WaterGun(Features::waterGun); });
			Menu::Toggle("~w~Asteroid Gun", Features::Weapontest, [] { Features::weapontest(Features::Weapontest); });
			Menu::Toggle("~w~Rock Gun", Features::rocktest, [] { Features::RockTest(Features::rocktest); });
			Menu::Toggle("~w~Airstrike Gun", Features::air1, [] { Features::air(Features::air1); });
			Menu::Toggle("~w~Explode Gun", Features::explodeGun, [] { Features::ExplodeGun(Features::explodeGun); });
			Menu::Toggle("~w~Gravity Gun", Features::GravityGun, [] { Features::gravitygun(Features::GravityGun); });
			Menu::Toggle("~w~Ped Gun", Features::pedGun, [] { Features::PedGun(Features::pedGun); });
			Menu::Toggle("~w~Fire Gun", Features::fireGun, [] { Features::FireGun(Features::fireGun); });
			Menu::Toggle("~w~Explosive Ammo", Features::expAmmo, [] { Features::expAmmos(Features::expAmmo); });




		}
		break;

		case sessweather:
		{
			Menu::Title("Session Weather");
			if (Menu::Option("Clear")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 1, 76, 0);
			}

			if (Menu::Option("UNK1")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 2, 76, 0);
			}

			if (Menu::Option("UNK2")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 3, 76, 0);
			}

			if (Menu::Option("UNK3")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 4, 76, 0);
			}
			if (Menu::Option("UNK4")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 5, 76, 0);
			}
			if (Menu::Option("UNK4")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 6, 76, 0);
			}
			if (Menu::Option("UNK5")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 7, 76, 0);
			}
			if (Menu::Option("UNK6")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 8, 76, 0);
			}
			if (Menu::Option("UNK7")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 9, 76, 0);
			}
			if (Menu::Option("UNK8")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 10, 76, 0);
			}
			if (Menu::Option("UNK9")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 11, 76, 0);
			}
			if (Menu::Option("Light Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 12, 76, 0);
			}
			if (Menu::Option("XMAS Snow")) {
				SCRIPT::SET_PLAYER_WEATHER(1, 13, 76, 0);
			}

		}
		break;

		case VehWeaponplll:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Weapons");
			Menu::Drawing::Spriter("shopui_title_exec_vechupgrade", "shopui_title_exec_vechupgrade", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Toggle("~w~Shoot Rockets", Features::ShootTplpl[Features::Online::selectedPlayer], [] { Features::ShootTanksplpl(Features::ShootTplpl[Features::Online::selectedPlayer]); });


		}
		break;

		case VehWeapon:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Weapons");
			Menu::Drawing::Spriter("shopui_title_exec_vechupgrade", "shopui_title_exec_vechupgrade", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Break("Shoot with the Numpad Key (+)!");
			Menu::Toggle("~w~Shoot Rockets", Features::ShootR, [] { Features::ShootRocket(Features::ShootR); });
			Menu::Toggle("~w~Shoot FireWorks", Features::ShootT, [] { Features::ShootTanks(Features::ShootT); });
			Menu::Toggle("~w~Shoot Tank Rounds", Features::ShootTankR, [] { Features::ShootTankRounds(Features::ShootTankR); });
			Menu::Toggle("~w~Shoot Balls", Features::ShootBall, [] { Features::ShootBalls(Features::ShootBall); });
			Menu::Toggle("~w~Shoot Mini", Features::ShootMini, [] { Features::ShootMiniGun(Features::ShootMini); });
			Menu::Toggle("~w~Shoot RPG", Features::carRPG, [] { Features::shootRPGCar(Features::carRPG); });
			Menu::Toggle("~w~Shoot Laser (RED)", Features::llcar, [] { Features::LLCar(Features::llcar); });
			Menu::Toggle("~w~Shoot Laser (GREEN)", Features::ggcar, [] { Features::GGCar(Features::ggcar); });
			Menu::Toggle("~w~Shoot Plane Rocket", Features::wwcar, [] { Features::WWCar(Features::wwcar); });
			Menu::Toggle("~w~Blazer Cannon", Features::cccar, [] { Features::CCCar(Features::cccar); });
			Menu::Toggle("~w~Turret Boxville", Features::ttcar, [] { Features::TTCar(Features::ttcar); });
			Menu::Toggle("~w~Flaregun", Features::ttcarflare, [] { Features::TTCar(Features::ttcarflare); });
			Menu::Toggle("~w~Ruiner Bullet", Features::qqcar, [] { Features::QQCar(Features::qqcar); });
			Menu::Toggle("~w~Molotow Gun", Features::qqcarxdsa, [] { Features::QQCarsd(Features::qqcarxdsa); });

		}
		break;
		case gofofw:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Modded Vehicles");



			if (Menu::ListVector("Select Vehicle", Sports1, soutprop21)) {
				Features::flatbed(Sports1[soutprop21]);
			};

			if (Menu::Option("Put Custom Vehicle")) {
				GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 100);
				while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
				Features::flatbed(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
			}



		}
		break;
		case Ulti:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Modded Vehicles");
			Menu::Drawing::Spriter("shopui_title_sm_hangar", "shopui_title_sm_hangar", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::MenuOption("~w~FlatBed with Custom Vehicle", gofofw);


			if (Menu::Option("~w~Trolley")) {

				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 2, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("carbonrs");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_rub_trolley01a");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 1, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, false);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							notifyMap("Spawned: ~b~Trolley~HUD_COLOUR_WHITE~!");
							ENTITY::SET_ENTITY_VISIBLE(Handle, true, true);

						}

					}

				}

			}

			if (Menu::Option("~w~6x6 War RC")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash3 = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash4 = GAMEPLAY::GET_HASH_KEY("dune2");
				int hash5 = GAMEPLAY::GET_HASH_KEY("monster");
				int hash6 = GAMEPLAY::GET_HASH_KEY("monster");


				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);


				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6))
				{
					int Object1 = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::CREATE_VEHICLE(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::CREATE_VEHICLE(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::CREATE_VEHICLE(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::CREATE_VEHICLE(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);



					if (ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2) && ENTITY::DOES_ENTITY_EXIST(Object3) && ENTITY::DOES_ENTITY_EXIST(Object4) && ENTITY::DOES_ENTITY_EXIST(Object5))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x - 0.1f, a.y, a.z, b.x, b.y + 41.1f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 0.1f, a.y, a.z, b.x, b.y - 41.4f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 1.41f, a.y, a.z - 0.2f, b.x - 179.99f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x - 1.41f, a.y, a.z - 0.2f, b.x - 179.99f, b.y, b.z, 0, 1, 0, 0, 2, 1);

							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object1, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object1, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object4, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object4, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object5, 255, 255, 255);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object5, 255, 255, 255);
						}

					}

				}
			}
			if (Menu::Option("~w~Speeder Prototype")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash1 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash2 = GAMEPLAY::GET_HASH_KEY("turismor");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::CREATE_VEHICLE(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object1, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object1, 255, 0, 0);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y + 1.37f, a.z + 0.59f, b.x - 14.33f, b.y + 541.20f, b.z - 1.42f, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y - 0.79f, a.z + 0.83f, b.x + 9.72f, b.y + 539.03f, b.z - 0.16f, 0, 1, 0, 0, 2, 1);
						}
					}
				}
			}
			if (Menu::Option("~w~Snow Scooter")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash2 = GAMEPLAY::GET_HASH_KEY("sanchez");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 255, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 255, 0, 0);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x - 0.02f, a.y - 0.08f, a.z - 0.36f, b.x - 0.21f, b.y + 1.83f, b.z - 0.21f, 0, 1, 0, 0, 2, 1);

						}
					}
				}
			}
			if (Menu::Option("~w~Military Flightsquad")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash1 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash2 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash3 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash4 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash5 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash6 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash7 = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash8 = GAMEPLAY::GET_HASH_KEY("hydra");

				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);
				STREAMING::REQUEST_MODEL(hash7);
				STREAMING::REQUEST_MODEL(hash8);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8))
				{
					int Object = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::CREATE_VEHICLE(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::CREATE_VEHICLE(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::CREATE_VEHICLE(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::CREATE_VEHICLE(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::CREATE_VEHICLE(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object6 = VEHICLE::CREATE_VEHICLE(hash7, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object7 = VEHICLE::CREATE_VEHICLE(hash8, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{

							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);


							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x, a.y + 30.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x - 15.0f, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 15.0f, a.y + 15.541162f, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 15.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x + 30.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object6, Vehicle, 0, a.x - 15.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object7, Vehicle, 0, a.x - 30.0f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);

						}
					}
				}
			}
			if (Menu::Option("~w~Bike Robot")) {
				int Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0.03f;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("bati");
				int hash1 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash2 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash3 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash4 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash5 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash6 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash7 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash8 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash9 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash10 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash11 = GAMEPLAY::GET_HASH_KEY("bati");
				int hash12 = GAMEPLAY::GET_HASH_KEY("bati");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash1);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				STREAMING::REQUEST_MODEL(hash6);
				STREAMING::REQUEST_MODEL(hash7);
				STREAMING::REQUEST_MODEL(hash8);
				STREAMING::REQUEST_MODEL(hash9);
				STREAMING::REQUEST_MODEL(hash10);
				STREAMING::REQUEST_MODEL(hash11);
				STREAMING::REQUEST_MODEL(hash12);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8) && STREAMING::HAS_MODEL_LOADED(hash9) && STREAMING::HAS_MODEL_LOADED(hash10) && STREAMING::HAS_MODEL_LOADED(hash11))
				{
					int Object = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object1 = VEHICLE::CREATE_VEHICLE(hash1, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object2 = VEHICLE::CREATE_VEHICLE(hash3, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object3 = VEHICLE::CREATE_VEHICLE(hash4, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object4 = VEHICLE::CREATE_VEHICLE(hash5, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object5 = VEHICLE::CREATE_VEHICLE(hash6, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object6 = VEHICLE::CREATE_VEHICLE(hash7, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object7 = VEHICLE::CREATE_VEHICLE(hash8, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object8 = VEHICLE::CREATE_VEHICLE(hash9, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object9 = VEHICLE::CREATE_VEHICLE(hash10, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object10 = VEHICLE::CREATE_VEHICLE(hash11, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Object11 = VEHICLE::CREATE_VEHICLE(hash12, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash2, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z + 1.16f, b.x + 62.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a.x + 2.5f, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object3, Vehicle, 0, a.x + 2.5f, a.y, a.z + 1.16f, b.x + 62.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object4, Vehicle, 0, a.x + 0.5f, a.y + 0.5f, a.z + 2.27f, b.x + 50.0f, b.y - 70.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object5, Vehicle, 0, a.x + 1.95f, a.y + 0.5f, a.z + 2.27f, b.x + 50.0f, b.y + 70.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object6, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 5.0f, b.x + 90.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object7, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 3.5f, b.x + 90.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object8, Vehicle, 0, a.x + 1.24f, a.y + 0.8f, a.z + 6.0f, b.x - 15.0f, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object9, Vehicle, 0, a.x + 2.0f, a.y + 0.8f, a.z + 4.43f, b.x - 30.0f, b.y - 50.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object10, Vehicle, 0, a.x + 0.6f, a.y + 0.8f, a.z + 4.43f, b.x - 30.0f, b.y + 50.0f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a.x, a.y + 2.1f, a.z + 3.7f, b.x - 10.0f, b.y + 12.8f, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object11, Vehicle, 0, a.x + 2.8f, a.y + 1.9f, a.z + 3.7f, b.x - 10.0f, b.y - 13.6f, b.z, 0, 1, 0, 0, 2, 1);
						}
					}
				}
			}
			if (Menu::Option("~w~Bumper Buggy")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = -0.34, a.y = 0.32, a.z = -0.25;
				Vector3 b; b.x = 0, b.y = 0, b.z = 180;
				Vector3 Tire; Tire.x = 0.0, Tire.y = 0.0; Tire.z = 0.0;//Right Front(inner tire)
				Vector3 TireA; TireA.x = 0.40, TireA.y = 1.0, TireA.z = -0.51;//X Coord - Y Coord - Z Coord
				Vector3 TireB; TireB.x = 0.0, TireB.y = 0.0, TireB.z = 88.0;//Pitch - Roll - Yaw
				Vector3 Tire01; Tire01.x = 0.0, Tire01.y = 0.0; Tire01.z = 0;//Right Front(outter tire)
				Vector3 TireC; TireC.x = 0.59, TireC.y = 1.0, TireC.z = -0.51;//X Coord - Y Coord - Z Coord
				Vector3 TireD; TireD.x = 0.0, TireD.y = 0.0, TireD.z = -90.0;//Pitch - Roll - Yaw
				Vector3 Tire02; Tire02.x = 0.0, Tire02.y = 0.0; Tire02.z = 0.0;//Left Front(inner tire)
				Vector3 TireE; TireE.x = -1.09, TireE.y = 1.0, TireE.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireF; TireF.x = 0.0, TireF.y = 0.0, TireF.z = -88.0;//Pitch - Roll - Yaw
				Vector3 Tire03; Tire03.x = 0.0, Tire03.y = 0.0; Tire03.z = 0.0;//Left Front(outter tire)
				Vector3 TireG; TireG.x = -1.264, TireG.y = 1.0, TireG.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireH; TireH.x = 0.0, TireH.y = 0.0, TireH.z = 92.0;//Pitch - Roll - Yaw
				Vector3 Engine1; Engine1.x = 0.0, Engine1.y = 0.0; Engine1.z = 0.0;//Engine
				Vector3 EngineA; EngineA.x = -0.39, EngineA.y = -1.60, EngineA.z = -0.70;//X Coord - Y Coord - Z Coord
				Vector3 EngineB; EngineB.x = 0.0, EngineB.y = 0.0, EngineB.z = 0.0;//Pitch - Roll - Yaw
				Vector3 Tire04; Tire04.x = 0.0, Tire04.y = 0.0; Tire04.z = 0.0;//Right Rear(inner tire)
				Vector3 TireI; TireI.x = 0.22, TireI.y = -1.40, TireI.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireJ; TireJ.x = 0.0, TireJ.y = 0.0, TireJ.z = -88.0;//Pitch - Roll - Yaw
				Vector3 Tire05; Tire05.x = 0.0, Tire05.y = 0.0; Tire05.z = 0.0;//Right Rear(middle tire)
				Vector3 TireK; TireK.x = 0.42, TireK.y = -1.40, TireK.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireL; TireL.x = 0.0, TireL.y = 0.0, TireL.z = 90.0;//Pitch - Roll - Yaw
				Vector3 Tire06; Tire06.x = 0.0, Tire06.y = 0.0; Tire06.z = 0.0;//Right Rear(outter tire)
				Vector3 TireM; TireM.x = 0.593, TireM.y = -1.40, TireM.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireN; TireN.x = 0.0, TireN.y = 0.0, TireN.z = -89.0;//Pitch - Roll - Yaw
				Vector3 Tire07; Tire07.x = 0.0, Tire07.y = 0.0; Tire07.z = 0.0;//Left Rear(inner tire)
				Vector3 TireO; TireO.x = -0.81, TireO.y = -1.40, TireO.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireP; TireP.x = 0.0, TireP.y = 0.0, TireP.z = 88.0;//Pitch - Roll - Yaw
				Vector3 Tire08; Tire08.x = 0.0, Tire08.y = 0.0; Tire08.z = 0.0;//Left Rear(middle tire)
				Vector3 TireQ; TireQ.x = -1.01, TireQ.y = -1.40, TireQ.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireR; TireR.x = 0.0, TireR.y = 0.0, TireR.z = -91.0;//Pitch - Roll - Yaw
				Vector3 Tire09; Tire09.x = 0.0, Tire09.y = 0.0; Tire09.z = 0.0;//Left Rear(outter tire)
				Vector3 TireSs; TireSs.x = -1.184, TireSs.y = -1.40, TireSs.z = -0.50;//X Coord - Y Coord - Z Coord
				Vector3 TireT; TireT.x = 0.0, TireT.y = 0.0, TireT.z = 88.0;//Pitch - Roll - Yaw
				Vector3 Hood1; Hood1.x = 0, Hood1.y = 0; Hood1.z = 0;//Hood
				Vector3 HoodA; HoodA.x = -0.34, HoodA.y = 1.2, HoodA.z = -0.40;//X Coord - Y Coord - Z Coord
				Vector3 HoodB; HoodB.x = -24.0, HoodB.y = 0.0, HoodB.z = 0.0;//Pitch - Roll - Yaw
				Vector3 Battery1; Battery1.x = 0.0, Battery1.y = 0.0; Battery1.z = 0.0;//Battery
				Vector3 BatteryA; BatteryA.x = -0.34, BatteryA.y = 1.06, BatteryA.z = -0.06;//X Coord - Y Coord - Z Coord
				Vector3 BatteryB; BatteryB.x = -24.0, BatteryB.y = 0.0, BatteryB.z = 0.0;//Pitch - Roll - Yaw
				int hash = GAMEPLAY::GET_HASH_KEY("blista");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_bumper_car_01");
				int Tires = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				int Engine = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");
				int Hood = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int Battery = GAMEPLAY::GET_HASH_KEY("prop_power_cell");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(Tires);
				STREAMING::REQUEST_MODEL(Engine);
				STREAMING::REQUEST_MODEL(Hood);
				STREAMING::REQUEST_MODEL(Battery);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(Tires) && STREAMING::HAS_MODEL_LOADED(Engine) && STREAMING::HAS_MODEL_LOADED(Hood) && STREAMING::HAS_MODEL_LOADED(Battery))
				{
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 0, 1);
					int Tire1 = OBJECT::CREATE_OBJECT(Tires, Tire.x, Tire.y, Tire.z, 1, 0, 1);//Right Front(inner tire)
					int Tire2 = OBJECT::CREATE_OBJECT(Tires, Tire01.x, Tire01.y, Tire01.z, 1, 0, 1);//right Front(outter tire)
					int Tire3 = OBJECT::CREATE_OBJECT(Tires, Tire02.x, Tire02.y, Tire02.z, 1, 0, 1);//Left Front(inner tire)
					int Tire4 = OBJECT::CREATE_OBJECT(Tires, Tire03.x, Tire03.y, Tire03.z, 1, 0, 1);//Left Front(outter tire)
					int Engine01 = OBJECT::CREATE_OBJECT(Engine, Engine1.x, Engine1.y, Engine1.z, 1, 0, 1);//Engine
					int Tire5 = OBJECT::CREATE_OBJECT(Tires, Tire04.x, Tire04.y, Tire04.z, 1, 0, 1);//Right Rear(inner tire)
					int Tire6 = OBJECT::CREATE_OBJECT(Tires, Tire05.x, Tire05.y, Tire05.z, 1, 0, 1);//Right Rear(middle tire)
					int Tire7 = OBJECT::CREATE_OBJECT(Tires, Tire06.x, Tire06.y, Tire06.z, 1, 0, 1);//Right Rear(outter tire)
					int Tire8 = OBJECT::CREATE_OBJECT(Tires, Tire07.x, Tire07.y, Tire07.z, 1, 0, 1);//Left Rear(inner tire)
					int Tire9 = OBJECT::CREATE_OBJECT(Tires, Tire08.x, Tire08.y, Tire08.z, 1, 0, 1);//Left Rear(middle tire)
					int Tire10 = OBJECT::CREATE_OBJECT(Tires, Tire09.x, Tire09.y, Tire09.z, 1, 0, 1);//Left Rear(outter tire)
					int Hood01 = OBJECT::CREATE_OBJECT(Hood, Hood1.x, Hood1.y, Hood1.z, 1, 0, 1);//Hood
					int Battery01 = OBJECT::CREATE_OBJECT(Battery, Battery1.x, Battery1.y, Battery1.z, 1, 0, 1);//Battery
					if (ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Tire1) && ENTITY::DOES_ENTITY_EXIST(Tire2) && ENTITY::DOES_ENTITY_EXIST(Tire3) && ENTITY::DOES_ENTITY_EXIST(Tire4) && ENTITY::DOES_ENTITY_EXIST(Engine01) && ENTITY::DOES_ENTITY_EXIST(Tire5) && ENTITY::DOES_ENTITY_EXIST(Tire6) && ENTITY::DOES_ENTITY_EXIST(Tire7) && ENTITY::DOES_ENTITY_EXIST(Tire8) && ENTITY::DOES_ENTITY_EXIST(Tire9) && ENTITY::DOES_ENTITY_EXIST(Tire10) && ENTITY::DOES_ENTITY_EXIST(Hood01) && ENTITY::DOES_ENTITY_EXIST(Battery01))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, false);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire1, Vehicle, 0, TireA.x, TireA.y, TireA.z, TireB.x, TireB.y, TireB.z, 0, 1, 0, 0, 2, 1);//Right Front(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire2, Vehicle, 0, TireC.x, TireC.y, TireC.z, TireD.x, TireD.y, TireD.z, 0, 1, 0, 0, 2, 1);//right Front(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire3, Vehicle, 0, TireE.x, TireE.y, TireE.z, TireF.x, TireF.y, TireF.z, 0, 1, 0, 0, 2, 1);//Left Front(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire4, Vehicle, 0, TireG.x, TireG.y, TireG.z, TireH.x, TireH.y, TireH.z, 0, 1, 0, 0, 2, 1);//Left Front(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Engine01, Vehicle, 0, EngineA.x, EngineA.y, EngineA.z, EngineB.x, EngineB.y, EngineB.z, 0, 1, 0, 0, 2, 1);//Engine
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire5, Vehicle, 0, TireI.x, TireI.y, TireI.z, TireJ.x, TireJ.y, TireJ.z, 0, 1, 0, 0, 2, 1);//Right Rear(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire6, Vehicle, 0, TireK.x, TireK.y, TireK.z, TireL.x, TireL.y, TireL.z, 0, 1, 0, 0, 2, 1);//Right Rear(middle tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire7, Vehicle, 0, TireM.x, TireM.y, TireM.z, TireN.x, TireN.y, TireN.z, 0, 1, 0, 0, 2, 1);//Right Rear(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire8, Vehicle, 0, TireO.x, TireO.y, TireO.z, TireP.x, TireP.y, TireP.z, 0, 1, 0, 0, 2, 1);//Left Rear(inner tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire9, Vehicle, 0, TireQ.x, TireQ.y, TireQ.z, TireR.x, TireR.y, TireR.z, 0, 1, 0, 0, 2, 1);//Left Rear(middle tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire10, Vehicle, 0, TireSs.x, TireSs.y, TireSs.z, TireT.x, TireT.y, TireT.z, 0, 1, 0, 0, 2, 1);//Left Rear(outter tire)
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Hood01, Vehicle, 0, HoodA.x, HoodA.y, HoodA.z, HoodB.x, HoodB.y, HoodB.z, 0, 1, 0, 0, 2, 1);//Hood
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Battery01, Vehicle, 0, BatteryA.x, BatteryA.y, BatteryA.z, BatteryB.x, BatteryB.y, BatteryB.z, 0, 1, 0, 0, 2, 1);//Battery
							ENTITY::SET_ENTITY_VISIBLE(Handle, true, false);

						}

					}

				}

			}
			if (Menu::Option("~w~Modded Carbon RS")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_EMP
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 1.61, a.z = -0.12;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = -12.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
															 //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.94, a2.y = 1.32, a2.z = -0.25;
				Vector3 b2; b2.x = 9.0, b2.y = -28.0, b2.z = 87.0;
				//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.95, a3.y = -1.34, a3.z = -0.25f;
				Vector3 b3; b3.x = 9.0, b3.y = 38.0, b3.z = 87.0;
				//hash4_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.95, a4.y = 1.33, a4.z = -0.23;
				Vector3 b4; b4.x = 11.0, b4.y = 26.0, b4.z = -89.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.96, a5.y = -1.31, a5.z = -0.23;
				Vector3 b5; b5.x = 10.0, b5.y = 20.0, b5.z = -92.0;

				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");

				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_EMP);
				STREAMING::REQUEST_MODEL(hash3_MiniGun);
				STREAMING::REQUEST_MODEL(hash4_Wheel);

				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);

					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);

						}

					}

				}

			}
			if (Menu::Option("~w~Modded T20")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_EMP
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 1.61, a.z = -0.12;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = -12.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
															 //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.94, a2.y = 1.32, a2.z = -0.25;
				Vector3 b2; b2.x = 9.0, b2.y = -28.0, b2.z = 87.0;
				//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.95, a3.y = -1.34, a3.z = -0.25f;
				Vector3 b3; b3.x = 9.0, b3.y = 38.0, b3.z = 87.0;
				//hash4_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.95, a4.y = 1.33, a4.z = -0.23;
				Vector3 b4; b4.x = 11.0, b4.y = 26.0, b4.z = -89.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.96, a5.y = -1.31, a5.z = -0.23;
				Vector3 b5; b5.x = 10.0, b5.y = 20.0, b5.z = -92.0;

				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");

				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_EMP);
				STREAMING::REQUEST_MODEL(hash3_MiniGun);
				STREAMING::REQUEST_MODEL(hash4_Wheel);

				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);

					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, true);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, true);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);

						}

					}

				}

			}
			if (Menu::Option("~w~Roller Coaster Car")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_RollerCar
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.5;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 180.0;//Pitch - Roll - Yaw
															 //hash3_Seats
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = 0.0, a1.y = 0.0, a1.z = 0.0;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 0.0;
				//hash3_FLWheel1
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.97, a2.y = 1.0, a2.z = -0.25;
				Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -89.0;
				//hash3_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -1.00, a3.y = -1.10, a3.z = -0.24;
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = -89.0;
				//hash3_RFWheel1
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.97, a4.y = 1.00, a4.z = -0.24;
				Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = 89.0;
				//hash3_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 1.00, a5.y = -1.10, a5.z = -0.24;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
				int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2_RollerCar = GAMEPLAY::GET_HASH_KEY("ind_prop_dlc_roller_car");
				int hash3_Seats = GAMEPLAY::GET_HASH_KEY("prop_hd_seats_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				STREAMING::REQUEST_MODEL(hash_T20);
				STREAMING::REQUEST_MODEL(hash2_RollerCar);
				STREAMING::REQUEST_MODEL(hash3_Seats);
				STREAMING::REQUEST_MODEL(hash4_Wheel);
				if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_RollerCar) && STREAMING::HAS_MODEL_LOADED(hash3_Seats) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int RollerCar = OBJECT::CREATE_OBJECT(hash2_RollerCar, null.x, null.y, null.z, 1, 0, 1);
					int Seats = OBJECT::CREATE_OBJECT(hash3_Seats, null1.x, null1.y, null1.z, 1, 0, 1);
					int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(RollerCar) && ENTITY::DOES_ENTITY_EXIST(Seats) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, false);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RollerCar, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Seats, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
							ENTITY::SET_ENTITY_VISIBLE(Handle, true, true);

						}

					}

				}

			}
			if (Menu::Option("~w~Boat And Trailer")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -0.61, a.z = 0.28;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
				int hash2 = GAMEPLAY::GET_HASH_KEY("suntrap");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}

			if (Menu::Option("~w~FlatBed And T20")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
				Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
				Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
				Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
				Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
				Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
				Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
				Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
				Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
				int hash2 = GAMEPLAY::GET_HASH_KEY("t20");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
				int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
				int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
					int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Ephesys");
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}
			if (Menu::Option("~w~JetSki And Trailer")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0.;
				Vector3 a; a.x = -0.625, a.y = -1.9, a.z = -0.09;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 a1; a1.x = 0.625, a1.y = -1.9, a1.z = -0.09;
				Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;

				Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
				Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

				int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
				int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object1 = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
						ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);

					}

				}

			}
			if (Menu::Option("~w~Ramp Truck")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
				Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
				int hash = GAMEPLAY::GET_HASH_KEY("phantom");
				int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

					}

				}

			}
			if (Menu::Option("~w~Monster Swat")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("monster");
				int hash2 = GAMEPLAY::GET_HASH_KEY("riot");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Buffulo Police")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("police2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("buffalo2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Insurgent 3")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("insurgent");
				int hash2 = GAMEPLAY::GET_HASH_KEY("insurgent2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Super 1")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = -0.25;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("t20");
				int hash2 = GAMEPLAY::GET_HASH_KEY("cheetah");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Super 2")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("feltzer2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("rapidgt");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Muscle 1")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = -0.2;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
				int hash2 = GAMEPLAY::GET_HASH_KEY("jb700");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Muscle 2")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 2.0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("coquette2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("hotknife");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Special")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("zentorno");
				int hash2 = GAMEPLAY::GET_HASH_KEY("kuruma2");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Ephesys");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Sub Copter")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 1, a.z = 0.8;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("buzzard");
				int hash2 = GAMEPLAY::GET_HASH_KEY("submersible");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 149, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~SlamVan")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
				Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
				Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
				Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
				Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
				Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
				Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
				Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
				Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
				int hash2 = GAMEPLAY::GET_HASH_KEY("slamvan2");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
				int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
				int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);
				STREAMING::REQUEST_MODEL(hash4);
				STREAMING::REQUEST_MODEL(hash5);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
					int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
					{
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 8, 17, 30);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 30, 1);
						VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 92, 0);
						VEHICLE::SET_VEHICLE_COLOURS(Object, 12, 53);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Ephesys");
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);
						VEHICLE::TOGGLE_VEHICLE_MOD(Object, 18, 1);
						VEHICLE::TOGGLE_VEHICLE_MOD(Object, 22, 1);
						VEHICLE::SET_VEHICLE_MOD(Object, 11, 3, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 14, 14, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 15, 3, 0);
						VEHICLE::SET_VEHICLE_MOD(Object, 13, 2, 0);
						VEHICLE::SET_VEHICLE_WHEEL_TYPE(Object, 6);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_MOD(Object, 23, 18, 1);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Flying 5 Seater")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0.;

				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = 0.6;		// seashark 1 - 0.7 worked just hard to get on .. infront and behind wings only way to get on the sharks ...
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;

				Vector3 a1; a1.x = 0.0, a1.y = -4.0, a1.z = 0.6;  // seashark 2
				Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;


				Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
				Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

				int hash = GAMEPLAY::GET_HASH_KEY("hydra");
				int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
				int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05"); // turn this into something usefull maybe another sea shark ...
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hash3);

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object1 = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
						ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
						ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);

					}

				}

			}
			if (Menu::Option("~w~Panto/HotKnife")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_PANTO
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.2;//X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
														   //hash3_MiniGun
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_WindScreen _ VANISHED NEEDS FIXING
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = 0.3, a2.y = 0.41, a2.z = 0.50;
				Vector3 b2; b2.x = -45.3, b2.y = 0.0, b2.z = -179.0;//87
																	//hash4_RLWheel1
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = -0.90, a3.y = -1.2, a3.z = 0.0; // -0.23
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
				//hash4_RFWindScreen 
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = -0.3, a4.y = 0.41, a4.z = 0.5;
				Vector3 b4; b4.x = -45.3, b4.y = 0.0, b4.z = -179.0;
				//hash4_RRWheel1
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.92, a5.y = -1.2, a5.z = 0.01;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = -92.0;
				//PUNTO -- FUCK UP NEEDS FIXING 
				Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
				Vector3 a6; a6.x = 0.0, a6.y = 0.0, a6.z = -0.2;
				Vector3 b6; b6.x = 0.0, b6.y = 0.0, b6.z = 0.0;
				//SIDES LEFT
				Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
				Vector3 a7; a7.x = -0.75, a7.y = 0.7, a7.z = -0.3;
				Vector3 b7; b7.x = 90.0, b7.y = 0.0, b7.z = 0.0;
				//SIDES RIGHT
				Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
				Vector3 a8; a8.x = 0.75, a8.y = 0.7, a8.z = -0.3;
				Vector3 b8; b8.x = 90.0, b8.y = 0.0, b8.z = 0.0;

				int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
				int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
				int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
				int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
				int hash2 = GAMEPLAY::GET_HASH_KEY("panto");
				int hashWindow = GAMEPLAY::GET_HASH_KEY("prop_ballistic_shield");
				int hashSides = GAMEPLAY::GET_HASH_KEY("prop_cons_plank");




				STREAMING::REQUEST_MODEL(hashWindow);// WINDOW
				STREAMING::REQUEST_MODEL(hash2_EMP); // PANTO
				STREAMING::REQUEST_MODEL(hash3_MiniGun); // GUNS
				STREAMING::REQUEST_MODEL(hash4_Wheel); // back wheels
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				STREAMING::REQUEST_MODEL(hashSides); // SIDE SKIRTS

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hashSides) && STREAMING::HAS_MODEL_LOADED(hashWindow) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
				{
					int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
					int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
					int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
					int WINDOW_1 = OBJECT::CREATE_OBJECT(hashWindow, null2.x, null2.y, null2.z, 1, 0, 1);
					int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
					int WINDOW_2 = OBJECT::CREATE_OBJECT(hashWindow, null4.x, null4.y, null4.z, 1, 0, 1);
					int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int LeftSide = OBJECT::CREATE_OBJECT(hashSides, null7.x, null7.y, null7.z, 1, 0, 1);
					int RightSide = OBJECT::CREATE_OBJECT(hashSides, null8.x, null8.y, null8.z, 1, 0, 1);


					if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(LeftSide) && ENTITY::DOES_ENTITY_EXIST(RightSide) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(WINDOW_1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(WINDOW_2) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, false);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
							VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
							VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "sm");
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "sm");
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle, 1);
							VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_2, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftSide, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(RightSide, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);


						}

					}

				}

			}
			if (Menu::Option("Monster Digger")) {
				uint Handle = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				//hash2_Dozer
				Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
				Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.4;   //X Coord - Y Coord - Z Coord
				Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;   //Pitch - Roll - Yaw
															  //hash3_MiniGun LEFT
				Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
				Vector3 a1; a1.x = -0.70, a1.y = 1.80, a1.z = 0.98;
				Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
				//hash3_MiniGun2 RIGHT
				Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
				Vector3 a0; a0.x = 0.70, a0.y = 1.80, a0.z = 0.98;
				Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
				//hash4_Left BLUE left
				Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
				Vector3 a2; a2.x = -0.31, a2.y = 2.51, a2.z = 0.55;
				Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -175.0;//87 - 179
																  //hash4_NIONS LEFT/back
				Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
				Vector3 a3; a3.x = 0.5, a3.y = -3.0, a3.z = -0.36; // -0.23
				Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
				//hash4_Right BLUE LIGHT
				Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
				Vector3 a4; a4.x = 0.31, a4.y = 2.51, a4.z = 0.55;
				Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = -175.0;
				//hash4_NIONS RIGHT
				Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
				Vector3 a5; a5.x = 0.92, a5.y = -2.0, a5.z = 0.01;
				Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
				//ENGINE
				Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
				Vector3 a6; a6.x = 0.0, a6.y = 1.76, a6.z = 0.86;
				Vector3 b6; b6.x = -0.0, b6.y = 0.0, b6.z = 0.0;
				//SIDES LEFT EMP
				Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
				Vector3 a7; a7.x = -0.88, a7.y = -1.8, a7.z = 1.0;
				Vector3 b7; b7.x = 0.0, b7.y = -51.9, b7.z = 0.0;
				//SIDES RIGHT EMP
				Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
				Vector3 a8; a8.x = 0.88, a8.y = -1.8, a8.z = 1.0;
				Vector3 b8; b8.x = 0.0, b8.y = 51.9, b8.z = 0.0;
				//BEAR
				Vector3 null9; null9.x = 0, null9.y = 0; null9.z = 0;
				Vector3 a9; a9.x = -1.0, a9.y = 2.7, a9.z = -0.4;
				Vector3 b9; b9.x = 0.0, b9.y = 0.0, b9.z = 156.5;
				//SPIKES
				Vector3 null10; null10.x = 0, null10.y = 0; null10.z = 0;
				Vector3 a10; a10.x = -0.12, a10.y = 0.59, a10.z = 1.9;
				Vector3 b10; b10.x = 0.0, b10.y = 0.0, b10.z = 0.0;

				int hash = GAMEPLAY::GET_HASH_KEY("monster");				// Monster Truck
				int hash1 = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");	// Car Engine
				int hash2 = GAMEPLAY::GET_HASH_KEY("bulldozer");			// Dozer
																			//int hash3 = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");		// Mini GUn 
																			//int hash4 = GAMEPLAY::GET_HASH_KEY("v_ilev_uvcheetah");		// Nion Lights <-- needs changing
																			//int hash5 = GAMEPLAY::GET_HASH_KEY("prop_air_lights_05a");	// Blue Lights	
																			//int hash6 = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");	// Emp Lights	
																			//int hash7 = GAMEPLAY::GET_HASH_KEY("prop_mem_teddy_02");	// Large Teddy	
																			//int hash8 = GAMEPLAY::GET_HASH_KEY("p_stinger_04");			// Stinger Spikes

				STREAMING::REQUEST_MODEL(hash); 	// MONSTER
				STREAMING::REQUEST_MODEL(hash1); 	// Car Engine
				STREAMING::REQUEST_MODEL(hash2); 	// DOZER
													//STREAMING::REQUEST_MODEL(hash3); 	// GUNS
													//STREAMING::REQUEST_MODEL(hash4); 	// Nion Lights
													//STREAMING::REQUEST_MODEL(hash5);	// Blue Lights
													//STREAMING::REQUEST_MODEL(hash6); 	// Emp Lights
													//STREAMING::REQUEST_MODEL(hash7); 	// Large Teddy
													//STREAMING::REQUEST_MODEL(hash8); 	// SPIKES

				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
					int Ebox = OBJECT::CREATE_OBJECT(hash1, null.x, null.y, null.z, 1, 0, 1);
					/*				int GunL = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
					int GunR = OBJECT::CREATE_OBJECT(hash3, null0.x, null0.y, null0.z, 1, 0, 1);
					int LSign = OBJECT::CREATE_OBJECT(hash4, null3.x, null3.y, null3.z, 1, 0, 1);
					int RSign = OBJECT::CREATE_OBJECT(hash4, null5.x, null5.y, null5.z, 1, 0, 1);
					int LBlight = OBJECT::CREATE_OBJECT(hash5, null2.x, null2.y, null2.z, 1, 0, 1);
					int RBlight = OBJECT::CREATE_OBJECT(hash5, null4.x, null4.y, null4.z, 1, 0, 1);
					int LeftEmp = OBJECT::CREATE_OBJECT(hash6, null7.x, null7.y, null7.z, 1, 0, 1);
					int RightEmp = OBJECT::CREATE_OBJECT(hash6, null8.x, null8.y, null8.z, 1, 0, 1);
					int Teddy = OBJECT::CREATE_OBJECT(hash7, null9.x, null9.y, null9.z, 1, 0, 1);
					int Spikes = OBJECT::CREATE_OBJECT(hash8, null10.x, null10.y, null10.z, 1, 0, 1);*/

					if (ENTITY::DOES_ENTITY_EXIST(Ebox) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

						if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
						{
							PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
							ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
							ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, false);
							VEHICLE::SET_VEHICLE_MOD_KIT(Vehicle, 5);
							VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
							VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);

							ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Ebox, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
						}

					}

				}

			}
			if (Menu::Option("~w~Train")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("massacro2");
				int hash2 = GAMEPLAY::GET_HASH_KEY("freight");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Object, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "sm");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}
			if (Menu::Option("~w~Classic Car Mix")) {
				uint Me = PLAYER::PLAYER_PED_ID();
				Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Vector3 null; null.x = 0, null.y = 0; null.z = 0;
				Vector3 a; a.x = 0, a.y = 0, a.z = 0;
				Vector3 b; b.x = 0, b.y = 0, b.z = 0;
				int hash = GAMEPLAY::GET_HASH_KEY("ztype");
				int hash2 = GAMEPLAY::GET_HASH_KEY("btype");
				STREAMING::REQUEST_MODEL(hash);
				STREAMING::REQUEST_MODEL(hash2);
				if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
				{
					int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
					{
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
						PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
						ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
						VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
						VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle, "Ephesys");
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Ephesys");
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
						ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);

					}

				}

			}

			if (Menu::Option("~w~Cup Car")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SURANO", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("PROP_CUP_SAUCER_01", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.4f, -0.5f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Fly UFO")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("HYDRA", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("p_spinning_anus_s", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.4f, -0.5f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Poop Car")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SURANO", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("prop_ld_toilet_01", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Coyote on Crack")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SPEEDO2", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("a_c_coyote", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Shark on Crack")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SPEEDO2", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("a_c_sharktiger", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Bumper Cart")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SURANO", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("PROP_BUMPER_CAR_01", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Sofa Car")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SURANO", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("PROP_YACHT_SEAT_01", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Roller Car")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SURANO", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("prop_roller_car_02", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Deer on Crack")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SPEEDO2", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("a_c_deer", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}
			if (Menu::Option("~w~Cow on Crack")) {
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("SPEEDO2", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_VISIBLE(zentorno, false, false);
				ENTITY::SET_ENTITY_ALPHA(zentorno, 0.0f, 1);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(zentorno, 1);
				Object model = SpawnObject("a_c_cow", Ocoords);
				if (freezespawned) {
					ENTITY::FREEZE_ENTITY_POSITION(model, true);
				}
				DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
				AttachThingToThing(model, zentorno, -0.5f, -0.8f, -0.4f, 0.0f, 0.0f, 180.0f);
			}

		}
		break;




		case pet:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Ephesys Options");

			Menu::Break("Select Weapon");

			selectpedweapon();

			Menu::Break("Select Ped");

			if (Menu::ListVector("Select Ped & Spawn", namedPedList, namedPedListPos)) {
				Features::spawn_body2(namedPedList[namedPedListPos]);
			};

			//Menu::Toggle("~w~Polo Dance", Features::polficl, [] { Features::ficklpol(Features::polficl); });

			if (Menu::Option("~w~Polo Dance")) {

				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped *peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					RequestControlOfEnt(peds[OffsetID]);
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
						if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
						{
							AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
						}
					}
				}

			}

		}
		break;

		case paint:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Paint Menu");
			if (Menu::Option("~w~Random")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, rand() % 255, rand() % 255, rand() % 255);
				if (VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(veh))
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, rand() % 255, rand() % 255, rand() % 255);
			}
			if (Menu::Option("~w~Chrome")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_COLOURS(veh, 120, 120);
			}
			if (Menu::Option("~w~Black")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 0, 0);
			}
			if (Menu::Option("~w~White")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 255, 255);
			}
			if (Menu::Option("~w~Red")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 0, 0);
			}
			if (Menu::Option("~w~Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 0);
			}
			if (Menu::Option("~w~Blue")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 0, 255);
			}
			if (Menu::Option("~w~Orange")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 128, 0);
			}
			if (Menu::Option("~w~Yellow")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 255, 0);
			}
			if (Menu::Option("~w~Purple")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 204, 0, 204);
			}
			if (Menu::Option("~w~Grey")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 96, 96, 96);
			}
			if (Menu::Option("~w~Brown")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 165, 42, 42);
			}
			if (Menu::Option("~w~Pink")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 51, 255);
			}
			if (Menu::Option("~w~Cool Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 196);
			}
			if (Menu::Option("~w~Hot Pink")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 0, 145);
			}
			if (Menu::Option("~w~Lime")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 128, 255, 0);
			}
			if (Menu::Option("~w~Lava Red")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 255, 60, 0);
			}
			if (Menu::Option("~w~Mint Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 255, 119);
			}
			if (Menu::Option("~w~Neon Green")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 187, 255, 0);
			}
		}
		break;

		case lsc:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~LSC Customs");
			Menu::MenuOption("~w~Paint Menu ~w~>", paint);
			//Menu::MenuOption("~w~Brakes Menu ~w~>", brake);
			if (Menu::Option("~w~Custom Plate")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, CharKeyboard());
			}



		}
		break;

		case brake:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Brake Menu");
			if (Menu::Option("~w~Brake Menu")) {

				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
				VEHICLE::SET_VEHICLE_MOD(veh, 12, -1, true);

			}
		}
		break;
		case anothm:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Another Modells");
			if (Menu::Option("~w~Big Foot")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("cs_orleans");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(playerPed, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(createdPED, my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(createdPED, my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}
			if (Menu::Option("~w~CIA")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_M_CIASec_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_SMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(playerPed, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(createdPED, my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(createdPED, my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}
			if (Menu::Option("~w~Swat ")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_SMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(playerPed, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(createdPED, my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(createdPED, my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}
			if (Menu::Option("~w~Sniper")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_MARKSMANRIFLE");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(playerPed, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(createdPED, my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(createdPED, my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}
			if (Menu::Option("~w~Police")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Hash stripper = GAMEPLAY::GET_HASH_KEY("S_M_Y_Swat_01");
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_SMG");
				STREAMING::REQUEST_MODEL(stripper);
				while (!STREAMING::HAS_MODEL_LOADED(stripper))
					WAIT(0);

				int createdPED = PED::CREATE_PED(26, stripper, pos.x, pos.y, pos.z, 1, 1, 0);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(playerPed, my_group);
				PED::SET_PED_AS_GROUP_MEMBER(createdPED, my_group);
				PED::SET_PED_NEVER_LEAVES_GROUP(createdPED, my_group);
				ENTITY::SET_ENTITY_INVINCIBLE(createdPED, false);
				PED::SET_PED_COMBAT_ABILITY(createdPED, 100);
				WEAPON::GIVE_WEAPON_TO_PED(createdPED, railgun, railgun, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdPED, true);
			}
			if (Menu::Option("~w~Striper2")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				char *anim = "mini@strip_club@lap_dance_2g@ld_2g_p2";
				char *animID = "ld_2g_p2_s2";

				int clone = PED::CLONE_PED(playerPed, pos.x, pos.y, pos.z);
				ENTITY::SET_ENTITY_INVINCIBLE(clone, false);

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(clone, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
			if (Menu::Option("~w~Medical")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Hash fireworkl = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREWORK");
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				char *anim = "rcmcollect_paperleadinout@";
				char *animID = "meditiate_idle";

				int clone = PED::CLONE_PED(playerPed, pos.x, pos.y, pos.z);
				ENTITY::SET_ENTITY_INVINCIBLE(clone, false);
				PED::SET_PED_COMBAT_ABILITY(clone, 100);
				WEAPON::GIVE_WEAPON_TO_PED(clone, fireworkl, fireworkl, 9999, 9999);
				PED::SET_PED_CAN_SWITCH_WEAPON(clone, true);

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(clone, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
			if (Menu::Option("~w~Ninja")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				char *anim = "amb@world_human_push_ups@male@base";
				char *animID = "base";

				int clone = PED::CLONE_PED(playerPed, pos.x, pos.y, pos.z);
				ENTITY::SET_ENTITY_INVINCIBLE(clone, false);

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(clone, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
			if (Menu::Option("~w~Striper")) {
				Player player = PLAYER::PLAYER_ID();
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				char *anim = "mini@strip_club@pole_dance@pole_dance2";
				char *animID = "pd_dance_02";

				int clone = PED::CLONE_PED(playerPed, pos.x, pos.y, pos.z);
				ENTITY::SET_ENTITY_INVINCIBLE(clone, false);

				STREAMING::REQUEST_ANIM_DICT(anim);
				while (!STREAMING::HAS_ANIM_DICT_LOADED(anim))
					WAIT(0);

				AI::TASK_PLAY_ANIM(clone, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}

		}
		break;

		case level1:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 1-500");
			if (Menu::Option("Rank 25")) {
				Features::SetRank(25);
			}
			if (Menu::Option("Rank 50")) {
				Features::SetRank(50);
			}
			if (Menu::Option("Rank 75")) {
				Features::SetRank(75);
			}
			if (Menu::Option("Rank 100")) {
				Features::SetRank(100);
			}
			if (Menu::Option("Rank 125")) {
				Features::SetRank(125);
			}
			if (Menu::Option("Rank 150")) {
				Features::SetRank(150);
			}
			if (Menu::Option("Rank 175")) {
				Features::SetRank(175);
			}
			if (Menu::Option("Rank 200")) {
				Features::SetRank(200);
			}
			if (Menu::Option("Rank 225")) {
				Features::SetRank(225);
			}
			if (Menu::Option("Rank 250")) {
				Features::SetRank(250);
			}
			if (Menu::Option("Rank 275")) {
				Features::SetRank(275);
			}
			if (Menu::Option("Rank 300")) {
				Features::SetRank(300);
			}
			if (Menu::Option("Rank 325")) {
				Features::SetRank(325);
			}
			if (Menu::Option("Rank 350")) {
				Features::SetRank(350);
			}
			if (Menu::Option("Rank 375")) {
				Features::SetRank(375);
			}
			if (Menu::Option("Rank 400")) {
				Features::SetRank(400);
			}
			if (Menu::Option("Rank 425")) {
				Features::SetRank(425);
			}
			if (Menu::Option("Rank 450")) {
				Features::SetRank(450);
			}
			if (Menu::Option("Rank 475")) {
				Features::SetRank(475);
			}
			if (Menu::Option("Rank 500")) {
				Features::SetRank(500);
			}
		}
		break;
#pragma endregion
#pragma region level2
		case level2:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 500-1k");
			if (Menu::Option("Rank 525")) {
				Features::SetRank(525);
			}
			if (Menu::Option("Rank 550")) {
				Features::SetRank(550);
			}
			if (Menu::Option("Rank 575")) {
				Features::SetRank(575);
			}
			if (Menu::Option("Rank 600")) {
				Features::SetRank(600);
			}
			if (Menu::Option("Rank 625")) {
				Features::SetRank(625);
			}
			if (Menu::Option("Rank 650")) {
				Features::SetRank(650);
			}
			if (Menu::Option("Rank 675")) {
				Features::SetRank(675);
			}
			if (Menu::Option("Rank 700")) {
				Features::SetRank(700);
			}
			if (Menu::Option("Rank 725")) {
				Features::SetRank(725);
			}
			if (Menu::Option("Rank 750")) {
				Features::SetRank(750);
			}
			if (Menu::Option("Rank 775")) {
				Features::SetRank(775);
			}
			if (Menu::Option("Rank 800")) {
				Features::SetRank(800);
			}
			if (Menu::Option("Rank 825")) {
				Features::SetRank(825);
			}
			if (Menu::Option("Rank 850")) {
				Features::SetRank(850);
			}
			if (Menu::Option("Rank 875")) {
				Features::SetRank(875);
			}
			if (Menu::Option("Rank 900")) {
				Features::SetRank(900);
			}
			if (Menu::Option("Rank 925")) {
				Features::SetRank(925);
			}
			if (Menu::Option("Rank 950")) {
				Features::SetRank(950);
			}
			if (Menu::Option("Rank 975")) {
				Features::SetRank(975);
			}
			if (Menu::Option("Rank 1,000")) {
				Features::SetRank(1000);
			}
		}
		break;
#pragma endregion
#pragma region level3
		case level3:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 1k-2k");
			if (Menu::Option("Rank 1,100")) {
				Features::SetRank(1100);
			}
			if (Menu::Option("Rank 1,200")) {
				Features::SetRank(1200);
			}
			if (Menu::Option("Rank 1,300")) {
				Features::SetRank(1300);
			}
			if (Menu::Option("Rank 1,400")) {
				Features::SetRank(1400);
			}
			if (Menu::Option("Rank 1,500")) {
				Features::SetRank(1500);
			}
			if (Menu::Option("Rank 1,600")) {
				Features::SetRank(1600);
			}
			if (Menu::Option("Rank 1,700")) {
				Features::SetRank(1700);
			}
			if (Menu::Option("Rank 1,800")) {
				Features::SetRank(1800);
			}
			if (Menu::Option("Rank 1,900")) {
				Features::SetRank(1900);
			}
			if (Menu::Option("Rank 2,000")) {
				Features::SetRank(2000);
			}
		}
		break;
#pragma endregion
#pragma region level3
		case level4:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 2k-3k");
			if (Menu::Option("Rank 2,100")) {
				Features::SetRank(2100);
			}
			if (Menu::Option("Rank 2,200")) {
				Features::SetRank(2200);
			}
			if (Menu::Option("Rank 2,300")) {
				Features::SetRank(2300);
			}
			if (Menu::Option("Rank 2,400")) {
				Features::SetRank(2400);
			}
			if (Menu::Option("Rank 2,500")) {
				Features::SetRank(2500);
			}
			if (Menu::Option("Rank 2,600")) {
				Features::SetRank(2600);
			}
			if (Menu::Option("Rank 2,700")) {
				Features::SetRank(2700);
			}
			if (Menu::Option("Rank 2,800")) {
				Features::SetRank(1800);
			}
			if (Menu::Option("Rank 2,900")) {
				Features::SetRank(1900);
			}
			if (Menu::Option("Rank 3,000")) {
				Features::SetRank(3000);
			}
		}
		break;
#pragma endregion
#pragma region level3
		case level5:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 3k-6k");
			if (Menu::Option("Rank 3,100")) {
				Features::SetRank(3100);
			}
			if (Menu::Option("Rank 3,200")) {
				Features::SetRank(3200);
			}
			if (Menu::Option("Rank 3,300")) {
				Features::SetRank(3300);
			}
			if (Menu::Option("Rank 3,400")) {
				Features::SetRank(3400);
			}
			if (Menu::Option("Rank 3,500")) {
				Features::SetRank(3500);
			}
			if (Menu::Option("Rank 3,600")) {
				Features::SetRank(3600);
			}
			if (Menu::Option("Rank 3,700")) {
				Features::SetRank(3700);
			}
			if (Menu::Option("Rank 3,800")) {
				Features::SetRank(3800);
			}
			if (Menu::Option("Rank 3,900")) {
				Features::SetRank(3900);
			}
			if (Menu::Option("Rank 4,000")) {
				Features::SetRank(4000);
			}
			if (Menu::Option("Rank 4,100")) {
				Features::SetRank(4100);
			}
			if (Menu::Option("Rank 4,200")) {
				Features::SetRank(4200);
			}
			if (Menu::Option("Rank 4,300")) {
				Features::SetRank(4300);
			}
			if (Menu::Option("Rank 4,400")) {
				Features::SetRank(4400);
			}
			if (Menu::Option("Rank 4,500")) {
				Features::SetRank(4500);
			}
			if (Menu::Option("Rank 4,600")) {
				Features::SetRank(4600);
			}
			if (Menu::Option("Rank 4,700")) {
				Features::SetRank(4700);
			}
			if (Menu::Option("Rank 4,800")) {
				Features::SetRank(4800);
			}
			if (Menu::Option("Rank 4,900")) {
				Features::SetRank(4900);
			}
			if (Menu::Option("Rank 5,000")) {
				Features::SetRank(5000);
			}
			if (Menu::Option("Rank 5,100")) {
				Features::SetRank(5100);
			}
			if (Menu::Option("Rank 5,200")) {
				Features::SetRank(5200);
			}
			if (Menu::Option("Rank 5,300")) {
				Features::SetRank(5300);
			}
			if (Menu::Option("Rank 5,400")) {
				Features::SetRank(5400);
			}
			if (Menu::Option("Rank 5,500")) {
				Features::SetRank(5500);
			}
			if (Menu::Option("Rank 5,600")) {
				Features::SetRank(5600);
			}
			if (Menu::Option("Rank 5,700")) {
				Features::SetRank(5700);
			}
			if (Menu::Option("Rank 5,800")) {
				Features::SetRank(5800);
			}
			if (Menu::Option("Rank 5,900")) {
				Features::SetRank(5900);
			}
			if (Menu::Option("Rank 6,100")) {
				Features::SetRank(6100);
			}
			if (Menu::Option("Rank 6,200")) {
				Features::SetRank(6200);
			}
			if (Menu::Option("Rank 6,300")) {
				Features::SetRank(6300);
			}
			if (Menu::Option("Rank 6,400")) {
				Features::SetRank(6400);
			}
			if (Menu::Option("Rank 6,500")) {
				Features::SetRank(6500);
			}
			if (Menu::Option("Rank 6,600")) {
				Features::SetRank(6600);
			}
			if (Menu::Option("Rank 6,700")) {
				Features::SetRank(6700);
			}
			if (Menu::Option("Rank 6,800")) {
				Features::SetRank(6800);
			}
			if (Menu::Option("Rank 6,900")) {
				Features::SetRank(6900);
			}
		}
		break;
#pragma endregion
#pragma region level3
		case level6:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Level 7k-8k");
			if (Menu::Option("Rank 7,100")) {
				Features::SetRank(7100);
			}
			if (Menu::Option("Rank 7,200")) {
				Features::SetRank(7200);
			}
			if (Menu::Option("Rank 7,300")) {
				Features::SetRank(7300);
			}
			if (Menu::Option("Rank 7,400")) {
				Features::SetRank(7400);
			}
			if (Menu::Option("Rank 7,500")) {
				Features::SetRank(7500);
			}
			if (Menu::Option("Rank 7,600")) {
				Features::SetRank(7600);
			}
			if (Menu::Option("Rank 7,700")) {
				Features::SetRank(7700);
			}
			if (Menu::Option("Rank 7,800")) {
				Features::SetRank(7800);
			}
			if (Menu::Option("Rank 7,900")) {
				Features::SetRank(7900);
			}
			if (Menu::Option("Rank 7,999")) {
				Features::SetRank(7999);
			}
		}
		break;
		case bodyoptionsself:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("BodyGuard Options");

			Menu::Break("Select Weapon");

			selectpedweapon();

			Menu::Break("Select Ped");

			if (Menu::ListVector("Select Ped & Spawn", namedPedList, namedPedListPos)) {
				Features::spawn_body2(namedPedList[namedPedListPos]);
			};

			if (Menu::Option("~w~Polo Dance")) {

				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped *peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					RequestControlOfEnt(peds[OffsetID]);
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
						if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
						{
							AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
						}
					}
				}

			}










		}
		break;
		case bodyoptions:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("BodyGuard Options");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			Menu::Break("Select Weapon");

			selectpedweapon();

			Menu::Break("Select Ped");

			if (Menu::ListVector("Select Ped & Spawn", namedPedList, namedPedListPos)) {
				Features::spawn_body(namedPedList[namedPedListPos]);
			};

			if (Menu::Option("~w~Polo Dance")) {

				const int ElementAmount = 10;
				const int ArrSize = ElementAmount * 2 + 2;
				Ped *peds = new Ped[ArrSize];
				peds[0] = ElementAmount;
				int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
				for (int i = 0; i < PedFound; i++)
				{
					int OffsetID = i * 2 + 2;
					RequestControlOfEnt(peds[OffsetID]);
					if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
					{
						STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
						if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
						{
							AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
						}
					}
				}

			}










		}
		break;
		case bodyoptionsall:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("BodyGuard Options All Player");
			int clone[1000];
			int gcount = 1;
			if (Menu::Option("Spawn Bodyguard to All Player")) {

				for (int i = 0; i < 32; i++)
				{
					int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
					{
						Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
						Ped playerPed = PLAYER::PLAYER_PED_ID();
						if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
						Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_RAILGUN");
						Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, 1);
						Hash pedm = GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01");
						STREAMING::REQUEST_MODEL(pedm);
						while (!STREAMING::HAS_MODEL_LOADED(pedm))
							WAIT(0);
						int my_group = PLAYER::GET_PLAYER_GROUP(iPed);
						clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
						PED::SET_PED_AS_GROUP_LEADER(iPed, my_group);
						PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
						PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
						ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
						PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
						WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
						PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
						PED::SET_GROUP_FORMATION(my_group, 3);
						PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
						gcount++;





					}
				}



			}











		}
		break;

		case trollmenu:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Troll Menu");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}
			if (Menu::Option("Buzzard Attack"))
			{
				hostilebuzzard = true; vehspawncheck = true;
				if (Hostilebuzzard(Features::Online::selectedPlayer))
				{
				}
				break;
			}
			if (Menu::Option("~w~Valkyrie Cannon")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z - 1, 38, 0.5f, true, false, 0.0f);
			}
			if (Menu::Option("~w~Airstrike Player")) {
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
				Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
				WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
				while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
					WAIT(0);
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 50.f, coords.x, coords.y, coords.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
			}

			if (Menu::Option("Explode Players Vehicle"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::EXPLODE_VEHICLE(veh, false, true);
			}





			if (Menu::Option("Launch Players Vehicle"))
			{
				Player playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(playerPed, 0);

				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 300.0);

			}

			if (Menu::Option("Lock Players Vehicle Doors"))
			{
				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 4);
				notifyMap("Vehicle Doors: ~HUD_COLOUR_RED~ Locked Players Vehicle Doors!");
			}

			if (Menu::Option("Open Players Vehicle Doors"))
			{

				Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(selectedplayer);
				VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 0);
				notifyMap("Vehicle Doors: ~HUD_COLOUR_GREEN~ Open Players Vehicle Doors!");


			}

			Menu::Toggle("Stick To Ground Players Vehicle", Features::stickToGround22[Features::Online::selectedPlayer]);




			if (Menu::Option("~w~Blame Explosion")) { // no error now
				for (int i = 0; i < 32; i++)
				{
					if (i != PLAYER::PLAYER_ID() && i != SelectedClient)
					{
						Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), true);
						FIRE::ADD_OWNED_EXPLOSION(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(selectedPlayer), Pos.x, Pos.y, Pos.z, 29, 0.5f, true, false, 5.0f);
					}
				}
				notifyMap("Player ~r~exploded ~w~the Lobby!");
			}



			Menu::Toggle("~w~Stop Players Vehicle", Features::Stoppl[Features::Online::selectedPlayer], [] {Features::stoppl(Features::Stoppl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Force Explosion Waves", Features::forceexplodewave, [] { Features::ForceExplodeWavePED(Features::forceexplodewave); });
			if(Menu::Option("Clone Players Vehicle"))
			{

				Features::CloneVehicle();
			}*/

			if (Menu::Option("Attach Peds to Player"))
			{
				AttachNearbyPedsToPlayer(Features::Online::selectedPlayer);
			}

			if (Menu::Option("Send Player Police Attackers"))
			{
				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_cop_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("POLICE3");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);
			}

			if (Menu::Option("Send Swat Attackers"))
			{
				Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(iPed, 0);
				if (!ENTITY::DOES_ENTITY_EXIST(iPed)) return;
				Hash guysex = GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01");
				STREAMING::REQUEST_MODEL(guysex);
				while (!STREAMING::HAS_MODEL_LOADED(guysex))
					WAIT(0);
				int createdGuySex = PED::CREATE_PED(26, guysex, pCoords.x, pCoords.y, pCoords.z, 1, 1, 0);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				int vehmodel = GAMEPLAY::GET_HASH_KEY("RIOT");
				STREAMING::REQUEST_MODEL(vehmodel);
				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x, pCoords.y, pCoords.z, 0.0, 1, 1);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				Hash railgun = GAMEPLAY::GET_HASH_KEY("WEAPON_BULLPUPSHOTGUN");
				WEAPON::GIVE_WEAPON_TO_PED(createdGuySex, railgun, railgun, 9999, 9999);
				PED::SET_PED_INTO_VEHICLE(createdGuySex, veh, -1);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(createdGuySex, false);
				PED::SET_PED_COMBAT_ABILITY(createdGuySex, 100);
				PED::SET_PED_CAN_SWITCH_WEAPON(createdGuySex, true);
				AI::TASK_COMBAT_PED(createdGuySex, iPed, 1, 1);
				PED::SET_PED_AS_ENEMY(createdGuySex, 1);
				PED::SET_PED_COMBAT_RANGE(createdGuySex, 1000);
				PED::SET_PED_KEEP_TASK(createdGuySex, true);
				PED::SET_PED_AS_COP(createdGuySex, 1000);
				PED::SET_PED_ALERTNESS(createdGuySex, 1000);
			}

			if (Menu::Option("Join Players Crew"))
			{
				int clanId;
				int desc;
				NETWORK::NETWORK_CLAN_PLAYER_GET_DESC(&desc, 35, &clanId);
				if (NETWORK::NETWORK_CLAN_JOIN(clanId));
			}

			if (Menu::Option("Semi God"))
			{
				Hash oball = GAMEPLAY::GET_HASH_KEY("prop_juicestand");
				STREAMING::REQUEST_MODEL(oball);
				while (!STREAMING::HAS_MODEL_LOADED(oball))
					WAIT(0);
				int orangeball = OBJECT::CREATE_OBJECT(oball, 0, 0, 0, true, 1, 0);
				RequestControlOfEnt(orangeball);
				ENTITY::SET_ENTITY_VISIBLE(orangeball, 0, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(orangeball, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
			}

			Menu::Toggle("~w~Force Field Player", Features::fielfick[Features::Online::selectedPlayer], [] {Features::hhforcefield(Features::fielfick[Features::Online::selectedPlayer]); });

			Menu::Toggle("~w~Meteor Rain", Features::metior_rain[Features::Online::selectedPlayer], [] {Features::rain_metior(Features::metior_rain[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Crash Player Large", Features::cargop[Features::Online::selectedPlayer], [] {Features::cargoP(Features::cargop[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Crash Player (Cloned Ped)", Features::loopfick[Features::Online::selectedPlayer], [] {Features::fickloop(Features::loopfick[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Crash Player", Features::playercrash1[Features::Online::selectedPlayer], [] {Features::CrashPlayer(Features::playercrash1[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Crash Player", Features::astrain[Features::Online::selectedPlayer], [] {Features::astraom(Features::astrain[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Water Loop", Features::playerwaterloop[Features::Online::selectedPlayer], [] { Features::WaterLoop(Features::playerwaterloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Fire Loop", Features::playerfireloop[Features::Online::selectedPlayer], [] { Features::FireLoop(Features::playerfireloop[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Freeze", Features::freezed[Features::Online::selectedPlayer], [] { Features::Freezer(Features::freezed[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Lock Doors from Player", Features::closedoors[Features::Online::selectedPlayer], [] { Features::doorsclose(Features::closedoors[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Engine Allways On", Features::enginealwaysonboolpl[Features::Online::selectedPlayer], [] { Features::enginealwaysonpl(Features::enginealwaysonboolpl[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Shake Cam", Features::camshaker[Features::Online::selectedPlayer], [] { Features::shakecam(Features::camshaker[Features::Online::selectedPlayer]); });
			Menu::Toggle("~w~Explosion Loop", Features::exploder[Features::Online::selectedPlayer], [] { Features::explodeloop(Features::exploder[Features::Online::selectedPlayer]); });
			if (Menu::Option("~w~Explode him")) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 1000.f);
			}

			if (Menu::Option("~w~Cage Player in Stunt Object")) {
				Features::trapstunt(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}
			if (Menu::Option("~w~Host Kick (Only Host)")) {

				if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)))
				{
					if (PLAYER::PLAYER_PED_ID() == NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0))
						NETWORK::NETWORK_SESSION_KICK_PLAYER(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
					else
						notifyMap("~r~You are not the host!");
					return;
				}

			}
			if (Menu::Option("~w~Kick him out of Car")) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				RequestControlOfEnt(playerPed);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(playerPed);
				AI::CLEAR_PED_TASKS(playerPed);
				AI::CLEAR_PED_SECONDARY_TASK(playerPed);
			}

			if (Menu::Option("~w~Give Player Docker"))
			{
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("DUNE2", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_INVINCIBLE(zentorno, 0);
			}
			if (Menu::Option("~w~Ram Player")) {



				float offset;
				Hash vehmodel = GAMEPLAY::GET_HASH_KEY("SANDKING");
				STREAMING::REQUEST_MODEL(vehmodel);

				while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
				Vector3 pCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0.0, -10.0, 0.0);

				if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
				{
					Vector3 dim1, dim2;
					GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

					offset = dim2.y * 1.6;

					Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
					float rot = (ENTITY::GET_ENTITY_ROTATION(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0)).z;

					Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), pCoords.z, rot, 1, 1);

					VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
					ENTITY::SET_ENTITY_VISIBLE(veh, true, false);
					VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 700.0);
				}

			}
			if (Menu::Option("~w~Slingshot Car")) {
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true));
				if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true)));
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true), 1, 0, 0, 20, 0, 0, 0, 1, false, true, true, true, true);
				}
			}
			if (Menu::Option("~w~Clone Player"))
			{

				PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1, 1);
			}
			if (Menu::Option("~w~Attach")) {
				if (player != PLAYER::PLAYER_PED_ID())
				{
					ENTITY::ATTACH_ENTITY_TO_ENTITY(PLAYER::PLAYER_PED_ID(), PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, true, true, false, true, 2, true);
				}
			}
			if (Menu::Option("~w~Detach")) { // ?????
				ENTITY::DETACH_ENTITY(PLAYER::PLAYER_PED_ID(), true, true);
			}
			if (Menu::Option("~w~Cage Player")) {
				Features::trapcage(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}

			if (Menu::Option("~w~Cage Player in Cable Car")) {
				Features::trapcagecable(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
			}
			if (Menu::Option("Glitch Player")) {
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true));
				if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true)));
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true), 1, 0, 0, 20, 0, 0, 0, 1, false, true, true, true, true);
				}
			}
		}
		break;

		//wait getting more stuff


		case unlockalls:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Recovery Charakter 1");



			if (Menu::Option("~w~Clear Reports")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Clear Reports Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}

			if (Menu::Option("~w~Unlock Office Money")) { // look i have globals off radar

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_BUY_COMPLETE"), 1223, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_BUY_UNDERTAKEN"), 1223, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_SELL_COMPLETE"), 434, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_SELL_UNDERTAKEN"), 434, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_CONTRA_EARNINGS"), 1220000000, 0);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Office Money Unlocked!");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Full Recovery")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), Features::Levels[120], 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_12"), -1, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_FOUND"), 50, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINALLRACEMODES"), 1, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_20_KILLS_MELEE"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Full Recovery Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Clear Badsport Stats")) {

				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MPPLY_OVERALL_BADSPORT"), 0.0f, TRUE);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_DESTROYED_PVEHICLES"), 0, TRUE);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_BADSPORT_MESSAGE"), 0, TRUE);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Clear Report Stats Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Snacks")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_YUM_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_HEALTH_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_EPIC_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_OF_ORANGE_BOUGHT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CIGARETTES_BOUGHT"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Snacks");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Armor")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_1_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_2_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_3_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_4_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_5_COUNT"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Armor");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Fireworks")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_BLUE"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Fireworks");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Set Max Skill")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_stam"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_strn"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_lung"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_driv"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_fly"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_sho"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_script_increase_stl"), 100, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Set Max Skills Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Tattoos")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_tattoo_fm_unlocks_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Tattoos Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);


			}
			if (Menu::Option("~w~Unlock Weapon Skins")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV _ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MOLOTOV_ENEMY_KILLS"), 600, 0);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock Weapon Skins Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Purchase Clothing")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Purchasing All Clothing Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock LSC")) {

				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_FOUND"), 50, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINALLRACEMODES"), 1, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_GRENADE_ENEMY_KILLS "), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_20_KILLS_MELEE"), 50, 0);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock LSC Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Heist Vehicles")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All heists Vehicle");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Camos and Parachutes")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_1_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_2_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_3_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_4_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_5_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_6_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_7_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_8_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_9_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_10_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_11_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_12_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Camos and Parachutes Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Chrome Rims")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_CAPTURES"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_DROPOFF_CAP_PACKAGES"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_CARRIER_CAPTURE"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEISTS"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEIST_SETUP_JOB"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_LAST_TEAM_STANDINGS"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_ONLY_PLAYER_ALIVE_LTS"), 50, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Chrome Rims Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock Exclusive T-Shirts")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 10, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_CAPTURE_DONT_DYING"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_DO_HEIST_AS_MEMBER"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_PICKUP_CAP_PACKAGES"), 100, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEIST_NO_DAMAGE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_GOLD_MEDAL_HEISTS"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_TEAM_YOURSELF_LTS"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_PSYCHOPATHS"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_DO_HEIST_AS_THE_LEADER"), 25, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_AWD_STORE_20_CAR_IN_GARAGES"), 1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock Exclusive T-Shirts Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Vehicle Mods (LSC)")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_2_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_3_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_4_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_5_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_6_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_7_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRALLYWONDRIVE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRALLYWONNAV"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINSEARACE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINAIRRACE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_TURBO_STARTS_IN_RACE"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_RACES_FASTEST_LAP"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 100, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Vehicle Mods Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Redesign Character Prompt")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_FM_CHANGECHAR_ASKED"), 0, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Redesign Character Prompt Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Skip Tutorial")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_NO_MORE_TUTORIALS"), 1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Skip Tutorial Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Heist' Trophies")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_HEIST_ACH_TRACKER"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Heists Trophies Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Hairstyles")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Hairstyles Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Purchase All Weapons")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ADMIN_WEAPON_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BOTTLE_IN_POSSESSION"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_WEAP_FM_PURCHASE"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_WEAP_FM_ADDON_PURCH5"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Purchase All Weapons Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}	}
		break;
		case unlockalls1:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Recovery Charakter 2");



			if (Menu::Option("~w~Clear Reports")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, true);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, true);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_BADSPORT_RESET_MINUTES"), 1.0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, 1);
				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OVERALL_BADSPORT"), 0, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_CHAR_IS_BADSPORT"), false, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BAD_SPORT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHEAT_BITSET"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_REPORT_STRENGTH"), 32, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_COMMEND_STRENGTH"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_FRIENDLY"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_HELPFUL"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GRIEFING"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_OFFENSIVE_UGC"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_VC_HATE"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_GAME_EXPLOITS"), 0, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_ISPUNISHED"), 0, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Clear Reports Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock Office Money")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_BUY_COMPLETE"), 1223, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_BUY_UNDERTAKEN"), 1223, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_SELL_COMPLETE"), 434, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_SELL_UNDERTAKEN"), 434, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_LIFETIME_CONTRA_EARNINGS"), 1220000000, 0);

				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Office Money Unlocked!");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Full Recovery")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_XP_FM"), Features::Levels[120], 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STAM"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STRN"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_LUNG"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_DRIV"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_FLY"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_SHO"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STL"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_12"), -1, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRACEWORLDRECHOLDER"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_USJS_FOUND"), 50, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINALLRACEMODES"), 1, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINEVERYGAMEMODE"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMATTGANGHQ"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMFULLYMODDEDCAR"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_20_KILLS_MELEE"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Full Recovery Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Clear Badsport Stats")) {

				Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MPPLY_OVERALL_BADSPORT"), 0.0f, TRUE);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_DESTROYED_PVEHICLES"), 0, TRUE);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_BADSPORT_MESSAGE"), 0, TRUE);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Clear Report Stats Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Snacks")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_YUM_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_HEALTH_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_EPIC_SNACKS"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_OF_ORANGE_BOUGHT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CIGARETTES_BOUGHT"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Snacks");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Armor")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_1_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_2_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_3_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_4_COUNT"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_5_COUNT"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Armor");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~2 Billion Fireworks")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_BLUE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_WHITE"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_RED"), 2000000000, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_BLUE"), 2000000000, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~2 Billion Fireworks");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Set Max Skill")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STAM"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STRN"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_LUNG"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_DRIV"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_FLY"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_SHO"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STL"), 100, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_stam"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_strn"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_lung"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_driv"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_fly"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_sho"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_script_increase_stl"), 100, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Set Max Skills Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Tattoos")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_tattoo_fm_unlocks_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Tattoos Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);


			}
			if (Menu::Option("~w~Unlock Weapon Skins")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV _ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CMBTPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PISTOL50_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_APPISTOL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MICROSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CRBNRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADVRIFLE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CMBTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTMG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PUMP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SAWNOFF_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BULLPUP_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ASLTSHTGN_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SNIPERRFL_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_HVYSNIPER_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRNLAUNCH_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_RPG_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MINIGUNS_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_SMKGRENADE_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_STKYBMB_ENEMY_KILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MOLOTOV_ENEMY_KILLS"), 600, 0);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock Weapon Skins Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Purchase Clothing")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_FEET_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_BERD_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TORSO"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_DECL"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_0"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_14"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_15"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_16"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_17"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_18"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_19"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_21"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_22"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_23"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_25"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_26"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_27"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_28"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_29"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_30"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_31"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_32"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_33"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_34"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_35"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_36"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_37"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_38"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_39"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DLC_APPAREL_ACQUIRED_40"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Purchasing All Clothing Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock LSC")) {

				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRACEWORLDRECHOLDER"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_ENEMYDRIVEBYKILLS"), 600, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_USJS_COMPLETED"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_USJS_FOUND"), 50, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINALLRACEMODES"), 1, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINEVERYGAMEMODE"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_DB_PLAYER_KILLS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_KILLS_PLAYERS"), 1000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMHORDWAVESSURVIVE"), 21, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_MVP"), 60, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_HOLD_UP_SHOPS"), 20, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_NO_ARMWRESTLING_WINS"), 21, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMATTGANGHQ"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMBBETWIN"), 50000, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 51, 0);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMFULLYMODDEDCAR"), 1, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_TOTALKILLS"), 500, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_DM_TOTAL_DEATHS"), 412, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TIMES_FINISH_DM_TOP_3"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_PLAYER_HEADSHOTS"), 623, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_WINS"), 13, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GTA_RACES_WON"), 12, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_GOLF_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_TG_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_RT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_CT_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_SHOOTRANG_GRAN_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TENNIS_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TENNIS_MATCHES_WON"), 2, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_TDEATHMATCH_WON"), 63, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_WON"), 101, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_DEATHMATCH_LOST"), 23, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_MPPLY_TOTAL_RACES_LOST"), 36, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_25_KILLS_STICKYBOMBS"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_50_KILLS_GRENADES"), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_GRENADE_ENEMY_KILLS "), 50, 0);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_20_KILLS_MELEE"), 50, 0);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock LSC Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Heist Vehicles")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_VEHICLE_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_VEHICLE_2_UNLCK"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All heists Vehicle");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Camos and Parachutes")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_1_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_2_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_3_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_4_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_5_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_6_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_7_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_8_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_9_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_10_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_11_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_12_FM_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE7"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE8"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE9"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE10"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE11"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE12"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Camos and Parachutes Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Chrome Rims")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_CAPTURES"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_DROPOFF_CAP_PACKAGES"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_CARRIER_CAPTURE"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEISTS"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEIST_SETUP_JOB"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_LAST_TEAM_STANDINGS"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_ONLY_PLAYER_ALIVE_LTS"), 50, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Chrome Rims Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock Exclusive T-Shirts")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMHORDWAVESSURVIVE"), 10, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMPICKUPDLCCRATE1ST"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_CAPTURE_DONT_DYING"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_DO_HEIST_AS_MEMBER"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_PICKUP_CAP_PACKAGES"), 100, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEIST_NO_DAMAGE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_GOLD_MEDAL_HEISTS"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_TEAM_YOURSELF_LTS"), 25, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_PSYCHOPATHS"), 100, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_DO_HEIST_AS_THE_LEADER"), 25, 1);
				Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP1_AWD_STORE_20_CAR_IN_GARAGES"), 1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock Exclusive T-Shirts Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Vehicle Mods (LSC)")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_2_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_3_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_4_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_5_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_6_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_7_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRALLYWONDRIVE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRALLYWONNAV"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINSEARACE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINAIRRACE"), 1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_TURBO_STARTS_IN_RACE"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_USJS_COMPLETED"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_RACES_FASTEST_LAP"), 50, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_SLIPSTREAMS_IN_RACE"), 100, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Vehicle Mods Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Redesign Character Prompt")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_FM_CHANGECHAR_ASKED"), 0, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Redesign Character Prompt Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Skip Tutorial")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_NO_MORE_TUTORIALS"), 1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Skip Tutorial Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Heist' Trophies")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_HEIST_ACH_TRACKER"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Heists Trophies Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Unlock All Hairstyles")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Unlock All Hairstyles Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Purchase All Weapons")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_WEAPON_GV_BS_1"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_WEAPON_GV_BS_2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ADMIN_WEAPON_GV_BS_3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_BOTTLE_IN_POSSESSION"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_WEAP_FM_PURCHASE"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_WEAP_FM_ADDON_PURCH"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_WEAP_FM_ADDON_PURCH2"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_WEAP_FM_ADDON_PURCH3"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_WEAP_FM_ADDON_PURCH4"), -1, 1);
				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_WEAP_FM_ADDON_PURCH5"), -1, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Purchase All Weapons Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}
			if (Menu::Option("~w~Enable Roosevelt in Phone")) {

				Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_VEHICLE_ID_ADMIN_WEB"), 117401876, 1);
				UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
				UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Enable Roosevelt in Phone Done");
				UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);

				UI::_DRAW_NOTIFICATION(FALSE, FALSE);

			}	}
		break;
		case cocplll:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Outfit Changer for other Player");
			//Menu::Title("Outfit Creator");
			Menu::Drawing::Spriter("shopui_title_highendfashion", "shopui_title_highendfashion", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));
			Menu::Int("Outfit Slot", selectedOutfit, 0, 100);
			if (Menu::Option("Save")) {
				SaveOutfit();
			}
			if (Menu::Option("Load")) {
				LoadOutfit(); Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 0, outfit1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 1, mask1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 2, mask2, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 3, shirt1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 11, collars1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 8, Accessories1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 4, pants1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 5, hands1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 6, shoes1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 9, mission1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 10, decals1, 0, 0);
			}
			if (Menu::Int("Face", outfit1, 0, 11)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 0, outfit1, 0, -1);
			}
			if (Menu::Int("Mask", mask1, 0, 132)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 1, mask1, 0, -1);
			}
			if (Menu::Int("Hair", mask2, 0, 73)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 2, mask2, 0, -1);
			}
			if (Menu::Int("Gloves", shirt1, 0, 164)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 3, shirt1, 0, -1);
			}
			if (Menu::Int("Top", collars1, 0, 254)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 11, collars1, 0, -1);
			}
			if (Menu::Int("Collar", Accessories1, 0, 131)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 8, Accessories1, 0, -1);
			}
			if (Menu::Int("Pants", pants1, 0, 99)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 4, pants1, 0, -1);
			}
			if (Menu::Int("Accessories", hands1, 0, 69)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 5, hands1, 0, -1);
			}
			if (Menu::Int("Shoes", shoes1, 0, 79)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 6, shoes1, 0, -1);
			}
			if (Menu::Int("Mission Stuff", mission1, 0, 29)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 9, mission1, 0, -1);
			}
			if (Menu::Int("Decals", decals1, 0, 28)) {
				Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 10, decals1, 0, -1);
			}
		}
		break;
		case coc:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Outfit Changer");
			Menu::Title("Outfit Creator");
			Menu::Drawing::Spriter("shopui_title_highendfashion", "shopui_title_highendfashion", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Int("Outfit Slot", selectedOutfit, 0, 100);
			if (Menu::Option("Save")) {
				SaveOutfit();
			}
			if (Menu::Option("Load")) {
				LoadOutfit(); Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 0, outfit1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 1, mask1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 2, mask2, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 3, shirt1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 11, collars1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 8, Accessories1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 4, pants1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 5, hands1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 6, shoes1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 9, mission1, 0, 0);
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 10, decals1, 0, 0);
			}
			if (Menu::Int("Face", outfit1, 0, 11)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 0, outfit1, 0, 0);
			}
			if (Menu::Int("Mask", mask1, 0, 132)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 1, mask1, 0, 0);
			}
			if (Menu::Int("Hair", mask2, 0, 73)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 2, mask2, 0, 0);
			}
			if (Menu::Int("Gloves", shirt1, 0, 164)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 3, shirt1, 0, 0);
			}
			if (Menu::Int("Top", collars1, 0, 254)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 11, collars1, 0, 0);
			}
			if (Menu::Int("Collar", Accessories1, 0, 131)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 8, Accessories1, 0, 0);
			}
			if (Menu::Int("Pants", pants1, 0, 99)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 4, pants1, 0, 0);
			}
			if (Menu::Int("Accessories", hands1, 0, 69)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 5, hands1, 0, 0);
			}
			if (Menu::Int("Shoes", shoes1, 0, 79)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 6, shoes1, 0, 0);
			}
			if (Menu::Int("Mission Stuff", mission1, 0, 29)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 9, mission1, 0, 0);
			}
			if (Menu::Int("Decals", decals1, 0, 28)) {
				Ped playerPed = PLAYER::PLAYER_PED_ID();
				PED::SET_PED_COMPONENT_VARIATION(playerPed, 10, decals1, 0, 0);
			}
		}
		break;
#pragma region LSC
		case lsc1:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("LSC");
			Menu::Drawing::Spriter("shopui_title_carmod", "shopui_title_carmod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::MenuOption("Colours Options", Colours);
			Menu::MenuOption("~w~Paint Menu ~w~>", paint);
			Menu::MenuOption("~w~Brakes Menu ~w~>", brake);
			if (Menu::Option("~w~Custom Plate")) {
				Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, CharKeyboard());
			}

			if (Menu::Option("Paint Chrome")) {
				VEHICLE::SET_VEHICLE_COLOURS(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 120, 120);
			}
			if (Menu::Option("Paint Raindom")) {
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
				if (VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID())))
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), rand() % 255, rand() % 255, rand() % 255);
			}
			if (Menu::Int("Armor", Amorr, 0, 4))
			{
				LSC(16, Amorr);
			}
			if (Menu::Int("Engine", Enginee, 0, 3))
			{
				LSC(11, Enginee);
			}
			if (Menu::Int("Break", Brake, 0, 3))
			{
				LSC(12, Brake);
			}
			if (Menu::Int("Spoiler", Spoilerr, 0, 6))
			{
				LSC(0, Spoilerr);
			}
			if (Menu::Int("Skirt", Skirtt, 0, 3))
			{
				LSC(3, Skirtt);
			}
			if (Menu::Int("Suspension", Suspensionn, 0, 3))
			{
				LSC(15, Suspensionn);
			}
			if (Menu::Int("Transmission", Transmission, 0, 3))
			{
				LSC(13, Transmission);
			}
			if (Menu::Int("Front Bumper", Bumperr, 0, 3))
			{
				LSC(1, Bumperr);
			}
			if (Menu::Int("Rear Bumper", Bumper2, 0, 3))
			{
				LSC(2, Bumper2);
			}
			if (Menu::Int("Exhaust", Exhaust, 0, 3))
			{
				LSC(4, Exhaust);
			}
			if (Menu::Int("Hood", Bonnet, 0, 3))
			{
				LSC(7, Bonnet);
			}
			if (Menu::Int("Rollcage", Rollcage, 0, 3))
			{
				LSC(5, Rollcage);
			}
			if (Menu::Int("Horn", Klaxonn, 0, 15))
			{
				LSC(14, Klaxonn);
			}

		}
		break;
#pragma endregion
		case vision:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Visions");
			ClearVisions("Set To Default", "Set To Default");
			addVisOption("Bank_HLWD", "Bank_HLWD", "Chnaged To: Bank_HLWD");
			addVisOption("Barry1_Stoned", "Barry1_Stoned", "Chnaged To: Barry1_Stoned");
			addVisOption("BarryFadeOut", "BarryFadeOut", "Chnaged To: BarryFadeOut");
			addVisOption("baseTONEMAPPING", "baseTONEMAPPING", "Chnaged To: baseTONEMAPPING");
			addVisOption("Bikers", "Bikers", "Chnaged To: Bikers");
			addVisOption("BikersSPLASH", "BikersSPLASH", "Chnaged To: BikersSPLASH");
			addVisOption("blackNwhite", "blackNwhite", "Chnaged To: blackNwhite");
			addVisOption("BlackOut", "BlackOut", "Chnaged To: BlackOut");
			addVisOption("Bloom", "Bloom", "Chnaged To: Bloom");
			addVisOption("BloomLight", "BloomLight", "Chnaged To: BloomLight");
			addVisOption("buildingTOP", "buildingTOP", "Chnaged To: buildingTOP");
			addVisOption("BulletTimeDark", "BulletTimeDark", "Chnaged To: BulletTimeDark");
			addVisOption("BulletTimeLight", "BulletTimeLight", "Chnaged To: BulletTimeLight");
			addVisOption("CAMERA_BW", "CAMERA_BW", "Chnaged To: CAMERA_BW");
			addVisOption("CAMERA_secuirity", "CAMERA_secuirity", "Chnaged To: CAMERA_secuirity");
			addVisOption("CAMERA_secuirity_FUZZ", "CAMERA_secuirity_FUZZ", "Chnaged To: CAMERA_secuirity_FUZZ");
			addVisOption("canyon_mission", "canyon_mission", "Chnaged To: canyon_mission");
			addVisOption("carMOD_underpass", "carMOD_underpass", "Chnaged To: carMOD_underpass");
			addVisOption("carpark", "carpark", "Chnaged To: carpark");
			addVisOption("carpark_dt1_02", "carpark_dt1_02", "Chnaged To: carpark_dt1_02");
			addVisOption("carpark_dt1_03", "carpark_dt1_03", "Chnaged To: carpark_dt1_03");
			addVisOption("cashdepot", "cashdepot", "Chnaged To: cashdepot");
			addVisOption("cashdepotEMERGENCY", "cashdepotEMERGENCY", "Chnaged To: cashdepotEMERGENCY");
			addVisOption("cBank_back", "cBank_back", "Chnaged To: cBank_back");
			addVisOption("cBank_front", "cBank_front", "Chnaged To: cBank_front");
			addVisOption("ch2_tunnel_whitelight", "ch2_tunnel_whitelight", "Chnaged To: ch2_tunnel_whitelight");
			addVisOption("CH3_06_water", "CH3_06_water", "Chnaged To: CH3_06_water");
			addVisOption("CHOP", "CHOP", "Chnaged To: CHOP");
			addVisOption("cinema", "cinema", "Chnaged To: cinema");
			addVisOption("cinema_001", "cinema_001", "Chnaged To: cinema_001");
			addVisOption("cops", "cops", "Chnaged To: cops");
			addVisOption("CopsSPLASH", "CopsSPLASH", "Chnaged To: CopsSPLASH");
			addVisOption("crane_cam", "crane_cam", "Chnaged To: crane_cam");
			addVisOption("crane_cam_cinematic", "crane_cam_cinematic", "Chnaged To: crane_cam_cinematic");
			addVisOption("CS1_railwayB_tunnel", "CS1_railwayB_tunnel", "Chnaged To: CS1_railwayB_tunnel");
			addVisOption("CS3_rail_tunnel", "CS3_rail_tunnel", "Chnaged To: CS3_rail_tunnel");
			addVisOption("CUSTOM_streetlight", "custreetlight", "Chnaged To: CUSTOM_streetlight");
			addVisOption("damage", "damage", "Chnaged To: damage");
			addVisOption("death", "death", "Chnaged To: death");
			addVisOption("DEFAULT", "DEFAULT", "Chnaged To: DEFAULT");
			addVisOption("DefaultColorCode", "DefaultColorCode", "Chnaged To: DefaultColorCode");
			addVisOption("DONT_overide_sunpos", "DONT_overide_sunpos", "Chnaged To: DONT_overide_sunpos");
			addVisOption("Dont_tazeme_bro", "Dont_tazeme_bro", "Chnaged To: Dont_tazeme_bro");
			addVisOption("dont_tazeme_bro_b", "dont_tazeme_bro_b", "Chnaged To: dont_tazeme_bro_b");
			addVisOption("downtown_FIB_cascades_opt", "downtown_FIB_cascades_opt", "Chnaged To: downtown_FIB_cascades_opt");
			addVisOption("DrivingFocusDark", "DrivingFocusDark", "Chnaged To: DrivingFocusDark");
			addVisOption("DrivingFocusLight", "DrivingFocusLight", "Chnaged To: DrivingFocusLight");
			addVisOption("DRUG_2_drive", "DRUG_2_drive", "Chnaged To: DRUG_2_drive");
			addVisOption("Drug_deadman", "Drug_deadman", "Chnaged To: Drug_deadman");
			addVisOption("Drug_deadman_blend", "Drug_deadman_blend", "Chnaged To: Drug_deadman_blend");
			addVisOption("drug_drive_blend01", "drug_drive_blend01", "Chnaged To: drug_drive_blend01");
			addVisOption("drug_drive_blend02", "drug_drive_blend02", "Chnaged To: drug_drive_blend02");
			addVisOption("drug_flying_01", "drug_flying_01", "Chnaged To: drug_flying_01");
			addVisOption("drug_flying_02", "drug_flying_02", "Chnaged To: drug_flying_02");
			addVisOption("drug_flying_base", "drug_flying_base", "Chnaged To: drug_flying_base");
			addVisOption("DRUG_gas_huffin", "DRUG_gas_huffin", "Chnaged To: DRUG_gas_huffin");
			addVisOption("drug_wobbly", "drug_wobbly", "Chnaged To: drug_wobbly");
			addVisOption("Drunk", "Drunk", "Chnaged To: Drunk");
			addVisOption("dying", "dying", "Chnaged To: dying");
			addVisOption("eatra_bouncelight_beach", "eatra_bouncelight_beach", "Chnaged To: eatra_bouncelight_beach");
			addVisOption("epsilion", "epsilion", "Chnaged To: epsilion");
			addVisOption("exile1_exit", "exile1_exit", "Chnaged To: exile1_exit");
			addVisOption("exile1_plane", "exile1_plane", "Chnaged To: exile1_plane");
			addVisOption("ExplosionJosh", "ExplosionJosh", "Chnaged To: ExplosionJosh");
			addVisOption("ext_int_extlight_large", "ext_int_extlight_large", "Chnaged To: ext_int_extlight_large");
			addVisOption("EXTRA_bouncelight", "EXTRA_bouncelight", "Chnaged To: EXTRA_bouncelight");
			addVisOption("eyeINtheSKY", "eyeINtheSKY", "Chnaged To: eyeINtheSKY");
			addVisOption("Facebook_NEW", "Facebook_NEW", "Chnaged To: Facebook_NEW");
			addVisOption("facebook_serveroom", "facebook_serveroom", "Chnaged To: facebook_serveroom");
			addVisOption("FIB_5", "FIB_5", "Chnaged To: FIB_5");
			addVisOption("FIB_6", "FIB_6", "Chnaged To: FIB_6");
			addVisOption("FIB_A", "FIB_A", "Chnaged To: FIB_A");
			addVisOption("FIB_B", "FIB_B", "Chnaged To: FIB_B");
			addVisOption("FIB_interview", "FIB_interview", "Chnaged To: FIB_interview");
			addVisOption("FIB_interview_optimise", "FIB_interview_optimise", "Chnaged To: FIB_interview_optimise");
			addVisOption("FinaleBank", "FinaleBank", "Chnaged To: FinaleBank");
			addVisOption("FinaleBankexit", "FinaleBankexit", "Chnaged To: FinaleBankexit");
			addVisOption("FinaleBankMid", "FinaleBankMid", "Chnaged To: FinaleBankMid");
			addVisOption("fireDEPT", "fireDEPT", "Chnaged To: fireDEPT");
			addVisOption("FORdoron_delete", "FORdoron_delete", "Chnaged To: FORdoron_delete");
			addVisOption("Forest", "Forest", "Chnaged To: Forest");
			addVisOption("FrankilinsHOUSEhills", "FrankilinsHOUSEhills", "Chnaged To: FrankilinsHOUSEhills");
			addVisOption("frankilnsAUNTS_new", "frankilnsAUNTS_new", "Chnaged To: frankilnsAUNTS_new");
			addVisOption("frankilnsAUNTS_SUNdir", "frankilnsAUNTS_SUNdir", "Chnaged To: frankilnsAUNTS_SUNdir");
			addVisOption("FRANKLIN", "FRANKLIN", "Chnaged To: FRANKLIN");
			addVisOption("FranklinColorCode", "FranklinColorCode", "Chnaged To: FranklinColorCode");
			addVisOption("FranklinColorCodeBasic", "FranklinColorCodeBasic", "Chnaged To: FranklinColorCodeBasic");
			addVisOption("FullAmbientmult_interior", "FullAmbientmult_interior", "Chnaged To: FullAmbientmult_interior");
			addVisOption("gallery_refmod", "gallery_refmod", "Chnaged To: gallery_refmod");
			addVisOption("garage", "garage", "Chnaged To: garage");
			addVisOption("gorge_reflection_gpu", "gorge_reflection_gpu", "Chnaged To: gorge_reflection_gpu");
			addVisOption("gorge_reflectionoffset", "gorge_reflectionoffset", "Chnaged To: gorge_reflectionoffset");
			addVisOption("gorge_reflectionoffset2", "gorge_reflectionoffset2", "Chnaged To: gorge_reflectionoffset2");
			addVisOption("graveyard_shootout", "graveyard_shootout", "Chnaged To: graveyard_shootout");
			addVisOption("gunclub", "gunclub", "Chnaged To: gunclub");
			addVisOption("gunclubrange", "gunclubrange", "Chnaged To: gunclubrange");
			addVisOption("gunshop", "gunshop", "Chnaged To: gunshop");
			addVisOption("gunstore", "gunstore", "Chnaged To: gunstore");
			addVisOption("half_direct", "half_direct", "Chnaged To: half_direct");
			addVisOption("hangar_lightsmod", "hangar_lightsmod", "Chnaged To: hangar_lightsmod");
			addVisOption("Hanger_INTmods", "Hanger_INTmods", "Chnaged To: Hanger_INTmods");
			addVisOption("heathaze", "heathaze", "Chnaged To: heathaze");
			addVisOption("helicamfirst", "helicamfirst", "Chnaged To: helicamfirst");
			addVisOption("Hicksbar", "Hicksbar", "Chnaged To: Hicksbar");
			addVisOption("HicksbarNEW", "HicksbarNEW", "Chnaged To: HicksbarNEW");
			addVisOption("hillstunnel", "hillstunnel", "Chnaged To: hillstunnel");
			addVisOption("Hint_cam", "Hint_cam", "Chnaged To: Hint_cam");
			addVisOption("hitped", "hitped", "Chnaged To: hitped");
			addVisOption("hud_def_blur", "hud_def_blur", "Chnaged To: hud_def_blur");
			addVisOption("hud_def_colorgrade", "hud_def_colorgrade", "Chnaged To: hud_def_colorgrade");
			addVisOption("hud_def_desat_cold", "hud_def_desat_cold", "Chnaged To: hud_def_desat_cold");
			addVisOption("hud_def_desat_cold_kill", "hud_def_desat_cold_kill", "Chnaged To: hud_def_desat_cold_kill");
			addVisOption("hud_def_desat_Franklin", "hud_def_desat_Franklin", "Chnaged To: hud_def_desat_Franklin");
			addVisOption("hud_def_desat_Michael", "hud_def_desat_Michael", "Chnaged To: hud_def_desat_Michael");
			addVisOption("hud_def_desat_Neutral", "hud_def_desat_Neutral", "Chnaged To: hud_def_desat_Neutral");
			addVisOption("hud_def_desat_switch", "hud_def_desat_switch", "Chnaged To: hud_def_desat_switch");
			addVisOption("hud_def_desat_Trevor", "hud_def_desat_Trevor", "Chnaged To: hud_def_desat_Trevor");
			addVisOption("hud_def_desatcrunch", "hud_def_desatcrunch", "Chnaged To: hud_def_desatcrunch");
			addVisOption("hud_def_flash", "hud_def_flash", "Chnaged To: hud_def_flash");
			addVisOption("hud_def_focus", "hud_def_focus", "Chnaged To: hud_def_focus");
			addVisOption("hud_def_Franklin", "hud_def_Franklin", "Chnaged To: hud_def_Franklin");
			addVisOption("hud_def_lensdistortion", "hud_def_lensdistortion", "Chnaged To: hud_def_lensdistortion");
			addVisOption("hud_def_Michael", "hud_def_Michael", "Chnaged To: hud_def_Michael");
			addVisOption("hud_def_Trevor", "hud_def_Trevor", "Chnaged To: hud_def_Trevor");
			addVisOption("id1_11_tunnel", "id1_11_tunnel", "Chnaged To: id1_11_tunnel");
			addVisOption("int_amb_mult_large", "int_amb_mult_large", "Chnaged To: int_amb_mult_large");
			addVisOption("int_Barber1", "int_Barber1", "Chnaged To: int_Barber1");
			addVisOption("int_carmod_small", "int_carmod_small", "Chnaged To: int_carmod_small");
			addVisOption("int_carshowroom", "int_carshowroom", "Chnaged To: int_carshowroom");
			addVisOption("int_chopshop", "int_chopshop", "Chnaged To: int_chopshop");
			addVisOption("int_clean_extlight_large", "int_clean_extlight_large", "Chnaged To: int_clean_extlight_large");
			addVisOption("int_clean_extlight_none", "int_clean_extlight_none", "Chnaged To: int_clean_extlight_none");
			addVisOption("int_clean_extlight_small", "int_clean_extlight_small", "Chnaged To: int_clean_extlight_small");
			addVisOption("int_ClothesHi", "int_ClothesHi", "Chnaged To: int_ClothesHi");
			addVisOption("int_clotheslow_large", "int_clotheslow_large", "Chnaged To: int_clotheslow_large");
			addVisOption("int_cluckinfactory_none", "int_cluckinfactory_none", "Chnaged To: int_cluckinfactory_none");
			addVisOption("int_cluckinfactory_small", "int_cluckinfactory_small", "Chnaged To: int_cluckinfactory_small");
			addVisOption("int_ControlTower_none", "int_ControlTower_none", "Chnaged To: int_ControlTower_none");
			addVisOption("int_ControlTower_small", "int_ControlTower_small", "Chnaged To: int_ControlTower_small");
			addVisOption("int_dockcontrol_small", "int_dockcontrol_small", "Chnaged To: int_dockcontrol_small");
			addVisOption("int_extlght_sm_cntrst", "int_extlght_sm_cntrst", "Chnaged To: int_extlght_sm_cntrst");
			addVisOption("int_extlight_large", "int_extlight_large", "Chnaged To: int_extlight_large");
			addVisOption("int_extlight_large_fog", "int_extlight_large_fog", "Chnaged To: int_extlight_large_fog");
			addVisOption("int_extlight_none", "int_extlight_none", "Chnaged To: int_extlight_none");
			addVisOption("int_extlight_none_dark", "int_extlight_none_dark", "Chnaged To: int_extlight_none_dark");
			addVisOption("int_extlight_none_dark_fog", "int_extlight_none_dark_fog", "Chnaged To: int_extlight_none_dark_fog");
			addVisOption("int_extlight_none_fog", "int_extlight_none_fog", "Chnaged To: int_extlight_none_fog");
			addVisOption("int_extlight_small", "int_extlight_small", "Chnaged To: int_extlight_small");
			addVisOption("int_extlight_small_clipped", "int_extlight_small_clipped", "Chnaged To: int_extlight_small_clipped");
			addVisOption("int_extlight_small_fog", "int_extlight_small_fog", "Chnaged To: int_extlight_small_fog");
			addVisOption("int_Farmhouse_none", "int_Farmhouse_none", "Chnaged To: int_Farmhouse_none");
			addVisOption("int_Farmhouse_small", "int_Farmhouse_small", "Chnaged To: int_Farmhouse_small");
			addVisOption("int_FranklinAunt_small", "int_FranklinAunt_small", "Chnaged To: int_FranklinAunt_small");
			addVisOption("INT_FullAmbientmult", "INT_FullAmbientmult", "Chnaged To: INT_FullAmbientmult");
			addVisOption("INT_FULLAmbientmult_art", "INT_FULLAmbientmult_art", "Chnaged To: INT_FULLAmbientmult_art");
			addVisOption("INT_FULLAmbientmult_both", "INT_FULLAmbientmult_both", "Chnaged To: INT_FULLAmbientmult_both");
			addVisOption("INT_garage", "INT_garage", "Chnaged To: INT_garage");
			addVisOption("int_GasStation", "int_GasStation", "Chnaged To: int_GasStation");
			addVisOption("int_hanger_none", "int_hanger_none", "Chnaged To: int_hanger_none");
			addVisOption("int_hanger_small", "int_hanger_small", "Chnaged To: int_hanger_small");
			addVisOption("int_Hospital2_DM", "int_Hospital2_DM", "Chnaged To: int_Hospital2_DM");
			addVisOption("int_Hospital_Blue", "int_Hospital_Blue", "Chnaged To: int_Hospital_Blue");
			addVisOption("int_Hospital_BlueB", "int_Hospital_BlueB", "Chnaged To: int_Hospital_BlueB");
			addVisOption("int_Hospital_DM", "int_Hospital_DM", "Chnaged To: int_Hospital_DM");
			addVisOption("int_lesters", "int_lesters", "Chnaged To: int_lesters");
			addVisOption("int_Lost_none", "int_Lost_none", "Chnaged To: int_Lost_none");
			addVisOption("int_Lost_small", "int_Lost_small", "Chnaged To: int_Lost_small");
			addVisOption("int_methlab_small", "int_methlab_small", "Chnaged To: int_methlab_small");
			addVisOption("int_motelroom", "int_motelroom", "Chnaged To: int_motelroom");
			addVisOption("INT_NO_fogALPHA", "INT_NO_fogALPHA", "Chnaged To: INT_NO_fogALPHA");
			addVisOption("INT_NoAmbientmult", "INT_NoAmbientmult", "Chnaged To: INT_NoAmbientmult");
			addVisOption("INT_NoAmbientmult_art", "INT_NoAmbientmult_art", "Chnaged To: INT_NoAmbientmult_art");
			addVisOption("INT_NoAmbientmult_both", "INT_NoAmbientmult_both", "Chnaged To: INT_NoAmbientmult_both");
			addVisOption("INT_NOdirectLight", "INT_NOdirectLight", "Chnaged To: INT_NOdirectLight");
			addVisOption("INT_nowaterREF", "INT_nowaterREF", "Chnaged To: INT_nowaterREF");
			addVisOption("int_office_Lobby", "int_office_Lobby", "Chnaged To: int_office_Lobby");
			addVisOption("int_office_LobbyHall", "int_office_LobbyHall", "Chnaged To: int_office_LobbyHall");
			addVisOption("INT_posh_hairdresser", "INT_posh_hairdresser", "Chnaged To: INT_posh_hairdresser");
			addVisOption("INT_streetlighting", "INT_streetlighting", "Chnaged To: INT_streetlighting");
			addVisOption("int_tattoo", "int_tattoo", "Chnaged To: int_tattoo");
			addVisOption("int_tattoo_B", "int_tattoo_B", "Chnaged To: int_tattoo_B");
			addVisOption("int_tunnel_none_dark", "int_tunnel_none_dark", "Chnaged To: int_tunnel_none_dark");
			addVisOption("interior_WATER_lighting", "interior_WATER_lighting", "Chnaged To: interior_WATER_lighting");
			addVisOption("introblue", "introblue", "Chnaged To: introblue");
			addVisOption("jewel_gas", "jewel_gas", "Chnaged To: jewel_gas");
			addVisOption("jewel_optim", "jewel_optim", "Chnaged To: jewel_optim");
			addVisOption("jewelry_entrance", "jewelry_entrance", "Chnaged To: jewelry_entrance");
			addVisOption("jewelry_entrance_INT", "jewelry_entrance_INT", "Chnaged To: jewelry_entrance_INT");
			addVisOption("jewelry_entrance_INT_fog", "jewelry_entrance_INT_fog", "Chnaged To: jewelry_entrance_INT_fog");
			addVisOption("KT_underpass", "KT_underpass", "Chnaged To: KT_underpass");
			addVisOption("lab_none", "lab_none", "Chnaged To: lab_none");
			addVisOption("lab_none_dark", "lab_none_dark", "Chnaged To: lab_none_dark");
			addVisOption("lab_none_dark_fog", "lab_none_dark_fog", "Chnaged To: lab_none_dark_fog");
			addVisOption("lab_none_exit", "lab_none_exit", "Chnaged To: lab_none_exit");
			addVisOption("LifeInvaderLOD", "LifeInvaderLOD", "Chnaged To: LifeInvaderLOD");
			addVisOption("lightning", "lightning", "Chnaged To: lightning");
			addVisOption("lightning_cloud", "lightning_cloud", "Chnaged To: lightning_cloud");
			addVisOption("lightning_strong", "lightning_strong", "Chnaged To: lightning_strong");
			addVisOption("lightning_weak", "lightning_weak", "Chnaged To: lightning_weak");
			addVisOption("LightPollutionHills", "LightPollutionHills", "Chnaged To: LightPollutionHills");
			addVisOption("lightpolution", "lightpolution", "Chnaged To: lightpolution");
			addVisOption("LIGHTSreduceFALLOFF", "LIGHTSreduceFALLOFF", "Chnaged To: LIGHTSreduceFALLOFF");
			addVisOption("LODmult_global_reduce", "LODmult_global_reduce", "Chnaged To: LODmult_global_reduce");
			addVisOption("LODmult_global_reduce_NOHD", "LODmult_global_reduce_NOHD", "Chnaged To: LODmult_global_reduce_NOHD");
			addVisOption("LODmult_HD_orphan_LOD_reduce", "LODmult_HD_orphan_LOD_reduce", "Chnaged To: LODmult_HD_orphan_LOD_reduce");
			addVisOption("LODmult_HD_orphan_reduce", "LODmult_HD_orphan_reduce", "Chnaged To: LODmult_HD_orphan_reduce");
			addVisOption("LODmult_LOD_reduce", "LODmult_LOD_reduce", "Chnaged To: LODmult_LOD_reduce");
			addVisOption("LODmult_SLOD1_reduce", "LODmult_SLOD1_reduce", "Chnaged To: LODmult_SLOD1_reduce");
			addVisOption("LODmult_SLOD2_reduce", "LODmult_SLOD2_reduce", "Chnaged To: LODmult_SLOD2_reduce");
			addVisOption("LODmult_SLOD3_reduce", "LODmult_SLOD3_reduce", "Chnaged To: LODmult_SLOD3_reduce");
			addVisOption("metro", "metro", "Chnaged To: metro");
			addVisOption("METRO_platform", "METRO_platform", "Chnaged To: METRO_platform");
			addVisOption("METRO_Tunnels", "METRO_Tunnels", "Chnaged To: METRO_Tunnels");
			addVisOption("METRO_Tunnels_entrance", "METRO_Tunnels_entrance", "Chnaged To: METRO_Tunnels_entrance");
			addVisOption("MichaelColorCode", "MichaelColorCode", "Chnaged To: MichaelColorCode");
			addVisOption("MichaelColorCodeBasic", "MichaelColorCodeBasic", "Chnaged To: MichaelColorCodeBasic");
			addVisOption("MichaelsDarkroom", "MichaelsDarkroom", "Chnaged To: MichaelsDarkroom");
			addVisOption("MichaelsDirectional", "MichaelsDirectional", "Chnaged To: MichaelsDirectional");
			addVisOption("MichaelsNODirectional", "MichaelsNODirectional", "Chnaged To: MichaelsNODirectional");
			addVisOption("micheal", "micheal", "Chnaged To: micheal");
			addVisOption("micheals_lightsOFF", "micheals_lightsOFF", "Chnaged To: micheals_lightsOFF");
			addVisOption("michealspliff", "michealspliff", "Chnaged To: michealspliff");
			addVisOption("michealspliff_blend", "michealspliff_blend", "Chnaged To: michealspliff_blend");
			addVisOption("michealspliff_blend02", "michealspliff_blend02", "Chnaged To: michealspliff_blend02");
			addVisOption("militarybase_nightlight", "militarybase_nightlight", "Chnaged To: militarybase_nightlight");
			addVisOption("morebloomnumMods=3", "morebloomnumMods=3", "Chnaged To: morebloomnumMods=3");
			addVisOption("morgue_dark", "morgue_dark", "Chnaged To: morgue_dark");
			addVisOption("Mp_apart_mid", "Mp_apart_mid", "Chnaged To: Mp_apart_mid");
			addVisOption("MP_Bull_tost", "MP_Bull_tost", "Chnaged To: MP_Bull_tost");
			addVisOption("MP_Bull_tost_blend", "MP_Bull_tost_blend", "Chnaged To: MP_Bull_tost_blend");
			addVisOption("MP_corona_switch", "MP_corona_switch", "Chnaged To: MP_corona_switch");
			addVisOption("MP_death_grade", "MP_death_grade", "Chnaged To: MP_death_grade");
			addVisOption("MP_death_grade_blend01", "MP_death_grade_blend01", "Chnaged To: MP_death_grade_blend01");
			addVisOption("MP_death_grade_blend02", "MP_death_grade_blend02", "Chnaged To: MP_death_grade_blend02");
			addVisOption("MP_Garage_L", "MP_Garage_L", "Chnaged To: MP_Garage_L");
			addVisOption("MP_heli_cam", "MP_heli_cam", "Chnaged To: MP_heli_cam");
			addVisOption("MP_intro_logo", "MP_intro_logo", "Chnaged To: MP_intro_logo");
			addVisOption("MP_job_load", "MP_job_load", "Chnaged To: MP_job_load");
			addVisOption("MP_job_lose", "MP_job_lose", "Chnaged To: MP_job_lose");
			addVisOption("MP_job_win", "MP_job_win", "Chnaged To: MP_job_win");
			addVisOption("MP_Killstreak", "MP_Killstreak", "Chnaged To: MP_Killstreak");
			addVisOption("MP_Killstreak_blend", "MP_Killstreak_blend", "Chnaged To: MP_Killstreak_blend");
			addVisOption("MP_Loser", "MP_Loser", "Chnaged To: MP_Loser");
			addVisOption("MP_Loser_blend", "MP_Loser_blend", "Chnaged To: MP_Loser_blend");
			addVisOption("MP_lowgarage", "MP_lowgarage", "Chnaged To: MP_lowgarage");
			addVisOption("MP_MedGarage", "MP_MedGarage", "Chnaged To: MP_MedGarage");
			addVisOption("MP_Powerplay", "MP_Powerplay", "Chnaged To: MP_Powerplay");
			addVisOption("MP_Powerplay_blend", "MP_Powerplay_blend", "Chnaged To: MP_Powerplay_blend");
			addVisOption("MP_race_finish", "MP_race_finish", "Chnaged To: MP_race_finish");
			addVisOption("MP_select", "MP_select", "Chnaged To: MP_select");
			addVisOption("MP_Studio_Lo", "MP_Studio_Lo", "Chnaged To: MP_Studio_Lo");
			addVisOption("MPApartHigh", "MPApartHigh", "Chnaged To: MPApartHigh");
			addVisOption("Multipayer_spectatorCam", "Multipayer_spectatorCam", "Chnaged To: Multipayer_spectatorCam");
			addVisOption("multiplayer_ped_fight", "multiplayer_ped_fight", "Chnaged To: multiplayer_ped_fight");
			addVisOption("nervousRON_fog", "nervousRON_fog", "Chnaged To: nervousRON_fog");
			addVisOption("NeutralColorCode", "NeutralColorCode", "Chnaged To: NeutralColorCode");
			addVisOption("NeutralColorCodeBasic", "NeutralColorCodeBasic", "Chnaged To: NeutralColorCodeBasic");
			addVisOption("NeutralColorCodeLight", "NeutralColorCodeLight", "Chnaged To: NeutralColorCodeLight");
			addVisOption("NEW_abattoir", "NEW_abattoir", "Chnaged To: NEW_abattoir");
			addVisOption("new_bank", "new_bank", "Chnaged To: new_bank");
			addVisOption("NEW_jewel", "NEW_jewel", "Chnaged To: NEW_jewel");
			addVisOption("NEW_jewel_EXIT", "NEW_jewel_EXIT", "Chnaged To: NEW_jewel_EXIT");
			addVisOption("NEW_lesters", "NEW_lesters", "Chnaged To: NEW_lesters");
			addVisOption("NEW_ornate_bank", "NEW_ornate_bank", "Chnaged To: NEW_ornate_bank");
			addVisOption("NEW_ornate_bank_entrance", "NEW_ornate_bank_entrance", "Chnaged To: NEW_ornate_bank_entrance");
			addVisOption("NEW_ornate_bank_office", "NEW_ornate_bank_office", "Chnaged To: NEW_ornate_bank_office");
			addVisOption("NEW_ornate_bank_safe", "NEW_ornate_bank_safe", "Chnaged To: NEW_ornate_bank_safe");
			addVisOption("New_sewers", "New_sewers", "Chnaged To: New_sewers");
			addVisOption("NEW_shrinksOffice", "NEW_shrinksOffice", "Chnaged To: NEW_shrinksOffice");
			addVisOption("NEW_station_unfinished", "NEW_station_unfinished", "Chnaged To: NEW_station_unfinished");
			addVisOption("new_stripper_changing", "new_stripper_changing", "Chnaged To: new_stripper_changing");
			addVisOption("NEW_trevorstrailer", "NEW_trevorstrailer", "Chnaged To: NEW_trevorstrailer");
			addVisOption("NEW_tunnels", "NEW_tunnels", "Chnaged To: NEW_tunnels");
			addVisOption("NEW_tunnels_ditch", "NEW_tunnels_ditch", "Chnaged To: NEW_tunnels_ditch");
			addVisOption("new_tunnels_entrance", "new_tunnels_entrance", "Chnaged To: new_tunnels_entrance");
			addVisOption("NEW_tunnels_hole", "NEW_tunnels_hole", "Chnaged To: NEW_tunnels_hole");
			addVisOption("NEW_yellowtunnels", "NEW_yellowtunnels", "Chnaged To: NEW_yellowtunnels");
			addVisOption("NewMicheal", "NewMicheal", "Chnaged To: NewMicheal");
			addVisOption("NewMicheal_night", "NewMicheal_night", "Chnaged To: NewMicheal_night");
			addVisOption("NewMicheal_upstairs", "NewMicheal_upstairs", "Chnaged To: NewMicheal_upstairs");
			addVisOption("NewMichealgirly", "NewMichealgirly", "Chnaged To: NewMichealgirly");
			addVisOption("NewMichealstoilet", "NewMichealstoilet", "Chnaged To: NewMichealstoilet");
			addVisOption("NewMichealupstairs", "NewMichealupstairs", "Chnaged To: NewMichealupstairs");
			addVisOption("NewMod", "NewMod", "Chnaged To: NewMod");
			addVisOption("nextgen", "nextgen", "Chnaged To: nextgen");
			addVisOption("NO_coronas", "NO_coronas", "Chnaged To: NO_coronas");
			addVisOption("NO_fog_alpha", "NO_fog_alpha", "Chnaged To: NO_fog_alpha");
			addVisOption("NO_streetAmbient", "NO_streetAmbient", "Chnaged To: NO_streetAmbient");
			addVisOption("NO_weather", "NO_weather", "Chnaged To: NO_weather");
			addVisOption("NoAmbientmult", "NoAmbientmult", "Chnaged To: NoAmbientmult");
			addVisOption("NoAmbientmult_interior", "NoAmbientmult_interior", "Chnaged To: NoAmbientmult_interior");
			addVisOption("NOdirectLight", "NOdirectLight", "Chnaged To: NOdirectLight");
			addVisOption("NOrain", "NOrain", "Chnaged To: NOrain");
			addVisOption("overwater", "overwater", "Chnaged To: overwater");
			addVisOption("Paleto", "Paleto", "Chnaged To: Paleto");
			addVisOption("paleto_nightlight", "paleto_nightlight", "Chnaged To: paleto_nightlight");
			addVisOption("paleto_opt", "paleto_opt", "Chnaged To: paleto_opt");
			addVisOption("PERSHING_water_reflect", "PERSHING_water_reflect", "Chnaged To: PERSHING_water_reflect");
			addVisOption("phone_cam", "phone_cam", "Chnaged To: phone_cam");
			addVisOption("phone_cam1", "phone_cam1", "Chnaged To: phone_cam1");
			addVisOption("phone_cam10", "phone_cam10", "Chnaged To: phone_cam10");
			addVisOption("phone_cam11", "phone_cam11", "Chnaged To: phone_cam11");
			addVisOption("phone_cam12", "phone_cam12", "Chnaged To: phone_cam12");
			addVisOption("phone_cam13", "phone_cam13", "Chnaged To: phone_cam13");
			addVisOption("phone_cam2", "phone_cam2", "Chnaged To: phone_cam2");
			addVisOption("phone_cam3", "phone_cam3", "Chnaged To: phone_cam3");
			addVisOption("phone_cam4", "phone_cam4", "Chnaged To: phone_cam4");
			addVisOption("phone_cam5", "phone_cam5", "Chnaged To: phone_cam5");
			addVisOption("phone_cam6", "phone_cam6", "Chnaged To: phone_cam6");
			addVisOption("phone_cam7", "phone_cam7", "Chnaged To: phone_cam7");
			addVisOption("phone_cam9", "phone_cam9", "Chnaged To: phone_cam9");
			addVisOption("plane_inside_mode", "plane_inside_mode", "Chnaged To: plane_inside_mode");
			addVisOption("player_transition", "player_transition", "Chnaged To: player_transition");
			addVisOption("player_transition_no_scanlines", "player_transition_no_scanlines", "Chnaged To: player_transition_no_scanlines");
			addVisOption("player_transition_scanlines", "player_transition_scanlines", "Chnaged To: player_transition_scanlines");
			addVisOption("PlayerSwitchNeutralFlash", "PlayerSwitchNeutralFlash", "Chnaged To: PlayerSwitchNeutralFlash");
			addVisOption("PlayerSwitchPulse", "PlayerSwitchPulse", "Chnaged To: PlayerSwitchPulse");
			addVisOption("PoliceStation", "PoliceStation", "Chnaged To: PoliceStation");
			addVisOption("PoliceStationDark", "PoliceStationDark", "Chnaged To: PoliceStationDark");
			addVisOption("polluted", "polluted", "Chnaged To: polluted");
			addVisOption("poolsidewaterreflection2", "poolsidewaterreflection2", "Chnaged To: poolsidewaterreflection2");
			addVisOption("PORT_heist_underwater", "PORT_heist_underwater", "Chnaged To: PORT_heist_underwater");
			addVisOption("powerplant_nightlight", "powerplant_nightlight", "Chnaged To: powerplant_nightlight");
			addVisOption("powerstation", "powerstation", "Chnaged To: powerstation");
			addVisOption("prison_nightlight", "prison_nightlight", "Chnaged To: prison_nightlight");
			addVisOption("projector", "projector", "Chnaged To: projector");
			addVisOption("prologue", "prologue", "Chnaged To: prologue");
			addVisOption("prologue_ending_fog", "prologue_ending_fog", "Chnaged To: prologue_ending_fog");
			addVisOption("prologue_ext_art_amb", "prologue_ext_art_amb", "Chnaged To: prologue_ext_art_amb");
			addVisOption("prologue_reflection_opt", "prologue_reflection_opt", "Chnaged To: prologue_reflection_opt");
			addVisOption("prologue_shootout", "prologue_shootout", "Chnaged To: prologue_shootout");
			addVisOption("Prologue_shootout_opt", "Prologue_shootout_opt", "Chnaged To: Prologue_shootout_opt");
			addVisOption("pulse", "pulse", "Chnaged To: pulse");
			addVisOption("RaceTurboDark", "RaceTurboDark", "Chnaged To: RaceTurboDark");
			addVisOption("RaceTurboFlash", "RaceTurboFlash", "Chnaged To: RaceTurboFlash");
			addVisOption("RaceTurboLight", "RaceTurboLight", "Chnaged To: RaceTurboLight");
			addVisOption("ranch", "ranch", "Chnaged To: ranch");
			addVisOption("REDMIST", "REDMIST", "Chnaged To: REDMIST");
			addVisOption("REDMIST_blend", "REDMIST_blend", "Chnaged To: REDMIST_blend");
			addVisOption("ReduceDrawDistance", "ReduceDrawDistance", "Chnaged To: ReduceDrawDistance");
			addVisOption("ReduceDrawDistanceMAP", "ReduceDrawDistanceMAP", "Chnaged To: ReduceDrawDistanceMAP");
			addVisOption("ReduceDrawDistanceMission", "ReduceDrawDistanceMission", "Chnaged To: ReduceDrawDistanceMission");
			addVisOption("reducelightingcost", "reducelightingcost", "Chnaged To: reducelightingcost");
			addVisOption("ReduceSSAO", "ReduceSSAO", "Chnaged To: ReduceSSAO");
			addVisOption("reducewaterREF", "reducewaterREF", "Chnaged To: reducewaterREF");
			addVisOption("refit", "refit", "Chnaged To: refit");
			addVisOption("reflection_correct_ambient", "reflection_correct_ambient", "Chnaged To: reflection_correct_ambient");
			addVisOption("RemoteSniper", "RemoteSniper", "Chnaged To: RemoteSniper");
			addVisOption("resvoire_reflection", "resvoire_reflection", "Chnaged To: resvoire_reflection");
			addVisOption("SALTONSEA", "SALTONSEA", "Chnaged To: SALTONSEA");
			addVisOption("sandyshore_nightlight", "sandyshore_nightlight", "Chnaged To: sandyshore_nightlight");
			addVisOption("SAWMILL", "SAWMILL", "Chnaged To: SAWMILL");
			addVisOption("scanline_cam", "scanline_cam", "Chnaged To: scanline_cam");
			addVisOption("scanline_cam_cheap", "scanline_cam_cheap", "Chnaged To: scanline_cam_cheap");
			addVisOption("scope_zoom_in", "scope_zoom_in", "Chnaged To: scope_zoom_in");
			addVisOption("scope_zoom_out", "scope_zoom_out", "Chnaged To: scope_zoom_out");
			addVisOption("secret_camera", "secret_camera", "Chnaged To: secret_camera");
			addVisOption("services_nightlight", "services_nightlight", "Chnaged To: services_nightlight");
			addVisOption("shades_pink", "shades_pink", "Chnaged To: shades_pink");
			addVisOption("shades_yellow", "shades_yellow", "Chnaged To: shades_yellow");
			addVisOption("SheriffStation", "SheriffStation", "Chnaged To: SheriffStation");
			addVisOption("ship_explosion_underwater", "ship_explosion_underwater", "Chnaged To: ship_explosion_underwater");
			addVisOption("ship_lighting", "ship_lighting", "Chnaged To: ship_lighting");
			addVisOption("Shop247", "Shop247", "Chnaged To: Shop247");
			addVisOption("Shop247_none", "Shop247_none", "Chnaged To: Shop247_none");
			addVisOption("sleeping", "sleeping", "Chnaged To: sleeping");
			addVisOption("SnipernumMods=7", "SnipernumMods=7", "Chnaged To: SnipernumMods=7");
			addVisOption("SP1_03_drawDistance", "SP1_03_drawDistance", "Chnaged To: SP1_03_drawDistance");
			addVisOption("spectator1", "spectator1", "Chnaged To: spectator1");
			addVisOption("spectator10", "spectator10", "Chnaged To: spectator10");
			addVisOption("spectator2", "spectator2", "Chnaged To: spectator2");
			addVisOption("spectator3", "spectator3", "Chnaged To: spectator3");
			addVisOption("spectator4", "spectator4", "Chnaged To: spectator4");
			addVisOption("spectator5", "spectator5", "Chnaged To: spectator5");
			addVisOption("spectator6", "spectator6", "Chnaged To: spectator6");
			addVisOption("spectator7", "spectator7", "Chnaged To: spectator7");
			addVisOption("spectator8", "spectator8", "Chnaged To: spectator8");
			addVisOption("spectator9", "spectator9", "Chnaged To: spectator9");
			addVisOption("StadLobby", "StadLobby", "Chnaged To: StadLobby");
			addVisOption("stc_coroners", "stc_coroners", "Chnaged To: stc_coroners");
			addVisOption("stc_deviant_bedroom", "stc_deviant_bedroom", "Chnaged To: stc_deviant_bedroom");
			addVisOption("stc_deviant_lounge", "stc_deviant_lounge", "Chnaged To: stc_deviant_lounge");
			addVisOption("stc_franklinsHouse", "stc_franklinsHouse", "Chnaged To: stc_franklinsHouse");
			addVisOption("stc_trevors", "stc_trevors", "Chnaged To: stc_trevors");
			addVisOption("stoned", "stoned", "Chnaged To: stoned");
			addVisOption("stoned_aliens", "stoned_aliens", "Chnaged To: stoned_aliens");
			addVisOption("stoned_cutscene", "stoned_cutscene", "Chnaged To: stoned_cutscene");
			addVisOption("stoned_monkeys", "stoned_monkeys", "Chnaged To: stoned_monkeys");
			addVisOption("StreetLightingJunction", "StreetLightingJunction", "Chnaged To: StreetLightingJunction");
			addVisOption("StreetLightingtraffic", "StreetLightingtraffic", "Chnaged To: StreetLightingtraffic");
			addVisOption("STRIP_changing", "STRIP_changing", "Chnaged To: STRIP_changing");
			addVisOption("STRIP_nofog", "STRIP_nofog", "Chnaged To: STRIP_nofog");
			addVisOption("STRIP_office", "STRIP_office", "Chnaged To: STRIP_office");
			addVisOption("STRIP_stage", "STRIP_stage", "Chnaged To: STRIP_stage");
			addVisOption("subBASE_water_ref", "subBASE_water_ref", "Chnaged To: subBASE_water_ref");
			addVisOption("sunglasses", "sunglasses", "Chnaged To: sunglasses");
			addVisOption("superDARK", "superDARK", "Chnaged To: superDARK");
			addVisOption("switch_cam_1", "switch_cam_1", "Chnaged To: switch_cam_1");
			addVisOption("switch_cam_2", "switch_cam_2", "Chnaged To: switch_cam_2");
			addVisOption("telescope", "telescope", "Chnaged To: telescope");
			addVisOption("torpedo", "torpedo", "Chnaged To: torpedo");
			addVisOption("traffic_skycam", "traffic_skycam", "Chnaged To: traffic_skycam");
			addVisOption("trailer_explosion_optimise", "trailer_explosion_optimise", "Chnaged To: trailer_explosion_optimise");
			addVisOption("TREVOR", "TREVOR", "Chnaged To: TREVOR");
			addVisOption("TrevorColorCode", "TrevorColorCode", "Chnaged To: TrevorColorCode");
			addVisOption("TrevorColorCodeBasic", "TrevorColorCodeBasic", "Chnaged To: TrevorColorCodeBasic");
			addVisOption("Trevors_room", "Trevors_room", "Chnaged To: Trevors_room");
			addVisOption("trevorspliff", "trevorspliff", "Chnaged To: trevorspliff");
			addVisOption("trevorspliff_blend", "trevorspliff_blend", "Chnaged To: trevorspliff_blend");
			addVisOption("trevorspliff_blend02", "trevorspliff_blend02", "Chnaged To: trevorspliff_blend02");
			addVisOption("Tunnel", "Tunnel", "Chnaged To: Tunnel");
			addVisOption("tunnel_entrance", "tunnel_entrance", "Chnaged To: tunnel_entrance");
			addVisOption("tunnel_entrance_INT", "tunnel_entrance_INT", "Chnaged To: tunnel_entrance_INT");
			addVisOption("TUNNEL_green", "TUNNEL_green", "Chnaged To: TUNNEL_green");
			addVisOption("Tunnel_green1", "Tunnel_green1", "Chnaged To: Tunnel_green1");
			addVisOption("TUNNEL_green_ext", "TUNNEL_green_ext", "Chnaged To: TUNNEL_green_ext");
			addVisOption("TUNNEL_orange", "TUNNEL_orange", "Chnaged To: TUNNEL_orange");
			addVisOption("TUNNEL_orange_exterior", "TUNNEL_orange_exterior", "Chnaged To: TUNNEL_orange_exterior");
			addVisOption("TUNNEL_white", "TUNNEL_white", "Chnaged To: TUNNEL_white");
			addVisOption("TUNNEL_yellow", "TUNNEL_yellow", "Chnaged To: TUNNEL_yellow");
			addVisOption("TUNNEL_yellow_ext", "TUNNEL_yellow_ext", "Chnaged To: TUNNEL_yellow_ext");
			addVisOption("ufo", "ufo", "Chnaged To: ufo");
			addVisOption("ufo_deathray", "ufo_deathray", "Chnaged To: ufo_deathray");
			addVisOption("underwater", "underwater", "Chnaged To: underwater");
			addVisOption("underwater_deep", "underwater_deep", "Chnaged To: underwater_deep");
			addVisOption("underwater_deep_clear", "underwater_deep_clear", "Chnaged To: underwater_deep_clear");
			addVisOption("v_abattoir", "v_abattoir", "Chnaged To: v_abattoir");
			addVisOption("V_Abattoir_Cold", "V_Abattoir_Cold", "Chnaged To: V_Abattoir_Cold");
			addVisOption("v_bahama", "v_bahama", "Chnaged To: v_bahama");
			addVisOption("v_cashdepot", "v_cashdepot", "Chnaged To: v_cashdepot");
			addVisOption("V_FIB_IT3", "V_FIB_IT3", "Chnaged To: V_FIB_IT3");
			addVisOption("V_FIB_IT3_alt", "V_FIB_IT3_alt", "Chnaged To: V_FIB_IT3_alt");
			addVisOption("V_FIB_IT3_alt5", "V_FIB_IT3_alt5", "Chnaged To: V_FIB_IT3_alt5");
			addVisOption("V_FIB_stairs", "V_FIB_stairs", "Chnaged To: V_FIB_stairs");
			addVisOption("v_foundry", "v_foundry", "Chnaged To: v_foundry");
			addVisOption("v_janitor", "v_janitor", "Chnaged To: v_janitor");
			addVisOption("v_jewel2", "v_jewel2", "Chnaged To: v_jewel2");
			addVisOption("v_metro", "v_metro", "Chnaged To: v_metro");
			addVisOption("V_Metro2", "V_Metro2", "Chnaged To: V_Metro2");
			addVisOption("V_Metro_station", "V_Metro_station", "Chnaged To: V_Metro_station");
			addVisOption("v_michael", "v_michael", "Chnaged To: v_michael");
			addVisOption("v_michael_lounge", "v_michael_lounge", "Chnaged To: v_michael_lounge");
			addVisOption("V_Office_smoke", "V_Office_smoke", "Chnaged To: V_Office_smoke");
			addVisOption("V_Office_smoke_ext", "V_Office_smoke_ext", "Chnaged To: V_Office_smoke_ext");
			addVisOption("V_Office_smoke_Fire", "V_Office_smoke_Fire", "Chnaged To: V_Office_smoke_Fire");
			addVisOption("v_recycle", "v_recycle", "Chnaged To: v_recycle");
			addVisOption("V_recycle_dark", "V_recycle_dark", "Chnaged To: V_recycle_dark");
			addVisOption("V_recycle_light", "V_recycle_light", "Chnaged To: V_recycle_light");
			addVisOption("V_recycle_mainroom", "V_recycle_mainroom", "Chnaged To: V_recycle_mainroom");
			addVisOption("v_rockclub", "v_rockclub", "Chnaged To: v_rockclub");
			addVisOption("V_Solomons", "V_Solomons", "Chnaged To: V_Solomons");
			addVisOption("v_strip3", "v_strip3", "Chnaged To: v_strip3");
			addVisOption("V_strip_nofog", "V_strip_nofog", "Chnaged To: V_strip_nofog");
			addVisOption("V_strip_office", "V_strip_office", "Chnaged To: V_strip_office");
			addVisOption("v_strpchangerm", "v_strpchangerm", "Chnaged To: v_strpchangerm");
			addVisOption("v_sweat", "v_sweat", "Chnaged To: v_sweat");
			addVisOption("v_sweat_entrance", "v_sweat_entrance", "Chnaged To: v_sweat_entrance");
			addVisOption("v_sweat_NoDirLight", "v_sweat_NoDirLight", "Chnaged To: v_sweat_NoDirLight");
			addVisOption("v_torture", "v_torture", "Chnaged To: v_torture");
			addVisOption("Vagos", "Vagos", "Chnaged To: Vagos");
			addVisOption("vagos_extlight_small", "vagos_extlight_small", "Chnaged To: vagos_extlight_small");
			addVisOption("VAGOS_new_garage", "VAGOS_new_garage", "Chnaged To: VAGOS_new_garage");
			addVisOption("VAGOS_new_hangout", "VAGOS_new_hangout", "Chnaged To: VAGOS_new_hangout");
			addVisOption("VagosSPLASH", "VagosSPLASH", "Chnaged To: VagosSPLASH");
			addVisOption("VC_tunnel_entrance", "VC_tunnel_entrance", "Chnaged To: VC_tunnel_entrance");
			addVisOption("venice_canal_tunnel", "venice_canal_tunnel", "Chnaged To: venice_canal_tunnel");
			addVisOption("vespucci_garage", "vespucci_garage", "Chnaged To: vespucci_garage");
			addVisOption("warehouse", "warehouse", "Chnaged To: warehouse");
			addVisOption("WATER_hills", "WATER_hills", "Chnaged To: WATER_hills");
			addVisOption("WATER_lab", "WATER_lab", "Chnaged To: WATER_lab");
			addVisOption("WATER_lab_cooling", "WATER_lab_cooling", "Chnaged To: WATER_lab_cooling");
			addVisOption("WATER_militaryPOOP", "WATER_militaryPOOP", "Chnaged To: WATER_militaryPOOP");
			addVisOption("WATER_muddy", "WATER_muddy", "Chnaged To: WATER_muddy");
			addVisOption("WATER_port", "WATER_port", "Chnaged To: WATER_port");
			addVisOption("WATER_REF_malibu", "WATER_REF_malibu", "Chnaged To: WATER_REF_malibu");
			addVisOption("WATER_refmap_high", "WATER_refmap_high", "Chnaged To: WATER_refmap_high");
			addVisOption("WATER_refmap_hollywoodlake", "WATER_refmap_hollywoodlake", "Chnaged To: WATER_refmap_hollywoodlake");
			addVisOption("WATER_refmap_low", "WATER_refmap_low", "Chnaged To: WATER_refmap_low");
			addVisOption("WATER_refmap_med", "WATER_refmap_med", "Chnaged To: WATER_refmap_med");
			addVisOption("WATER_refmap_off", "WATER_refmap_off", "Chnaged To: WATER_refmap_off");
			addVisOption("WATER_refmap_poolside", "WATER_refmap_poolside", "Chnaged To: WATER_refmap_poolside");
			addVisOption("WATER_refmap_silverlake", "WATER_refmap_silverlake", "Chnaged To: WATER_refmap_silverlake");
			addVisOption("WATER_refmap_venice", "WATER_refmap_venice", "Chnaged To: WATER_refmap_venice");
			addVisOption("WATER_refmap_verylow", "WATER_refmap_verylow", "Chnaged To: WATER_refmap_verylow");
			addVisOption("WATER_resevoir", "WATER_resevoir", "Chnaged To: WATER_resevoir");
			addVisOption("WATER_river", "WATER_river", "Chnaged To: WATER_river");
			addVisOption("WATER_salton", "WATER_salton", "Chnaged To: WATER_salton");
			addVisOption("WATER_salton_bottom", "WATER_salton_bottom", "Chnaged To: WATER_salton_bottom");
			addVisOption("WATER_shore", "WATER_shore", "Chnaged To: WATER_shore");
			addVisOption("WATER_silty", "WATER_silty", "Chnaged To: WATER_silty");
			addVisOption("WATER_silverlake", "WATER_silverlake", "Chnaged To: WATER_silverlake");
			addVisOption("whitenightlighting", "whitenightlighting", "Chnaged To: whitenightlighting");
			addVisOption("WhiteOut", "WhiteOut", "Chnaged To: WhiteOut");
			addVisOption("yell_tunnel_nodirect", "yell_tunnel_nodirect", "Chnaged To: yell_tunnel_nodirect");

		}
		break;
#pragma region object spawner
		case objectspawner:
		{

			Menu::Title("Object Spawner");
			Menu::MenuOption("Prop List ~w~>", objectlist);
			if (Menu::Option("Imput Object")) {
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				Object custom = SpawnObject(CharKeyboard(), pos);
				if (custom != -1) {
					latestObj = custom;
					Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
					Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				}
				else
					notifyMap("~w~Error Invalid object");
			}
			if (Menu::Option("Delete Last Object")) {
				RequestControlOfEnt(latestObj);
				ENTITY::DELETE_ENTITY(&latestObj);
				MapModObjs.pop_back();
			}
			if (Menu::Float("X", MoveX, 0.f, 1000000000.f, 1.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1);
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, MoveX, objCoords.y, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
			if (Menu::Float("Z", MoveZ, 0.f, 1000000000.f, 1.f)) {
				RequestControlOfEnt(latestObj);
				Vector3 objCoords = ENTITY::GET_ENTITY_COORDS(latestObj, 1); // damn i hate teamviewer
				Vector3 objRot = ENTITY::GET_ENTITY_ROTATION(latestObj, 0);
				ENTITY::SET_ENTITY_COORDS(latestObj, objCoords.x, MoveZ, objCoords.z, objRot.x, objRot.y, objRot.z, false);
			}
		}
		break;
#pragma region object list
		case objectlist:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Prop List");
			Menu::Option("PROP_MP_RAMP_03");
			Menu::Option("prop_a4_pile_01");
			Menu::Option("prop_a4_sheet_01");
			Menu::Option("prop_a4_sheet_02");
			Menu::Option("prop_a4_sheet_03");
			Menu::Option("prop_a4_sheet_03");
			Menu::Option("prop_a4_sheet_04");
			Menu::Option("prop_a4_sheet_05");
			Menu::Option("prop_abat_roller_static");
			Menu::Option("prop_abat_slide");
			Menu::Option("prop_acc_guitar_01");
			Menu::Option("prop_acc_guitar_01_d1");
			Menu::Option("prop_aerial_01a");
			Menu::Option("prop_aerial_01b");
			Menu::Option("prop_aerial_01c");
			Menu::Option("prop_aerial_01d");
			Menu::Option("prop_afsign_amun");
			Menu::Option("prop_afsign_vbike");
			Menu::Option("prop_agave_01");
			Menu::Option("prop_agave_02");
			Menu::Option("prop_aiprort_sign_01");
			Menu::Option("prop_aiprort_sign_02");
			Menu::Option("prop_aircon_l_01");
			Menu::Option("prop_aircon_l_02");
			Menu::Option("prop_aircon_l_03");
			Menu::Option("prop_aircon_l_03");
			Menu::Option("prop_aircon_l_04");
			Menu::Option("prop_aircon_m_09");
			Menu::Option("prop_aircon_s_01a");
			Menu::Option("prop_aircon_s_02a");
			Menu::Option("prop_aircon_s_02b");
			Menu::Option("prop_aircon_s_03a");
			Menu::Option("prop_aircon_s_03b");
			Menu::Option("prop_aircon_s_04a");
			Menu::Option("prop_aircon_s_05a");
			Menu::Option("prop_aircon_s_06a");
			Menu::Option("prop_aircon_s_07a");
			Menu::Option("prop_aircon_s_07b");
			Menu::Option("prop_airhockey_01");
			Menu::Option("prop_air_bagloader");
			Menu::Option("prop_air_bagloader2");
			Menu::Option("prop_air_barrier");
			Menu::Option("prop_air_bench_01");
			Menu::Option("prop_air_bench_02");
			Menu::Option("prop_air_bigradar_l1");
			Menu::Option("prop_air_bigradar_l2");
			Menu::Option("prop_air_bigradar_slod");
			Menu::Option("prop_air_blastfence_01");
			Menu::Option("prop_air_blastfence_02");
			Menu::Option("prop_air_bridge01");
			Menu::Option("prop_air_bridge02");
			Menu::Option("prop_air_cargoloader_01");
			Menu::Option("prop_air_cargo_01a");
			Menu::Option("prop_air_cargo_01b");
			Menu::Option("prop_air_cargo_01c");
			Menu::Option("prop_air_cargo_02a");
			Menu::Option("prop_air_cargo_02b");
			Menu::Option("prop_air_cargo_03a");
			Menu::Option("prop_air_cargo_04a");
			Menu::Option("prop_air_cargo_04b");
			Menu::Option("prop_air_cargo_04c");
			Menu::Option("prop_air_chock_01");
			Menu::Option("prop_air_chock_03");
			Menu::Option("prop_air_chock_04");
			Menu::Option("prop_air_fueltrail1");
			Menu::Option("prop_air_fueltrail2");
			Menu::Option("prop_air_gasbogey_01");
			Menu::Option("prop_air_generator_01");
			Menu::Option("prop_air_generator_03");
			Menu::Option("prop_air_hoc_paddle_01");
			Menu::Option("prop_air_hoc_paddle_02");
			Menu::Option("prop_air_lights_01a");
			Menu::Option("prop_air_lights_01b");
			Menu::Option("prop_air_lights_03a");
			Menu::Option("prop_air_luggtrolley");
			Menu::Option("prop_air_mast_01");
			Menu::Option("prop_air_mast_02");
			Menu::Option("prop_air_monhut_01");
			Menu::Option("prop_air_monhut_02");
			Menu::Option("prop_air_monhut_03");
			Menu::Option("prop_air_propeller01");
			Menu::Option("prop_air_radar_01");
			Menu::Option("prop_air_stair_01");
			Menu::Option("prop_air_stair_02");
			Menu::Option("prop_air_stair_03");
			Menu::Option("prop_air_stair_04a");
			Menu::Option("prop_air_stair_04b");
			Menu::Option("prop_air_towbar_01");
			Menu::Option("prop_air_towbar_02");
			Menu::Option("prop_air_towbar_03");
			Menu::Option("prop_air_trailer_4a");
			Menu::Option("prop_air_trailer_4b");
			Menu::Option("prop_air_trailer_4c");
			Menu::Option("prop_air_watertank1");
			Menu::Option("prop_air_watertank2");
			Menu::Option("prop_air_windsock_base");
			Menu::Option("prop_air_woodsteps");
			Menu::Option("prop_alarm_01");
			Menu::Option("prop_alarm_02");
			Menu::Option("prop_alien_egg_01");
			Menu::Option("prop_aloevera_01");
			Menu::Option("prop_amanda_note_01");
			Menu::Option("prop_amanda_note_01b");
			Menu::Option("prop_amb_40oz_02");
			Menu::Option("prop_amb_40oz_03");
			Menu::Option("prop_amb_beer_bottle");
			Menu::Option("prop_amb_ciggy_01");
			Menu::Option("prop_amb_donut");
			Menu::Option("prop_amb_handbag_01");
			Menu::Option("prop_amb_phone");
			Menu::Option("prop_amp_01");
			Menu::Option("prop_am_box_wood_01");
			Menu::Option("prop_anim_cash_note");
			Menu::Option("prop_anim_cash_note_b");
			Menu::Option("prop_anim_cash_pile_01");
			Menu::Option("prop_anim_cash_pile_02");
			Menu::Option("prop_apple_box_01");
			Menu::Option("prop_apple_box_02");
			Menu::Option("prop_arcade_01");
			Menu::Option("prop_arcade_02");
			Menu::Option("prop_arc_blueprints_01");
			Menu::Option("prop_armchair_01");
			Menu::Option("prop_armenian_gate");
			Menu::Option("prop_armour_pickup");
			Menu::Option("prop_arm_gate_l");
			Menu::Option("prop_arm_wrestle_01");
			Menu::Option("prop_artgallery_02_dl");
			Menu::Option("prop_artgallery_02_dr");
			Menu::Option("prop_artgallery_dl");
			Menu::Option("prop_artgallery_dr");
			Menu::Option("prop_artifact_01");
			Menu::Option("prop_ashtray_01");
			Menu::Option("prop_asteroid_01");
			Menu::Option("prop_atm_02");
			Menu::Option("prop_atm_03");
			Menu::Option("prop_attache_case_01");
			Menu::Option("prop_aviators_01");
			Menu::Option("prop_a_base_bars_01");
			Menu::Option("prop_a_trailer_door_01");
			Menu::Option("prop_bahammenu");
			Menu::Option("prop_ballistic_shield");
			Menu::Option("prop_ballistic_shield_lod1");
			Menu::Option("prop_bandsaw_01");
			Menu::Option("prop_bank_shutter");
			Menu::Option("prop_bank_vaultdoor");
			Menu::Option("prop_barbell_01");
			Menu::Option("prop_barbell_02");
			Menu::Option("prop_barbell_100kg");
			Menu::Option("prop_barbell_10kg");
			Menu::Option("prop_barbell_20kg");
			Menu::Option("prop_barbell_30kg");
			Menu::Option("prop_barbell_40kg");
			Menu::Option("prop_barbell_50kg");
			Menu::Option("prop_barbell_60kg");
			Menu::Option("prop_barbell_80kg");
			Menu::Option("prop_barier_conc_01b");
			Menu::Option("prop_barier_conc_01c");
			Menu::Option("prop_barier_conc_02b");
			Menu::Option("prop_barier_conc_02c");
			Menu::Option("prop_barier_conc_03a");
			Menu::Option("prop_barier_conc_04a");
			Menu::Option("prop_barier_conc_05a");
			Menu::Option("prop_barier_conc_05b");
			Menu::Option("prop_barn_door_l");
			Menu::Option("prop_barn_door_r");
			Menu::Option("prop_barrachneon");
			Menu::Option("prop_barrel_01a");
			Menu::Option("prop_barrel_02a");
			Menu::Option("prop_barrel_02b");
			Menu::Option("prop_barrel_03a");
			Menu::Option("prop_barrel_03d");
			Menu::Option("prop_barrel_float_1");
			Menu::Option("prop_barrel_float_2");
			Menu::Option("prop_barriercrash_03");
			Menu::Option("prop_barriercrash_04");
			Menu::Option("prop_barrier_wat_01a");
			Menu::Option("prop_barrier_wat_03b");
			Menu::Option("prop_barrier_work01c");
			Menu::Option("prop_barry_table_detail");
			Menu::Option("prop_bar_coastbarr");
			Menu::Option("prop_bar_coastchamp");
			Menu::Option("prop_bar_coastdusc");
			Menu::Option("prop_bar_coastmount");
			Menu::Option("prop_bar_cooler_01");
			Menu::Option("prop_bar_cooler_03");
			Menu::Option("prop_bar_fridge_01");
			Menu::Option("prop_bar_fridge_02");
			Menu::Option("prop_bar_fridge_03");
			Menu::Option("prop_bar_fridge_04");
			Menu::Option("prop_bar_ice_01");
			Menu::Option("prop_bar_napkindisp");
			Menu::Option("prop_bar_pump_01");
			Menu::Option("prop_bar_pump_04");
			Menu::Option("prop_bar_pump_05");
			Menu::Option("prop_bar_pump_06");
			Menu::Option("prop_bar_pump_07");
			Menu::Option("prop_bar_pump_08");
			Menu::Option("prop_bar_pump_09");
			Menu::Option("prop_bar_pump_10");
			Menu::Option("prop_bar_sink_01");
			Menu::Option("prop_bar_stool_01");
			Menu::Option("prop_basejump_target_01");
			Menu::Option("prop_basketball_net");
			Menu::Option("prop_bath_dirt_01");
			Menu::Option("prop_battery_01");
			Menu::Option("prop_battery_02");
			Menu::Option("prop_bball_arcade_01");
			Menu::Option("prop_bbq_2");
			Menu::Option("prop_bbq_3");
			Menu::Option("prop_beachbag_01");
			Menu::Option("prop_beachbag_02");
			Menu::Option("prop_beachbag_03");
			Menu::Option("prop_beachbag_04");
			Menu::Option("prop_beachbag_05");
			Menu::Option("prop_beachbag_06");
			Menu::Option("prop_beachbag_combo_01");
			Menu::Option("prop_beachbag_combo_02");
			Menu::Option("prop_beachball_02");
			Menu::Option("prop_beachflag_le");
			Menu::Option("prop_beach_bars_01");
			Menu::Option("prop_beach_bars_02");
			Menu::Option("prop_beach_bbq");
			Menu::Option("prop_beach_dip_bars_01");
			Menu::Option("prop_beach_dip_bars_02");
			Menu::Option("prop_beach_fire");
			Menu::Option("prop_beach_lg_float");
			Menu::Option("prop_beach_lg_stretch");
			Menu::Option("prop_beach_lg_surf");
			Menu::Option("prop_beach_lotion_01");
			Menu::Option("prop_beach_lotion_02");
			Menu::Option("prop_beach_lotion_03");
			Menu::Option("prop_beach_punchbag");
			Menu::Option("prop_beach_rings_01");
			Menu::Option("prop_beach_sculp_01");
			Menu::Option("prop_beach_towel_02");
			Menu::Option("prop_beach_volball01");
			Menu::Option("prop_beach_volball02");
			Menu::Option("prop_beerneon");
			Menu::Option("prop_beer_bison");
			Menu::Option("prop_beer_box_01");
			Menu::Option("prop_beer_neon_01");
			Menu::Option("prop_beer_neon_02");
			Menu::Option("prop_beer_neon_03");
			Menu::Option("prop_beer_neon_04");
			Menu::Option("prop_beggers_sign_01");
			Menu::Option("prop_beggers_sign_02");
			Menu::Option("prop_beggers_sign_03");
			Menu::Option("prop_beggers_sign_04");
			Menu::Option("prop_bench_01b");
			Menu::Option("prop_bench_01c");
			Menu::Option("prop_bench_04");
			Menu::Option("prop_bench_05");
			Menu::Option("prop_bench_09");
			Menu::Option("prop_beta_tape");
			Menu::Option("prop_beware_dog_sign");
			Menu::Option("prop_bh1_03_gate_l");
			Menu::Option("prop_bh1_03_gate_r");
			Menu::Option("prop_bh1_08_mp_gar");
			Menu::Option("prop_bh1_09_mp_gar");
			Menu::Option("prop_bh1_09_mp_l");
			Menu::Option("prop_bh1_09_mp_r");
			Menu::Option("prop_bh1_16_display");
			Menu::Option("prop_bh1_44_door_01l");
			Menu::Option("prop_bh1_44_door_01r");
			Menu::Option("prop_bh1_48_backdoor_l");
			Menu::Option("prop_bh1_48_backdoor_r");
			Menu::Option("prop_bh1_48_gate_1");
			Menu::Option("prop_bhhotel_door_l");
			Menu::Option("prop_bhhotel_door_r");
			Menu::Option("prop_big_bag_01");
			Menu::Option("prop_big_clock_01");
			Menu::Option("prop_big_shit_01");
			Menu::Option("prop_big_shit_02");
			Menu::Option("prop_bikerack_2");
			Menu::Option("prop_bikini_disp_01");
			Menu::Option("prop_bikini_disp_02");
			Menu::Option("prop_bikini_disp_03");
			Menu::Option("prop_bikini_disp_04");
			Menu::Option("prop_bikini_disp_05");
			Menu::Option("prop_bikini_disp_06");
			Menu::Option("prop_billboard_01");
			Menu::Option("prop_billboard_02");
			Menu::Option("prop_billboard_03");
			Menu::Option("prop_billboard_04");
			Menu::Option("prop_billboard_05");
			Menu::Option("prop_billboard_06");
			Menu::Option("prop_billboard_07");
			Menu::Option("prop_billboard_08");
			Menu::Option("prop_billboard_09");
			Menu::Option("prop_billboard_09wall");
			Menu::Option("prop_billboard_10");
			Menu::Option("prop_billboard_11");
			Menu::Option("prop_billboard_12");
			Menu::Option("prop_billboard_13");
			Menu::Option("prop_billboard_14");
			Menu::Option("prop_billboard_15");
			Menu::Option("prop_billboard_16");
			Menu::Option("prop_billb_frame01a");
			Menu::Option("prop_billb_frame01b");
			Menu::Option("prop_billb_frame02a");
			Menu::Option("prop_billb_frame02b");
			Menu::Option("prop_billb_frame03a");
			Menu::Option("prop_billb_frame03b");
			Menu::Option("prop_billb_frame03c");
			Menu::Option("prop_billb_frame04a");
			Menu::Option("prop_billb_frame04b");
			Menu::Option("prop_binoc_01");
			Menu::Option("prop_bin_04a");
			Menu::Option("prop_bin_10a");
			Menu::Option("prop_bin_10b");
			Menu::Option("prop_bin_11a");
			Menu::Option("prop_bin_11b");
			Menu::Option("prop_bin_12a");
			Menu::Option("prop_bin_13a");
			Menu::Option("prop_bin_14a");
			Menu::Option("prop_bin_14b");
			Menu::Option("prop_bin_beach_01d");
			Menu::Option("prop_bin_delpiero");
			Menu::Option("prop_bin_delpiero_b");
			Menu::Option("prop_biolab_g_door");
			Menu::Option("prop_biotech_store");
			Menu::Option("prop_bison_winch");
			Menu::Option("prop_blackjack_01");
			Menu::Option("prop_bleachers_01");
			Menu::Option("prop_bleachers_02");
			Menu::Option("prop_bleachers_03");
			Menu::Option("prop_bleachers_04");
			Menu::Option("prop_bleachers_05");
			Menu::Option("prop_blox_spray");
			Menu::Option("prop_bmu_01");
			Menu::Option("prop_bmu_01_b");
			Menu::Option("prop_bmu_02");
			Menu::Option("prop_bmu_02_ld");
			Menu::Option("prop_bmu_02_ld_cab");
			Menu::Option("prop_bmu_02_ld_sup");
			Menu::Option("prop_bmu_track01");
			Menu::Option("prop_bmu_track02");
			Menu::Option("prop_bmu_track03");
			Menu::Option("prop_bodyarmour_02");
			Menu::Option("prop_bodyarmour_03");
			Menu::Option("prop_bodyarmour_04");
			Menu::Option("prop_bodyarmour_05");
			Menu::Option("prop_bodyarmour_06");
			Menu::Option("prop_bollard_01a");
			Menu::Option("prop_bollard_01b");
			Menu::Option("prop_bollard_01c");
			Menu::Option("prop_bollard_03a");
			Menu::Option("prop_bomb_01");
			Menu::Option("prop_bomb_01_s");
			Menu::Option("prop_bonesaw");
			Menu::Option("prop_bongos_01");
			Menu::Option("prop_bong_01");
			Menu::Option("prop_boogbd_stack_01");
			Menu::Option("prop_boogbd_stack_02");
			Menu::Option("prop_boogieboard_01");
			Menu::Option("prop_boogieboard_02");
			Menu::Option("prop_boogieboard_03");
			Menu::Option("prop_boogieboard_04");
			Menu::Option("prop_boogieboard_05");
			Menu::Option("prop_boogieboard_06");
			Menu::Option("prop_boogieboard_07");
			Menu::Option("prop_boogieboard_08");
			Menu::Option("prop_boogieboard_09");
			Menu::Option("prop_boogieboard_10");
			Menu::Option("prop_boombox_01");
			Menu::Option("prop_bottle_cap_01");
			Menu::Option("prop_bowling_ball");
			Menu::Option("prop_bowling_pin");
			Menu::Option("prop_bowl_crisps");
			Menu::Option("prop_boxcar5_handle");
			Menu::Option("prop_boxing_glove_01");
			Menu::Option("prop_boxpile_10a");
			Menu::Option("prop_boxpile_10b");
			Menu::Option("prop_box_ammo01a");
			Menu::Option("prop_box_ammo02a");
			Menu::Option("prop_box_ammo03a_set");
			Menu::Option("prop_box_ammo03a_set2");
			Menu::Option("prop_box_ammo04a");
			Menu::Option("prop_box_ammo05b");
			Menu::Option("prop_box_ammo07a");
			Menu::Option("prop_box_ammo07b");
			Menu::Option("prop_box_guncase_01a");
			Menu::Option("prop_box_guncase_02a");
			Menu::Option("prop_box_guncase_03a");
			Menu::Option("prop_box_tea01a");
			Menu::Option("prop_box_wood05a");
			Menu::Option("prop_box_wood05b");
			Menu::Option("prop_box_wood08a");
			Menu::Option("prop_breadbin_01");
			Menu::Option("prop_bread_rack_01");
			Menu::Option("prop_bread_rack_02");
			Menu::Option("prop_broken_cboard_p1");
			Menu::Option("prop_broken_cboard_p2");
			Menu::Option("prop_broken_cell_gate_01");
			Menu::Option("prop_broom_unit_01");
			Menu::Option("prop_bskball_01");
			Menu::Option("prop_bs_map_door_01");
			Menu::Option("prop_buckets_02");
			Menu::Option("prop_bucket_01a");
			Menu::Option("prop_bucket_01b");
			Menu::Option("prop_bucket_02a");
			Menu::Option("prop_buck_spade_01");
			Menu::Option("prop_buck_spade_02");
			Menu::Option("prop_buck_spade_03");
			Menu::Option("prop_buck_spade_04");
			Menu::Option("prop_buck_spade_05");
			Menu::Option("prop_buck_spade_06");
			Menu::Option("prop_buck_spade_07");
			Menu::Option("prop_buck_spade_08");
			Menu::Option("prop_buck_spade_09");
			Menu::Option("prop_buck_spade_10");
			Menu::Option("prop_bumper_01");
			Menu::Option("prop_bumper_02");
			Menu::Option("prop_bumper_03");
			Menu::Option("prop_bumper_04");
			Menu::Option("prop_bumper_05");
			Menu::Option("prop_bumper_06");
			Menu::Option("prop_bumper_car_01");
			Menu::Option("prop_burto_gate_01");
			Menu::Option("prop_bush_dead_02");
			Menu::Option("prop_bush_grape_01");
			Menu::Option("prop_bush_ivy_01_1m");
			Menu::Option("prop_bush_ivy_01_2m");
			Menu::Option("prop_bush_ivy_01_bk");
			Menu::Option("prop_bush_ivy_01_l");
			Menu::Option("prop_bush_ivy_01_pot");
			Menu::Option("prop_bush_ivy_01_r");
			Menu::Option("prop_bush_ivy_01_top");
			Menu::Option("prop_bush_ivy_02_1m");
			Menu::Option("prop_bush_ivy_02_2m");
			Menu::Option("prop_bush_ivy_02_l");
			Menu::Option("prop_bush_ivy_02_pot");
			Menu::Option("prop_bush_ivy_02_r");
			Menu::Option("prop_bush_ivy_02_top");
			Menu::Option("prop_bush_lrg_01");
			Menu::Option("prop_bush_lrg_01b");
			Menu::Option("prop_bush_lrg_01c");
			Menu::Option("prop_bush_lrg_01d");
			Menu::Option("prop_bush_lrg_01e");
			Menu::Option("prop_bush_lrg_02");
			Menu::Option("prop_bush_lrg_02b");
			Menu::Option("prop_bush_lrg_03");
			Menu::Option("prop_bush_lrg_03b");
			Menu::Option("prop_bush_lrg_04b");
			Menu::Option("prop_bush_lrg_04c");
			Menu::Option("prop_bush_lrg_04d");
			Menu::Option("prop_bush_med_01");
			Menu::Option("prop_bush_med_02");
			Menu::Option("prop_bush_med_03");
			Menu::Option("prop_bush_med_05");
			Menu::Option("prop_bush_med_06");
			Menu::Option("prop_bush_med_07");
			Menu::Option("prop_bush_neat_01");
			Menu::Option("prop_bush_neat_02");
			Menu::Option("prop_bush_neat_03");
			Menu::Option("prop_bush_neat_04");
			Menu::Option("prop_bush_neat_05");
			Menu::Option("prop_bush_neat_06");
			Menu::Option("prop_bush_neat_07");
			Menu::Option("prop_bush_neat_08");
			Menu::Option("prop_bush_ornament_01");
			Menu::Option("prop_bush_ornament_02");
			Menu::Option("prop_bush_ornament_03");
			Menu::Option("prop_bush_ornament_04");
			Menu::Option("prop_busker_hat_01");
			Menu::Option("prop_byard_bench01");
			Menu::Option("prop_byard_bench02");
			Menu::Option("prop_byard_block_01");
			Menu::Option("prop_byard_boat01");
			Menu::Option("prop_byard_boat02");
			Menu::Option("prop_byard_chains01");
			Menu::Option("prop_byard_dingy");
			Menu::Option("prop_byard_elecbox01");
			Menu::Option("prop_byard_elecbox02");
			Menu::Option("prop_byard_elecbox03");
			Menu::Option("prop_byard_elecbox04");
			Menu::Option("prop_byard_floatpile");
			Menu::Option("prop_byard_float_01");
			Menu::Option("prop_byard_float_01b");
			Menu::Option("prop_byard_float_02");
			Menu::Option("prop_byard_float_02b");
			Menu::Option("prop_byard_hoist");
			Menu::Option("prop_byard_hoist_2");
			Menu::Option("prop_byard_hoses01");
			Menu::Option("prop_byard_hoses02");
			Menu::Option("prop_byard_ladder01");
			Menu::Option("prop_byard_machine01");
			Menu::Option("prop_byard_machine02");
			Menu::Option("prop_byard_machine03");
			Menu::Option("prop_byard_motor_01");
			Menu::Option("prop_byard_motor_02");
			Menu::Option("prop_byard_motor_03");
			Menu::Option("prop_byard_net02");
			Menu::Option("prop_byard_phone");
			Menu::Option("prop_byard_pipes01");
			Menu::Option("prop_byard_pipe_01");
			Menu::Option("prop_byard_planks01");
			Menu::Option("prop_byard_pulley01");
			Menu::Option("prop_byard_rack");
			Menu::Option("prop_byard_ramp");
			Menu::Option("prop_byard_rampold");
			Menu::Option("prop_byard_rowboat1");
			Menu::Option("prop_byard_rowboat2");
			Menu::Option("prop_byard_rowboat3");
			Menu::Option("prop_byard_rowboat4");
			Menu::Option("prop_byard_rowboat5");
			Menu::Option("prop_byard_scfhold01");
			Menu::Option("prop_byard_sleeper01");
			Menu::Option("prop_byard_sleeper02");
			Menu::Option("prop_byard_steps_01");
			Menu::Option("prop_byard_tank_01");
			Menu::Option("prop_byard_trailer01");
			Menu::Option("prop_byard_trailer02");
			Menu::Option("prop_b_board_blank");
			Menu::Option("prop_c4_final");
			Menu::Option("prop_c4_final_green");
			Menu::Option("prop_cabinet_01");
			Menu::Option("prop_cabinet_01b");
			Menu::Option("prop_cabinet_02b");
			Menu::Option("prop_cablespool_01a");
			Menu::Option("prop_cablespool_01b");
			Menu::Option("prop_cablespool_02");
			Menu::Option("prop_cablespool_03");
			Menu::Option("prop_cablespool_04");
			Menu::Option("prop_cablespool_05");
			Menu::Option("prop_cablespool_06");
			Menu::Option("prop_cable_hook_01");
			Menu::Option("prop_camera_strap");
			Menu::Option("prop_candy_pqs");
			Menu::Option("prop_can_canoe");
			Menu::Option("prop_cap_01");
			Menu::Option("prop_cap_01b");
			Menu::Option("prop_cap_row_01");
			Menu::Option("prop_cap_row_01b");
			Menu::Option("prop_cap_row_02");
			Menu::Option("prop_cap_row_02b");
			Menu::Option("prop_carcreeper");
			Menu::Option("prop_cargo_int");
			Menu::Option("prop_carjack");
			Menu::Option("prop_carjack_l2");
			Menu::Option("prop_carrier_bag_01");
			Menu::Option("prop_carrier_bag_01_lod");
			Menu::Option("prop_cartwheel_01");
			Menu::Option("prop_carwash_roller_horz");
			Menu::Option("prop_carwash_roller_vert");
			Menu::Option("prop_car_battery_01");
			Menu::Option("prop_car_bonnet_01");
			Menu::Option("prop_car_bonnet_02");
			Menu::Option("prop_car_door_01");
			Menu::Option("prop_car_door_02");
			Menu::Option("prop_car_door_03");
			Menu::Option("prop_car_door_04");
			Menu::Option("prop_car_engine_01");
			Menu::Option("prop_car_exhaust_01");
			Menu::Option("prop_car_ignition");
			Menu::Option("prop_car_seat");
			Menu::Option("prop_casey_sec_id");
			Menu::Option("prop_cash_case_01");
			Menu::Option("prop_cash_case_02");
			Menu::Option("prop_cash_crate_01");
			Menu::Option("prop_cash_dep_bag_01");
			Menu::Option("prop_cash_envelope_01");
			Menu::Option("prop_cash_note_01");
			Menu::Option("prop_cash_pile_01");
			Menu::Option("prop_cash_pile_02");
			Menu::Option("prop_cash_trolly");
			Menu::Option("prop_casino_door_01l");
			Menu::Option("prop_casino_door_01r");
			Menu::Option("prop_cattlecrush");
			Menu::Option("prop_cat_tail_01");
			Menu::Option("prop_cctv_02_sm");
			Menu::Option("prop_cctv_cont_01");
			Menu::Option("prop_cctv_cont_03");
			Menu::Option("prop_cctv_cont_04");
			Menu::Option("prop_cctv_cont_05");
			Menu::Option("prop_cctv_cont_06");
			Menu::Option("prop_cctv_unit_01");
			Menu::Option("prop_cctv_unit_02");
			Menu::Option("prop_cctv_unit_05");
			Menu::Option("prop_cementmixer_01a");
			Menu::Option("prop_cementmixer_02a");
			Menu::Option("prop_ceramic_jug_01");
			Menu::Option("prop_ceramic_jug_cork");
			Menu::Option("prop_ch1_07_door_01l");
			Menu::Option("prop_ch1_07_door_01r");
			Menu::Option("prop_ch1_07_door_02l");
			Menu::Option("prop_ch1_07_door_02r");
			Menu::Option("prop_ch2_05d_g_door");
			Menu::Option("prop_ch2_07b_20_g_door");
			Menu::Option("prop_ch2_09b_door");
			Menu::Option("prop_ch2_09c_garage_door");
			Menu::Option("prop_ch3_01_trlrdoor_l");
			Menu::Option("prop_ch3_01_trlrdoor_r");
			Menu::Option("prop_ch3_04_door_01l");
			Menu::Option("prop_ch3_04_door_01r");
			Menu::Option("prop_ch3_04_door_02");
			Menu::Option("prop_chair_01a");
			Menu::Option("prop_chair_01b");
			Menu::Option("prop_chair_02");
			Menu::Option("prop_chair_03");
			Menu::Option("prop_chair_04a");
			Menu::Option("prop_chair_04b");
			Menu::Option("prop_chair_05");
			Menu::Option("prop_chair_06");
			Menu::Option("prop_chair_07");
			Menu::Option("prop_chair_08");
			Menu::Option("prop_chair_09");
			Menu::Option("prop_chair_10");
			Menu::Option("prop_chair_pile_01");
			Menu::Option("prop_chall_lamp_01");
			Menu::Option("prop_chall_lamp_01n");
			Menu::Option("prop_chall_lamp_02");
			Menu::Option("prop_chateau_chair_01");
			Menu::Option("prop_cheetah_covered");
			Menu::Option("prop_chem_grill");
			Menu::Option("prop_chem_grill_bit");
			Menu::Option("prop_chem_vial_02");
			Menu::Option("prop_chem_vial_02b");
			Menu::Option("prop_cherenneon");
			Menu::Option("prop_chickencoop_a");
			Menu::Option("prop_chip_fryer");
			Menu::Option("prop_choc_ego");
			Menu::Option("prop_choc_meto");
			Menu::Option("prop_choc_pq");
			Menu::Option("prop_ch_025c_g_door_01");
			Menu::Option("prop_cigar_01");
			Menu::Option("prop_cigar_02");
			Menu::Option("prop_cigar_03");
			Menu::Option("prop_cigar_pack_01");
			Menu::Option("prop_cigar_pack_02");
			Menu::Option("prop_clapper_brd_01");
			Menu::Option("prop_cleaver");
			Menu::Option("prop_cliff_paper");
			Menu::Option("prop_clippers_01");
			Menu::Option("prop_clothes_rail_02");
			Menu::Option("prop_clothes_rail_03");
			Menu::Option("prop_clothes_rail_2b");
			Menu::Option("prop_clothes_tub_01");
			Menu::Option("prop_clown_chair");
			Menu::Option("prop_cntrdoor_ld_l");
			Menu::Option("prop_cntrdoor_ld_r");
			Menu::Option("prop_coathook_01");
			Menu::Option("prop_cockneon");
			Menu::Option("prop_coffee_cup_trailer");
			Menu::Option("prop_coffee_mac_02");
			Menu::Option("prop_coffin_02");
			Menu::Option("prop_coffin_02b");
			Menu::Option("prop_coke_block_01");
			Menu::Option("prop_coke_block_half_a");
			Menu::Option("prop_coke_block_half_b");
			Menu::Option("prop_compressor_01");
			Menu::Option("prop_compressor_02");
			Menu::Option("prop_compressor_03");
			Menu::Option("prop_com_gar_door_01");
			Menu::Option("prop_com_ls_door_01");
			Menu::Option("prop_conc_sacks_02a");
			Menu::Option("prop_cone_float_1");
			Menu::Option("prop_conschute");
			Menu::Option("prop_consign_01c");
			Menu::Option("prop_consign_02a");
			Menu::Option("prop_conslift_base");
			Menu::Option("prop_conslift_brace");
			Menu::Option("prop_conslift_cage");
			Menu::Option("prop_conslift_door");
			Menu::Option("prop_conslift_lift");
			Menu::Option("prop_conslift_rail");
			Menu::Option("prop_conslift_rail2");
			Menu::Option("prop_conslift_steps");
			Menu::Option("prop_console_01");
			Menu::Option("prop_construcionlamp_01");
			Menu::Option("prop_const_fence01a");
			Menu::Option("prop_const_fence01b");
			Menu::Option("prop_const_fence02a");
			Menu::Option("prop_const_fence02b");
			Menu::Option("prop_const_fence03b");
			Menu::Option("prop_cons_crate");
			Menu::Option("prop_cons_plank");
			Menu::Option("prop_cons_ply01");
			Menu::Option("prop_cons_ply02");
			Menu::Option("prop_container_01a");
			Menu::Option("prop_container_01b");
			Menu::Option("prop_container_01c");
			Menu::Option("prop_container_01d");
			Menu::Option("prop_container_01e");
			Menu::Option("prop_container_01f");
			Menu::Option("prop_container_01g");
			Menu::Option("prop_container_01h");
			Menu::Option("prop_container_01mb");
			Menu::Option("prop_container_02a");
			Menu::Option("prop_container_03a");
			Menu::Option("prop_container_03b");
			Menu::Option("prop_container_03mb");
			Menu::Option("prop_container_03_ld");
			Menu::Option("prop_container_04a");
			Menu::Option("prop_container_04mb");
			Menu::Option("prop_container_05mb");
			Menu::Option("prop_container_door_mb_l");
			Menu::Option("prop_container_door_mb_r");
			Menu::Option("prop_container_hole");
			Menu::Option("prop_container_ld");
			Menu::Option("prop_container_ld2");
			Menu::Option("prop_container_old1");
			Menu::Option("prop_contnr_pile_01a");
			Menu::Option("prop_controller_01");
			Menu::Option("prop_control_rm_door_01");
			Menu::Option("prop_cont_chiller_01");
			Menu::Option("prop_cooker_03");
			Menu::Option("prop_copier_01");
			Menu::Option("prop_copper_pan");
			Menu::Option("prop_coral_bush_01");
			Menu::Option("prop_coral_flat_01");
			Menu::Option("prop_coral_flat_01_l1");
			Menu::Option("prop_coral_flat_02");
			Menu::Option("prop_coral_flat_brainy");
			Menu::Option("prop_coral_flat_clam");
			Menu::Option("prop_coral_grass_01");
			Menu::Option("prop_coral_grass_02");
			Menu::Option("prop_coral_kelp_01");
			Menu::Option("prop_coral_kelp_01_l1");
			Menu::Option("prop_coral_kelp_02");
			Menu::Option("prop_coral_kelp_02_l1");
			Menu::Option("prop_coral_kelp_03");
			Menu::Option("prop_coral_kelp_03a");
			Menu::Option("prop_coral_kelp_03b");
			Menu::Option("prop_coral_kelp_03c");
			Menu::Option("prop_coral_kelp_03d");
			Menu::Option("prop_coral_kelp_03_l1");
			Menu::Option("prop_coral_kelp_04");
			Menu::Option("prop_coral_kelp_04_l1");
			Menu::Option("prop_coral_pillar_01");
			Menu::Option("prop_coral_pillar_02");
			Menu::Option("prop_coral_spikey_01");
			Menu::Option("prop_coral_stone_03");
			Menu::Option("prop_coral_stone_04");
			Menu::Option("prop_coral_sweed_01");
			Menu::Option("prop_coral_sweed_02");
			Menu::Option("prop_coral_sweed_03");
			Menu::Option("prop_coral_sweed_04");
			Menu::Option("prop_cora_clam_01");
			Menu::Option("prop_cork_board");
			Menu::Option("prop_couch_01");
			Menu::Option("prop_couch_03");
			Menu::Option("prop_couch_04");
			Menu::Option("prop_couch_lg_02");
			Menu::Option("prop_couch_lg_05");
			Menu::Option("prop_couch_lg_06");
			Menu::Option("prop_couch_lg_07");
			Menu::Option("prop_couch_lg_08");
			Menu::Option("prop_couch_sm1_07");
			Menu::Option("prop_couch_sm2_07");
			Menu::Option("prop_couch_sm_02");
			Menu::Option("prop_couch_sm_05");
			Menu::Option("prop_couch_sm_06");
			Menu::Option("prop_couch_sm_07");
			Menu::Option("prop_crane_01_truck1");
			Menu::Option("prop_crane_01_truck2");
			Menu::Option("prop_cranial_saw");
			Menu::Option("prop_crashed_heli");
			Menu::Option("prop_cratepile_07a_l1");
			Menu::Option("prop_crate_01a");
			Menu::Option("prop_crate_02a");
			Menu::Option("prop_crate_08a");
			Menu::Option("prop_crate_09a");
			Menu::Option("prop_crate_10a");
			Menu::Option("prop_crate_11a");
			Menu::Option("prop_crate_11b");
			Menu::Option("prop_crate_11c");
			Menu::Option("prop_crate_11d");
			Menu::Option("prop_crate_float_1");
			Menu::Option("prop_creosote_b_01");
			Menu::Option("prop_crisp");
			Menu::Option("prop_crisp_small");
			Menu::Option("prop_crosssaw_01");
			Menu::Option("prop_cs1_14b_traind");
			Menu::Option("prop_cs1_14b_traind_dam");
			Menu::Option("prop_cs4_05_tdoor");
			Menu::Option("prop_cs4_10_tr_gd_01");
			Menu::Option("prop_cs4_11_door");
			Menu::Option("prop_cs6_03_door_l");
			Menu::Option("prop_cs6_03_door_r");
			Menu::Option("prop_cs_20m_rope");
			Menu::Option("prop_cs_30m_rope");
			Menu::Option("prop_cs_abattoir_switch");
			Menu::Option("prop_cs_aircon_01");
			Menu::Option("prop_cs_aircon_fan");
			Menu::Option("prop_cs_amanda_shoe");
			Menu::Option("prop_cs_ashtray");
			Menu::Option("prop_cs_bandana");
			Menu::Option("prop_cs_bar");
			Menu::Option("prop_cs_beachtowel_01");
			Menu::Option("prop_cs_beer_bot_01");
			Menu::Option("prop_cs_beer_bot_01b");
			Menu::Option("prop_cs_beer_bot_01lod");
			Menu::Option("prop_cs_beer_bot_02");
			Menu::Option("prop_cs_beer_bot_03");
			Menu::Option("prop_cs_beer_bot_40oz");
			Menu::Option("prop_cs_beer_bot_40oz_02");
			Menu::Option("prop_cs_beer_bot_40oz_03");
			Menu::Option("prop_cs_beer_bot_test");
			Menu::Option("prop_cs_binder_01");
			Menu::Option("prop_cs_bin_01");
			Menu::Option("prop_cs_bin_01_lid");
			Menu::Option("prop_cs_bin_01_skinned");
			Menu::Option("prop_cs_bin_02");
			Menu::Option("prop_cs_bin_03");
			Menu::Option("prop_cs_book_01");
			Menu::Option("prop_cs_bottle_opener");
			Menu::Option("prop_cs_bowie_knife");
			Menu::Option("prop_cs_bowl_01");
			Menu::Option("prop_cs_bowl_01b");
			Menu::Option("prop_cs_box_clothes");
			Menu::Option("prop_cs_box_step");
			Menu::Option("prop_cs_brain_chunk");
			Menu::Option("prop_cs_bs_cup");
			Menu::Option("prop_cs_bucket_s");
			Menu::Option("prop_cs_bucket_s_lod");
			Menu::Option("prop_cs_burger_01");
			Menu::Option("prop_cs_business_card");
			Menu::Option("prop_cs_cardbox_01");
			Menu::Option("prop_cs_cash_note_01");
			Menu::Option("prop_cs_cctv");
			Menu::Option("prop_cs_champ_flute");
			Menu::Option("prop_cs_ciggy_01");
			Menu::Option("prop_cs_ciggy_01b");
			Menu::Option("prop_cs_clothes_box");
			Menu::Option("prop_cs_coke_line");
			Menu::Option("prop_cs_cont_latch");
			Menu::Option("prop_cs_crackpipe");
			Menu::Option("prop_cs_credit_card");
			Menu::Option("prop_cs_creeper_01");
			Menu::Option("prop_cs_crisps_01");
			Menu::Option("prop_cs_cuffs_01");
			Menu::Option("prop_cs_diaphram");
			Menu::Option("prop_cs_dildo_01");
			Menu::Option("prop_cs_documents_01");
			Menu::Option("prop_cs_dog_lead_2a");
			Menu::Option("prop_cs_dog_lead_2b");
			Menu::Option("prop_cs_dog_lead_2c");
			Menu::Option("prop_cs_dog_lead_3a");
			Menu::Option("prop_cs_dog_lead_3b");
			Menu::Option("prop_cs_dog_lead_a");
			Menu::Option("prop_cs_dog_lead_b");
			Menu::Option("prop_cs_dog_lead_c");
			Menu::Option("prop_cs_duffel_01");
			Menu::Option("prop_cs_duffel_01b");
			Menu::Option("prop_cs_dumpster_01a");
			Menu::Option("prop_cs_dumpster_lidl");
			Menu::Option("prop_cs_dumpster_lidr");
			Menu::Option("prop_cs_dvd");
			Menu::Option("prop_cs_dvd_case");
			Menu::Option("prop_cs_dvd_player");
			Menu::Option("prop_cs_envolope_01");
			Menu::Option("prop_cs_fertilizer");
			Menu::Option("prop_cs_film_reel_01");
			Menu::Option("prop_cs_folding_chair_01");
			Menu::Option("prop_cs_fork");
			Menu::Option("prop_cs_frank_photo");
			Menu::Option("prop_cs_freightdoor_l1");
			Menu::Option("prop_cs_freightdoor_r1");
			Menu::Option("prop_cs_fridge");
			Menu::Option("prop_cs_fridge_door");
			Menu::Option("prop_cs_fuel_hose");
			Menu::Option("prop_cs_fuel_nozle");
			Menu::Option("prop_cs_gascutter_1");
			Menu::Option("prop_cs_gascutter_2");
			Menu::Option("prop_cs_glass_scrap");
			Menu::Option("prop_cs_gravyard_gate_l");
			Menu::Option("prop_cs_gravyard_gate_r");
			Menu::Option("prop_cs_gunrack");
			Menu::Option("prop_cs_hand_radio");
			Menu::Option("prop_cs_heist_bag_01");
			Menu::Option("prop_cs_heist_bag_02");
			Menu::Option("prop_cs_heist_bag_strap_01");
			Menu::Option("prop_cs_heist_rope");
			Menu::Option("prop_cs_heist_rope_b");
			Menu::Option("prop_cs_hotdog_01");
			Menu::Option("prop_cs_hotdog_02");
			Menu::Option("prop_cs_h_bag_strap_01");
			Menu::Option("prop_cs_ice_locker");
			Menu::Option("prop_cs_ice_locker_door_l");
			Menu::Option("prop_cs_ice_locker_door_r");
			Menu::Option("prop_cs_ilev_blind_01");
			Menu::Option("prop_cs_ironing_board");
			Menu::Option("prop_cs_katana_01");
			Menu::Option("prop_cs_kettle_01");
			Menu::Option("prop_cs_keyboard_01");
			Menu::Option("prop_cs_keys_01");
			Menu::Option("prop_cs_kitchen_cab_l2");
			Menu::Option("prop_cs_kitchen_cab_ld");
			Menu::Option("prop_cs_kitchen_cab_rd");
			Menu::Option("prop_cs_lazlow_ponytail");
			Menu::Option("prop_cs_lazlow_shirt_01");
			Menu::Option("prop_cs_lazlow_shirt_01b");
			Menu::Option("prop_cs_leaf");
			Menu::Option("prop_cs_leg_chain_01");
			Menu::Option("prop_cs_lester_crate");
			Menu::Option("prop_cs_lipstick");
			Menu::Option("prop_cs_magazine");
			Menu::Option("prop_cs_marker_01");
			Menu::Option("prop_cs_meth_pipe");
			Menu::Option("prop_cs_milk_01");
			Menu::Option("prop_cs_mini_tv");
			Menu::Option("prop_cs_mopbucket_01");
			Menu::Option("prop_cs_mop_s");
			Menu::Option("prop_cs_mouse_01");
			Menu::Option("prop_cs_nail_file");
			Menu::Option("prop_cs_newspaper");
			Menu::Option("prop_cs_office_chair");
			Menu::Option("prop_cs_overalls_01");
			Menu::Option("prop_cs_package_01");
			Menu::Option("prop_cs_padlock");
			Menu::Option("prop_cs_pamphlet_01");
			Menu::Option("prop_cs_panel_01");
			Menu::Option("prop_cs_panties");
			Menu::Option("prop_cs_panties_02");
			Menu::Option("prop_cs_panties_03");
			Menu::Option("prop_cs_paper_cup");
			Menu::Option("prop_cs_para_ropebit");
			Menu::Option("prop_cs_para_ropes");
			Menu::Option("prop_cs_pebble");
			Menu::Option("prop_cs_pebble_02");
			Menu::Option("prop_cs_petrol_can");
			Menu::Option("prop_cs_phone_01");
			Menu::Option("prop_cs_photoframe_01");
			Menu::Option("prop_cs_pills");
			Menu::Option("prop_cs_plane_int_01");
			Menu::Option("prop_cs_planning_photo");
			Menu::Option("prop_cs_plant_01");
			Menu::Option("prop_cs_plate_01");
			Menu::Option("prop_cs_polaroid");
			Menu::Option("prop_cs_police_torch");
			Menu::Option("prop_cs_pour_tube");
			Menu::Option("prop_cs_power_cell");
			Menu::Option("prop_cs_power_cord");
			Menu::Option("prop_cs_protest_sign_01");
			Menu::Option("prop_cs_protest_sign_02");
			Menu::Option("prop_cs_protest_sign_02b");
			Menu::Option("prop_cs_protest_sign_03");
			Menu::Option("prop_cs_protest_sign_04a");
			Menu::Option("prop_cs_protest_sign_04b");
			Menu::Option("prop_cs_rage_statue_p1");
			Menu::Option("prop_cs_rage_statue_p2");
			Menu::Option("prop_cs_remote_01");
			Menu::Option("prop_cs_rolled_paper");
			Menu::Option("prop_cs_rope_tie_01");
			Menu::Option("prop_cs_rub_binbag_01");
			Menu::Option("prop_cs_rub_box_01");
			Menu::Option("prop_cs_rub_box_02");
			Menu::Option("prop_cs_r_business_card");
			Menu::Option("prop_cs_sack_01");
			Menu::Option("prop_cs_saucer_01");
			Menu::Option("prop_cs_sc1_11_gate");
			Menu::Option("prop_cs_scissors");
			Menu::Option("prop_cs_script_bottle");
			Menu::Option("prop_cs_script_bottle_01");
			Menu::Option("prop_cs_server_drive");
			Menu::Option("prop_cs_sheers");
			Menu::Option("prop_cs_shirt_01");
			Menu::Option("prop_cs_shopping_bag");
			Menu::Option("prop_cs_shot_glass");
			Menu::Option("prop_cs_silver_tray");
			Menu::Option("prop_cs_sink_filler");
			Menu::Option("prop_cs_sink_filler_02");
			Menu::Option("prop_cs_sink_filler_03");
			Menu::Option("prop_cs_sm_27_gate");
			Menu::Option("prop_cs_sol_glasses");
			Menu::Option("prop_cs_spray_can");
			Menu::Option("prop_cs_steak");
			Menu::Option("prop_cs_stock_book");
			Menu::Option("prop_cs_street_binbag_01");
			Menu::Option("prop_cs_street_card_01");
			Menu::Option("prop_cs_street_card_02");
			Menu::Option("prop_cs_sub_hook_01");
			Menu::Option("prop_cs_sub_rope_01");
			Menu::Option("prop_cs_swipe_card");
			Menu::Option("prop_cs_tablet");
			Menu::Option("prop_cs_tablet_02");
			Menu::Option("prop_cs_toaster");
			Menu::Option("prop_cs_trolley_01");
			Menu::Option("prop_cs_trowel");
			Menu::Option("prop_cs_truck_ladder");
			Menu::Option("prop_cs_tshirt_ball_01");
			Menu::Option("prop_cs_tv_stand");
			Menu::Option("prop_cs_t_shirt_pile");
			Menu::Option("prop_cs_valve");
			Menu::Option("prop_cs_vent_cover");
			Menu::Option("prop_cs_vial_01");
			Menu::Option("prop_cs_walkie_talkie");
			Menu::Option("prop_cs_walking_stick");
			Menu::Option("prop_cs_whiskey_bottle");
			Menu::Option("prop_cs_whiskey_bot_stop");
			Menu::Option("prop_cs_wrench");
			Menu::Option("prop_cub_door_lifeblurb");
			Menu::Option("prop_cub_lifeblurb");
			Menu::Option("prop_cuff_keys_01");
			Menu::Option("prop_cup_saucer_01");
			Menu::Option("prop_curl_bar_01");
			Menu::Option("prop_damdoor_01");
			Menu::Option("prop_dart_1");
			Menu::Option("prop_dart_2");
			Menu::Option("prop_dart_bd_01");
			Menu::Option("prop_dart_bd_cab_01");
			Menu::Option("prop_defilied_ragdoll_01");
			Menu::Option("prop_desert_iron_01");
			Menu::Option("prop_detergent_01a");
			Menu::Option("prop_detergent_01b");
			Menu::Option("prop_devin_box_01");
			Menu::Option("prop_devin_rope_01");
			Menu::Option("prop_diggerbkt_01");
			Menu::Option("prop_direct_chair_01");
			Menu::Option("prop_direct_chair_02");
			Menu::Option("prop_display_unit_01");
			Menu::Option("prop_display_unit_02");
			Menu::Option("prop_disp_cabinet_002");
			Menu::Option("prop_disp_cabinet_01");
			Menu::Option("prop_disp_razor_01");
			Menu::Option("prop_distantcar_day");
			Menu::Option("prop_distantcar_night");
			Menu::Option("prop_distantcar_truck");
			Menu::Option("prop_dj_deck_01");
			Menu::Option("prop_dj_deck_02");
			Menu::Option("prop_dock_bouy_1");
			Menu::Option("prop_dock_bouy_2");
			Menu::Option("prop_dock_bouy_3");
			Menu::Option("prop_dock_bouy_5");
			Menu::Option("prop_dock_crane_01");
			Menu::Option("prop_dock_crane_02");
			Menu::Option("prop_dock_crane_02_cab");
			Menu::Option("prop_dock_crane_02_hook");
			Menu::Option("prop_dock_crane_02_ld");
			Menu::Option("prop_dock_crane_04");
			Menu::Option("prop_dock_crane_lift");
			Menu::Option("prop_dock_float_1");
			Menu::Option("prop_dock_float_1b");
			Menu::Option("prop_dock_moor_01");
			Menu::Option("prop_dock_moor_04");
			Menu::Option("prop_dock_moor_05");
			Menu::Option("prop_dock_moor_06");
			Menu::Option("prop_dock_moor_07");
			Menu::Option("prop_dock_ropefloat");
			Menu::Option("prop_dock_ropetyre1");
			Menu::Option("prop_dock_ropetyre2");
			Menu::Option("prop_dock_ropetyre3");
			Menu::Option("prop_dock_rtg_01");
			Menu::Option("prop_dock_rtg_ld");
			Menu::Option("prop_dock_shippad");
			Menu::Option("prop_dock_sign_01");
			Menu::Option("prop_dock_woodpole1");
			Menu::Option("prop_dock_woodpole2");
			Menu::Option("prop_dock_woodpole3");
			Menu::Option("prop_dock_woodpole4");
			Menu::Option("prop_dock_woodpole5");
			Menu::Option("prop_dog_cage_01");
			Menu::Option("prop_dog_cage_02");
			Menu::Option("prop_dolly_01");
			Menu::Option("prop_dolly_02");
			Menu::Option("prop_donut_01");
			Menu::Option("prop_donut_02");
			Menu::Option("prop_donut_02b");
			Menu::Option("prop_door_01");
			Menu::Option("prop_door_balcony_frame");
			Menu::Option("prop_door_balcony_left");
			Menu::Option("prop_door_balcony_right");
			Menu::Option("prop_door_bell_01");
			Menu::Option("prop_double_grid_line");
			Menu::Option("prop_dress_disp_01");
			Menu::Option("prop_dress_disp_02");
			Menu::Option("prop_dress_disp_03");
			Menu::Option("prop_dress_disp_04");
			Menu::Option("prop_drop_armscrate_01");
			Menu::Option("prop_drop_armscrate_01b");
			Menu::Option("prop_drop_crate_01");
			Menu::Option("prop_drop_crate_01_set");
			Menu::Option("prop_drop_crate_01_set2");
			Menu::Option("prop_drug_burner");
			Menu::Option("prop_drug_package");
			Menu::Option("prop_drug_package_02");
			Menu::Option("prop_drywallpile_01");
			Menu::Option("prop_drywallpile_02");
			Menu::Option("prop_dt1_13_groundlight");
			Menu::Option("prop_dt1_13_walllightsource");
			Menu::Option("prop_dt1_20_mp_door_l");
			Menu::Option("prop_dt1_20_mp_door_r");
			Menu::Option("prop_dt1_20_mp_gar");
			Menu::Option("prop_ducktape_01");
			Menu::Option("prop_dummy_01");
			Menu::Option("prop_dummy_car");
			Menu::Option("prop_dummy_light");
			Menu::Option("prop_dummy_plane");
			Menu::Option("prop_dumpster_3a");
			Menu::Option("prop_dumpster_3step");
			Menu::Option("prop_dumpster_4a");
			Menu::Option("prop_dumpster_4b");
			Menu::Option("prop_d_balcony_l_light");
			Menu::Option("prop_d_balcony_r_light");
			Menu::Option("prop_ear_defenders_01");
			Menu::Option("prop_ecg_01");
			Menu::Option("prop_ecg_01_cable_01");
			Menu::Option("prop_ecg_01_cable_02");
			Menu::Option("prop_ecola_can");
			Menu::Option("prop_egg_clock_01");
			Menu::Option("prop_ejector_seat_01");
			Menu::Option("prop_elecbox_03a");
			Menu::Option("prop_elecbox_10");
			Menu::Option("prop_elecbox_12");
			Menu::Option("prop_elecbox_13");
			Menu::Option("prop_elecbox_14");
			Menu::Option("prop_elecbox_15");
			Menu::Option("prop_elecbox_16");
			Menu::Option("prop_elecbox_17");
			Menu::Option("prop_elecbox_18");
			Menu::Option("prop_elecbox_19");
			Menu::Option("prop_elecbox_20");
			Menu::Option("prop_elecbox_21");
			Menu::Option("prop_elecbox_22");
			Menu::Option("prop_elecbox_23");
			Menu::Option("prop_elecbox_24");
			Menu::Option("prop_elecbox_24b");
			Menu::Option("prop_elecbox_25");
			Menu::Option("prop_el_guitar_01");
			Menu::Option("prop_el_guitar_02");
			Menu::Option("prop_el_guitar_03");
			Menu::Option("prop_employee_month_01");
			Menu::Option("prop_employee_month_02");
			Menu::Option("prop_energy_drink");
			Menu::Option("prop_entityxf_covered");
			Menu::Option("prop_epsilon_door_l");
			Menu::Option("prop_epsilon_door_r");
			Menu::Option("prop_etricmotor_01");
			Menu::Option("prop_exer_bike_01");
			Menu::Option("prop_faceoffice_door_l");
			Menu::Option("prop_faceoffice_door_r");
			Menu::Option("prop_face_rag_01");
			Menu::Option("prop_facgate_01");
			Menu::Option("prop_facgate_01b");
			Menu::Option("prop_facgate_02pole");
			Menu::Option("prop_facgate_02_l");
			Menu::Option("prop_facgate_03post");
			Menu::Option("prop_facgate_03_l");
			Menu::Option("prop_facgate_03_ld_l");
			Menu::Option("prop_facgate_03_ld_r");
			Menu::Option("prop_facgate_03_r");
			Menu::Option("prop_facgate_04_l");
			Menu::Option("prop_facgate_04_r");
			Menu::Option("prop_facgate_05_r");
			Menu::Option("prop_facgate_05_r_dam_l1");
			Menu::Option("prop_facgate_05_r_l1");
			Menu::Option("prop_facgate_06_l");
			Menu::Option("prop_facgate_06_r");
			Menu::Option("prop_facgate_07");
			Menu::Option("prop_facgate_07b");
			Menu::Option("prop_facgate_08");
			Menu::Option("prop_facgate_08_frame");
			Menu::Option("prop_facgate_08_ld2");
			Menu::Option("prop_facgate_id1_27");
			Menu::Option("prop_fac_machine_02");
			Menu::Option("prop_fag_packet_01");
			Menu::Option("prop_fan_01");
			Menu::Option("prop_fan_palm_01a");
			Menu::Option("prop_fax_01");
			Menu::Option("prop_fbi3_coffee_table");
			Menu::Option("prop_fbibombbin");
			Menu::Option("prop_fbibombcupbrd");
			Menu::Option("prop_fbibombfile");
			Menu::Option("prop_fbibombplant");
			Menu::Option("prop_feeder1");
			Menu::Option("prop_feed_sack_01");
			Menu::Option("prop_feed_sack_02");
			Menu::Option("prop_fence_log_01");
			Menu::Option("prop_fence_log_02");
			Menu::Option("prop_ferris_car_01");
			Menu::Option("prop_ferris_car_01_lod1");
			Menu::Option("prop_ff_counter_01");
			Menu::Option("prop_ff_counter_02");
			Menu::Option("prop_ff_counter_03");
			Menu::Option("prop_ff_noodle_01");
			Menu::Option("prop_ff_noodle_02");
			Menu::Option("prop_ff_shelves_01");
			Menu::Option("prop_ff_sink_01");
			Menu::Option("prop_ff_sink_02");
			Menu::Option("prop_fib_badge");
			Menu::Option("prop_fib_broken_window");
			Menu::Option("prop_fib_skylight_piece");
			Menu::Option("prop_film_cam_01");
			Menu::Option("prop_fireescape_01a");
			Menu::Option("prop_fireescape_01b");
			Menu::Option("prop_fireescape_02a");
			Menu::Option("prop_fireescape_02b");
			Menu::Option("prop_fire_driser_1a");
			Menu::Option("prop_fire_driser_1b");
			Menu::Option("prop_fire_driser_2b");
			Menu::Option("prop_fire_driser_3b");
			Menu::Option("prop_fire_driser_4a");
			Menu::Option("prop_fire_driser_4b");
			Menu::Option("prop_fire_hosereel");
			Menu::Option("prop_fishing_rod_01");
			Menu::Option("prop_fishing_rod_02");
			Menu::Option("prop_fish_slice_01");
			Menu::Option("prop_flagpole_1a");
			Menu::Option("prop_flagpole_2a");
			Menu::Option("prop_flagpole_3a");
			Menu::Option("prop_flare_01");
			Menu::Option("prop_flare_01b");
			Menu::Option("prop_flash_unit");
			Menu::Option("prop_flatbed_strap");
			Menu::Option("prop_flatbed_strap_b");
			Menu::Option("prop_flatscreen_overlay");
			Menu::Option("prop_flattrailer_01a");
			Menu::Option("prop_flattruck_01a");
			Menu::Option("prop_fleeca_atm");
			Menu::Option("prop_flight_box_01");
			Menu::Option("prop_flight_box_insert");
			Menu::Option("prop_flight_box_insert2");
			Menu::Option("prop_flipchair_01");
			Menu::Option("prop_floor_duster_01");
			Menu::Option("prop_fncconstruc_02a");
			Menu::Option("prop_fnccorgm_05a");
			Menu::Option("prop_fnccorgm_05b");
			Menu::Option("prop_fnccorgm_06a");
			Menu::Option("prop_fnccorgm_06b");
			Menu::Option("prop_fnclink_01gate1");
			Menu::Option("prop_fnclink_02gate1");
			Menu::Option("prop_fnclink_02gate2");
			Menu::Option("prop_fnclink_02gate5");
			Menu::Option("prop_fnclink_02gate6_l");
			Menu::Option("prop_fnclink_02gate6_r");
			Menu::Option("prop_fnclink_02gate7");
			Menu::Option("prop_fnclink_03gate1");
			Menu::Option("prop_fnclink_03gate2");
			Menu::Option("prop_fnclink_03gate4");
			Menu::Option("prop_fnclink_03gate5");
			Menu::Option("prop_fnclink_04gate1");
			Menu::Option("prop_fnclink_04h_l2");
			Menu::Option("prop_fnclink_06gate2");
			Menu::Option("prop_fnclink_06gate3");
			Menu::Option("prop_fnclink_06gatepost");
			Menu::Option("prop_fnclink_07gate1");
			Menu::Option("prop_fnclink_07gate2");
			Menu::Option("prop_fnclink_07gate3");
			Menu::Option("prop_fnclink_09gate1");
			Menu::Option("prop_fnclink_10a");
			Menu::Option("prop_fnclink_10b");
			Menu::Option("prop_fnclink_10c");
			Menu::Option("prop_fnclink_10d");
			Menu::Option("prop_fnclink_10e");
			Menu::Option("prop_fnclog_01a");
			Menu::Option("prop_fnclog_01b");
			Menu::Option("prop_fncpeir_03a");
			Menu::Option("prop_fncres_02a");
			Menu::Option("prop_fncres_02b");
			Menu::Option("prop_fncres_02c");
			Menu::Option("prop_fncres_02d");
			Menu::Option("prop_fncres_02_gate1");
			Menu::Option("prop_fncres_03gate1");
			Menu::Option("prop_fncres_05c_l1");
			Menu::Option("prop_fncsec_01a");
			Menu::Option("prop_fncsec_01b");
			Menu::Option("prop_fncsec_01crnr");
			Menu::Option("prop_fncsec_01gate");
			Menu::Option("prop_fncsec_01pole");
			Menu::Option("prop_fncsec_02a");
			Menu::Option("prop_fncsec_02pole");
			Menu::Option("prop_fncsec_04a");
			Menu::Option("prop_fncwood_07gate1");
			Menu::Option("prop_fncwood_11a_l1");
			Menu::Option("prop_fncwood_16a");
			Menu::Option("prop_fncwood_16b");
			Menu::Option("prop_fncwood_16c");
			Menu::Option("prop_fncwood_18a");
			Menu::Option("prop_folded_polo_shirt");
			Menu::Option("prop_folder_01");
			Menu::Option("prop_folder_02");
			Menu::Option("prop_food_bin_01");
			Menu::Option("prop_food_bin_02");
			Menu::Option("prop_food_bs_bshelf");
			Menu::Option("prop_food_bs_cups01");
			Menu::Option("prop_food_bs_cups03");
			Menu::Option("prop_food_bs_soda_01");
			Menu::Option("prop_food_bs_soda_02");
			Menu::Option("prop_food_bs_tray_01");
			Menu::Option("prop_food_bs_tray_06");
			Menu::Option("prop_food_burg1");
			Menu::Option("prop_food_burg2");
			Menu::Option("prop_food_cb_bshelf");
			Menu::Option("prop_food_cb_burg01");
			Menu::Option("prop_food_cb_cups01");
			Menu::Option("prop_food_cb_donuts");
			Menu::Option("prop_food_cb_nugets");
			Menu::Option("prop_food_cb_soda_01");
			Menu::Option("prop_food_cb_soda_02");
			Menu::Option("prop_food_cb_tray_01");
			Menu::Option("prop_food_cups1");
			Menu::Option("prop_food_napkin_01");
			Menu::Option("prop_food_napkin_02");
			Menu::Option("prop_food_tray_01");
			Menu::Option("prop_food_van_01");
			Menu::Option("prop_food_van_02");
			Menu::Option("prop_forsalejr2");
			Menu::Option("prop_forsalejr3");
			Menu::Option("prop_forsalejr4");
			Menu::Option("prop_foundation_sponge");
			Menu::Option("prop_fountain1");
			Menu::Option("prop_fountain2");
			Menu::Option("prop_franklin_dl");
			Menu::Option("prop_freeweight_01");
			Menu::Option("prop_freeweight_02");
			Menu::Option("prop_fridge_01");
			Menu::Option("prop_fridge_03");
			Menu::Option("prop_front_seat_01");
			Menu::Option("prop_front_seat_02");
			Menu::Option("prop_front_seat_03");
			Menu::Option("prop_front_seat_04");
			Menu::Option("prop_front_seat_05");
			Menu::Option("prop_front_seat_06");
			Menu::Option("prop_front_seat_07");
			Menu::Option("prop_front_seat_row_01");
			Menu::Option("prop_fruitstand_b_nite");
			Menu::Option("prop_fruit_basket");
			Menu::Option("prop_ftowel_01");
			Menu::Option("prop_ftowel_07");
			Menu::Option("prop_ftowel_08");
			Menu::Option("prop_ftowel_10");
			Menu::Option("prop_f_b_insert_broken");
			Menu::Option("prop_f_duster_01_s");
			Menu::Option("prop_f_duster_02");
			Menu::Option("prop_gaffer_arm_bind");
			Menu::Option("prop_gaffer_arm_bind_cut");
			Menu::Option("prop_gaffer_leg_bind");
			Menu::Option("prop_gaffer_leg_bind_cut");
			Menu::Option("prop_gaffer_tape");
			Menu::Option("prop_gaffer_tape_strip");
			Menu::Option("prop_game_clock_01");
			Menu::Option("prop_game_clock_02");
			Menu::Option("prop_garden_dreamcatch_01");
			Menu::Option("prop_garden_edging_01");
			Menu::Option("prop_garden_edging_02");
			Menu::Option("prop_garden_zapper_01");
			Menu::Option("prop_gardnght_01");
			Menu::Option("prop_gar_door_01");
			Menu::Option("prop_gar_door_02");
			Menu::Option("prop_gar_door_03");
			Menu::Option("prop_gar_door_03_ld");
			Menu::Option("prop_gar_door_04");
			Menu::Option("prop_gar_door_05");
			Menu::Option("prop_gar_door_05_l");
			Menu::Option("prop_gar_door_05_r");
			Menu::Option("prop_gar_door_a_01");
			Menu::Option("prop_gar_door_plug");
			Menu::Option("prop_gascage01");
			Menu::Option("prop_gascyl_ramp_01");
			Menu::Option("prop_gascyl_ramp_door_01");
			Menu::Option("prop_gas_01");
			Menu::Option("prop_gas_02");
			Menu::Option("prop_gas_03");
			Menu::Option("prop_gas_04");
			Menu::Option("prop_gas_05");
			Menu::Option("prop_gas_grenade");
			Menu::Option("prop_gas_mask_hang_01");
			Menu::Option("prop_gatecom_02");
			Menu::Option("prop_gate_airport_01");
			Menu::Option("prop_gate_bridge_ld");
			Menu::Option("prop_gate_cult_01_l");
			Menu::Option("prop_gate_cult_01_r");
			Menu::Option("prop_gate_docks_ld");
			Menu::Option("prop_gate_farm_01a");
			Menu::Option("prop_gate_farm_post");
			Menu::Option("prop_gate_frame_01");
			Menu::Option("prop_gate_frame_02");
			Menu::Option("prop_gate_frame_04");
			Menu::Option("prop_gate_frame_05");
			Menu::Option("prop_gate_frame_06");
			Menu::Option("prop_gate_military_01");
			Menu::Option("prop_gate_prison_01");
			Menu::Option("prop_gate_tep_01_l");
			Menu::Option("prop_gate_tep_01_r");
			Menu::Option("prop_gazebo_03");
			Menu::Option("prop_gd_ch2_08");
			Menu::Option("prop_generator_02a");
			Menu::Option("prop_generator_03a");
			Menu::Option("prop_generator_04");
			Menu::Option("prop_ghettoblast_02");
			Menu::Option("prop_girder_01a");
			Menu::Option("prop_glasscutter_01");
			Menu::Option("prop_glass_suck_holder");
			Menu::Option("prop_glf_roller");
			Menu::Option("prop_glf_spreader");
			Menu::Option("prop_gold_bar");
			Menu::Option("prop_gold_cont_01");
			Menu::Option("prop_gold_cont_01b");
			Menu::Option("prop_gold_trolly");
			Menu::Option("prop_gold_trolly_full");
			Menu::Option("prop_gold_trolly_strap_01");
			Menu::Option("prop_golf_bag_01");
			Menu::Option("prop_golf_bag_01b");
			Menu::Option("prop_golf_bag_01c");
			Menu::Option("prop_golf_ball");
			Menu::Option("prop_golf_ball_p2");
			Menu::Option("prop_golf_ball_p3");
			Menu::Option("prop_golf_ball_p4");
			Menu::Option("prop_golf_ball_tee");
			Menu::Option("prop_golf_driver");
			Menu::Option("prop_golf_iron_01");
			Menu::Option("prop_golf_marker_01");
			Menu::Option("prop_golf_pitcher_01");
			Menu::Option("prop_golf_putter_01");
			Menu::Option("prop_golf_tee");
			Menu::Option("prop_golf_wood_01");
			Menu::Option("prop_grain_hopper");
			Menu::Option("prop_grapes_01");
			Menu::Option("prop_grapes_02");
			Menu::Option("prop_grass_dry_02");
			Menu::Option("prop_grass_dry_03");
			Menu::Option("prop_gravestones_01a");
			Menu::Option("prop_gravestones_02a");
			Menu::Option("prop_gravestones_03a");
			Menu::Option("prop_gravestones_04a");
			Menu::Option("prop_gravestones_05a");
			Menu::Option("prop_gravestones_06a");
			Menu::Option("prop_gravestones_07a");
			Menu::Option("prop_gravestones_08a");
			Menu::Option("prop_gravestones_09a");
			Menu::Option("prop_gravestones_10a");
			Menu::Option("prop_gravetomb_01a");
			Menu::Option("prop_gravetomb_02a");
			Menu::Option("prop_griddle_01");
			Menu::Option("prop_griddle_02");
			Menu::Option("prop_grumandoor_l");
			Menu::Option("prop_grumandoor_r");
			Menu::Option("prop_gshotsensor_01");
			Menu::Option("prop_gun_case_01");
			Menu::Option("prop_gun_case_02");
			Menu::Option("prop_gun_frame");
			Menu::Option("prop_hacky_sack_01");
			Menu::Option("prop_handdry_01");
			Menu::Option("prop_handdry_02");
			Menu::Option("prop_handrake");
			Menu::Option("prop_handtowels");
			Menu::Option("prop_hand_toilet");
			Menu::Option("prop_hanger_door_1");
			Menu::Option("prop_hard_hat_01");
			Menu::Option("prop_hat_box_01");
			Menu::Option("prop_hat_box_02");
			Menu::Option("prop_hat_box_03");
			Menu::Option("prop_hat_box_04");
			Menu::Option("prop_hat_box_05");
			Menu::Option("prop_hat_box_06");
			Menu::Option("prop_haybailer_01");
			Menu::Option("prop_haybale_01");
			Menu::Option("prop_haybale_02");
			Menu::Option("prop_haybale_stack_01");
			Menu::Option("prop_hd_seats_01");
			Menu::Option("prop_headphones_01");
			Menu::Option("prop_headset_01");
			Menu::Option("prop_hedge_trimmer_01");
			Menu::Option("prop_helipad_01");
			Menu::Option("prop_helipad_02");
			Menu::Option("prop_henna_disp_01");
			Menu::Option("prop_henna_disp_02");
			Menu::Option("prop_henna_disp_03");
			Menu::Option("prop_hifi_01");
			Menu::Option("prop_hobo_stove_01");
			Menu::Option("prop_hockey_bag_01");
			Menu::Option("prop_hole_plug_01");
			Menu::Option("prop_holster_01");
			Menu::Option("prop_homeless_matress_01");
			Menu::Option("prop_homeless_matress_02");
			Menu::Option("prop_hose_1");
			Menu::Option("prop_hose_2");
			Menu::Option("prop_hose_3");
			Menu::Option("prop_hose_nozzle");
			Menu::Option("prop_hospitaldoors_start");
			Menu::Option("prop_hospital_door_l");
			Menu::Option("prop_hospital_door_r");
			Menu::Option("prop_hotel_clock_01");
			Menu::Option("prop_hotel_trolley");
			Menu::Option("prop_hottub2");
			Menu::Option("prop_huf_rag_01");
			Menu::Option("prop_huge_display_01");
			Menu::Option("prop_huge_display_02");
			Menu::Option("prop_hunterhide");
			Menu::Option("prop_hw1_03_gardoor_01");
			Menu::Option("prop_hw1_04_door_l1");
			Menu::Option("prop_hw1_04_door_r1");
			Menu::Option("prop_hw1_23_door");
			Menu::Option("prop_hwbowl_pseat_6x1");
			Menu::Option("prop_hwbowl_seat_01");
			Menu::Option("prop_hwbowl_seat_02");
			Menu::Option("prop_hwbowl_seat_03");
			Menu::Option("prop_hwbowl_seat_03b");
			Menu::Option("prop_hwbowl_seat_6x6");
			Menu::Option("prop_hydro_platform_01");
			Menu::Option("prop_ice_box_01");
			Menu::Option("prop_ice_box_01_l1");
			Menu::Option("prop_ice_cube_01");
			Menu::Option("prop_ice_cube_02");
			Menu::Option("prop_ice_cube_03");
			Menu::Option("prop_id2_11_gdoor");
			Menu::Option("prop_id2_20_clock");
			Menu::Option("prop_idol_01");
			Menu::Option("prop_idol_01_error");
			Menu::Option("prop_idol_case");
			Menu::Option("prop_idol_case_01");
			Menu::Option("prop_idol_case_02");
			Menu::Option("prop_id_21_gardoor_01");
			Menu::Option("prop_id_21_gardoor_02");
			Menu::Option("prop_indus_meet_door_l");
			Menu::Option("prop_indus_meet_door_r");
			Menu::Option("prop_ind_barge_01");
			Menu::Option("prop_ind_barge_02");
			Menu::Option("prop_ind_coalcar_01");
			Menu::Option("prop_ind_coalcar_02");
			Menu::Option("prop_ind_coalcar_03");
			Menu::Option("prop_ind_conveyor_01");
			Menu::Option("prop_ind_conveyor_02");
			Menu::Option("prop_ind_conveyor_04");
			Menu::Option("prop_ind_crusher");
			Menu::Option("prop_ind_deiseltank");
			Menu::Option("prop_ind_light_01a");
			Menu::Option("prop_ind_light_01b");
			Menu::Option("prop_ind_light_01c");
			Menu::Option("prop_ind_mech_01c");
			Menu::Option("prop_ind_mech_02a");
			Menu::Option("prop_ind_mech_02b");
			Menu::Option("prop_ind_mech_03a");
			Menu::Option("prop_ind_mech_04a");
			Menu::Option("prop_ind_oldcrane");
			Menu::Option("prop_ind_washer_02");
			Menu::Option("prop_inflatearch_01");
			Menu::Option("prop_inflategate_01");
			Menu::Option("prop_ing_camera_01");
			Menu::Option("prop_ing_crowbar");
			Menu::Option("prop_inhaler_01");
			Menu::Option("prop_int_gate01");
			Menu::Option("prop_in_tray_01");
			Menu::Option("prop_irish_sign_01");
			Menu::Option("prop_irish_sign_02");
			Menu::Option("prop_irish_sign_03");
			Menu::Option("prop_irish_sign_04");
			Menu::Option("prop_irish_sign_05");
			Menu::Option("prop_irish_sign_06");
			Menu::Option("prop_irish_sign_07");
			Menu::Option("prop_irish_sign_08");
			Menu::Option("prop_irish_sign_09");
			Menu::Option("prop_irish_sign_10");
			Menu::Option("prop_irish_sign_11");
			Menu::Option("prop_irish_sign_12");
			Menu::Option("prop_irish_sign_13");
			Menu::Option("prop_iron_01");
			Menu::Option("prop_jb700_covered");
			Menu::Option("prop_jeans_01");
			Menu::Option("prop_jetski_ramp_01");
			Menu::Option("prop_jet_bloodsplat_01");
			Menu::Option("prop_jewel_02a");
			Menu::Option("prop_jewel_02b");
			Menu::Option("prop_jewel_02c");
			Menu::Option("prop_jewel_03a");
			Menu::Option("prop_jewel_03b");
			Menu::Option("prop_jewel_04a");
			Menu::Option("prop_jewel_04b");
			Menu::Option("prop_jewel_pickup_new_01");
			Menu::Option("prop_juice_dispenser");
			Menu::Option("prop_juice_pool_01");
			Menu::Option("prop_jukebox_01");
			Menu::Option("prop_jukebox_02");
			Menu::Option("prop_jyard_block_01a");
			Menu::Option("prop_j_disptray_01");
			Menu::Option("prop_j_disptray_01b");
			Menu::Option("prop_j_disptray_01_dam");
			Menu::Option("prop_j_disptray_02");
			Menu::Option("prop_j_disptray_02_dam");
			Menu::Option("prop_j_disptray_03");
			Menu::Option("prop_j_disptray_03_dam");
			Menu::Option("prop_j_disptray_04");
			Menu::Option("prop_j_disptray_04b");
			Menu::Option("prop_j_disptray_05");
			Menu::Option("prop_j_disptray_05b");
			Menu::Option("prop_j_heist_pic_01");
			Menu::Option("prop_j_heist_pic_02");
			Menu::Option("prop_j_heist_pic_03");
			Menu::Option("prop_j_heist_pic_04");
			Menu::Option("prop_j_neck_disp_01");
			Menu::Option("prop_j_neck_disp_02");
			Menu::Option("prop_j_neck_disp_03");
			Menu::Option("prop_kayak_01");
			Menu::Option("prop_kayak_01b");
			Menu::Option("prop_kebab_grill");
			Menu::Option("prop_keg_01");
			Menu::Option("prop_kettle");
			Menu::Option("prop_kettle_01");
			Menu::Option("prop_keyboard_01a");
			Menu::Option("prop_keyboard_01b");
			Menu::Option("prop_kino_light_01");
			Menu::Option("prop_kino_light_03");
			Menu::Option("prop_kitch_juicer");
			Menu::Option("prop_kitch_pot_fry");
			Menu::Option("prop_kitch_pot_huge");
			Menu::Option("prop_kitch_pot_lrg");
			Menu::Option("prop_kitch_pot_lrg2");
			Menu::Option("prop_kitch_pot_med");
			Menu::Option("prop_kitch_pot_sm");
			Menu::Option("prop_knife");
			Menu::Option("prop_knife_stand");
			Menu::Option("prop_kt1_06_door_l");
			Menu::Option("prop_kt1_06_door_r");
			Menu::Option("prop_kt1_10_mpdoor_l");
			Menu::Option("prop_kt1_10_mpdoor_r");
			Menu::Option("prop_ladel");
			Menu::Option("prop_laptop_02_closed");
			Menu::Option("prop_laptop_jimmy");
			Menu::Option("prop_laptop_lester");
			Menu::Option("prop_laptop_lester2");
			Menu::Option("prop_large_gold");
			Menu::Option("prop_large_gold_alt_a");
			Menu::Option("prop_large_gold_alt_b");
			Menu::Option("prop_large_gold_alt_c");
			Menu::Option("prop_large_gold_empty");
			Menu::Option("prop_lawnmower_01");
			Menu::Option("prop_ld_alarm_01");
			Menu::Option("prop_ld_alarm_01_dam");
			Menu::Option("prop_ld_alarm_alert");
			Menu::Option("prop_ld_ammo_pack_01");
			Menu::Option("prop_ld_ammo_pack_02");
			Menu::Option("prop_ld_ammo_pack_03");
			Menu::Option("prop_ld_armour");
			Menu::Option("prop_ld_balcfnc_01a");
			Menu::Option("prop_ld_balcfnc_02a");
			Menu::Option("prop_ld_balcfnc_02c");
			Menu::Option("prop_ld_bankdoors_02");
			Menu::Option("prop_ld_barrier_01");
			Menu::Option("prop_ld_binbag_01");
			Menu::Option("prop_ld_bomb");
			Menu::Option("prop_ld_bomb_01");
			Menu::Option("prop_ld_bomb_01_open");
			Menu::Option("prop_ld_bomb_anim");
			Menu::Option("prop_ld_cable");
			Menu::Option("prop_ld_cable_tie_01");
			Menu::Option("prop_ld_can_01");
			Menu::Option("prop_ld_case_01");
			Menu::Option("prop_ld_case_01_lod");
			Menu::Option("prop_ld_case_01_s");
			Menu::Option("prop_ld_contact_card");
			Menu::Option("prop_ld_container");
			Menu::Option("prop_ld_contain_dl");
			Menu::Option("prop_ld_contain_dl2");
			Menu::Option("prop_ld_contain_dr");
			Menu::Option("prop_ld_contain_dr2");
			Menu::Option("prop_ld_crate_01");
			Menu::Option("prop_ld_crate_lid_01");
			Menu::Option("prop_ld_crocclips01");
			Menu::Option("prop_ld_crocclips02");
			Menu::Option("prop_ld_dummy_rope");
			Menu::Option("prop_ld_fags_01");
			Menu::Option("prop_ld_fags_02");
			Menu::Option("prop_ld_fan_01");
			Menu::Option("prop_ld_fan_01_old");
			Menu::Option("prop_ld_faucet");
			Menu::Option("prop_ld_ferris_wheel");
			Menu::Option("prop_ld_fireaxe");
			Menu::Option("prop_ld_flow_bottle");
			Menu::Option("prop_ld_fragwall_01a");
			Menu::Option("prop_ld_garaged_01");
			Menu::Option("prop_ld_gold_tooth");
			Menu::Option("prop_ld_greenscreen_01");
			Menu::Option("prop_ld_handbag");
			Menu::Option("prop_ld_handbag_s");
			Menu::Option("prop_ld_hat_01");
			Menu::Option("prop_ld_haybail");
			Menu::Option("prop_ld_hdd_01");
			Menu::Option("prop_ld_health_pack");
			Menu::Option("prop_ld_hook");
			Menu::Option("prop_ld_int_safe_01");
			Menu::Option("prop_ld_jail_door");
			Menu::Option("prop_ld_jeans_01");
			Menu::Option("prop_ld_jeans_02");
			Menu::Option("prop_ld_jerrycan_01");
			Menu::Option("prop_ld_keypad_01");
			Menu::Option("prop_ld_keypad_01b");
			Menu::Option("prop_ld_keypad_01b_lod");
			Menu::Option("prop_ld_lap_top");
			Menu::Option("prop_ld_monitor_01");
			Menu::Option("prop_ld_peep_slider");
			Menu::Option("prop_ld_pipe_single_01");
			Menu::Option("prop_ld_planning_pin_01");
			Menu::Option("prop_ld_planning_pin_02");
			Menu::Option("prop_ld_planning_pin_03");
			Menu::Option("prop_ld_purse_01");
			Menu::Option("prop_ld_purse_01_lod");
			Menu::Option("prop_ld_rail_01");
			Menu::Option("prop_ld_rail_02");
			Menu::Option("prop_ld_rope_t");
			Menu::Option("prop_ld_rubble_01");
			Menu::Option("prop_ld_rubble_02");
			Menu::Option("prop_ld_rubble_03");
			Menu::Option("prop_ld_rubble_04");
			Menu::Option("prop_ld_rub_binbag_01");
			Menu::Option("prop_ld_scrap");
			Menu::Option("prop_ld_shirt_01");
			Menu::Option("prop_ld_shoe_01");
			Menu::Option("prop_ld_shoe_02");
			Menu::Option("prop_ld_shovel");
			Menu::Option("prop_ld_shovel_dirt");
			Menu::Option("prop_ld_snack_01");
			Menu::Option("prop_ld_suitcase_01");
			Menu::Option("prop_ld_suitcase_02");
			Menu::Option("prop_ld_test_01");
			Menu::Option("prop_ld_toilet_01");
			Menu::Option("prop_ld_tooth");
			Menu::Option("prop_ld_tshirt_01");
			Menu::Option("prop_ld_tshirt_02");
			Menu::Option("prop_ld_vault_door");
			Menu::Option("prop_ld_wallet_01");
			Menu::Option("prop_ld_wallet_01_s");
			Menu::Option("prop_ld_wallet_02");
			Menu::Option("prop_ld_wallet_pickup");
			Menu::Option("prop_ld_w_me_machette");
			Menu::Option("prop_leaf_blower_01");
			Menu::Option("prop_lectern_01");
			Menu::Option("prop_letterbox_04");
			Menu::Option("prop_lev_crate_01");
			Menu::Option("prop_lev_des_barge_01");
			Menu::Option("prop_lev_des_barge_02");
			Menu::Option("prop_lifeblurb_01");
			Menu::Option("prop_lifeblurb_01b");
			Menu::Option("prop_lifeblurb_02");
			Menu::Option("prop_lifeblurb_02b");
			Menu::Option("prop_life_ring_02");
			Menu::Option("prop_lift_overlay_01");
			Menu::Option("prop_lift_overlay_02");
			Menu::Option("prop_litter_picker");
			Menu::Option("prop_loggneon");
			Menu::Option("prop_logpile_05");
			Menu::Option("prop_logpile_06");
			Menu::Option("prop_logpile_06b");
			Menu::Option("prop_logpile_07");
			Menu::Option("prop_logpile_07b");
			Menu::Option("prop_log_01");
			Menu::Option("prop_log_02");
			Menu::Option("prop_log_03");
			Menu::Option("prop_loose_rag_01");
			Menu::Option("prop_lrggate_01c_l");
			Menu::Option("prop_lrggate_01c_r");
			Menu::Option("prop_lrggate_01_l");
			Menu::Option("prop_lrggate_01_pst");
			Menu::Option("prop_lrggate_01_r");
			Menu::Option("prop_lrggate_02_ld");
			Menu::Option("prop_lrggate_03a");
			Menu::Option("prop_lrggate_03b");
			Menu::Option("prop_lrggate_03b_ld");
			Menu::Option("prop_lrggate_04a");
			Menu::Option("prop_lrggate_05a");
			Menu::Option("prop_lrggate_06a");
			Menu::Option("prop_luggage_01a");
			Menu::Option("prop_luggage_02a");
			Menu::Option("prop_luggage_03a");
			Menu::Option("prop_luggage_04a");
			Menu::Option("prop_luggage_05a");
			Menu::Option("prop_luggage_06a");
			Menu::Option("prop_luggage_07a");
			Menu::Option("prop_luggage_08a");
			Menu::Option("prop_luggage_09a");
			Menu::Option("prop_magenta_door");
			Menu::Option("prop_makeup_trail_01");
			Menu::Option("prop_makeup_trail_02");
			Menu::Option("prop_map_door_01");
			Menu::Option("prop_mast_01");
			Menu::Option("prop_mat_box");
			Menu::Option("prop_mb_cargo_01a");
			Menu::Option("prop_mb_cargo_02a");
			Menu::Option("prop_mb_cargo_03a");
			Menu::Option("prop_mb_cargo_04a");
			Menu::Option("prop_mb_cargo_04b");
			Menu::Option("prop_mb_crate_01a");
			Menu::Option("prop_mb_crate_01a_set");
			Menu::Option("prop_mb_crate_01b");
			Menu::Option("prop_mb_hesco_06");
			Menu::Option("prop_mb_ordnance_01");
			Menu::Option("prop_mb_ordnance_03");
			Menu::Option("prop_mb_sandblock_01");
			Menu::Option("prop_mb_sandblock_02");
			Menu::Option("prop_mb_sandblock_03");
			Menu::Option("prop_mb_sandblock_04");
			Menu::Option("prop_mb_sandblock_05");
			Menu::Option("prop_medal_01");
			Menu::Option("prop_medstation_02");
			Menu::Option("prop_medstation_03");
			Menu::Option("prop_medstation_04");
			Menu::Option("prop_med_bag_01");
			Menu::Option("prop_med_bag_01b");
			Menu::Option("prop_med_jet_01");
			Menu::Option("prop_megaphone_01");
			Menu::Option("prop_mem_candle_04");
			Menu::Option("prop_mem_candle_05");
			Menu::Option("prop_mem_candle_06");
			Menu::Option("prop_mem_reef_01");
			Menu::Option("prop_mem_reef_02");
			Menu::Option("prop_mem_reef_03");
			Menu::Option("prop_mem_teddy_01");
			Menu::Option("prop_mem_teddy_02");
			Menu::Option("prop_metalfoodjar_01");
			Menu::Option("prop_metal_plates01");
			Menu::Option("prop_metal_plates02");
			Menu::Option("prop_meth_bag_01");
			Menu::Option("prop_michaels_credit_tv");
			Menu::Option("prop_michael_backpack");
			Menu::Option("prop_michael_balaclava");
			Menu::Option("prop_michael_door");
			Menu::Option("prop_michael_sec_id");
			Menu::Option("prop_microphone_02");
			Menu::Option("prop_microwave_1");
			Menu::Option("prop_micro_01");
			Menu::Option("prop_micro_02");
			Menu::Option("prop_micro_cs_01");
			Menu::Option("prop_micro_cs_01_door");
			Menu::Option("prop_military_pickup_01");
			Menu::Option("prop_mil_crate_01");
			Menu::Option("prop_mil_crate_02");
			Menu::Option("prop_minigun_01");
			Menu::Option("prop_mobile_mast_1");
			Menu::Option("prop_mobile_mast_2");
			Menu::Option("prop_money_bag_01");
			Menu::Option("prop_monitor_01c");
			Menu::Option("prop_monitor_01d");
			Menu::Option("prop_monitor_02");
			Menu::Option("prop_monitor_03b");
			Menu::Option("prop_motel_door_09");
			Menu::Option("prop_mouse_01");
			Menu::Option("prop_mouse_01a");
			Menu::Option("prop_mouse_01b");
			Menu::Option("prop_mouse_02");
			Menu::Option("prop_movie_rack");
			Menu::Option("prop_mp3_dock");
			Menu::Option("prop_mp_arrow_barrier_01");
			Menu::Option("prop_mp_barrier_01");
			Menu::Option("prop_mp_barrier_01b");
			Menu::Option("prop_mp_barrier_02");
			Menu::Option("prop_mp_barrier_02b");
			Menu::Option("prop_mp_base_marker");
			Menu::Option("prop_mp_boost_01");
			Menu::Option("prop_mp_cant_place_lrg");
			Menu::Option("prop_mp_cant_place_med");
			Menu::Option("prop_mp_cant_place_sm");
			Menu::Option("prop_mp_cone_01");
			Menu::Option("prop_mp_cone_02");
			Menu::Option("prop_mp_cone_03");
			Menu::Option("prop_mp_cone_04");
			Menu::Option("prop_mp_drug_package");
			Menu::Option("prop_mp_drug_pack_blue");
			Menu::Option("prop_mp_drug_pack_red");
			Menu::Option("prop_mp_icon_shad_lrg");
			Menu::Option("prop_mp_icon_shad_med");
			Menu::Option("prop_mp_icon_shad_sm");
			Menu::Option("prop_mp_max_out_lrg");
			Menu::Option("prop_mp_max_out_med");
			Menu::Option("prop_mp_max_out_sm");
			Menu::Option("prop_mp_num_0");
			Menu::Option("prop_mp_num_1");
			Menu::Option("prop_mp_num_2");
			Menu::Option("prop_mp_num_3");
			Menu::Option("prop_mp_num_4");
			Menu::Option("prop_mp_num_5");
			Menu::Option("prop_mp_num_6");
			Menu::Option("prop_mp_num_7");
			Menu::Option("prop_mp_num_8");
			Menu::Option("prop_mp_num_9");
			Menu::Option("prop_mp_placement");
			Menu::Option("prop_mp_placement_lrg");
			Menu::Option("prop_mp_placement_maxd");
			Menu::Option("prop_mp_placement_med");
			Menu::Option("prop_mp_placement_red");
			Menu::Option("prop_mp_placement_sm");
			Menu::Option("prop_mp_ramp_01");
			Menu::Option("prop_mp_ramp_02");
			Menu::Option("prop_mp_ramp_03");
			Menu::Option("prop_mp_repair");
			Menu::Option("prop_mp_repair_01");
			Menu::Option("prop_mp_respawn_02");
			Menu::Option("prop_mp_rocket_01");
			Menu::Option("prop_mp_spike_01");
			Menu::Option("prop_mr_rasberryclean");
			Menu::Option("prop_mr_raspberry_01");
			Menu::Option("prop_muscle_bench_01");
			Menu::Option("prop_muscle_bench_02");
			Menu::Option("prop_muscle_bench_03");
			Menu::Option("prop_muscle_bench_04");
			Menu::Option("prop_muscle_bench_05");
			Menu::Option("prop_muscle_bench_06");
			Menu::Option("prop_muster_wboard_01");
			Menu::Option("prop_muster_wboard_02");
			Menu::Option("prop_m_pack_int_01");
			Menu::Option("prop_necklace_board");
			Menu::Option("prop_news_disp_02a_s");
			Menu::Option("prop_new_drug_pack_01");
			Menu::Option("prop_nigel_bag_pickup");
			Menu::Option("prop_night_safe_01");
			Menu::Option("prop_notepad_01");
			Menu::Option("prop_notepad_02");
			Menu::Option("prop_novel_01");
			Menu::Option("prop_npc_phone");
			Menu::Option("prop_npc_phone_02");
			Menu::Option("prop_office_alarm_01");
			Menu::Option("prop_office_desk_01");
			Menu::Option("prop_offroad_bale01");
			Menu::Option("prop_offroad_bale02_l1_frag_");
			Menu::Option("prop_offroad_barrel01");
			Menu::Option("prop_offroad_tyres01");
			Menu::Option("prop_off_chair_01");
			Menu::Option("prop_off_chair_03");
			Menu::Option("prop_off_chair_04");
			Menu::Option("prop_off_chair_04b");
			Menu::Option("prop_off_chair_04_s");
			Menu::Option("prop_off_chair_05");
			Menu::Option("prop_off_phone_01");
			Menu::Option("prop_oiltub_01");
			Menu::Option("prop_oiltub_02");
			Menu::Option("prop_oiltub_03");
			Menu::Option("prop_oiltub_05");
			Menu::Option("prop_oiltub_06");
			Menu::Option("prop_oil_derrick_01");
			Menu::Option("prop_oil_guage_01");
			Menu::Option("prop_oil_spool_02");
			Menu::Option("prop_oil_valve_01");
			Menu::Option("prop_oil_valve_02");
			Menu::Option("prop_oil_wellhead_01");
			Menu::Option("prop_oil_wellhead_03");
			Menu::Option("prop_oil_wellhead_04");
			Menu::Option("prop_oil_wellhead_05");
			Menu::Option("prop_oil_wellhead_06");
			Menu::Option("prop_oldplough1");
			Menu::Option("prop_old_boot");
			Menu::Option("prop_old_churn_01");
			Menu::Option("prop_old_churn_02");
			Menu::Option("prop_old_deck_chair");
			Menu::Option("prop_old_deck_chair_02");
			Menu::Option("prop_old_farm_01");
			Menu::Option("prop_old_farm_02");
			Menu::Option("prop_old_wood_chair");
			Menu::Option("prop_old_wood_chair_lod");
			Menu::Option("prop_orang_can_01");
			Menu::Option("prop_outdoor_fan_01");
			Menu::Option("prop_out_door_speaker");
			Menu::Option("prop_overalls_01");
			Menu::Option("prop_owl_totem_01");
			Menu::Option("prop_paints_can01");
			Menu::Option("prop_paints_can02");
			Menu::Option("prop_paints_can03");
			Menu::Option("prop_paints_can04");
			Menu::Option("prop_paints_can05");
			Menu::Option("prop_paints_can06");
			Menu::Option("prop_paints_can07");
			Menu::Option("prop_paint_brush01");
			Menu::Option("prop_paint_brush02");
			Menu::Option("prop_paint_brush03");
			Menu::Option("prop_paint_brush04");
			Menu::Option("prop_paint_brush05");
			Menu::Option("prop_paint_roller");
			Menu::Option("prop_paint_spray01a");
			Menu::Option("prop_paint_spray01b");
			Menu::Option("prop_paint_stepl01");
			Menu::Option("prop_paint_stepl01b");
			Menu::Option("prop_paint_stepl02");
			Menu::Option("prop_paint_tray");
			Menu::Option("prop_paint_wpaper01");
			Menu::Option("prop_pallettruck_01");
			Menu::Option("prop_palm_fan_02_a");
			Menu::Option("prop_palm_fan_02_b");
			Menu::Option("prop_palm_fan_03_a");
			Menu::Option("prop_palm_fan_03_b");
			Menu::Option("prop_palm_fan_03_c");
			Menu::Option("prop_palm_fan_03_d");
			Menu::Option("prop_palm_fan_04_a");
			Menu::Option("prop_palm_fan_04_b");
			Menu::Option("prop_palm_fan_04_c");
			Menu::Option("prop_palm_fan_04_d");
			Menu::Option("prop_palm_huge_01a");
			Menu::Option("prop_palm_huge_01b");
			Menu::Option("prop_palm_med_01a");
			Menu::Option("prop_palm_med_01b");
			Menu::Option("prop_palm_med_01c");
			Menu::Option("prop_palm_med_01d");
			Menu::Option("prop_palm_sm_01a");
			Menu::Option("prop_palm_sm_01d");
			Menu::Option("prop_palm_sm_01e");
			Menu::Option("prop_palm_sm_01f");
			Menu::Option("prop_paper_bag_01");
			Menu::Option("prop_paper_bag_small");
			Menu::Option("prop_paper_ball");
			Menu::Option("prop_paper_box_01");
			Menu::Option("prop_paper_box_02");
			Menu::Option("prop_paper_box_03");
			Menu::Option("prop_paper_box_04");
			Menu::Option("prop_paper_box_05");
			Menu::Option("prop_pap_camera_01");
			Menu::Option("prop_parachute");
			Menu::Option("prop_parapack_01");
			Menu::Option("prop_parasol_01");
			Menu::Option("prop_parasol_01_b");
			Menu::Option("prop_parasol_01_c");
			Menu::Option("prop_parasol_01_down");
			Menu::Option("prop_parasol_02");
			Menu::Option("prop_parasol_02_b");
			Menu::Option("prop_parasol_02_c");
			Menu::Option("prop_parasol_03");
			Menu::Option("prop_parasol_03_b");
			Menu::Option("prop_parasol_03_c");
			Menu::Option("prop_parasol_04e");
			Menu::Option("prop_parasol_04e_lod1");
			Menu::Option("prop_parasol_bh_48");
			Menu::Option("prop_parking_sign_06");
			Menu::Option("prop_parking_sign_07");
			Menu::Option("prop_parking_sign_1");
			Menu::Option("prop_parking_sign_2");
			Menu::Option("prop_parking_wand_01");
			Menu::Option("prop_park_ticket_01");
			Menu::Option("prop_partsbox_01");
			Menu::Option("prop_passport_01");
			Menu::Option("prop_patio_heater_01");
			Menu::Option("prop_patio_lounger1");
			Menu::Option("prop_patio_lounger1b");
			Menu::Option("prop_patio_lounger1_table");
			Menu::Option("prop_patio_lounger_2");
			Menu::Option("prop_patio_lounger_3");
			Menu::Option("prop_patriotneon");
			Menu::Option("prop_paynspray_door_l");
			Menu::Option("prop_paynspray_door_r");
			Menu::Option("prop_pc_01a");
			Menu::Option("prop_pc_02a");
			Menu::Option("prop_peanut_bowl_01");
			Menu::Option("prop_ped_pic_01");
			Menu::Option("prop_ped_pic_01_sm");
			Menu::Option("prop_ped_pic_02");
			Menu::Option("prop_ped_pic_02_sm");
			Menu::Option("prop_ped_pic_03");
			Menu::Option("prop_ped_pic_03_sm");
			Menu::Option("prop_ped_pic_04");
			Menu::Option("prop_ped_pic_04_sm");
			Menu::Option("prop_ped_pic_05");
			Menu::Option("prop_ped_pic_05_sm");
			Menu::Option("prop_ped_pic_06");
			Menu::Option("prop_ped_pic_06_sm");
			Menu::Option("prop_ped_pic_07");
			Menu::Option("prop_ped_pic_07_sm");
			Menu::Option("prop_ped_pic_08");
			Menu::Option("prop_ped_pic_08_sm");
			Menu::Option("prop_pencil_01");
			Menu::Option("prop_pharm_sign_01");
			Menu::Option("prop_phonebox_05a");
			Menu::Option("prop_phone_ing");
			Menu::Option("prop_phone_ing_02");
			Menu::Option("prop_phone_ing_03");
			Menu::Option("prop_phone_overlay_01");
			Menu::Option("prop_phone_overlay_02");
			Menu::Option("prop_phone_overlay_anim");
			Menu::Option("prop_phone_proto");
			Menu::Option("prop_phone_proto_back");
			Menu::Option("prop_phone_proto_battery");
			Menu::Option("prop_picnictable_02");
			Menu::Option("prop_piercing_gun");
			Menu::Option("prop_pier_kiosk_01");
			Menu::Option("prop_pier_kiosk_02");
			Menu::Option("prop_pier_kiosk_03");
			Menu::Option("prop_pile_dirt_01");
			Menu::Option("prop_pile_dirt_02");
			Menu::Option("prop_pile_dirt_03");
			Menu::Option("prop_pile_dirt_04");
			Menu::Option("prop_pile_dirt_06");
			Menu::Option("prop_pile_dirt_07");
			Menu::Option("prop_ping_pong");
			Menu::Option("prop_pipes_01a");
			Menu::Option("prop_pipes_01b");
			Menu::Option("prop_pipes_03b");
			Menu::Option("prop_pipes_04a");
			Menu::Option("prop_pipes_05a");
			Menu::Option("prop_pipes_conc_01");
			Menu::Option("prop_pipes_conc_02");
			Menu::Option("prop_pipe_single_01");
			Menu::Option("prop_pistol_holster");
			Menu::Option("prop_pitcher_01_cs");
			Menu::Option("prop_pizza_box_01");
			Menu::Option("prop_pizza_box_02");
			Menu::Option("prop_pizza_oven_01");
			Menu::Option("prop_planer_01");
			Menu::Option("prop_plant_01a");
			Menu::Option("prop_plant_01b");
			Menu::Option("prop_plant_base_01");
			Menu::Option("prop_plant_base_02");
			Menu::Option("prop_plant_base_03");
			Menu::Option("prop_plant_cane_01a");
			Menu::Option("prop_plant_cane_01b");
			Menu::Option("prop_plant_cane_02a");
			Menu::Option("prop_plant_cane_02b");
			Menu::Option("prop_plant_clover_01");
			Menu::Option("prop_plant_clover_02");
			Menu::Option("prop_plant_fern_01a");
			Menu::Option("prop_plant_fern_01b");
			Menu::Option("prop_plant_fern_02a");
			Menu::Option("prop_plant_fern_02b");
			Menu::Option("prop_plant_fern_02c");
			Menu::Option("prop_plant_flower_01");
			Menu::Option("prop_plant_flower_02");
			Menu::Option("prop_plant_flower_03");
			Menu::Option("prop_plant_flower_04");
			Menu::Option("prop_plant_group_01");
			Menu::Option("prop_plant_group_02");
			Menu::Option("prop_plant_group_03");
			Menu::Option("prop_plant_group_04");
			Menu::Option("prop_plant_group_05");
			Menu::Option("prop_plant_group_05b");
			Menu::Option("prop_plant_group_05c");
			Menu::Option("prop_plant_group_05d");
			Menu::Option("prop_plant_group_06a");
			Menu::Option("prop_plant_group_06b");
			Menu::Option("prop_plant_group_06c");
			Menu::Option("prop_plant_int_02a");
			Menu::Option("prop_plant_int_02b");
			Menu::Option("prop_plant_int_05a");
			Menu::Option("prop_plant_int_05b");
			Menu::Option("prop_plant_int_06a");
			Menu::Option("prop_plant_int_06b");
			Menu::Option("prop_plant_int_06c");
			Menu::Option("prop_plant_paradise");
			Menu::Option("prop_plant_paradise_b");
			Menu::Option("prop_plastic_cup_02");
			Menu::Option("prop_plas_barier_01a");
			Menu::Option("prop_plate_04");
			Menu::Option("prop_plate_stand_01");
			Menu::Option("prop_plate_warmer");
			Menu::Option("prop_player_gasmask");
			Menu::Option("prop_player_phone_01");
			Menu::Option("prop_player_phone_02");
			Menu::Option("prop_pliers_01");
			Menu::Option("prop_plywoodpile_01a");
			Menu::Option("prop_plywoodpile_01b");
			Menu::Option("prop_podium_mic");
			Menu::Option("prop_police_door_l");
			Menu::Option("prop_police_door_l_dam");
			Menu::Option("prop_police_door_r");
			Menu::Option("prop_police_door_r_dam");
			Menu::Option("prop_police_door_surround");
			Menu::Option("prop_police_phone");
			Menu::Option("prop_police_radio_handset");
			Menu::Option("prop_police_radio_main");
			Menu::Option("prop_poly_bag_01");
			Menu::Option("prop_poly_bag_money");
			Menu::Option("prop_poolball_1");
			Menu::Option("prop_poolball_10");
			Menu::Option("prop_poolball_11");
			Menu::Option("prop_poolball_12");
			Menu::Option("prop_poolball_13");
			Menu::Option("prop_poolball_14");
			Menu::Option("prop_poolball_15");
			Menu::Option("prop_poolball_2");
			Menu::Option("prop_poolball_3");
			Menu::Option("prop_poolball_4");
			Menu::Option("prop_poolball_5");
			Menu::Option("prop_poolball_6");
			Menu::Option("prop_poolball_7");
			Menu::Option("prop_poolball_8");
			Menu::Option("prop_poolball_9");
			Menu::Option("prop_poolball_cue");
			Menu::Option("prop_poolskimmer");
			Menu::Option("prop_pooltable_02");
			Menu::Option("prop_pooltable_3b");
			Menu::Option("prop_pool_ball_01");
			Menu::Option("prop_pool_cue");
			Menu::Option("prop_pool_rack_01");
			Menu::Option("prop_pool_rack_02");
			Menu::Option("prop_pool_tri");
			Menu::Option("prop_porn_mag_01");
			Menu::Option("prop_porn_mag_02");
			Menu::Option("prop_porn_mag_03");
			Menu::Option("prop_porn_mag_04");
			Menu::Option("prop_portable_hifi_01");
			Menu::Option("prop_portacabin01");
			Menu::Option("prop_portasteps_01");
			Menu::Option("prop_portasteps_02");
			Menu::Option("prop_postcard_rack");
			Menu::Option("prop_poster_tube_01");
			Menu::Option("prop_poster_tube_02");
			Menu::Option("prop_postit_drive");
			Menu::Option("prop_postit_gun");
			Menu::Option("prop_postit_it");
			Menu::Option("prop_postit_lock");
			Menu::Option("prop_potatodigger");
			Menu::Option("prop_pot_01");
			Menu::Option("prop_pot_02");
			Menu::Option("prop_pot_03");
			Menu::Option("prop_pot_04");
			Menu::Option("prop_pot_05");
			Menu::Option("prop_pot_06");
			Menu::Option("prop_pot_plant_02a");
			Menu::Option("prop_pot_plant_02b");
			Menu::Option("prop_pot_plant_02c");
			Menu::Option("prop_pot_plant_02d");
			Menu::Option("prop_pot_plant_03a");
			Menu::Option("prop_pot_plant_04a");
			Menu::Option("prop_pot_plant_05d_l1");
			Menu::Option("prop_pot_plant_bh1");
			Menu::Option("prop_pot_rack");
			Menu::Option("prop_power_cell");
			Menu::Option("prop_power_cord_01");
			Menu::Option("prop_premier_fence_01");
			Menu::Option("prop_premier_fence_02");
			Menu::Option("prop_printer_01");
			Menu::Option("prop_printer_02");
			Menu::Option("prop_pris_bars_01");
			Menu::Option("prop_pris_bench_01");
			Menu::Option("prop_pris_door_01_l");
			Menu::Option("prop_pris_door_01_r");
			Menu::Option("prop_pris_door_02");
			Menu::Option("prop_pris_door_03");
			Menu::Option("prop_prlg_gravestone_05a_l1");
			Menu::Option("prop_prlg_gravestone_06a");
			Menu::Option("prop_projector_overlay");
			Menu::Option("prop_prologue_phone");
			Menu::Option("prop_prop_tree_01");
			Menu::Option("prop_prop_tree_02");
			Menu::Option("prop_protest_sign_01");
			Menu::Option("prop_protest_table_01");
			Menu::Option("prop_prototype_minibomb");
			Menu::Option("prop_proxy_chateau_table");
			Menu::Option("prop_punch_bag_l");
			Menu::Option("prop_pylon_01");
			Menu::Option("prop_pylon_02");
			Menu::Option("prop_pylon_03");
			Menu::Option("prop_pylon_04");
			Menu::Option("prop_p_jack_03_col");
			Menu::Option("prop_p_spider_01a");
			Menu::Option("prop_p_spider_01c");
			Menu::Option("prop_p_spider_01d");
			Menu::Option("prop_ql_revolving_door");
			Menu::Option("prop_quad_grid_line");
			Menu::Option("prop_radiomast01");
			Menu::Option("prop_radiomast02");
			Menu::Option("prop_rad_waste_barrel_01");
			Menu::Option("prop_ragganeon");
			Menu::Option("prop_rag_01");
			Menu::Option("prop_railsleepers01");
			Menu::Option("prop_railsleepers02");
			Menu::Option("prop_railstack01");
			Menu::Option("prop_railstack02");
			Menu::Option("prop_railstack03");
			Menu::Option("prop_railstack04");
			Menu::Option("prop_railstack05");
			Menu::Option("prop_rail_boxcar");
			Menu::Option("prop_rail_boxcar2");
			Menu::Option("prop_rail_boxcar3");
			Menu::Option("prop_rail_boxcar4");
			Menu::Option("prop_rail_boxcar5");
			Menu::Option("prop_rail_boxcar5_d");
			Menu::Option("prop_rail_buffer_01");
			Menu::Option("prop_rail_buffer_02");
			Menu::Option("prop_rail_controller");
			Menu::Option("prop_rail_crane_01");
			Menu::Option("prop_rail_points01");
			Menu::Option("prop_rail_points02");
			Menu::Option("prop_rail_sigbox01");
			Menu::Option("prop_rail_sigbox02");
			Menu::Option("prop_rail_signals02");
			Menu::Option("prop_rail_tankcar");
			Menu::Option("prop_rail_tankcar2");
			Menu::Option("prop_rail_tankcar3");
			Menu::Option("prop_rail_wellcar");
			Menu::Option("prop_rail_wellcar2");
			Menu::Option("prop_range_target_01");
			Menu::Option("prop_range_target_02");
			Menu::Option("prop_range_target_03");
			Menu::Option("prop_rebar_pile01");
			Menu::Option("prop_recyclebin_02a");
			Menu::Option("prop_recyclebin_02b");
			Menu::Option("prop_recyclebin_02_c");
			Menu::Option("prop_recyclebin_02_d");
			Menu::Option("prop_recyclebin_03_a");
			Menu::Option("prop_recyclebin_04_a");
			Menu::Option("prop_recyclebin_04_b");
			Menu::Option("prop_recyclebin_05_a");
			Menu::Option("prop_ret_door");
			Menu::Option("prop_ret_door_02");
			Menu::Option("prop_ret_door_03");
			Menu::Option("prop_ret_door_04");
			Menu::Option("prop_rf_conc_pillar");
			Menu::Option("prop_riding_crop_01");
			Menu::Option("prop_riot_shield");
			Menu::Option("prop_rio_del_01");
			Menu::Option("prop_roadcone01a");
			Menu::Option("prop_roadcone01b");
			Menu::Option("prop_roadcone01c");
			Menu::Option("prop_roadcone02a");
			Menu::Option("prop_roadcone02b");
			Menu::Option("prop_roadcone02c");
			Menu::Option("prop_roadheader_01");
			Menu::Option("prop_rock_1_a");
			Menu::Option("prop_rock_1_b");
			Menu::Option("prop_rock_1_c");
			Menu::Option("prop_rock_1_d");
			Menu::Option("prop_rock_1_e");
			Menu::Option("prop_rock_1_f");
			Menu::Option("prop_rock_1_g");
			Menu::Option("prop_rock_1_h");
			Menu::Option("prop_rock_1_i");
			Menu::Option("prop_rock_2_a");
			Menu::Option("prop_rock_2_c");
			Menu::Option("prop_rock_2_d");
			Menu::Option("prop_rock_2_f");
			Menu::Option("prop_rock_2_g");
			Menu::Option("prop_rock_3_a");
			Menu::Option("prop_rock_3_b");
			Menu::Option("prop_rock_3_c");
			Menu::Option("prop_rock_3_d");
			Menu::Option("prop_rock_3_e");
			Menu::Option("prop_rock_3_f");
			Menu::Option("prop_rock_3_g");
			Menu::Option("prop_rock_3_h");
			Menu::Option("prop_rock_3_i");
			Menu::Option("prop_rock_3_j");
			Menu::Option("prop_rock_4_c");
			Menu::Option("prop_rock_4_d");
			Menu::Option("prop_rock_chair_01");
			Menu::Option("prop_rolled_sock_01");
			Menu::Option("prop_rolled_sock_02");
			Menu::Option("prop_rolled_yoga_mat");
			Menu::Option("prop_roller_car_01");
			Menu::Option("prop_roller_car_02");
			Menu::Option("prop_ron_door_01");
			Menu::Option("prop_roofpipe_01");
			Menu::Option("prop_roofpipe_02");
			Menu::Option("prop_roofpipe_03");
			Menu::Option("prop_roofpipe_04");
			Menu::Option("prop_roofpipe_05");
			Menu::Option("prop_roofpipe_06");
			Menu::Option("prop_roofvent_011a");
			Menu::Option("prop_roofvent_01a");
			Menu::Option("prop_roofvent_01b");
			Menu::Option("prop_roofvent_02a");
			Menu::Option("prop_roofvent_02b");
			Menu::Option("prop_roofvent_03a");
			Menu::Option("prop_roofvent_04a");
			Menu::Option("prop_roofvent_05a");
			Menu::Option("prop_roofvent_05b");
			Menu::Option("prop_roofvent_07a");
			Menu::Option("prop_roofvent_08a");
			Menu::Option("prop_roofvent_09a");
			Menu::Option("prop_roofvent_10a");
			Menu::Option("prop_roofvent_10b");
			Menu::Option("prop_roofvent_11b");
			Menu::Option("prop_roofvent_11c");
			Menu::Option("prop_roofvent_12a");
			Menu::Option("prop_roofvent_13a");
			Menu::Option("prop_roofvent_15a");
			Menu::Option("prop_roofvent_16a");
			Menu::Option("prop_rope_family_3");
			Menu::Option("prop_rope_hook_01");
			Menu::Option("prop_roundbailer01");
			Menu::Option("prop_roundbailer02");
			Menu::Option("prop_rub_bike_01");
			Menu::Option("prop_rub_bike_02");
			Menu::Option("prop_rub_bike_03");
			Menu::Option("prop_rub_binbag_sd_01");
			Menu::Option("prop_rub_binbag_sd_02");
			Menu::Option("prop_rub_busdoor_01");
			Menu::Option("prop_rub_busdoor_02");
			Menu::Option("prop_rub_buswreck_01");
			Menu::Option("prop_rub_buswreck_03");
			Menu::Option("prop_rub_buswreck_06");
			Menu::Option("prop_rub_cabinet");
			Menu::Option("prop_rub_cabinet01");
			Menu::Option("prop_rub_cabinet02");
			Menu::Option("prop_rub_cabinet03");
			Menu::Option("prop_rub_cage01a");
			Menu::Option("prop_rub_carpart_02");
			Menu::Option("prop_rub_carpart_03");
			Menu::Option("prop_rub_carpart_04");
			Menu::Option("prop_rub_chassis_01");
			Menu::Option("prop_rub_chassis_02");
			Menu::Option("prop_rub_chassis_03");
			Menu::Option("prop_rub_cont_01a");
			Menu::Option("prop_rub_cont_01b");
			Menu::Option("prop_rub_cont_01c");
			Menu::Option("prop_rub_flotsam_01");
			Menu::Option("prop_rub_flotsam_02");
			Menu::Option("prop_rub_flotsam_03");
			Menu::Option("prop_rub_frklft");
			Menu::Option("prop_rub_litter_01");
			Menu::Option("prop_rub_litter_02");
			Menu::Option("prop_rub_litter_03");
			Menu::Option("prop_rub_litter_03b");
			Menu::Option("prop_rub_litter_03c");
			Menu::Option("prop_rub_litter_04");
			Menu::Option("prop_rub_litter_04b");
			Menu::Option("prop_rub_litter_05");
			Menu::Option("prop_rub_litter_06");
			Menu::Option("prop_rub_litter_07");
			Menu::Option("prop_rub_litter_09");
			Menu::Option("prop_rub_litter_8");
			Menu::Option("prop_rub_matress_01");
			Menu::Option("prop_rub_matress_02");
			Menu::Option("prop_rub_matress_03");
			Menu::Option("prop_rub_matress_04");
			Menu::Option("prop_rub_monitor");
			Menu::Option("prop_rub_pile_01");
			Menu::Option("prop_rub_pile_02");
			Menu::Option("prop_rub_planks_01");
			Menu::Option("prop_rub_planks_02");
			Menu::Option("prop_rub_planks_03");
			Menu::Option("prop_rub_planks_04");
			Menu::Option("prop_rub_railwreck_1");
			Menu::Option("prop_rub_railwreck_2");
			Menu::Option("prop_rub_railwreck_3");
			Menu::Option("prop_rub_scrap_02");
			Menu::Option("prop_rub_scrap_03");
			Menu::Option("prop_rub_scrap_04");
			Menu::Option("prop_rub_scrap_05");
			Menu::Option("prop_rub_scrap_06");
			Menu::Option("prop_rub_scrap_07");
			Menu::Option("prop_rub_stool");
			Menu::Option("prop_rub_sunktyre");
			Menu::Option("prop_rub_t34");
			Menu::Option("prop_rub_trainers_01");
			Menu::Option("prop_rub_trolley01a");
			Menu::Option("prop_rub_trolley02a");
			Menu::Option("prop_rub_trolley03a");
			Menu::Option("prop_rub_trukwreck_1");
			Menu::Option("prop_rub_trukwreck_2");
			Menu::Option("prop_rub_tyre_01");
			Menu::Option("prop_rub_tyre_02");
			Menu::Option("prop_rub_tyre_03");
			Menu::Option("prop_rub_tyre_dam1");
			Menu::Option("prop_rub_tyre_dam2");
			Menu::Option("prop_rub_tyre_dam3");
			Menu::Option("prop_rub_washer_01");
			Menu::Option("prop_rub_wheel_01");
			Menu::Option("prop_rub_wheel_02");
			Menu::Option("prop_rub_wreckage_3");
			Menu::Option("prop_rub_wreckage_4");
			Menu::Option("prop_rub_wreckage_5");
			Menu::Option("prop_rub_wreckage_6");
			Menu::Option("prop_rub_wreckage_7");
			Menu::Option("prop_rub_wreckage_8");
			Menu::Option("prop_rub_wreckage_9");
			Menu::Option("prop_rural_windmill_l1");
			Menu::Option("prop_rural_windmill_l2");
			Menu::Option("prop_rus_olive");
			Menu::Option("prop_rus_olive_wint");
			Menu::Option("prop_sacktruck_01");
			Menu::Option("prop_sacktruck_02a");
			Menu::Option("prop_safety_glasses");
			Menu::Option("prop_sam_01");
			Menu::Option("prop_sandwich_01");
			Menu::Option("prop_satdish_2_a");
			Menu::Option("prop_satdish_2_f");
			Menu::Option("prop_satdish_2_g");
			Menu::Option("prop_satdish_3_b");
			Menu::Option("prop_satdish_3_c");
			Menu::Option("prop_satdish_3_d");
			Menu::Option("prop_satdish_l_01");
			Menu::Option("prop_satdish_s_03");
			Menu::Option("prop_satdish_s_05a");
			Menu::Option("prop_satdish_s_05b");
			Menu::Option("prop_sc1_06_gate_l");
			Menu::Option("prop_sc1_06_gate_r");
			Menu::Option("prop_sc1_12_door");
			Menu::Option("prop_sc1_21_g_door_01");
			Menu::Option("prop_scaffold_pole");
			Menu::Option("prop_scafold_01a");
			Menu::Option("prop_scafold_01c");
			Menu::Option("prop_scafold_01f");
			Menu::Option("prop_scafold_02a");
			Menu::Option("prop_scafold_02c");
			Menu::Option("prop_scafold_03a");
			Menu::Option("prop_scafold_03b");
			Menu::Option("prop_scafold_03c");
			Menu::Option("prop_scafold_03f");
			Menu::Option("prop_scafold_04a");
			Menu::Option("prop_scafold_05a");
			Menu::Option("prop_scafold_06a");
			Menu::Option("prop_scafold_06b");
			Menu::Option("prop_scafold_06c");
			Menu::Option("prop_scafold_07a");
			Menu::Option("prop_scafold_08a");
			Menu::Option("prop_scafold_09a");
			Menu::Option("prop_scafold_frame1a");
			Menu::Option("prop_scafold_frame1b");
			Menu::Option("prop_scafold_frame1c");
			Menu::Option("prop_scafold_frame1f");
			Menu::Option("prop_scafold_frame2a");
			Menu::Option("prop_scafold_frame2b");
			Menu::Option("prop_scafold_frame2c");
			Menu::Option("prop_scafold_frame3a");
			Menu::Option("prop_scafold_frame3c");
			Menu::Option("prop_scafold_rail_01");
			Menu::Option("prop_scafold_rail_02");
			Menu::Option("prop_scafold_rail_03");
			Menu::Option("prop_scafold_xbrace");
			Menu::Option("prop_scalpel");
			Menu::Option("prop_scn_police_torch");
			Menu::Option("prop_scourer_01");
			Menu::Option("prop_scrap_2_crate");
			Menu::Option("prop_scrap_win_01");
			Menu::Option("prop_scrim_01");
			Menu::Option("prop_scythemower");
			Menu::Option("prop_section_garage_01");
			Menu::Option("prop_securityvan_lightrig");
			Menu::Option("prop_security_case_01");
			Menu::Option("prop_security_case_02");
			Menu::Option("prop_sec_gate_01b");
			Menu::Option("prop_sec_gate_01c");
			Menu::Option("prop_sec_gate_01d");
			Menu::Option("prop_set_generator_01");
			Menu::Option("prop_sewing_fabric");
			Menu::Option("prop_sewing_machine");
			Menu::Option("prop_sglasses_stand_01");
			Menu::Option("prop_sglasses_stand_02");
			Menu::Option("prop_sglasses_stand_02b");
			Menu::Option("prop_sglasses_stand_03");
			Menu::Option("prop_sglasss_1b_lod");
			Menu::Option("prop_sglasss_1_lod");
			Menu::Option("prop_shamal_crash");
			Menu::Option("prop_shelves_01");
			Menu::Option("prop_shelves_02");
			Menu::Option("prop_shelves_03");
			Menu::Option("prop_shopping_bags01");
			Menu::Option("prop_shopping_bags02");
			Menu::Option("prop_shop_front_door_l");
			Menu::Option("prop_shop_front_door_r");
			Menu::Option("prop_shots_glass_cs");
			Menu::Option("prop_shower_01");
			Menu::Option("prop_shower_rack_01");
			Menu::Option("prop_shower_towel");
			Menu::Option("prop_showroom_door_l");
			Menu::Option("prop_showroom_door_r");
			Menu::Option("prop_showroom_glass_1b");
			Menu::Option("prop_shredder_01");
			Menu::Option("prop_shrub_rake");
			Menu::Option("prop_shuttering01");
			Menu::Option("prop_shuttering02");
			Menu::Option("prop_shuttering03");
			Menu::Option("prop_shuttering04");
			Menu::Option("prop_sh_beer_pissh_01");
			Menu::Option("prop_sh_bong_01");
			Menu::Option("prop_sh_cigar_01");
			Menu::Option("prop_sh_joint_01");
			Menu::Option("prop_sh_mr_rasp_01");
			Menu::Option("prop_sh_shot_glass");
			Menu::Option("prop_sh_tall_glass");
			Menu::Option("prop_sh_tt_fridgedoor");
			Menu::Option("prop_sh_wine_glass");
			Menu::Option("prop_side_lights");
			Menu::Option("prop_side_spreader");
			Menu::Option("prop_sign_airp_01a");
			Menu::Option("prop_sign_airp_02a");
			Menu::Option("prop_sign_airp_02b");
			Menu::Option("prop_sign_big_01");
			Menu::Option("prop_sign_mallet");
			Menu::Option("prop_sign_road_04g_l1");
			Menu::Option("prop_single_grid_line");
			Menu::Option("prop_single_rose");
			Menu::Option("prop_sink_01");
			Menu::Option("prop_sink_02");
			Menu::Option("prop_sink_03");
			Menu::Option("prop_sink_04");
			Menu::Option("prop_sink_05");
			Menu::Option("prop_sink_06");
			Menu::Option("prop_skate_flatramp");
			Menu::Option("prop_skate_funbox");
			Menu::Option("prop_skate_halfpipe");
			Menu::Option("prop_skate_kickers");
			Menu::Option("prop_skate_quartpipe");
			Menu::Option("prop_skate_rail");
			Menu::Option("prop_skate_spiner");
			Menu::Option("prop_skid_chair_01");
			Menu::Option("prop_skid_chair_02");
			Menu::Option("prop_skid_chair_03");
			Menu::Option("prop_skid_sleepbag_1");
			Menu::Option("prop_skid_tent_01");
			Menu::Option("prop_skid_tent_01b");
			Menu::Option("prop_skid_tent_03");
			Menu::Option("prop_skip_01a");
			Menu::Option("prop_skip_02a");
			Menu::Option("prop_skip_03");
			Menu::Option("prop_skip_04");
			Menu::Option("prop_skip_05a");
			Menu::Option("prop_skip_05b");
			Menu::Option("prop_skip_06a");
			Menu::Option("prop_skip_08a");
			Menu::Option("prop_skip_08b");
			Menu::Option("prop_skip_10a");
			Menu::Option("prop_skip_rope_01");
			Menu::Option("prop_skunk_bush_01");
			Menu::Option("prop_skylight_01");
			Menu::Option("prop_skylight_02");
			Menu::Option("prop_skylight_03");
			Menu::Option("prop_skylight_04");
			Menu::Option("prop_skylight_05");
			Menu::Option("prop_skylight_06a");
			Menu::Option("prop_skylight_06b");
			Menu::Option("prop_skylight_06c");
			Menu::Option("prop_sky_cover_01");
			Menu::Option("prop_slacks_01");
			Menu::Option("prop_slacks_02");
			Menu::Option("prop_sluicegate");
			Menu::Option("prop_sluicegatel");
			Menu::Option("prop_sluicegater");
			Menu::Option("prop_slush_dispenser");
			Menu::Option("prop_sm1_11_doorl");
			Menu::Option("prop_sm1_11_doorr");
			Menu::Option("prop_sm1_11_garaged");
			Menu::Option("prop_smg_holster_01");
			Menu::Option("prop_sm_10_mp_door");
			Menu::Option("prop_sm_14_mp_gar");
			Menu::Option("prop_sm_19_clock");
			Menu::Option("prop_sm_27_door");
			Menu::Option("prop_sm_27_gate");
			Menu::Option("prop_sm_27_gate_02");
			Menu::Option("prop_sm_27_gate_03");
			Menu::Option("prop_sm_27_gate_04");
			Menu::Option("prop_sm_locker_door");
			Menu::Option("prop_snow_bailer_01");
			Menu::Option("prop_snow_barrel_pile_03");
			Menu::Option("prop_snow_bench_01");
			Menu::Option("prop_snow_bin_01");
			Menu::Option("prop_snow_bin_02");
			Menu::Option("prop_snow_bush_01_a");
			Menu::Option("prop_snow_bush_02_a");
			Menu::Option("prop_snow_bush_02_b");
			Menu::Option("prop_snow_bush_03");
			Menu::Option("prop_snow_bush_04");
			Menu::Option("prop_snow_bush_04b");
			Menu::Option("prop_snow_cam_03");
			Menu::Option("prop_snow_cam_03a");
			Menu::Option("prop_snow_diggerbkt_01");
			Menu::Option("prop_snow_dumpster_01");
			Menu::Option("prop_snow_elecbox_16");
			Menu::Option("prop_snow_facgate_01");
			Menu::Option("prop_snow_field_01");
			Menu::Option("prop_snow_field_02");
			Menu::Option("prop_snow_field_03");
			Menu::Option("prop_snow_field_04");
			Menu::Option("prop_snow_flower_01");
			Menu::Option("prop_snow_flower_02");
			Menu::Option("prop_snow_fnclink_03crnr2");
			Menu::Option("prop_snow_fnclink_03h");
			Menu::Option("prop_snow_fnclink_03i");
			Menu::Option("prop_snow_fncwood_14a");
			Menu::Option("prop_snow_fncwood_14b");
			Menu::Option("prop_snow_fncwood_14c");
			Menu::Option("prop_snow_fncwood_14d");
			Menu::Option("prop_snow_fncwood_14e");
			Menu::Option("prop_snow_fnc_01");
			Menu::Option("prop_snow_gate_farm_03");
			Menu::Option("prop_snow_grain_01");
			Menu::Option("prop_snow_grass_01");
			Menu::Option("prop_snow_light_01");
			Menu::Option("prop_snow_oldlight_01b");
			Menu::Option("prop_snow_rail_signals02");
			Menu::Option("prop_snow_rub_trukwreck_2");
			Menu::Option("prop_snow_side_spreader_01");
			Menu::Option("prop_snow_streetlight01");
			Menu::Option("prop_snow_streetlight_01_frag_");
			Menu::Option("prop_snow_sub_frame_01a");
			Menu::Option("prop_snow_sub_frame_04b");
			Menu::Option("prop_snow_telegraph_01a");
			Menu::Option("prop_snow_telegraph_02a");
			Menu::Option("prop_snow_telegraph_03");
			Menu::Option("prop_snow_traffic_rail_1a");
			Menu::Option("prop_snow_traffic_rail_1b");
			Menu::Option("prop_snow_trailer01");
			Menu::Option("prop_snow_tree_03_e");
			Menu::Option("prop_snow_tree_03_h");
			Menu::Option("prop_snow_tree_03_i");
			Menu::Option("prop_snow_tree_04_d");
			Menu::Option("prop_snow_tree_04_f");
			Menu::Option("prop_snow_truktrailer_01a");
			Menu::Option("prop_snow_tyre_01");
			Menu::Option("prop_snow_t_ml_01");
			Menu::Option("prop_snow_t_ml_02");
			Menu::Option("prop_snow_t_ml_03");
			Menu::Option("prop_snow_wall_light_15a");
			Menu::Option("prop_snow_watertower01");
			Menu::Option("prop_snow_watertower01_l2");
			Menu::Option("prop_snow_watertower03");
			Menu::Option("prop_snow_woodpile_04a");
			Menu::Option("prop_soap_disp_01");
			Menu::Option("prop_soap_disp_02");
			Menu::Option("prop_solarpanel_01");
			Menu::Option("prop_solarpanel_02");
			Menu::Option("prop_solarpanel_03");
			Menu::Option("prop_sol_chair");
			Menu::Option("prop_space_pistol");
			Menu::Option("prop_space_rifle");
			Menu::Option("prop_speaker_01");
			Menu::Option("prop_speaker_02");
			Menu::Option("prop_speaker_03");
			Menu::Option("prop_speaker_05");
			Menu::Option("prop_speaker_06");
			Menu::Option("prop_speaker_07");
			Menu::Option("prop_speaker_08");
			Menu::Option("prop_speedball_01");
			Menu::Option("prop_sponge_01");
			Menu::Option("prop_sports_clock_01");
			Menu::Option("prop_spot_01");
			Menu::Option("prop_spot_clamp");
			Menu::Option("prop_spot_clamp_02");
			Menu::Option("prop_sprayer");
			Menu::Option("prop_spraygun_01");
			Menu::Option("prop_spray_backpack_01");
			Menu::Option("prop_spray_jackframe");
			Menu::Option("prop_spray_jackleg");
			Menu::Option("prop_sprink_crop_01");
			Menu::Option("prop_sprink_golf_01");
			Menu::Option("prop_sprink_park_01");
			Menu::Option("prop_spycam");
			Menu::Option("prop_squeegee");
			Menu::Option("prop_ss1_05_mp_door");
			Menu::Option("prop_ss1_08_mp_door_l");
			Menu::Option("prop_ss1_08_mp_door_r");
			Menu::Option("prop_ss1_10_door_l");
			Menu::Option("prop_ss1_10_door_r");
			Menu::Option("prop_ss1_14_garage_door");
			Menu::Option("prop_ss1_mpint_door_l");
			Menu::Option("prop_ss1_mpint_door_r");
			Menu::Option("prop_ss1_mpint_garage");
			Menu::Option("prop_ss1_mpint_garage_cl");
			Menu::Option("prop_stag_do_rope");
			Menu::Option("prop_start_finish_line_01");
			Menu::Option("prop_start_grid_01");
			Menu::Option("prop_staticmixer_01");
			Menu::Option("prop_stat_pack_01");
			Menu::Option("prop_steam_basket_01");
			Menu::Option("prop_steam_basket_02");
			Menu::Option("prop_steps_big_01");
			Menu::Option("prop_stickbfly");
			Menu::Option("prop_stickhbird");
			Menu::Option("prop_still");
			Menu::Option("prop_stockade_wheel");
			Menu::Option("prop_stockade_wheel_flat");
			Menu::Option("prop_stool_01");
			Menu::Option("prop_storagetank_01");
			Menu::Option("prop_storagetank_02");
			Menu::Option("prop_storagetank_03");
			Menu::Option("prop_storagetank_03a");
			Menu::Option("prop_storagetank_03b");
			Menu::Option("prop_storagetank_04");
			Menu::Option("prop_storagetank_05");
			Menu::Option("prop_storagetank_06");
			Menu::Option("prop_storagetank_07a");
			Menu::Option("prop_stripmenu");
			Menu::Option("prop_strip_door_01");
			Menu::Option("prop_strip_pole_01");
			Menu::Option("prop_studio_light_02");
			Menu::Option("prop_studio_light_03");
			Menu::Option("prop_sub_chunk_01");
			Menu::Option("prop_sub_cover_01");
			Menu::Option("prop_sub_crane_hook");
			Menu::Option("prop_sub_frame_01a");
			Menu::Option("prop_sub_frame_01b");
			Menu::Option("prop_sub_frame_01c");
			Menu::Option("prop_sub_frame_02a");
			Menu::Option("prop_sub_frame_03a");
			Menu::Option("prop_sub_frame_04a");
			Menu::Option("prop_sub_frame_04b");
			Menu::Option("prop_sub_gantry");
			Menu::Option("prop_sub_release");
			Menu::Option("prop_sub_trans_01a");
			Menu::Option("prop_sub_trans_02a");
			Menu::Option("prop_sub_trans_03a");
			Menu::Option("prop_sub_trans_04a");
			Menu::Option("prop_sub_trans_05b");
			Menu::Option("prop_sub_trans_06b");
			Menu::Option("prop_suitcase_01");
			Menu::Option("prop_suitcase_01b");
			Menu::Option("prop_suitcase_01c");
			Menu::Option("prop_suitcase_01d");
			Menu::Option("prop_suitcase_02");
			Menu::Option("prop_suitcase_03");
			Menu::Option("prop_suitcase_03b");
			Menu::Option("prop_surf_board_ldn_01");
			Menu::Option("prop_surf_board_ldn_02");
			Menu::Option("prop_surf_board_ldn_03");
			Menu::Option("prop_surf_board_ldn_04");
			Menu::Option("prop_syringe_01");
			Menu::Option("prop_s_pine_dead_01");
			Menu::Option("prop_tablesaw_01");
			Menu::Option("prop_tablesmall_01");
			Menu::Option("prop_table_02");
			Menu::Option("prop_table_03b_cs");
			Menu::Option("prop_table_04");
			Menu::Option("prop_table_04_chr");
			Menu::Option("prop_table_05");
			Menu::Option("prop_table_05_chr");
			Menu::Option("prop_table_06");
			Menu::Option("prop_table_06_chr");
			Menu::Option("prop_table_07");
			Menu::Option("prop_table_07_l1");
			Menu::Option("prop_table_08");
			Menu::Option("prop_table_08_chr");
			Menu::Option("prop_table_08_side");
			Menu::Option("prop_table_mic_01");
			Menu::Option("prop_table_para_comb_04");
			Menu::Option("prop_table_tennis");
			Menu::Option("prop_table_ten_bat");
			Menu::Option("prop_taco_01");
			Menu::Option("prop_taco_02");
			Menu::Option("prop_tail_gate_col");
			Menu::Option("prop_tapeplayer_01");
			Menu::Option("prop_target_arm");
			Menu::Option("prop_target_arm_b");
			Menu::Option("prop_target_arm_long");
			Menu::Option("prop_target_arm_sm");
			Menu::Option("prop_target_backboard");
			Menu::Option("prop_target_backboard_b");
			Menu::Option("prop_target_blue");
			Menu::Option("prop_target_blue_arrow");
			Menu::Option("prop_target_bull");
			Menu::Option("prop_target_bull_b");
			Menu::Option("prop_target_comp_metal");
			Menu::Option("prop_target_comp_wood");
			Menu::Option("prop_target_frame_01");
			Menu::Option("prop_target_inner1");
			Menu::Option("prop_target_inner2");
			Menu::Option("prop_target_inner2_b");
			Menu::Option("prop_target_inner3");
			Menu::Option("prop_target_inner3_b");
			Menu::Option("prop_target_inner_b");
			Menu::Option("prop_target_orange_arrow");
			Menu::Option("prop_target_oran_cross");
			Menu::Option("prop_target_ora_purp_01");
			Menu::Option("prop_target_purp_arrow");
			Menu::Option("prop_target_purp_cross");
			Menu::Option("prop_target_red");
			Menu::Option("prop_target_red_arrow");
			Menu::Option("prop_target_red_blue_01");
			Menu::Option("prop_target_red_cross");
			Menu::Option("prop_tarp_strap");
			Menu::Option("prop_taxi_meter_1");
			Menu::Option("prop_taxi_meter_2");
			Menu::Option("prop_tea_trolly");
			Menu::Option("prop_tea_urn");
			Menu::Option("prop_telegraph_01a");
			Menu::Option("prop_telegraph_01b");
			Menu::Option("prop_telegraph_01c");
			Menu::Option("prop_telegraph_01d");
			Menu::Option("prop_telegraph_01e");
			Menu::Option("prop_telegraph_01f");
			Menu::Option("prop_telegraph_01g");
			Menu::Option("prop_telegraph_02a");
			Menu::Option("prop_telegraph_02b");
			Menu::Option("prop_telegraph_03");
			Menu::Option("prop_telegraph_04a");
			Menu::Option("prop_telegraph_04b");
			Menu::Option("prop_telegraph_05a");
			Menu::Option("prop_telegraph_05b");
			Menu::Option("prop_telegraph_05c");
			Menu::Option("prop_telegraph_06a");
			Menu::Option("prop_telegraph_06b");
			Menu::Option("prop_telegraph_06c");
			Menu::Option("prop_telegwall_01a");
			Menu::Option("prop_telegwall_01b");
			Menu::Option("prop_telegwall_02a");
			Menu::Option("prop_telegwall_03a");
			Menu::Option("prop_telegwall_03b");
			Menu::Option("prop_telegwall_04a");
			Menu::Option("prop_telescope");
			Menu::Option("prop_telescope_01");
			Menu::Option("prop_temp_block_blocker");
			Menu::Option("prop_tennis_bag_01");
			Menu::Option("prop_tennis_ball");
			Menu::Option("prop_tennis_ball_lobber");
			Menu::Option("prop_tennis_rack_01");
			Menu::Option("prop_tennis_rack_01b");
			Menu::Option("prop_test_boulder_01");
			Menu::Option("prop_test_boulder_02");
			Menu::Option("prop_test_boulder_03");
			Menu::Option("prop_test_boulder_04");
			Menu::Option("prop_test_elevator");
			Menu::Option("prop_test_elevator_dl");
			Menu::Option("prop_test_elevator_dr");
			Menu::Option("prop_tick");
			Menu::Option("prop_tick_02");
			Menu::Option("prop_till_01_dam");
			Menu::Option("prop_till_02");
			Menu::Option("prop_till_03");
			Menu::Option("prop_time_capsule_01");
			Menu::Option("prop_tint_towel");
			Menu::Option("prop_tint_towels_01");
			Menu::Option("prop_tint_towels_01b");
			Menu::Option("prop_toaster_01");
			Menu::Option("prop_toaster_02");
			Menu::Option("prop_toiletfoot_static");
			Menu::Option("prop_toilet_01");
			Menu::Option("prop_toilet_02");
			Menu::Option("prop_toilet_03");
			Menu::Option("prop_toilet_brush_01");
			Menu::Option("prop_toilet_cube_01");
			Menu::Option("prop_toilet_cube_02");
			Menu::Option("prop_toilet_roll_01");
			Menu::Option("prop_toilet_roll_02");
			Menu::Option("prop_toilet_roll_03");
			Menu::Option("prop_toilet_roll_04");
			Menu::Option("prop_toilet_roll_05");
			Menu::Option("prop_toilet_shamp_01");
			Menu::Option("prop_toilet_shamp_02");
			Menu::Option("prop_toilet_soap_01");
			Menu::Option("prop_toilet_soap_02");
			Menu::Option("prop_toilet_soap_03");
			Menu::Option("prop_toilet_soap_04");
			Menu::Option("prop_toolchest_01");
			Menu::Option("prop_toolchest_02");
			Menu::Option("prop_toolchest_03");
			Menu::Option("prop_toolchest_04");
			Menu::Option("prop_toolchest_05");
			Menu::Option("prop_tool_adjspanner");
			Menu::Option("prop_tool_bench01");
			Menu::Option("prop_tool_bluepnt");
			Menu::Option("prop_tool_box_01");
			Menu::Option("prop_tool_box_02");
			Menu::Option("prop_tool_box_03");
			Menu::Option("prop_tool_box_04");
			Menu::Option("prop_tool_box_05");
			Menu::Option("prop_tool_box_06");
			Menu::Option("prop_tool_box_07");
			Menu::Option("prop_tool_broom");
			Menu::Option("prop_tool_broom2");
			Menu::Option("prop_tool_broom2_l1");
			Menu::Option("prop_tool_cable01");
			Menu::Option("prop_tool_cable02");
			Menu::Option("prop_tool_consaw");
			Menu::Option("prop_tool_drill");
			Menu::Option("prop_tool_fireaxe");
			Menu::Option("prop_tool_hammer");
			Menu::Option("prop_tool_hardhat");
			Menu::Option("prop_tool_jackham");
			Menu::Option("prop_tool_mallet");
			Menu::Option("prop_tool_mopbucket");
			Menu::Option("prop_tool_nailgun");
			Menu::Option("prop_tool_pickaxe");
			Menu::Option("prop_tool_pliers");
			Menu::Option("prop_tool_rake");
			Menu::Option("prop_tool_rake_l1");
			Menu::Option("prop_tool_sawhorse");
			Menu::Option("prop_tool_screwdvr01");
			Menu::Option("prop_tool_screwdvr02");
			Menu::Option("prop_tool_screwdvr03");
			Menu::Option("prop_tool_shovel");
			Menu::Option("prop_tool_shovel006");
			Menu::Option("prop_tool_shovel2");
			Menu::Option("prop_tool_shovel3");
			Menu::Option("prop_tool_shovel4");
			Menu::Option("prop_tool_shovel5");
			Menu::Option("prop_tool_sledgeham");
			Menu::Option("prop_tool_spanner01");
			Menu::Option("prop_tool_spanner02");
			Menu::Option("prop_tool_spanner03");
			Menu::Option("prop_tool_torch");
			Menu::Option("prop_tool_wrench");
			Menu::Option("prop_toothbrush_01");
			Menu::Option("prop_toothb_cup_01");
			Menu::Option("prop_toothpaste_01");
			Menu::Option("prop_tornado_wheel");
			Menu::Option("prop_torture_01");
			Menu::Option("prop_torture_ch_01");
			Menu::Option("prop_tourist_map_01");
			Menu::Option("prop_towel2_01");
			Menu::Option("prop_towel2_02");
			Menu::Option("prop_towel_01");
			Menu::Option("prop_towel_rail_01");
			Menu::Option("prop_towel_rail_02");
			Menu::Option("prop_towel_shelf_01");
			Menu::Option("prop_towel_small_01");
			Menu::Option("prop_towercrane_01a");
			Menu::Option("prop_towercrane_02a");
			Menu::Option("prop_towercrane_02b");
			Menu::Option("prop_towercrane_02c");
			Menu::Option("prop_towercrane_02d");
			Menu::Option("prop_towercrane_02e");
			Menu::Option("prop_towercrane_02el");
			Menu::Option("prop_towercrane_02el2");
			Menu::Option("prop_traffic_rail_1c");
			Menu::Option("prop_traffic_rail_2");
			Menu::Option("prop_trailer01");
			Menu::Option("prop_trailer01_up");
			Menu::Option("prop_trailer_01_new");
			Menu::Option("prop_trailer_door_closed");
			Menu::Option("prop_trailer_door_open");
			Menu::Option("prop_trailer_monitor_01");
			Menu::Option("prop_trailr_base");
			Menu::Option("prop_trailr_base_static");
			Menu::Option("prop_train_ticket_02");
			Menu::Option("prop_tram_pole_double01");
			Menu::Option("prop_tram_pole_double02");
			Menu::Option("prop_tram_pole_double03");
			Menu::Option("prop_tram_pole_roadside");
			Menu::Option("prop_tram_pole_single01");
			Menu::Option("prop_tram_pole_single02");
			Menu::Option("prop_tram_pole_wide01");
			Menu::Option("prop_tree_birch_01");
			Menu::Option("prop_tree_birch_02");
			Menu::Option("prop_tree_birch_03");
			Menu::Option("prop_tree_birch_03b");
			Menu::Option("prop_tree_birch_04");
			Menu::Option("prop_tree_birch_05");
			Menu::Option("prop_tree_cedar_02");
			Menu::Option("prop_tree_cedar_03");
			Menu::Option("prop_tree_cedar_04");
			Menu::Option("prop_tree_cedar_s_01");
			Menu::Option("prop_tree_cedar_s_02");
			Menu::Option("prop_tree_cedar_s_04");
			Menu::Option("prop_tree_cedar_s_05");
			Menu::Option("prop_tree_cedar_s_06");
			Menu::Option("prop_tree_cypress_01");
			Menu::Option("prop_tree_eng_oak_01");
			Menu::Option("prop_tree_eucalip_01");
			Menu::Option("prop_tree_fallen_01");
			Menu::Option("prop_tree_fallen_02");
			Menu::Option("prop_tree_fallen_pine_01");
			Menu::Option("prop_tree_jacada_01");
			Menu::Option("prop_tree_jacada_02");
			Menu::Option("prop_tree_lficus_02");
			Menu::Option("prop_tree_lficus_03");
			Menu::Option("prop_tree_lficus_05");
			Menu::Option("prop_tree_lficus_06");
			Menu::Option("prop_tree_log_01");
			Menu::Option("prop_tree_log_02");
			Menu::Option("prop_tree_maple_02");
			Menu::Option("prop_tree_maple_03");
			Menu::Option("prop_tree_mquite_01");
			Menu::Option("prop_tree_oak_01");
			Menu::Option("prop_tree_olive_01");
			Menu::Option("prop_tree_pine_01");
			Menu::Option("prop_tree_pine_02");
			Menu::Option("prop_tree_stump_01");
			Menu::Option("prop_trevor_rope_01");
			Menu::Option("prop_trev_sec_id");
			Menu::Option("prop_trev_tv_01");
			Menu::Option("prop_triple_grid_line");
			Menu::Option("prop_tri_finish_banner");
			Menu::Option("prop_tri_pod");
			Menu::Option("prop_tri_pod_lod");
			Menu::Option("prop_tri_start_banner");
			Menu::Option("prop_tri_table_01");
			Menu::Option("prop_trough1");
			Menu::Option("prop_truktrailer_01a");
			Menu::Option("prop_tshirt_box_02");
			Menu::Option("prop_tshirt_shelf_1");
			Menu::Option("prop_tshirt_shelf_2");
			Menu::Option("prop_tshirt_shelf_2a");
			Menu::Option("prop_tshirt_shelf_2b");
			Menu::Option("prop_tshirt_shelf_2c");
			Menu::Option("prop_tshirt_stand_01");
			Menu::Option("prop_tshirt_stand_01b");
			Menu::Option("prop_tshirt_stand_02");
			Menu::Option("prop_tshirt_stand_04");
			Menu::Option("prop_tt_screenstatic");
			Menu::Option("prop_tumbler_01");
			Menu::Option("prop_tumbler_01b");
			Menu::Option("prop_tumbler_01_empty");
			Menu::Option("prop_tunnel_liner01");
			Menu::Option("prop_tunnel_liner02");
			Menu::Option("prop_tunnel_liner03");
			Menu::Option("prop_turkey_leg_01");
			Menu::Option("prop_turnstyle_01");
			Menu::Option("prop_tv_02");
			Menu::Option("prop_tv_03_overlay");
			Menu::Option("prop_tv_04");
			Menu::Option("prop_tv_05");
			Menu::Option("prop_tv_06");
			Menu::Option("prop_tv_07");
			Menu::Option("prop_tv_cabinet_03");
			Menu::Option("prop_tv_cabinet_04");
			Menu::Option("prop_tv_cabinet_05");
			Menu::Option("prop_tv_cam_02");
			Menu::Option("prop_tv_flat_01");
			Menu::Option("prop_tv_flat_01_screen");
			Menu::Option("prop_tv_flat_02b");
			Menu::Option("prop_tv_flat_03");
			Menu::Option("prop_tv_flat_03b");
			Menu::Option("prop_tv_flat_michael");
			Menu::Option("prop_tv_test");
			Menu::Option("prop_tyre_rack_01");
			Menu::Option("prop_tyre_spike_01");
			Menu::Option("prop_t_coffe_table");
			Menu::Option("prop_t_shirt_ironing");
			Menu::Option("prop_t_shirt_row_01");
			Menu::Option("prop_t_shirt_row_02");
			Menu::Option("prop_t_shirt_row_02b");
			Menu::Option("prop_t_shirt_row_03");
			Menu::Option("prop_t_shirt_row_04");
			Menu::Option("prop_t_shirt_row_05l");
			Menu::Option("prop_t_shirt_row_05r");
			Menu::Option("prop_t_sofa");
			Menu::Option("prop_t_sofa_02");
			Menu::Option("prop_t_telescope_01b");
			Menu::Option("prop_umpire_01");
			Menu::Option("prop_utensil");
			Menu::Option("prop_valet_03");
			Menu::Option("prop_vault_shutter");
			Menu::Option("prop_vb_34_tencrt_lighting");
			Menu::Option("prop_vcr_01");
			Menu::Option("prop_veg_corn_01");
			Menu::Option("prop_veg_crop_01");
			Menu::Option("prop_veg_crop_02");
			Menu::Option("prop_veg_crop_04");
			Menu::Option("prop_veg_crop_04_leaf");
			Menu::Option("prop_veg_crop_05");
			Menu::Option("prop_veg_crop_06");
			Menu::Option("prop_veg_crop_orange");
			Menu::Option("prop_veg_crop_tr_01");
			Menu::Option("prop_veg_crop_tr_02");
			Menu::Option("prop_veg_grass_01_a");
			Menu::Option("prop_veg_grass_01_b");
			Menu::Option("prop_veg_grass_01_c");
			Menu::Option("prop_veg_grass_01_d");
			Menu::Option("prop_veg_grass_02_a");
			Menu::Option("prop_vehicle_hook");
			Menu::Option("prop_vend_coffe_01");
			Menu::Option("prop_vend_condom_01");
			Menu::Option("prop_vend_fags_01");
			Menu::Option("prop_vend_fridge01");
			Menu::Option("prop_vend_snak_01");
			Menu::Option("prop_venice_board_01");
			Menu::Option("prop_venice_board_02");
			Menu::Option("prop_venice_board_03");
			Menu::Option("prop_venice_counter_01");
			Menu::Option("prop_venice_counter_02");
			Menu::Option("prop_venice_counter_03");
			Menu::Option("prop_venice_counter_04");
			Menu::Option("prop_venice_shop_front_01");
			Menu::Option("prop_venice_sign_09");
			Menu::Option("prop_venice_sign_10");
			Menu::Option("prop_venice_sign_11");
			Menu::Option("prop_venice_sign_12");
			Menu::Option("prop_venice_sign_14");
			Menu::Option("prop_venice_sign_15");
			Menu::Option("prop_venice_sign_16");
			Menu::Option("prop_venice_sign_17");
			Menu::Option("prop_venice_sign_18");
			Menu::Option("prop_ventsystem_01");
			Menu::Option("prop_ventsystem_02");
			Menu::Option("prop_ventsystem_03");
			Menu::Option("prop_ventsystem_04");
			Menu::Option("prop_ven_market_stool");
			Menu::Option("prop_ven_market_table1");
			Menu::Option("prop_ven_shop_1_counter");
			Menu::Option("prop_vertdrill_01");
			Menu::Option("prop_voltmeter_01");
			Menu::Option("prop_v_15_cars_clock");
			Menu::Option("prop_v_5_bclock");
			Menu::Option("prop_v_bmike_01");
			Menu::Option("prop_v_cam_01");
			Menu::Option("prop_v_door_44");
			Menu::Option("prop_v_hook_s");
			Menu::Option("prop_v_m_phone_01");
			Menu::Option("prop_v_m_phone_o1s");
			Menu::Option("prop_v_parachute");
			Menu::Option("prop_waiting_seat_01");
			Menu::Option("prop_wait_bench_01");
			Menu::Option("prop_walllight_ld_01b");
			Menu::Option("prop_wall_light_08a");
			Menu::Option("prop_wall_light_10a");
			Menu::Option("prop_wall_light_10b");
			Menu::Option("prop_wall_light_10c");
			Menu::Option("prop_wall_light_11");
			Menu::Option("prop_wall_light_12");
			Menu::Option("prop_wall_light_17b");
			Menu::Option("prop_wall_light_18a");
			Menu::Option("prop_wall_vent_01");
			Menu::Option("prop_wall_vent_02");
			Menu::Option("prop_wall_vent_03");
			Menu::Option("prop_wall_vent_04");
			Menu::Option("prop_wall_vent_05");
			Menu::Option("prop_wall_vent_06");
			Menu::Option("prop_wardrobe_door_01");
			Menu::Option("prop_warehseshelf01");
			Menu::Option("prop_warehseshelf02");
			Menu::Option("prop_warehseshelf03");
			Menu::Option("prop_warninglight_01");
			Menu::Option("prop_washer_01");
			Menu::Option("prop_washer_02");
			Menu::Option("prop_washer_03");
			Menu::Option("prop_washing_basket_01");
			Menu::Option("prop_watercrate_01");
			Menu::Option("prop_wateringcan");
			Menu::Option("prop_watertower01");
			Menu::Option("prop_watertower02");
			Menu::Option("prop_watertower03");
			Menu::Option("prop_watertower04");
			Menu::Option("prop_waterwheela");
			Menu::Option("prop_waterwheelb");
			Menu::Option("prop_water_bottle");
			Menu::Option("prop_water_bottle_dark");
			Menu::Option("prop_water_corpse_01");
			Menu::Option("prop_water_corpse_02");
			Menu::Option("prop_water_ramp_01");
			Menu::Option("prop_water_ramp_02");
			Menu::Option("prop_water_ramp_03");
			Menu::Option("prop_weed_01");
			Menu::Option("prop_weed_02");
			Menu::Option("prop_weed_block_01");
			Menu::Option("prop_weed_bottle");
			Menu::Option("prop_weed_pallet");
			Menu::Option("prop_weed_tub_01");
			Menu::Option("prop_weed_tub_01b");
			Menu::Option("prop_weight_10k");
			Menu::Option("prop_weight_15k");
			Menu::Option("prop_weight_1_5k");
			Menu::Option("prop_weight_20k");
			Menu::Option("prop_weight_2_5k");
			Menu::Option("prop_weight_5k");
			Menu::Option("prop_weight_rack_01");
			Menu::Option("prop_weight_rack_02");
			Menu::Option("prop_welding_mask_01");
			Menu::Option("prop_weld_torch");
			Menu::Option("prop_wheat_grass_empty");
			Menu::Option("prop_wheat_grass_glass");
			Menu::Option("prop_wheelbarrow01a");
			Menu::Option("prop_wheelbarrow02a");
			Menu::Option("prop_wheelchair_01");
			Menu::Option("prop_wheel_01");
			Menu::Option("prop_wheel_02");
			Menu::Option("prop_wheel_03");
			Menu::Option("prop_wheel_04");
			Menu::Option("prop_wheel_05");
			Menu::Option("prop_wheel_06");
			Menu::Option("prop_wheel_hub_01");
			Menu::Option("prop_wheel_hub_02_lod_02");
			Menu::Option("prop_wheel_rim_01");
			Menu::Option("prop_wheel_rim_02");
			Menu::Option("prop_wheel_rim_03");
			Menu::Option("prop_wheel_rim_04");
			Menu::Option("prop_wheel_rim_05");
			Menu::Option("prop_wheel_tyre");
			Menu::Option("prop_whisk");
			Menu::Option("prop_white_keyboard");
			Menu::Option("prop_winch_hook_long");
			Menu::Option("prop_winch_hook_short");
			Menu::Option("prop_windmill2");
			Menu::Option("prop_windmill_01_l1");
			Menu::Option("prop_windmill_01_slod");
			Menu::Option("prop_windmill_01_slod2");
			Menu::Option("prop_windowbox_a");
			Menu::Option("prop_windowbox_b");
			Menu::Option("prop_windowbox_broken");
			Menu::Option("prop_windowbox_small");
			Menu::Option("prop_win_plug_01");
			Menu::Option("prop_win_plug_01_dam");
			Menu::Option("prop_win_trailer_ld");
			Menu::Option("prop_wok");
			Menu::Option("prop_woodpile_02a");
			Menu::Option("prop_worklight_01a_l1");
			Menu::Option("prop_worklight_03a_l1");
			Menu::Option("prop_worklight_03b_l1");
			Menu::Option("prop_worklight_04a");
			Menu::Option("prop_worklight_04b_l1");
			Menu::Option("prop_worklight_04c_l1");
			Menu::Option("prop_worklight_04d_l1");
			Menu::Option("prop_workwall_01");
			Menu::Option("prop_workwall_02");
			Menu::Option("prop_wreckedcart");
			Menu::Option("prop_wrecked_buzzard");
			Menu::Option("prop_w_board_blank");
			Menu::Option("prop_w_board_blank_2");
			Menu::Option("prop_w_fountain_01");
			Menu::Option("prop_w_r_cedar_01");
			Menu::Option("prop_w_r_cedar_dead");
			Menu::Option("prop_xmas_tree_int");
			Menu::Option("prop_xmas_ext");
			Menu::Option("prop_yacht_lounger");
			Menu::Option("prop_yacht_seat_01");
			Menu::Option("prop_yacht_seat_02");
			Menu::Option("prop_yacht_seat_03");
			Menu::Option("prop_yacht_table_01");
			Menu::Option("prop_yacht_table_02");
			Menu::Option("prop_yacht_table_03");
			Menu::Option("prop_yaught_chair_01");
			Menu::Option("prop_yaught_sofa_01");
			Menu::Option("prop_yell_plastic_target");
			Menu::Option("prop_yoga_mat_01");
			Menu::Option("prop_yoga_mat_02");
			Menu::Option("prop_yoga_mat_03");
			Menu::Option("prop_ztype_covered");
			Menu::Option("p_ing_skiprope_01");
			Menu::Option("p_ing_skiprope_01_s");
			Menu::Option("p_skiprope_r_s");
			Menu::Option("test_prop_gravestones_04a");
			Menu::Option("test_prop_gravestones_05a");
			Menu::Option("test_prop_gravestones_07a");
			Menu::Option("test_prop_gravestones_08a");
			Menu::Option("test_prop_gravestones_09a");
			Menu::Option("test_prop_gravetomb_01a");
			Menu::Option("test_prop_gravetomb_02a");
			Menu::Option("prop_cs_dog_lead_a_s");
			Menu::Option("prop_cs_dog_lead_b_s");
			Menu::Option("prop_welding_mask_01_s");
			Menu::Option("prop_wheelchair_01_s");
			Menu::Option("p_a4_sheets_s");
			Menu::Option("p_amanda_note_01_s");
			Menu::Option("p_armchair_01_s");
			Menu::Option("p_arm_bind_cut_s");
			Menu::Option("p_ashley_neck_01_s");
			Menu::Option("p_banknote_onedollar_s");
			Menu::Option("p_banknote_s");
			Menu::Option("p_binbag_01_s");
			Menu::Option("p_bison_winch_s");
			Menu::Option("p_bloodsplat_s");
			Menu::Option("p_blueprints_01_s");
			Menu::Option("p_brain_chunk_s");
			Menu::Option("p_bs_map_door_01_s");
			Menu::Option("p_cablecar_s");
			Menu::Option("p_cablecar_s_door_l");
			Menu::Option("p_cablecar_s_door_r");
			Menu::Option("p_cash_envelope_01_s");
			Menu::Option("p_cctv_s");
			Menu::Option("p_chem_vial_02b_s");
			Menu::Option("p_clb_officechair_s");
			Menu::Option("p_cletus_necklace_s");
			Menu::Option("p_clothtarp_down_s");
			Menu::Option("p_clothtarp_s");
			Menu::Option("p_clothtarp_up_s");
			Menu::Option("p_controller_01_s");
			Menu::Option("p_crahsed_heli_s");
			Menu::Option("p_cs1_14b_train_s");
			Menu::Option("p_cs1_14b_train_s_col");
			Menu::Option("p_cs1_14b_train_s_colopen");
			Menu::Option("p_csbporndudes_necklace_s");
			Menu::Option("p_csh_strap_01_pro_s");
			Menu::Option("p_csh_strap_01_s");
			Menu::Option("p_csh_strap_03_s");
			Menu::Option("p_cs_15m_rope_s");
			Menu::Option("p_cs_bandana_s");
			Menu::Option("p_cs_beachtowel_01_s");
			Menu::Option("p_cs_beverly_lanyard_s");
			Menu::Option("p_cs_bowl_01b_s");
			Menu::Option("p_cs_ciggy_01b_s");
			Menu::Option("p_cs_clothes_box_s");
			Menu::Option("p_cs_coke_line_s");
			Menu::Option("p_cs_cuffs_02_s");
			Menu::Option("p_cs_duffel_01_s");
			Menu::Option("p_cs_laz_ptail_s");
			Menu::Option("p_cs_leaf_s");
			Menu::Option("p_cs_mp_jet_01_s");
			Menu::Option("p_cs_newspaper_s");
			Menu::Option("p_cs_pamphlet_01_s");
			Menu::Option("p_cs_panties_03_s");
			Menu::Option("p_cs_para_ropebit_s");
			Menu::Option("p_cs_para_ropes_s");
			Menu::Option("p_cs_polaroid_s");
			Menu::Option("p_cs_police_torch_s");
			Menu::Option("p_cs_pour_tube_s");
			Menu::Option("p_cs_power_cord_s");
			Menu::Option("p_cs_rope_tie_01_s");
			Menu::Option("p_cs_sack_01_s");
			Menu::Option("p_cs_saucer_01_s");
			Menu::Option("p_cs_scissors_s");
			Menu::Option("p_cs_script_s");
			Menu::Option("p_cs_shirt_01_s");
			Menu::Option("p_cs_shot_glass_2_s");
			Menu::Option("p_cs_shot_glass_s");
			Menu::Option("p_cs_sub_hook_01_s");
			Menu::Option("p_cs_toaster_s");
			Menu::Option("p_cs_tracy_neck2_s");
			Menu::Option("p_cs_trolley_01_s");
			Menu::Option("p_defilied_ragdoll_01_s");
			Menu::Option("p_devin_box_01_s");
			Menu::Option("p_dinechair_01_s");
			Menu::Option("p_d_scuba_mask_s");
			Menu::Option("p_d_scuba_tank_s");
			Menu::Option("p_ecg_01_cable_01_s");
			Menu::Option("p_fib_rubble_s");
			Menu::Option("p_finale_bld_ground_s");
			Menu::Option("p_finale_bld_pool_s");
			Menu::Option("p_fin_vaultdoor_s");
			Menu::Option("p_flatbed_strap_s");
			Menu::Option("p_folding_chair_01_s");
			Menu::Option("p_gaffer_tape_s");
			Menu::Option("p_gaffer_tape_strip_s");
			Menu::Option("p_gasmask_s");
			Menu::Option("p_gcase_s");
			Menu::Option("p_hand_toilet_s");
			Menu::Option("p_hw1_22_doors_s");
			Menu::Option("p_hw1_22_table_s");
			Menu::Option("p_ice_box_01_s");
			Menu::Option("p_ice_box_proxy_col");
			Menu::Option("p_idol_case_s");
			Menu::Option("p_ilev_p_easychair_s");
			Menu::Option("p_inhaler_01_s");
			Menu::Option("p_jimmyneck_03_s");
			Menu::Option("p_jimmy_necklace_s");
			Menu::Option("p_kitch_juicer_s");
			Menu::Option("p_lamarneck_01_s");
			Menu::Option("p_laptop_02_s");
			Menu::Option("p_large_gold_s");
			Menu::Option("p_lazlow_shirt_s");
			Menu::Option("p_laz_j01_s");
			Menu::Option("p_laz_j02_s");
			Menu::Option("p_ld_cable_tie_01_s");
			Menu::Option("p_ld_crocclips01_s");
			Menu::Option("p_ld_crocclips02_s");
			Menu::Option("p_ld_heist_bag_s_1");
			Menu::Option("p_ld_heist_bag_s_2");
			Menu::Option("p_ld_heist_bag_s_pro");
			Menu::Option("p_ld_heist_bag_s_pro2_s");
			Menu::Option("p_ld_heist_bag_s_pro_o");
			Menu::Option("p_leg_bind_cut_s");
			Menu::Option("p_lestersbed_s");
			Menu::Option("p_lev_sofa_s");
			Menu::Option("p_lifeinv_neck_01_s");
			Menu::Option("p_loose_rag_01_s");
			Menu::Option("p_mbbed_s");
			Menu::Option("p_medal_01_s");
			Menu::Option("p_med_jet_01_s");
			Menu::Option("p_meth_bag_01_s");
			Menu::Option("p_michael_backpack_s");
			Menu::Option("p_michael_scuba_mask_s");
			Menu::Option("p_michael_scuba_tank_s");
			Menu::Option("p_mp_showerdoor_s");
			Menu::Option("p_mrk_harness_s");
			Menu::Option("p_mr_raspberry_01_s");
			Menu::Option("p_novel_01_s");
			Menu::Option("p_omega_neck_01_s");
			Menu::Option("p_omega_neck_02_s");
			Menu::Option("p_orleans_mask_s");
			Menu::Option("p_ortega_necklace_s");
			Menu::Option("p_oscar_necklace_s");
			Menu::Option("p_overalls_02_s");
			Menu::Option("p_pistol_holster_s");
			Menu::Option("p_po1_01_doorm_s");
			Menu::Option("p_police_radio_hset_s");
			Menu::Option("p_poly_bag_01_s");
			Menu::Option("p_pour_wine_s");
			Menu::Option("p_rail_controller_s");
			Menu::Option("p_res_sofa_l_s");
			Menu::Option("p_rpulley_s");
			Menu::Option("p_sec_case_02_s");
			Menu::Option("p_shower_towel_s");
			Menu::Option("p_single_rose_s");
			Menu::Option("p_smg_holster_01_s");
			Menu::Option("p_soloffchair_s");
			Menu::Option("p_spinning_anus_s");
			Menu::Option("p_steve_scuba_hood_s");
			Menu::Option("p_stretch_necklace_s");
			Menu::Option("p_syringe_01_s");
			Menu::Option("p_s_scuba_mask_s");
			Menu::Option("p_s_scuba_tank_s");
			Menu::Option("p_till_01_s");
			Menu::Option("p_tmom_earrings_s");
			Menu::Option("p_tourist_map_01_s");
			Menu::Option("p_trevor_prologe_bally_s");
			Menu::Option("p_trev_rope_01_s");
			Menu::Option("p_trev_ski_mask_s");
			Menu::Option("p_tumbler_01_s");
			Menu::Option("p_tumbler_02_s1");
			Menu::Option("p_tumbler_cs2_s");
			Menu::Option("p_tv_cam_02_s");
			Menu::Option("p_t_shirt_pile_s");
			Menu::Option("p_v_43_safe_s");
			Menu::Option("p_v_ilev_chopshopswitch_s");
			Menu::Option("p_v_med_p_sofa_s");
			Menu::Option("p_v_res_tt_bed_s");
			Menu::Option("p_wade_necklace_s");
			Menu::Option("p_wboard_clth_s");
			Menu::Option("p_weed_bottle_s");
			Menu::Option("p_whiskey_bottle_s");
			Menu::Option("p_winch_long_s");
			Menu::Option("s_prop_hdphones");
			Menu::Option("s_prop_hdphones_1");
			Menu::Option("v_ilev_fib_door1_s");
			Menu::Option("v_res_msonbed_s");
			Menu::Option("v_res_tre_sofa_s");
			Menu::Option("v_tre_sofa_mess_a_s");
			Menu::Option("v_tre_sofa_mess_b_s");
			Menu::Option("v_tre_sofa_mess_c_s");
			Menu::Option("prop_ar_arrow_1");
			Menu::Option("prop_ar_arrow_2");
			Menu::Option("prop_ar_arrow_3");
			Menu::Option("prop_ar_ring_01");
			Menu::Option("prop_mk_arrow_3d");
			Menu::Option("prop_mk_arrow_flat");
			Menu::Option("prop_mk_bike_logo_1");
			Menu::Option("prop_mk_bike_logo_2");
			Menu::Option("prop_mk_boost");
			Menu::Option("prop_mk_cone");
			Menu::Option("prop_mk_cylinder");
			Menu::Option("prop_mk_flag");
			Menu::Option("prop_mk_flag_2");
			Menu::Option("prop_mk_heli");
			Menu::Option("prop_mk_lap");
			Menu::Option("prop_mk_mp_ring_01");
			Menu::Option("prop_mk_mp_ring_01b");
			Menu::Option("prop_mk_num_0");
			Menu::Option("prop_mk_num_1");
			Menu::Option("prop_mk_num_2");
			Menu::Option("prop_mk_num_3");
			Menu::Option("prop_mk_num_4");
			Menu::Option("prop_mk_num_5");
			Menu::Option("prop_mk_num_6");
			Menu::Option("prop_mk_num_7");
			Menu::Option("prop_mk_num_8");
			Menu::Option("prop_mk_num_9");
			Menu::Option("prop_mk_plane");
			Menu::Option("prop_mk_race_chevron_01");
			Menu::Option("prop_mk_race_chevron_02");
			Menu::Option("prop_mk_race_chevron_03");
			Menu::Option("prop_mk_repair");
			Menu::Option("prop_mk_ring");
			Menu::Option("prop_mk_ring_flat");
			Menu::Option("prop_mk_sphere");
			Menu::Option("prop_mk_tri_cycle");
			Menu::Option("prop_mk_tri_run");
			Menu::Option("prop_mk_tri_swim");
			Menu::Option("prop_mp_arrow_ring");
			Menu::Option("prop_mp_halo");
			Menu::Option("prop_mp_halo_lrg");
			Menu::Option("prop_mp_halo_med");
			Menu::Option("prop_mp_halo_point");
			Menu::Option("prop_mp_halo_point_lrg");
			Menu::Option("prop_mp_halo_point_med");
			Menu::Option("prop_mp_halo_point_sm");
			Menu::Option("prop_mp_halo_rotate");
			Menu::Option("prop_mp_halo_rotate_lrg");
			Menu::Option("prop_mp_halo_rotate_med");
			Menu::Option("prop_mp_halo_rotate_sm");
			Menu::Option("prop_mp_halo_sm");
			Menu::Option("prop_mp_pointer_ring");
			Menu::Option("prop_mp_solid_ring");
			Menu::Option("cj_parachute");
			Menu::Option("gb_cap_use");
			Menu::Option("gb_specs_use");
			Menu::Option("cj_proc_tin2");
			Menu::Option("proc_coral_01");
			Menu::Option("proc_fern_02");
			Menu::Option("proc_litter_01");
			Menu::Option("proc_litter_02");
			Menu::Option("proc_mntn_stone01");
			Menu::Option("proc_mntn_stone02");
			Menu::Option("proc_mntn_stone03");
			Menu::Option("proc_searock_01");
			Menu::Option("proc_searock_02");
			Menu::Option("proc_searock_03");
			Menu::Option("proc_sml_stones01");
			Menu::Option("proc_sml_stones02");
			Menu::Option("proc_sml_stones03");
			Menu::Option("proc_trolley_lakebed");
			Menu::Option("prop_bush_gorse_dry");
			Menu::Option("prop_bush_gorse_lush");
			Menu::Option("prop_coral_01");
			Menu::Option("prop_coral_02");
			Menu::Option("prop_coral_03");
			Menu::Option("prop_sapling_01");
			Menu::Option("prop_seabrain_01");
			Menu::Option("prop_seagroup_02");
			Menu::Option("prop_sealife_01");
			Menu::Option("prop_sealife_02");
			Menu::Option("prop_sealife_03");
			Menu::Option("prop_sealife_04");
			Menu::Option("prop_sealife_05");
			Menu::Option("prop_seaweed_01");
			Menu::Option("prop_seaweed_02");
			Menu::Option("prop_starfish_01");
			Menu::Option("prop_starfish_02");
			Menu::Option("prop_starfish_03");
			Menu::Option("prop_aerial_01a");
			Menu::Option("prop_aerial_01b");
			Menu::Option("prop_aerial_01c");
			Menu::Option("prop_aerial_01d");
			Menu::Option("prop_aircon_l_01");
			Menu::Option("prop_aircon_l_02");
			Menu::Option("prop_aircon_l_03");
			Menu::Option("prop_aircon_l_04");
			Menu::Option("prop_aircon_m_09");
			Menu::Option("prop_aircon_s_01a");
			Menu::Option("prop_aircon_s_02a");
			Menu::Option("prop_aircon_s_02b");
			Menu::Option("prop_aircon_s_03a");
			Menu::Option("prop_aircon_s_03b");
			Menu::Option("prop_aircon_s_04a");
			Menu::Option("prop_aircon_s_05a");
			Menu::Option("prop_aircon_s_06a");
			Menu::Option("prop_aircon_s_07a");
			Menu::Option("prop_aircon_s_07b");
			Menu::Option("prop_alarm_01");
			Menu::Option("prop_alarm_02");
			Menu::Option("prop_billb_frame01a");
			Menu::Option("prop_billb_frame01b");
			Menu::Option("prop_billb_frame02a");
			Menu::Option("prop_billb_frame02b");
			Menu::Option("prop_billb_frame03a");
			Menu::Option("prop_billb_frame03b");
			Menu::Option("prop_billb_frame03c");
			Menu::Option("prop_billb_frame04a");
			Menu::Option("prop_billb_frame04b");
			Menu::Option("prop_bmu_01");
			Menu::Option("prop_bmu_01_b");
			Menu::Option("prop_bmu_02");
			Menu::Option("prop_bmu_02_ld");
			Menu::Option("prop_bmu_02_ld_cab");
			Menu::Option("prop_bmu_02_ld_sup");
			Menu::Option("prop_bmu_track01");
			Menu::Option("prop_bmu_track02");
			Menu::Option("prop_bmu_track03");
			Menu::Option("prop_fireescape_01a");
			Menu::Option("prop_fireescape_01b");
			Menu::Option("prop_fireescape_02a");
			Menu::Option("prop_fireescape_02b");
			Menu::Option("prop_flagpole_1a");
			Menu::Option("prop_flagpole_2a");
			Menu::Option("prop_flagpole_3a");
			Menu::Option("prop_helipad_01");
			Menu::Option("prop_helipad_02");
			Menu::Option("prop_radiomast01");
			Menu::Option("prop_radiomast02");
			Menu::Option("prop_roofpipe_01");
			Menu::Option("prop_roofpipe_02");
			Menu::Option("prop_roofpipe_03");
			Menu::Option("prop_roofpipe_04");
			Menu::Option("prop_roofpipe_05");
			Menu::Option("prop_roofpipe_06");
			Menu::Option("prop_roofvent_011a");
			Menu::Option("prop_roofvent_01a");
			Menu::Option("prop_roofvent_01b");
			Menu::Option("prop_roofvent_02a");
			Menu::Option("prop_roofvent_02b");
			Menu::Option("prop_roofvent_03a");
			Menu::Option("prop_roofvent_04a");
			Menu::Option("prop_roofvent_05a");
			Menu::Option("prop_roofvent_05b");
			Menu::Option("prop_roofvent_07a");
			Menu::Option("prop_roofvent_08a");
			Menu::Option("prop_roofvent_09a");
			Menu::Option("prop_roofvent_10a");
			Menu::Option("prop_roofvent_10b");
			Menu::Option("prop_roofvent_11b");
			Menu::Option("prop_roofvent_11c");
			Menu::Option("prop_roofvent_12a");
			Menu::Option("prop_roofvent_13a");
			Menu::Option("prop_roofvent_15a");
			Menu::Option("prop_roofvent_16a");
			Menu::Option("prop_satdish_2_a");
			Menu::Option("prop_satdish_2_f");
			Menu::Option("prop_satdish_2_g");
			Menu::Option("prop_satdish_3_b");
			Menu::Option("prop_satdish_3_c");
			Menu::Option("prop_satdish_3_d");
			Menu::Option("prop_satdish_l_01");
			Menu::Option("prop_satdish_s_03");
			Menu::Option("prop_satdish_s_05a");
			Menu::Option("prop_satdish_s_05b");
			Menu::Option("prop_skylight_01");
			Menu::Option("prop_skylight_02");
			Menu::Option("prop_skylight_03");
			Menu::Option("prop_skylight_04");
			Menu::Option("prop_skylight_05");
			Menu::Option("prop_skylight_06a");
			Menu::Option("prop_skylight_06b");
			Menu::Option("prop_skylight_06c");
			Menu::Option("prop_solarpanel_01");
			Menu::Option("prop_solarpanel_02");
			Menu::Option("prop_solarpanel_03");
			Menu::Option("prop_ventsystem_01");
			Menu::Option("prop_ventsystem_02");
			Menu::Option("prop_ventsystem_03");
			Menu::Option("prop_ventsystem_04");
			Menu::Option("prop_wall_vent_01");
			Menu::Option("prop_wall_vent_02");
			Menu::Option("prop_wall_vent_03");
			Menu::Option("prop_wall_vent_04");
			Menu::Option("prop_wall_vent_05");
			Menu::Option("prop_wall_vent_06");
			Menu::Option("prop_watertower01");
			Menu::Option("prop_watertower02");
			Menu::Option("prop_watertower03");
			Menu::Option("prop_watertower04");
			Menu::Option("prop_bahammenu");
			Menu::Option("prop_barrachneon");
			Menu::Option("prop_bar_coastbarr");
			Menu::Option("prop_bar_coastchamp");
			Menu::Option("prop_bar_coastdusc");
			Menu::Option("prop_bar_coastmount");
			Menu::Option("prop_bar_cooler_01");
			Menu::Option("prop_bar_cooler_03");
			Menu::Option("prop_bar_fridge_01");
			Menu::Option("prop_bar_fridge_02");
			Menu::Option("prop_bar_fridge_03");
			Menu::Option("prop_bar_fridge_04");
			Menu::Option("prop_bar_ice_01");
			Menu::Option("prop_bar_napkindisp");
			Menu::Option("prop_bar_pump_01");
			Menu::Option("prop_bar_pump_04");
			Menu::Option("prop_bar_pump_05");
			Menu::Option("prop_bar_pump_06");
			Menu::Option("prop_bar_pump_07");
			Menu::Option("prop_bar_pump_08");
			Menu::Option("prop_bar_pump_09");
			Menu::Option("prop_bar_pump_10");
			Menu::Option("prop_bar_sink_01");
			Menu::Option("prop_bar_stool_01");
			Menu::Option("prop_beerneon");
			Menu::Option("prop_beer_bison");
			Menu::Option("prop_cherenneon");
			Menu::Option("prop_cockneon");
			Menu::Option("prop_cs_kitchen_cab_l2");
			Menu::Option("prop_cs_kitchen_cab_ld");
			Menu::Option("prop_cs_kitchen_cab_rd");
			Menu::Option("prop_irish_sign_01");
			Menu::Option("prop_irish_sign_02");
			Menu::Option("prop_irish_sign_03");
			Menu::Option("prop_irish_sign_04");
			Menu::Option("prop_irish_sign_05");
			Menu::Option("prop_irish_sign_06");
			Menu::Option("prop_irish_sign_07");
			Menu::Option("prop_irish_sign_08");
			Menu::Option("prop_irish_sign_09");
			Menu::Option("prop_irish_sign_10");
			Menu::Option("prop_irish_sign_11");
			Menu::Option("prop_irish_sign_12");
			Menu::Option("prop_irish_sign_13");
			Menu::Option("prop_loggneon");
			Menu::Option("prop_patriotneon");
			Menu::Option("prop_pitcher_01_cs");
			Menu::Option("prop_ragganeon");
			Menu::Option("prop_shots_glass_cs");
			Menu::Option("prop_stripmenu");
			Menu::Option("prop_bread_rack_01");
			Menu::Option("prop_bread_rack_02");
			Menu::Option("prop_chip_fryer");
			Menu::Option("prop_coffee_mac_02");
			Menu::Option("prop_detergent_01a");
			Menu::Option("prop_detergent_01b");
			Menu::Option("prop_ff_counter_01");
			Menu::Option("prop_ff_counter_02");
			Menu::Option("prop_ff_counter_03");
			Menu::Option("prop_ff_noodle_01");
			Menu::Option("prop_ff_noodle_02");
			Menu::Option("prop_ff_shelves_01");
			Menu::Option("prop_ff_sink_01");
			Menu::Option("prop_ff_sink_02");
			Menu::Option("prop_food_bin_01");
			Menu::Option("prop_food_bin_02");
			Menu::Option("prop_food_bs_bshelf");
			Menu::Option("prop_food_bs_cups01");
			Menu::Option("prop_food_bs_cups03");
			Menu::Option("prop_food_bs_soda_01");
			Menu::Option("prop_food_bs_soda_02");
			Menu::Option("prop_food_bs_tray_01");
			Menu::Option("prop_food_bs_tray_06");
			Menu::Option("prop_food_burg1");
			Menu::Option("prop_food_burg2");
			Menu::Option("prop_food_cb_bshelf");
			Menu::Option("prop_food_cb_burg01");
			Menu::Option("prop_food_cb_cups01");
			Menu::Option("prop_food_cb_donuts");
			Menu::Option("prop_food_cb_nugets");
			Menu::Option("prop_food_cb_soda_01");
			Menu::Option("prop_food_cb_soda_02");
			Menu::Option("prop_food_cb_tray_01");
			Menu::Option("prop_food_cups1");
			Menu::Option("prop_food_napkin_01");
			Menu::Option("prop_food_napkin_02");
			Menu::Option("prop_food_tray_01");
			Menu::Option("prop_griddle_01");
			Menu::Option("prop_griddle_02");
			Menu::Option("prop_handtowels");
			Menu::Option("prop_juice_dispenser");
			Menu::Option("prop_kebab_grill");
			Menu::Option("prop_microwave_1");
			Menu::Option("prop_pizza_oven_01");
			Menu::Option("prop_slush_dispenser");
			Menu::Option("prop_bumper_01");
			Menu::Option("prop_bumper_02");
			Menu::Option("prop_bumper_03");
			Menu::Option("prop_bumper_04");
			Menu::Option("prop_bumper_05");
			Menu::Option("prop_bumper_06");
			Menu::Option("prop_carcreeper");
			Menu::Option("prop_carjack");
			Menu::Option("prop_carjack_l2");
			Menu::Option("prop_car_battery_01");
			Menu::Option("prop_car_bonnet_01");
			Menu::Option("prop_car_bonnet_02");
			Menu::Option("prop_car_door_01");
			Menu::Option("prop_car_door_02");
			Menu::Option("prop_car_door_03");
			Menu::Option("prop_car_door_04");
			Menu::Option("prop_car_engine_01");
			Menu::Option("prop_car_exhaust_01");
			Menu::Option("prop_car_seat");
			Menu::Option("prop_cheetah_covered");
			Menu::Option("prop_compressor_01");
			Menu::Option("prop_compressor_02");
			Menu::Option("prop_compressor_03");
			Menu::Option("prop_entityxf_covered");
			Menu::Option("prop_jb700_covered");
			Menu::Option("prop_spray_jackframe");
			Menu::Option("prop_spray_jackleg");
			Menu::Option("prop_toolchest_01");
			Menu::Option("prop_toolchest_02");
			Menu::Option("prop_toolchest_03");
			Menu::Option("prop_toolchest_04");
			Menu::Option("prop_toolchest_05");
			Menu::Option("prop_wheel_01");
			Menu::Option("prop_wheel_02");
			Menu::Option("prop_wheel_03");
			Menu::Option("prop_wheel_04");
			Menu::Option("prop_wheel_05");
			Menu::Option("prop_wheel_06");
			Menu::Option("prop_wheel_hub_01");
			Menu::Option("prop_wheel_hub_02_lod_02");
			Menu::Option("prop_wheel_rim_01");
			Menu::Option("prop_wheel_rim_02");
			Menu::Option("prop_wheel_rim_03");
			Menu::Option("prop_wheel_rim_04");
			Menu::Option("prop_wheel_rim_05");
			Menu::Option("prop_wheel_tyre");
			Menu::Option("prop_ztype_covered");
			Menu::Option("prop_cabinet_01");
			Menu::Option("prop_cabinet_01b");
			Menu::Option("prop_cabinet_02b");
			Menu::Option("prop_coathook_01");
			Menu::Option("prop_copier_01");
			Menu::Option("prop_fan_01");
			Menu::Option("prop_fax_01");
			Menu::Option("prop_folder_01");
			Menu::Option("prop_folder_02");
			Menu::Option("prop_in_tray_01");
			Menu::Option("prop_office_alarm_01");
			Menu::Option("prop_office_desk_01");
			Menu::Option("prop_off_chair_01");
			Menu::Option("prop_off_chair_03");
			Menu::Option("prop_off_chair_04");
			Menu::Option("prop_off_chair_04b");
			Menu::Option("prop_off_chair_05");
			Menu::Option("prop_off_phone_01");
			Menu::Option("prop_paper_box_01");
			Menu::Option("prop_paper_box_02");
			Menu::Option("prop_paper_box_03");
			Menu::Option("prop_paper_box_04");
			Menu::Option("prop_paper_box_05");
			Menu::Option("prop_printer_01");
			Menu::Option("prop_printer_02");
			Menu::Option("prop_shredder_01");
			Menu::Option("prop_sol_chair");
			Menu::Option("prop_tablesmall_01");
			Menu::Option("prop_waiting_seat_01");
			Menu::Option("prop_wait_bench_01");
			Menu::Option("prop_water_bottle");
			Menu::Option("prop_water_bottle_dark");
			Menu::Option("prop_air_bagloader");
			Menu::Option("prop_air_bagloader2");
			Menu::Option("prop_air_barrier");
			Menu::Option("prop_air_bench_01");
			Menu::Option("prop_air_bench_02");
			Menu::Option("prop_air_bigradar_l1");
			Menu::Option("prop_air_bigradar_l2");
			Menu::Option("prop_air_bigradar_slod");
			Menu::Option("prop_air_blastfence_01");
			Menu::Option("prop_air_blastfence_02");
			Menu::Option("prop_air_bridge01");
			Menu::Option("prop_air_bridge02");
			Menu::Option("prop_air_cargoloader_01");
			Menu::Option("prop_air_cargo_01a");
			Menu::Option("prop_air_cargo_01b");
			Menu::Option("prop_air_cargo_01c");
			Menu::Option("prop_air_cargo_02a");
			Menu::Option("prop_air_cargo_02b");
			Menu::Option("prop_air_cargo_03a");
			Menu::Option("prop_air_cargo_04a");
			Menu::Option("prop_air_cargo_04b");
			Menu::Option("prop_air_cargo_04c");
			Menu::Option("prop_air_chock_01");
			Menu::Option("prop_air_chock_03");
			Menu::Option("prop_air_chock_04");
			Menu::Option("prop_air_fueltrail1");
			Menu::Option("prop_air_fueltrail2");
			Menu::Option("prop_air_gasbogey_01");
			Menu::Option("prop_air_generator_01");
			Menu::Option("prop_air_generator_03");
			Menu::Option("prop_air_lights_01a");
			Menu::Option("prop_air_lights_01b");
			Menu::Option("prop_air_lights_03a");
			Menu::Option("prop_air_luggtrolley");
			Menu::Option("prop_air_mast_01");
			Menu::Option("prop_air_mast_02");
			Menu::Option("prop_air_monhut_01");
			Menu::Option("prop_air_monhut_02");
			Menu::Option("prop_air_monhut_03");
			Menu::Option("prop_air_propeller01");
			Menu::Option("prop_air_radar_01");
			Menu::Option("prop_air_stair_01");
			Menu::Option("prop_air_stair_02");
			Menu::Option("prop_air_stair_03");
			Menu::Option("prop_air_stair_04a");
			Menu::Option("prop_air_stair_04b");
			Menu::Option("prop_air_towbar_01");
			Menu::Option("prop_air_towbar_02");
			Menu::Option("prop_air_towbar_03");
			Menu::Option("prop_air_trailer_4a");
			Menu::Option("prop_air_trailer_4b");
			Menu::Option("prop_air_trailer_4c");
			Menu::Option("prop_air_watertank1");
			Menu::Option("prop_air_watertank2");
			Menu::Option("prop_air_windsock_base");
			Menu::Option("prop_air_woodsteps");
			Menu::Option("prop_luggage_01a");
			Menu::Option("prop_luggage_02a");
			Menu::Option("prop_luggage_03a");
			Menu::Option("prop_luggage_04a");
			Menu::Option("prop_luggage_05a");
			Menu::Option("prop_luggage_06a");
			Menu::Option("prop_luggage_07a");
			Menu::Option("prop_luggage_08a");
			Menu::Option("prop_luggage_09a");
			Menu::Option("prop_mb_cargo_01a");
			Menu::Option("prop_mb_cargo_02a");
			Menu::Option("prop_mb_cargo_03a");
			Menu::Option("prop_mb_cargo_04a");
			Menu::Option("prop_mb_cargo_04b");
			Menu::Option("prop_mb_crate_01a");
			Menu::Option("prop_mb_crate_01b");
			Menu::Option("prop_mb_hesco_06");
			Menu::Option("prop_mb_ordnance_01");
			Menu::Option("prop_mb_ordnance_03");
			Menu::Option("prop_mb_sandblock_01");
			Menu::Option("prop_mb_sandblock_02");
			Menu::Option("prop_mb_sandblock_03");
			Menu::Option("prop_mb_sandblock_04");
			Menu::Option("prop_mb_sandblock_05");
			Menu::Option("prop_boxcar5_handle");
			Menu::Option("prop_byard_bench01");
			Menu::Option("prop_byard_bench02");
			Menu::Option("prop_byard_block_01");
			Menu::Option("prop_byard_boat01");
			Menu::Option("prop_byard_boat02");
			Menu::Option("prop_byard_chains01");
			Menu::Option("prop_byard_dingy");
			Menu::Option("prop_byard_elecbox01");
			Menu::Option("prop_byard_elecbox02");
			Menu::Option("prop_byard_elecbox03");
			Menu::Option("prop_byard_elecbox04");
			Menu::Option("prop_byard_floatpile");
			Menu::Option("prop_byard_float_01");
			Menu::Option("prop_byard_float_01b");
			Menu::Option("prop_byard_float_02");
			Menu::Option("prop_byard_float_02b");
			Menu::Option("prop_byard_hoist");
			Menu::Option("prop_byard_hoist_2");
			Menu::Option("prop_byard_hoses01");
			Menu::Option("prop_byard_hoses02");
			Menu::Option("prop_byard_ladder01");
			Menu::Option("prop_byard_machine01");
			Menu::Option("prop_byard_machine02");
			Menu::Option("prop_byard_machine03");
			Menu::Option("prop_byard_motor_01");
			Menu::Option("prop_byard_motor_02");
			Menu::Option("prop_byard_motor_03");
			Menu::Option("prop_byard_net02");
			Menu::Option("prop_byard_phone");
			Menu::Option("prop_byard_pipes01");
			Menu::Option("prop_byard_pipe_01");
			Menu::Option("prop_byard_planks01");
			Menu::Option("prop_byard_pulley01");
			Menu::Option("prop_byard_rack");
			Menu::Option("prop_byard_ramp");
			Menu::Option("prop_byard_rampold");
			Menu::Option("prop_byard_rowboat1");
			Menu::Option("prop_byard_rowboat2");
			Menu::Option("prop_byard_rowboat3");
			Menu::Option("prop_byard_rowboat4");
			Menu::Option("prop_byard_rowboat5");
			Menu::Option("prop_byard_scfhold01");
			Menu::Option("prop_byard_sleeper01");
			Menu::Option("prop_byard_sleeper02");
			Menu::Option("prop_byard_steps_01");
			Menu::Option("prop_byard_tank_01");
			Menu::Option("prop_byard_trailer01");
			Menu::Option("prop_byard_trailer02");
			Menu::Option("prop_crane_01_truck1");
			Menu::Option("prop_crane_01_truck2");
			Menu::Option("prop_dock_bouy_1");
			Menu::Option("prop_dock_bouy_2");
			Menu::Option("prop_dock_bouy_3");
			Menu::Option("prop_dock_bouy_5");
			Menu::Option("prop_dock_crane_01");
			Menu::Option("prop_dock_crane_02");
			Menu::Option("prop_dock_crane_02_cab");
			Menu::Option("prop_dock_crane_02_hook");
			Menu::Option("prop_dock_crane_02_ld");
			Menu::Option("prop_dock_crane_04");
			Menu::Option("prop_dock_crane_lift");
			Menu::Option("prop_dock_float_1");
			Menu::Option("prop_dock_float_1b");
			Menu::Option("prop_dock_moor_01");
			Menu::Option("prop_dock_moor_04");
			Menu::Option("prop_dock_moor_05");
			Menu::Option("prop_dock_moor_06");
			Menu::Option("prop_dock_moor_07");
			Menu::Option("prop_dock_ropefloat");
			Menu::Option("prop_dock_ropetyre1");
			Menu::Option("prop_dock_ropetyre2");
			Menu::Option("prop_dock_ropetyre3");
			Menu::Option("prop_dock_rtg_01");
			Menu::Option("prop_dock_rtg_ld");
			Menu::Option("prop_dock_shippad");
			Menu::Option("prop_dock_sign_01");
			Menu::Option("prop_dock_woodpole1");
			Menu::Option("prop_dock_woodpole2");
			Menu::Option("prop_dock_woodpole3");
			Menu::Option("prop_dock_woodpole4");
			Menu::Option("prop_dock_woodpole5");
			Menu::Option("prop_ind_barge_01");
			Menu::Option("prop_ind_barge_02");
			Menu::Option("prop_ind_coalcar_01");
			Menu::Option("prop_ind_coalcar_02");
			Menu::Option("prop_ind_coalcar_03");
			Menu::Option("prop_ind_oldcrane");
			Menu::Option("prop_jetski_ramp_01");
			Menu::Option("prop_railsleepers01");
			Menu::Option("prop_railsleepers02");
			Menu::Option("prop_railstack01");
			Menu::Option("prop_railstack02");
			Menu::Option("prop_railstack03");
			Menu::Option("prop_railstack04");
			Menu::Option("prop_railstack05");
			Menu::Option("prop_rail_boxcar");
			Menu::Option("prop_rail_boxcar2");
			Menu::Option("prop_rail_boxcar3");
			Menu::Option("prop_rail_boxcar4");
			Menu::Option("prop_rail_boxcar5");
			Menu::Option("prop_rail_boxcar5_d");
			Menu::Option("prop_rail_buffer_01");
			Menu::Option("prop_rail_buffer_02");
			Menu::Option("prop_rail_crane_01");
			Menu::Option("prop_rail_points01");
			Menu::Option("prop_rail_points02");
			Menu::Option("prop_rail_sigbox01");
			Menu::Option("prop_rail_sigbox02");
			Menu::Option("prop_rail_signals02");
			Menu::Option("prop_rail_tankcar");
			Menu::Option("prop_rail_tankcar2");
			Menu::Option("prop_rail_tankcar3");
			Menu::Option("prop_rail_wellcar");
			Menu::Option("prop_rail_wellcar2");
			Menu::Option("p_dock_rtg_ld_cab");
			Menu::Option("p_dock_rtg_ld_spdr");
			Menu::Option("p_dock_rtg_ld_wheel");
			Menu::Option("prop_fac_machine_02");
			Menu::Option("prop_ind_conveyor_01");
			Menu::Option("prop_ind_conveyor_02");
			Menu::Option("prop_ind_conveyor_04");
			Menu::Option("prop_ind_crusher");
			Menu::Option("prop_ind_deiseltank");
			Menu::Option("prop_ind_mech_01c");
			Menu::Option("prop_ind_mech_02a");
			Menu::Option("prop_ind_mech_02b");
			Menu::Option("prop_ind_mech_03a");
			Menu::Option("prop_ind_mech_04a");
			Menu::Option("prop_jyard_block_01a");
			Menu::Option("prop_oil_derrick_01");
			Menu::Option("prop_oil_guage_01");
			Menu::Option("prop_oil_spool_02");
			Menu::Option("prop_oil_valve_01");
			Menu::Option("prop_oil_valve_02");
			Menu::Option("prop_oil_wellhead_01");
			Menu::Option("prop_oil_wellhead_03");
			Menu::Option("prop_oil_wellhead_04");
			Menu::Option("prop_oil_wellhead_05");
			Menu::Option("prop_oil_wellhead_06");
			Menu::Option("prop_portacabin01");
			Menu::Option("prop_portasteps_01");
			Menu::Option("prop_portasteps_02");
			Menu::Option("prop_pylon_01");
			Menu::Option("prop_pylon_02");
			Menu::Option("prop_pylon_03");
			Menu::Option("prop_pylon_04");
			Menu::Option("prop_sluicegate");
			Menu::Option("prop_sluicegatel");
			Menu::Option("prop_sluicegater");
			Menu::Option("prop_storagetank_01");
			Menu::Option("prop_storagetank_02");
			Menu::Option("prop_storagetank_03");
			Menu::Option("prop_storagetank_03a");
			Menu::Option("prop_storagetank_03b");
			Menu::Option("prop_storagetank_04");
			Menu::Option("prop_storagetank_05");
			Menu::Option("prop_storagetank_06");
			Menu::Option("prop_storagetank_07a");
			Menu::Option("prop_sub_crane_hook");
			Menu::Option("prop_sub_frame_01a");
			Menu::Option("prop_sub_frame_01b");
			Menu::Option("prop_sub_frame_01c");
			Menu::Option("prop_sub_frame_02a");
			Menu::Option("prop_sub_frame_03a");
			Menu::Option("prop_sub_frame_04a");
			Menu::Option("prop_sub_frame_04b");
			Menu::Option("prop_sub_gantry");
			Menu::Option("prop_sub_trans_01a");
			Menu::Option("prop_sub_trans_02a");
			Menu::Option("prop_sub_trans_03a");
			Menu::Option("prop_sub_trans_04a");
			Menu::Option("prop_sub_trans_05b");
			Menu::Option("prop_sub_trans_06b");
			Menu::Option("prop_windmill_01_l1");
			Menu::Option("prop_windmill_01_slod");
			Menu::Option("prop_windmill_01_slod2");
			Menu::Option("prop_acc_guitar_01");
			Menu::Option("prop_acc_guitar_01_d1");
			Menu::Option("prop_alien_egg_01");
			Menu::Option("prop_amb_handbag_01");
			Menu::Option("prop_amb_phone");
			Menu::Option("prop_asteroid_01");
			Menu::Option("prop_attache_case_01");
			Menu::Option("prop_bank_shutter");
			Menu::Option("prop_bank_vaultdoor");
			Menu::Option("prop_barrel_float_1");
			Menu::Option("prop_barrel_float_2");
			Menu::Option("prop_beggers_sign_01");
			Menu::Option("prop_beggers_sign_02");
			Menu::Option("prop_beggers_sign_03");
			Menu::Option("prop_beggers_sign_04");
			Menu::Option("prop_bh1_16_display");
			Menu::Option("prop_big_bag_01");
			Menu::Option("prop_big_clock_01");
			Menu::Option("prop_biotech_store");
			Menu::Option("prop_bomb_01");
			Menu::Option("prop_bonesaw");
			Menu::Option("prop_bskball_01");
			Menu::Option("prop_b_board_blank");
			Menu::Option("prop_cable_hook_01");
			Menu::Option("prop_camera_strap");
			Menu::Option("prop_cash_dep_bag_01");
			Menu::Option("prop_cash_trolly");
			Menu::Option("prop_chem_grill");
			Menu::Option("prop_chem_grill_bit");
			Menu::Option("prop_chem_vial_02");
			Menu::Option("prop_chem_vial_02b");
			Menu::Option("prop_choc_ego");
			Menu::Option("prop_choc_meto");
			Menu::Option("prop_choc_pq");
			Menu::Option("prop_clapper_brd_01");
			Menu::Option("prop_cone_float_1");
			Menu::Option("prop_container_hole");
			Menu::Option("prop_cont_chiller_01");
			Menu::Option("prop_cork_board");
			Menu::Option("prop_cranial_saw");
			Menu::Option("prop_crate_float_1");
			Menu::Option("prop_cs_20m_rope");
			Menu::Option("prop_cs_30m_rope");
			Menu::Option("prop_cs_aircon_01");
			Menu::Option("prop_cs_aircon_fan");
			Menu::Option("prop_cs_ashtray");
			Menu::Option("prop_cs_bin_01");
			Menu::Option("prop_cs_bin_01_lid");
			Menu::Option("prop_cs_bin_02");
			Menu::Option("prop_cs_bin_03");
			Menu::Option("prop_cs_box_clothes");
			Menu::Option("prop_cs_cardbox_01");
			Menu::Option("prop_cs_dumpster_01a");
			Menu::Option("prop_cs_dumpster_lidl");
			Menu::Option("prop_cs_dumpster_lidr");
			Menu::Option("prop_cs_fertilizer");
			Menu::Option("prop_cs_folding_chair_01");
			Menu::Option("prop_cs_fridge");
			Menu::Option("prop_cs_fridge_door");
			Menu::Option("prop_cs_heist_bag_01");
			Menu::Option("prop_cs_heist_bag_02");
			Menu::Option("prop_cs_heist_bag_strap_01");
			Menu::Option("prop_cs_h_bag_strap_01");
			Menu::Option("prop_cs_ice_locker");
			Menu::Option("prop_cs_ice_locker_door_l");
			Menu::Option("prop_cs_ice_locker_door_r");
			Menu::Option("prop_cs_keys_01");
			Menu::Option("prop_cs_leaf");
			Menu::Option("prop_cs_office_chair");
			Menu::Option("prop_cs_package_01");
			Menu::Option("prop_cs_panel_01");
			Menu::Option("prop_cs_panties");
			Menu::Option("prop_cs_panties_02");
			Menu::Option("prop_cs_panties_03");
			Menu::Option("prop_cs_planning_photo");
			Menu::Option("prop_cs_polaroid");
			Menu::Option("prop_cs_remote_01");
			Menu::Option("prop_cs_rope_tie_01");
			Menu::Option("prop_cs_rub_binbag_01");
			Menu::Option("prop_cs_scissors");
			Menu::Option("prop_cs_shopping_bag");
			Menu::Option("prop_cs_spray_can");
			Menu::Option("prop_cs_tablet");
			Menu::Option("prop_cs_tablet_02");
			Menu::Option("prop_cs_vial_01");
			Menu::Option("prop_cs_walking_stick");
			Menu::Option("prop_cub_door_lifeblurb");
			Menu::Option("prop_cub_lifeblurb");
			Menu::Option("prop_cuff_keys_01");
			Menu::Option("prop_defilied_ragdoll_01");
			Menu::Option("prop_drop_armscrate_01");
			Menu::Option("prop_drop_armscrate_01b");
			Menu::Option("prop_dummy_01");
			Menu::Option("prop_dummy_light");
			Menu::Option("prop_dummy_plane");
			Menu::Option("prop_egg_clock_01");
			Menu::Option("prop_ejector_seat_01");
			Menu::Option("prop_el_guitar_01");
			Menu::Option("prop_el_guitar_02");
			Menu::Option("prop_el_guitar_03");
			Menu::Option("prop_fbibombbin");
			Menu::Option("prop_fbibombcupbrd");
			Menu::Option("prop_fbibombfile");
			Menu::Option("prop_fbibombplant");
			Menu::Option("prop_feed_sack_01");
			Menu::Option("prop_feed_sack_02");
			Menu::Option("prop_fib_broken_window");
			Menu::Option("prop_flash_unit");
			Menu::Option("prop_flatbed_strap_b");
			Menu::Option("prop_floor_duster_01");
			Menu::Option("prop_folded_polo_shirt");
			Menu::Option("prop_foundation_sponge");
			Menu::Option("prop_fruit_basket");
			Menu::Option("prop_f_duster_02");
			Menu::Option("prop_gascyl_ramp_01");
			Menu::Option("prop_gascyl_ramp_door_01");
			Menu::Option("prop_gas_grenade");
			Menu::Option("prop_gas_mask_hang_01");
			Menu::Option("prop_gold_bar");
			Menu::Option("prop_gold_trolly");
			Menu::Option("prop_gold_trolly_full");
			Menu::Option("prop_grapes_01");
			Menu::Option("prop_grapes_02");
			Menu::Option("prop_hacky_sack_01");
			Menu::Option("prop_hd_seats_01");
			Menu::Option("prop_hole_plug_01");
			Menu::Option("prop_hotel_clock_01");
			Menu::Option("prop_hotel_trolley");
			Menu::Option("prop_huge_display_01");
			Menu::Option("prop_huge_display_02");
			Menu::Option("prop_idol_01_error");
			Menu::Option("prop_idol_case_01");
			Menu::Option("prop_ing_camera_01");
			Menu::Option("prop_int_gate01");
			Menu::Option("prop_jewel_02a");
			Menu::Option("prop_jewel_02b");
			Menu::Option("prop_jewel_02c");
			Menu::Option("prop_jewel_03a");
			Menu::Option("prop_jewel_03b");
			Menu::Option("prop_jewel_04a");
			Menu::Option("prop_jewel_04b");
			Menu::Option("prop_jewel_pickup_new_01");
			Menu::Option("prop_j_disptray_01");
			Menu::Option("prop_j_disptray_01b");
			Menu::Option("prop_j_disptray_01_dam");
			Menu::Option("prop_j_disptray_02");
			Menu::Option("prop_j_disptray_02_dam");
			Menu::Option("prop_j_disptray_03");
			Menu::Option("prop_j_disptray_03_dam");
			Menu::Option("prop_j_disptray_04");
			Menu::Option("prop_j_disptray_04b");
			Menu::Option("prop_j_disptray_05");
			Menu::Option("prop_j_disptray_05b");
			Menu::Option("prop_j_heist_pic_01");
			Menu::Option("prop_j_heist_pic_02");
			Menu::Option("prop_j_heist_pic_03");
			Menu::Option("prop_j_heist_pic_04");
			Menu::Option("prop_j_neck_disp_01");
			Menu::Option("prop_j_neck_disp_02");
			Menu::Option("prop_j_neck_disp_03");
			Menu::Option("prop_large_gold");
			Menu::Option("prop_large_gold_alt_a");
			Menu::Option("prop_large_gold_alt_b");
			Menu::Option("prop_large_gold_alt_c");
			Menu::Option("prop_large_gold_empty");
			Menu::Option("prop_ld_alarm_01");
			Menu::Option("prop_ld_alarm_01_dam");
			Menu::Option("prop_ld_alarm_alert");
			Menu::Option("prop_ld_armour");
			Menu::Option("prop_ld_binbag_01");
			Menu::Option("prop_ld_bomb");
			Menu::Option("prop_ld_cable");
			Menu::Option("prop_ld_cable_tie_01");
			Menu::Option("prop_ld_case_01");
			Menu::Option("prop_ld_case_01_lod");
			Menu::Option("prop_ld_container");
			Menu::Option("prop_ld_contain_dl");
			Menu::Option("prop_ld_contain_dl2");
			Menu::Option("prop_ld_contain_dr");
			Menu::Option("prop_ld_contain_dr2");
			Menu::Option("prop_ld_crate_01");
			Menu::Option("prop_ld_crate_lid_01");
			Menu::Option("prop_ld_fan_01");
			Menu::Option("prop_ld_fan_01_old");
			Menu::Option("prop_ld_greenscreen_01");
			Menu::Option("prop_ld_handbag");
			Menu::Option("prop_ld_haybail");
			Menu::Option("prop_ld_health_pack");
			Menu::Option("prop_ld_hook");
			Menu::Option("prop_ld_int_safe_01");
			Menu::Option("prop_ld_jerrycan_01");
			Menu::Option("prop_ld_keypad_01");
			Menu::Option("prop_ld_keypad_01b");
			Menu::Option("prop_ld_keypad_01b_lod");
			Menu::Option("prop_ld_lap_top");
			Menu::Option("prop_ld_monitor_01");
			Menu::Option("prop_ld_pipe_single_01");
			Menu::Option("prop_ld_planning_pin_01");
			Menu::Option("prop_ld_planning_pin_02");
			Menu::Option("prop_ld_planning_pin_03");
			Menu::Option("prop_ld_purse_01");
			Menu::Option("prop_ld_purse_01_lod");
			Menu::Option("prop_ld_rope_t");
			Menu::Option("prop_ld_rub_binbag_01");
			Menu::Option("prop_ld_suitcase_01");
			Menu::Option("prop_ld_suitcase_02");
			Menu::Option("prop_ld_toilet_01");
			Menu::Option("prop_ld_vault_door");
			Menu::Option("prop_ld_wallet_01");
			Menu::Option("prop_ld_w_me_machette");
			Menu::Option("prop_lectern_01");
			Menu::Option("prop_lev_crate_01");
			Menu::Option("prop_lifeblurb_01");
			Menu::Option("prop_lifeblurb_01b");
			Menu::Option("prop_lifeblurb_02");
			Menu::Option("prop_lifeblurb_02b");
			Menu::Option("prop_mast_01");
			Menu::Option("prop_medal_01");
			Menu::Option("prop_med_bag_01");
			Menu::Option("prop_med_bag_01b");
			Menu::Option("prop_michael_backpack");
			Menu::Option("prop_mr_rasberryclean");
			Menu::Option("prop_mr_raspberry_01");
			Menu::Option("prop_muster_wboard_01");
			Menu::Option("prop_muster_wboard_02");
			Menu::Option("prop_necklace_board");
			Menu::Option("prop_new_drug_pack_01");
			Menu::Option("prop_night_safe_01");
			Menu::Option("prop_novel_01");
			Menu::Option("prop_npc_phone");
			Menu::Option("prop_npc_phone_02");
			Menu::Option("prop_out_door_speaker");
			Menu::Option("prop_overalls_01");
			Menu::Option("prop_paper_bag_01");
			Menu::Option("prop_paper_bag_small");
			Menu::Option("prop_paper_ball");
			Menu::Option("prop_pap_camera_01");
			Menu::Option("prop_parachute");
			Menu::Option("prop_parapack_01");
			Menu::Option("prop_paynspray_door_l");
			Menu::Option("prop_paynspray_door_r");
			Menu::Option("prop_ped_pic_01");
			Menu::Option("prop_ped_pic_01_sm");
			Menu::Option("prop_ped_pic_02");
			Menu::Option("prop_ped_pic_02_sm");
			Menu::Option("prop_ped_pic_03");
			Menu::Option("prop_ped_pic_03_sm");
			Menu::Option("prop_ped_pic_04");
			Menu::Option("prop_ped_pic_04_sm");
			Menu::Option("prop_ped_pic_05");
			Menu::Option("prop_ped_pic_05_sm");
			Menu::Option("prop_ped_pic_06");
			Menu::Option("prop_ped_pic_06_sm");
			Menu::Option("prop_ped_pic_07");
			Menu::Option("prop_ped_pic_07_sm");
			Menu::Option("prop_ped_pic_08");
			Menu::Option("prop_ped_pic_08_sm");
			Menu::Option("prop_phone_ing");
			Menu::Option("prop_phone_ing_02");
			Menu::Option("prop_phone_ing_03");
			Menu::Option("prop_phone_overlay_01");
			Menu::Option("prop_phone_overlay_02");
			Menu::Option("prop_phone_overlay_anim");
			Menu::Option("prop_phone_proto");
			Menu::Option("prop_phone_proto_back");
			Menu::Option("prop_phone_proto_battery");
			Menu::Option("prop_player_phone_01");
			Menu::Option("prop_player_phone_02");
			Menu::Option("prop_podium_mic");
			Menu::Option("prop_police_phone");
			Menu::Option("prop_poly_bag_01");
			Menu::Option("prop_poly_bag_money");
			Menu::Option("prop_pool_ball_01");
			Menu::Option("prop_postit_drive");
			Menu::Option("prop_postit_gun");
			Menu::Option("prop_postit_it");
			Menu::Option("prop_postit_lock");
			Menu::Option("prop_prologue_phone");
			Menu::Option("prop_protest_sign_01");
			Menu::Option("prop_protest_table_01");
			Menu::Option("prop_prototype_minibomb");
			Menu::Option("prop_rag_01");
			Menu::Option("prop_rf_conc_pillar");
			Menu::Option("prop_riding_crop_01");
			Menu::Option("prop_rock_chair_01");
			Menu::Option("prop_rolled_yoga_mat");
			Menu::Option("prop_rope_hook_01");
			Menu::Option("prop_scalpel");
			Menu::Option("prop_scrap_win_01");
			Menu::Option("prop_security_case_01");
			Menu::Option("prop_security_case_02");
			Menu::Option("prop_shamal_crash");
			Menu::Option("prop_shopping_bags01");
			Menu::Option("prop_shopping_bags02");
			Menu::Option("prop_showroom_glass_1b");
			Menu::Option("prop_side_lights");
			Menu::Option("prop_single_rose");
			Menu::Option("prop_sky_cover_01");
			Menu::Option("prop_sm_19_clock");
			Menu::Option("prop_sm_locker_door");
			Menu::Option("prop_spot_01");
			Menu::Option("prop_spot_clamp");
			Menu::Option("prop_spot_clamp_02");
			Menu::Option("prop_stat_pack_01");
			Menu::Option("prop_strip_pole_01");
			Menu::Option("prop_sub_chunk_01");
			Menu::Option("prop_tail_gate_col");
			Menu::Option("prop_taxi_meter_1");
			Menu::Option("prop_taxi_meter_2");
			Menu::Option("prop_telescope_01");
			Menu::Option("prop_tennis_bag_01");
			Menu::Option("prop_test_elevator");
			Menu::Option("prop_test_elevator_dl");
			Menu::Option("prop_test_elevator_dr");
			Menu::Option("prop_tick");
			Menu::Option("prop_tick_02");
			Menu::Option("prop_toiletfoot_static");
			Menu::Option("prop_torture_ch_01");
			Menu::Option("prop_tri_table_01");
			Menu::Option("prop_tyre_spike_01");
			Menu::Option("prop_t_coffe_table");
			Menu::Option("prop_t_sofa");
			Menu::Option("prop_t_sofa_02");
			Menu::Option("prop_t_telescope_01b");
			Menu::Option("prop_vb_34_tencrt_lighting");
			Menu::Option("prop_vehicle_hook");
			Menu::Option("prop_v_bmike_01");
			Menu::Option("prop_v_cam_01");
			Menu::Option("prop_v_hook_s");
			Menu::Option("prop_v_m_phone_01");
			Menu::Option("prop_v_parachute");
			Menu::Option("prop_water_ramp_01");
			Menu::Option("prop_water_ramp_02");
			Menu::Option("prop_water_ramp_03");
			Menu::Option("prop_wheelchair_01");
			Menu::Option("prop_windowbox_a");
			Menu::Option("prop_windowbox_b");
			Menu::Option("prop_windowbox_broken");
			Menu::Option("prop_windowbox_small");
			Menu::Option("prop_win_trailer_ld");
			Menu::Option("prop_w_board_blank");
			Menu::Option("prop_w_board_blank_2");
			Menu::Option("prop_yoga_mat_01");
			Menu::Option("prop_yoga_mat_02");
			Menu::Option("prop_yoga_mat_03");
			Menu::Option("p_amb_bag_bottle_01");
			Menu::Option("p_amb_brolly_01");
			Menu::Option("p_amb_brolly_01_s");
			Menu::Option("p_amb_clipboard_01");
			Menu::Option("p_amb_coffeecup_01");
			Menu::Option("p_amb_joint_01");
			Menu::Option("p_amb_lap_top_01");
			Menu::Option("p_amb_lap_top_02");
			Menu::Option("p_amb_phone_01");
			Menu::Option("p_car_keys_01");
			Menu::Option("p_counter_01_glass");
			Menu::Option("p_counter_01_glass_plug");
			Menu::Option("p_counter_02_glass");
			Menu::Option("p_counter_03_glass");
			Menu::Option("p_counter_04_glass");
			Menu::Option("p_cs_cam_phone");
			Menu::Option("p_cs_comb_01");
			Menu::Option("p_cs_laptop_02");
			Menu::Option("p_cs_laptop_02_w");
			Menu::Option("p_cs_locker_01");
			Menu::Option("p_cs_locker_02");
			Menu::Option("p_cs_locker_door_01");
			Menu::Option("p_cs_locker_door_01b");
			Menu::Option("p_cs_locker_door_02");
			Menu::Option("p_cs_paper_disp_02");
			Menu::Option("p_cs_paper_disp_1");
			Menu::Option("p_disp_02_door_01");
			Menu::Option("p_ferris_car_01");
			Menu::Option("p_f_duster_handle_01");
			Menu::Option("p_f_duster_head_01");
			Menu::Option("p_ing_skiprope_01");
			Menu::Option("p_int_jewel_mirror");
			Menu::Option("p_int_jewel_plant_01");
			Menu::Option("p_int_jewel_plant_02");
			Menu::Option("p_jewel_necklace_02");
			Menu::Option("p_ld_am_ball_01");
			Menu::Option("p_ld_coffee_vend_01");
			Menu::Option("p_ld_conc_cyl_01");
			Menu::Option("p_ld_frisbee_01");
			Menu::Option("p_ld_heist_bag_01");
			Menu::Option("p_ld_sax");
			Menu::Option("p_ld_soc_ball_01");
			Menu::Option("p_new_j_counter_01");
			Menu::Option("p_new_j_counter_02");
			Menu::Option("p_new_j_counter_03");
			Menu::Option("p_num_plate_01");
			Menu::Option("p_num_plate_02");
			Menu::Option("p_num_plate_03");
			Menu::Option("p_num_plate_04");
			Menu::Option("p_oil_slick_01");
			Menu::Option("p_pharm_unit_01");
			Menu::Option("p_pharm_unit_02");
			Menu::Option("p_planning_board_01");
			Menu::Option("p_planning_board_02");
			Menu::Option("p_planning_board_03");
			Menu::Option("p_planning_board_04");
			Menu::Option("p_secret_weapon_02");
			Menu::Option("p_stinger_02");
			Menu::Option("p_stinger_03");
			Menu::Option("p_stinger_04");
			Menu::Option("p_stinger_piece_01");
			Menu::Option("p_stinger_piece_02");
			Menu::Option("p_watch_01");
			Menu::Option("p_watch_02");
			Menu::Option("p_watch_03");
			Menu::Option("p_watch_04");
			Menu::Option("p_watch_05");
			Menu::Option("p_watch_06");
			Menu::Option("prop_bomb_01_s");
			Menu::Option("prop_cs_bin_01_skinned");
			Menu::Option("prop_cs_bucket_s");
			Menu::Option("prop_cs_bucket_s_lod");
			Menu::Option("prop_cs_mop_s");
			Menu::Option("prop_f_duster_01_s");
			Menu::Option("prop_ld_case_01_s");
			Menu::Option("prop_ld_handbag_s");
			Menu::Option("prop_ld_wallet_01_s");
			Menu::Option("prop_news_disp_02a_s");
			Menu::Option("prop_off_chair_04_s");
			Menu::Option("prop_p_jack_03_col");
			Menu::Option("prop_rub_binbag_sd_01");
			Menu::Option("prop_rub_binbag_sd_02");
			Menu::Option("prop_v_m_phone_o1s");
			Menu::Option("p_abat_roller_1");
			Menu::Option("p_abat_roller_1_col");
			Menu::Option("p_amb_drain_water_double");
			Menu::Option("p_amb_drain_water_longstrip");
			Menu::Option("p_amb_drain_water_single");
			Menu::Option("p_attache_case_01_s");
			Menu::Option("p_balaclavamichael_s");
			Menu::Option("p_barierbase_test_s");
			Menu::Option("p_barier_test_s");
			Menu::Option("p_beefsplitter_s");
			Menu::Option("p_cargo_chute_s");
			Menu::Option("p_cigar_pack_02_s");
			Menu::Option("p_cs_locker_01_s");
			Menu::Option("p_cs_script_bottle_s");
			Menu::Option("p_dock_crane_cable_s");
			Menu::Option("p_dock_crane_cabl_s");
			Menu::Option("p_dock_crane_sld_s");
			Menu::Option("p_dumpster_t");
			Menu::Option("p_fag_packet_01_s");
			Menu::Option("p_ferris_wheel_amo_l");
			Menu::Option("p_ferris_wheel_amo_l2");
			Menu::Option("p_ferris_wheel_amo_p");
			Menu::Option("p_gar_door_01_s");
			Menu::Option("p_gar_door_02_s");
			Menu::Option("p_gar_door_03_s");
			Menu::Option("p_gdoor1colobject_s");
			Menu::Option("p_gdoor1_s");
			Menu::Option("p_ing_skiprope_01_s");
			Menu::Option("p_jewel_necklace01_s");
			Menu::Option("p_jewel_necklace02_s");
			Menu::Option("p_jewel_pickup33_s");
			Menu::Option("p_ld_coffee_vend_s");
			Menu::Option("p_ld_heist_bag_s");
			Menu::Option("p_ld_stinger_s");
			Menu::Option("p_litter_picker_s");
			Menu::Option("p_mast_01_s");
			Menu::Option("p_notepad_01_s");
			Menu::Option("p_oil_pjack_01_amo");
			Menu::Option("p_oil_pjack_01_frg_s");
			Menu::Option("p_oil_pjack_02_amo");
			Menu::Option("p_oil_pjack_02_frg_s");
			Menu::Option("p_oil_pjack_03_amo");
			Menu::Option("p_oil_pjack_03_frg_s");
			Menu::Option("p_pallet_02a_s");
			Menu::Option("p_panties_s");
			Menu::Option("p_parachute1_mp_s");
			Menu::Option("p_parachute1_s");
			Menu::Option("p_parachute1_sp_s");
			Menu::Option("p_parachute_fallen_s");
			Menu::Option("p_parachute_s");
			Menu::Option("p_parachute_s_shop");
			Menu::Option("p_para_broken1_s");
			Menu::Option("p_patio_lounger1_s");
			Menu::Option("p_phonebox_02_s");
			Menu::Option("p_pliers_01_s");
			Menu::Option("p_rcss_folded");
			Menu::Option("p_rcss_s");
			Menu::Option("p_ringbinder_01_s");
			Menu::Option("p_sec_gate_01_s");
			Menu::Option("p_sec_gate_01_s_col");
			Menu::Option("p_shoalfish_s");
			Menu::Option("p_skiprope_r_s");
			Menu::Option("p_sofa_s");
			Menu::Option("p_sub_crane_s");
			Menu::Option("p_sunglass_m_s");
			Menu::Option("p_tennis_bag_01_s");
			Menu::Option("p_tram_crash_s");
			Menu::Option("p_watch_01_s");
			Menu::Option("p_watch_02_s");
			Menu::Option("p_watch_03_s");
			Menu::Option("p_waterboardc_s");
			Menu::Option("p_yacht_chair_01_s");
			Menu::Option("p_yacht_sofa_01_s");
			Menu::Option("p_yoga_mat_01_s");
			Menu::Option("p_yoga_mat_02_s");
			Menu::Option("p_yoga_mat_03_s");
			Menu::Option("pop_v_bank_door_l");
			Menu::Option("pop_v_bank_door_r");
			Menu::Option("prop_abat_roller_static");
			Menu::Option("prop_abat_slide");
			Menu::Option("prop_artgallery_02_dl");
			Menu::Option("prop_artgallery_02_dr");
			Menu::Option("prop_artgallery_dl");
			Menu::Option("prop_artgallery_dr");
			Menu::Option("prop_barn_door_l");
			Menu::Option("prop_barn_door_r");
			Menu::Option("prop_bh1_03_gate_l");
			Menu::Option("prop_bh1_03_gate_r");
			Menu::Option("prop_bh1_08_mp_gar");
			Menu::Option("prop_bh1_09_mp_gar");
			Menu::Option("prop_bh1_09_mp_l");
			Menu::Option("prop_bh1_09_mp_r");
			Menu::Option("prop_bh1_44_door_01l");
			Menu::Option("prop_bh1_44_door_01r");
			Menu::Option("prop_bh1_48_backdoor_l");
			Menu::Option("prop_bh1_48_backdoor_r");
			Menu::Option("prop_bh1_48_gate_1");
			Menu::Option("prop_bhhotel_door_l");
			Menu::Option("prop_bhhotel_door_r");
			Menu::Option("prop_biolab_g_door");
			Menu::Option("prop_broken_cell_gate_01");
			Menu::Option("prop_bs_map_door_01");
			Menu::Option("prop_burto_gate_01");
			Menu::Option("prop_casino_door_01l");
			Menu::Option("prop_casino_door_01r");
			Menu::Option("prop_ch1_07_door_01l");
			Menu::Option("prop_ch1_07_door_01r");
			Menu::Option("prop_ch1_07_door_02l");
			Menu::Option("prop_ch1_07_door_02r");
			Menu::Option("prop_ch2_05d_g_door");
			Menu::Option("prop_ch2_07b_20_g_door");
			Menu::Option("prop_ch2_09b_door");
			Menu::Option("prop_ch2_09c_garage_door");
			Menu::Option("prop_ch3_01_trlrdoor_l");
			Menu::Option("prop_ch3_01_trlrdoor_r");
			Menu::Option("prop_ch3_04_door_01l");
			Menu::Option("prop_ch3_04_door_01r");
			Menu::Option("prop_ch3_04_door_02");
			Menu::Option("prop_ch_025c_g_door_01");
			Menu::Option("prop_com_gar_door_01");
			Menu::Option("prop_com_ls_door_01");
			Menu::Option("prop_control_rm_door_01");
			Menu::Option("prop_cs1_14b_traind");
			Menu::Option("prop_cs1_14b_traind_dam");
			Menu::Option("prop_cs4_05_tdoor");
			Menu::Option("prop_cs4_10_tr_gd_01");
			Menu::Option("prop_cs4_11_door");
			Menu::Option("prop_cs6_03_door_l");
			Menu::Option("prop_cs6_03_door_r");
			Menu::Option("prop_cs_freightdoor_l1");
			Menu::Option("prop_cs_freightdoor_r1");
			Menu::Option("prop_cs_gravyard_gate_l");
			Menu::Option("prop_cs_gravyard_gate_r");
			Menu::Option("prop_cs_sc1_11_gate");
			Menu::Option("prop_cs_sm_27_gate");
			Menu::Option("prop_damdoor_01");
			Menu::Option("prop_door_01");
			Menu::Option("prop_door_balcony_frame");
			Menu::Option("prop_door_balcony_left");
			Menu::Option("prop_door_balcony_right");
			Menu::Option("prop_dt1_20_mp_door_l");
			Menu::Option("prop_dt1_20_mp_door_r");
			Menu::Option("prop_dt1_20_mp_gar");
			Menu::Option("prop_d_balcony_l_light");
			Menu::Option("prop_d_balcony_r_light");
			Menu::Option("prop_epsilon_door_l");
			Menu::Option("prop_epsilon_door_r");
			Menu::Option("prop_faceoffice_door_l");
			Menu::Option("prop_faceoffice_door_r");
			Menu::Option("prop_gar_door_01");
			Menu::Option("prop_gar_door_02");
			Menu::Option("prop_gar_door_03");
			Menu::Option("prop_gar_door_03_ld");
			Menu::Option("prop_gar_door_04");
			Menu::Option("prop_gar_door_05");
			Menu::Option("prop_gar_door_05_l");
			Menu::Option("prop_gar_door_05_r");
			Menu::Option("prop_gar_door_a_01");
			Menu::Option("prop_gar_door_plug");
			Menu::Option("prop_gd_ch2_08");
			Menu::Option("prop_grumandoor_l");
			Menu::Option("prop_grumandoor_r");
			Menu::Option("prop_hanger_door_1");
			Menu::Option("prop_hospitaldoors_start");
			Menu::Option("prop_hospital_door_l");
			Menu::Option("prop_hospital_door_r");
			Menu::Option("prop_hw1_03_gardoor_01");
			Menu::Option("prop_hw1_04_door_l1");
			Menu::Option("prop_hw1_04_door_r1");
			Menu::Option("prop_hw1_23_door");
			Menu::Option("prop_id2_11_gdoor");
			Menu::Option("prop_id_21_gardoor_01");
			Menu::Option("prop_id_21_gardoor_02");
			Menu::Option("prop_indus_meet_door_l");
			Menu::Option("prop_indus_meet_door_r");
			Menu::Option("prop_kt1_06_door_l");
			Menu::Option("prop_kt1_06_door_r");
			Menu::Option("prop_kt1_10_mpdoor_l");
			Menu::Option("prop_kt1_10_mpdoor_r");
			Menu::Option("prop_ld_garaged_01");
			Menu::Option("prop_ld_jail_door");
			Menu::Option("prop_magenta_door");
			Menu::Option("prop_map_door_01");
			Menu::Option("prop_michael_door");
			Menu::Option("prop_motel_door_09");
			Menu::Option("prop_police_door_l");
			Menu::Option("prop_police_door_l_dam");
			Menu::Option("prop_police_door_r");
			Menu::Option("prop_police_door_r_dam");
			Menu::Option("prop_police_door_surround");
			Menu::Option("prop_pris_door_01_l");
			Menu::Option("prop_pris_door_01_r");
			Menu::Option("prop_pris_door_02");
			Menu::Option("prop_pris_door_03");
			Menu::Option("prop_ql_revolving_door");
			Menu::Option("prop_ret_door");
			Menu::Option("prop_ret_door_02");
			Menu::Option("prop_ret_door_03");
			Menu::Option("prop_ret_door_04");
			Menu::Option("prop_ron_door_01");
			Menu::Option("prop_sc1_06_gate_l");
			Menu::Option("prop_sc1_06_gate_r");
			Menu::Option("prop_sc1_12_door");
			Menu::Option("prop_sc1_21_g_door_01");
			Menu::Option("prop_section_garage_01");
			Menu::Option("prop_sec_gate_01b");
			Menu::Option("prop_sec_gate_01c");
			Menu::Option("prop_sec_gate_01d");
			Menu::Option("prop_showroom_door_l");
			Menu::Option("prop_showroom_door_r");
			Menu::Option("prop_sm1_11_doorl");
			Menu::Option("prop_sm1_11_doorr");
			Menu::Option("prop_sm1_11_garaged");
			Menu::Option("prop_sm_10_mp_door");
			Menu::Option("prop_sm_14_mp_gar");
			Menu::Option("prop_sm_27_door");
			Menu::Option("prop_sm_27_gate");
			Menu::Option("prop_sm_27_gate_02");
			Menu::Option("prop_sm_27_gate_03");
			Menu::Option("prop_sm_27_gate_04");
			Menu::Option("prop_ss1_05_mp_door");
			Menu::Option("prop_ss1_08_mp_door_l");
			Menu::Option("prop_ss1_08_mp_door_r");
			Menu::Option("prop_ss1_10_door_l");
			Menu::Option("prop_ss1_10_door_r");
			Menu::Option("prop_ss1_14_garage_door");
			Menu::Option("prop_ss1_mpint_door_l");
			Menu::Option("prop_ss1_mpint_door_r");
			Menu::Option("prop_ss1_mpint_garage");
			Menu::Option("prop_ss1_mpint_garage_cl");
			Menu::Option("prop_strip_door_01");
			Menu::Option("prop_vault_shutter");
			Menu::Option("prop_v_door_44");
			Menu::Option("prop_wardrobe_door_01");
			Menu::Option("prop_win_plug_01");
			Menu::Option("prop_win_plug_01_dam");
			Menu::Option("p_cut_door_01");
			Menu::Option("p_cut_door_02");
			Menu::Option("p_cut_door_03");
			Menu::Option("p_jewel_door_l");
			Menu::Option("p_jewel_door_r1");
			Menu::Option("prop_a4_pile_01");
			Menu::Option("prop_a4_sheet_01");
			Menu::Option("prop_a4_sheet_02");
			Menu::Option("prop_a4_sheet_03");
			Menu::Option("prop_a4_sheet_04");
			Menu::Option("prop_a4_sheet_05");
			Menu::Option("prop_aiprort_sign_01");
			Menu::Option("prop_aiprort_sign_02");
			Menu::Option("prop_amanda_note_01");
			Menu::Option("prop_amanda_note_01b");
			Menu::Option("prop_amb_40oz_02");
			Menu::Option("prop_amb_40oz_03");
			Menu::Option("prop_amb_beer_bottle");
			Menu::Option("prop_amb_ciggy_01");
			Menu::Option("prop_amb_donut");
			Menu::Option("prop_anim_cash_note");
			Menu::Option("prop_anim_cash_note_b");
			Menu::Option("prop_anim_cash_pile_01");
			Menu::Option("prop_anim_cash_pile_02");
			Menu::Option("prop_arc_blueprints_01");
			Menu::Option("prop_armour_pickup");
			Menu::Option("prop_artifact_01");
			Menu::Option("prop_ashtray_01");
			Menu::Option("prop_aviators_01");
			Menu::Option("prop_a_trailer_door_01");
			Menu::Option("prop_ballistic_shield");
			Menu::Option("prop_ballistic_shield_lod1");
			Menu::Option("prop_barry_table_detail");
			Menu::Option("prop_basejump_target_01");
			Menu::Option("prop_battery_01");
			Menu::Option("prop_battery_02");
			Menu::Option("prop_beer_box_01");
			Menu::Option("prop_beta_tape");
			Menu::Option("prop_big_shit_01");
			Menu::Option("prop_big_shit_02");
			Menu::Option("prop_binoc_01");
			Menu::Option("prop_bison_winch");
			Menu::Option("prop_blackjack_01");
			Menu::Option("prop_blox_spray");
			Menu::Option("prop_bodyarmour_02");
			Menu::Option("prop_bodyarmour_03");
			Menu::Option("prop_bodyarmour_04");
			Menu::Option("prop_bodyarmour_05");
			Menu::Option("prop_bodyarmour_06");
			Menu::Option("prop_bongos_01");
			Menu::Option("prop_bong_01");
			Menu::Option("prop_boombox_01");
			Menu::Option("prop_bottle_cap_01");
			Menu::Option("prop_bowl_crisps");
			Menu::Option("prop_broken_cboard_p1");
			Menu::Option("prop_broken_cboard_p2");
			Menu::Option("prop_busker_hat_01");
			Menu::Option("prop_c4_final");
			Menu::Option("prop_c4_final_green");
			Menu::Option("prop_candy_pqs");
			Menu::Option("prop_cargo_int");
			Menu::Option("prop_carrier_bag_01");
			Menu::Option("prop_carrier_bag_01_lod");
			Menu::Option("prop_carwash_roller_horz");
			Menu::Option("prop_carwash_roller_vert");
			Menu::Option("prop_car_ignition");
			Menu::Option("prop_casey_sec_id");
			Menu::Option("prop_cash_case_01");
			Menu::Option("prop_cash_case_02");
			Menu::Option("prop_cash_crate_01");
			Menu::Option("prop_cash_envelope_01");
			Menu::Option("prop_cash_note_01");
			Menu::Option("prop_cash_pile_01");
			Menu::Option("prop_cash_pile_02");
			Menu::Option("prop_ceramic_jug_01");
			Menu::Option("prop_ceramic_jug_cork");
			Menu::Option("prop_cigar_01");
			Menu::Option("prop_cigar_02");
			Menu::Option("prop_cigar_03");
			Menu::Option("prop_cigar_pack_01");
			Menu::Option("prop_cigar_pack_02");
			Menu::Option("prop_cliff_paper");
			Menu::Option("prop_clippers_01");
			Menu::Option("prop_coffee_cup_trailer");
			Menu::Option("prop_coffin_02");
			Menu::Option("prop_coffin_02b");
			Menu::Option("prop_coke_block_01");
			Menu::Option("prop_coke_block_half_a");
			Menu::Option("prop_coke_block_half_b");
			Menu::Option("prop_controller_01");
			Menu::Option("prop_crisp");
			Menu::Option("prop_crisp_small");
			Menu::Option("prop_cs_abattoir_switch");
			Menu::Option("prop_cs_amanda_shoe");
			Menu::Option("prop_cs_bandana");
			Menu::Option("prop_cs_bar");
			Menu::Option("prop_cs_beer_bot_01");
			Menu::Option("prop_cs_beer_bot_01b");
			Menu::Option("prop_cs_beer_bot_01lod");
			Menu::Option("prop_cs_beer_bot_02");
			Menu::Option("prop_cs_beer_bot_03");
			Menu::Option("prop_cs_beer_bot_40oz");
			Menu::Option("prop_cs_beer_bot_40oz_02");
			Menu::Option("prop_cs_beer_bot_40oz_03");
			Menu::Option("prop_cs_beer_bot_test");
			Menu::Option("prop_cs_binder_01");
			Menu::Option("prop_cs_book_01");
			Menu::Option("prop_cs_bottle_opener");
			Menu::Option("prop_cs_bowie_knife");
			Menu::Option("prop_cs_bowl_01");
			Menu::Option("prop_cs_bowl_01b");
			Menu::Option("prop_cs_box_step");
			Menu::Option("prop_cs_brain_chunk");
			Menu::Option("prop_cs_bs_cup");
			Menu::Option("prop_cs_burger_01");
			Menu::Option("prop_cs_business_card");
			Menu::Option("prop_cs_cash_note_01");
			Menu::Option("prop_cs_cctv");
			Menu::Option("prop_cs_champ_flute");
			Menu::Option("prop_cs_ciggy_01");
			Menu::Option("prop_cs_ciggy_01b");
			Menu::Option("prop_cs_clothes_box");
			Menu::Option("prop_cs_coke_line");
			Menu::Option("prop_cs_cont_latch");
			Menu::Option("prop_cs_crackpipe");
			Menu::Option("prop_cs_credit_card");
			Menu::Option("prop_cs_creeper_01");
			Menu::Option("prop_cs_crisps_01");
			Menu::Option("prop_cs_cuffs_01");
			Menu::Option("prop_cs_diaphram");
			Menu::Option("prop_cs_dildo_01");
			Menu::Option("prop_cs_documents_01");
			Menu::Option("prop_cs_dog_lead_2a");
			Menu::Option("prop_cs_dog_lead_2b");
			Menu::Option("prop_cs_dog_lead_2c");
			Menu::Option("prop_cs_dog_lead_3a");
			Menu::Option("prop_cs_dog_lead_3b");
			Menu::Option("prop_cs_dog_lead_a");
			Menu::Option("prop_cs_dog_lead_b");
			Menu::Option("prop_cs_dog_lead_c");
			Menu::Option("prop_cs_duffel_01");
			Menu::Option("prop_cs_duffel_01b");
			Menu::Option("prop_cs_dvd");
			Menu::Option("prop_cs_dvd_case");
			Menu::Option("prop_cs_envolope_01");
			Menu::Option("prop_cs_film_reel_01");
			Menu::Option("prop_cs_fork");
			Menu::Option("prop_cs_frank_photo");
			Menu::Option("prop_cs_fuel_hose");
			Menu::Option("prop_cs_fuel_nozle");
			Menu::Option("prop_cs_gascutter_1");
			Menu::Option("prop_cs_gascutter_2");
			Menu::Option("prop_cs_glass_scrap");
			Menu::Option("prop_cs_gunrack");
			Menu::Option("prop_cs_hand_radio");
			Menu::Option("prop_cs_heist_rope");
			Menu::Option("prop_cs_heist_rope_b");
			Menu::Option("prop_cs_hotdog_01");
			Menu::Option("prop_cs_hotdog_02");
			Menu::Option("prop_cs_ilev_blind_01");
			Menu::Option("prop_cs_ironing_board");
			Menu::Option("prop_cs_katana_01");
			Menu::Option("prop_cs_kettle_01");
			Menu::Option("prop_cs_lazlow_ponytail");
			Menu::Option("prop_cs_lazlow_shirt_01");
			Menu::Option("prop_cs_lazlow_shirt_01b");
			Menu::Option("prop_cs_leg_chain_01");
			Menu::Option("prop_cs_lester_crate");
			Menu::Option("prop_cs_lipstick");
			Menu::Option("prop_cs_magazine");
			Menu::Option("prop_cs_marker_01");
			Menu::Option("prop_cs_meth_pipe");
			Menu::Option("prop_cs_milk_01");
			Menu::Option("prop_cs_mini_tv");
			Menu::Option("prop_cs_mopbucket_01");
			Menu::Option("prop_cs_nail_file");
			Menu::Option("prop_cs_newspaper");
			Menu::Option("prop_cs_overalls_01");
			Menu::Option("prop_cs_padlock");
			Menu::Option("prop_cs_pamphlet_01");
			Menu::Option("prop_cs_paper_cup");
			Menu::Option("prop_cs_para_ropebit");
			Menu::Option("prop_cs_para_ropes");
			Menu::Option("prop_cs_pebble");
			Menu::Option("prop_cs_pebble_02");
			Menu::Option("prop_cs_petrol_can");
			Menu::Option("prop_cs_phone_01");
			Menu::Option("prop_cs_photoframe_01");
			Menu::Option("prop_cs_pills");
			Menu::Option("prop_cs_plane_int_01");
			Menu::Option("prop_cs_plate_01");
			Menu::Option("prop_cs_police_torch");
			Menu::Option("prop_cs_pour_tube");
			Menu::Option("prop_cs_power_cell");
			Menu::Option("prop_cs_power_cord");
			Menu::Option("prop_cs_protest_sign_01");
			Menu::Option("prop_cs_protest_sign_02");
			Menu::Option("prop_cs_protest_sign_02b");
			Menu::Option("prop_cs_protest_sign_03");
			Menu::Option("prop_cs_protest_sign_04a");
			Menu::Option("prop_cs_protest_sign_04b");
			Menu::Option("prop_cs_rage_statue_p1");
			Menu::Option("prop_cs_rage_statue_p2");
			Menu::Option("prop_cs_rolled_paper");
			Menu::Option("prop_cs_rub_box_01");
			Menu::Option("prop_cs_rub_box_02");
			Menu::Option("prop_cs_r_business_card");
			Menu::Option("prop_cs_sack_01");
			Menu::Option("prop_cs_saucer_01");
			Menu::Option("prop_cs_script_bottle");
			Menu::Option("prop_cs_script_bottle_01");
			Menu::Option("prop_cs_server_drive");
			Menu::Option("prop_cs_sheers");
			Menu::Option("prop_cs_shirt_01");
			Menu::Option("prop_cs_shot_glass");
			Menu::Option("prop_cs_silver_tray");
			Menu::Option("prop_cs_sink_filler");
			Menu::Option("prop_cs_sink_filler_02");
			Menu::Option("prop_cs_sink_filler_03");
			Menu::Option("prop_cs_sol_glasses");
			Menu::Option("prop_cs_steak");
			Menu::Option("prop_cs_stock_book");
			Menu::Option("prop_cs_street_binbag_01");
			Menu::Option("prop_cs_street_card_01");
			Menu::Option("prop_cs_street_card_02");
			Menu::Option("prop_cs_sub_hook_01");
			Menu::Option("prop_cs_sub_rope_01");
			Menu::Option("prop_cs_swipe_card");
			Menu::Option("prop_cs_toaster");
			Menu::Option("prop_cs_trolley_01");
			Menu::Option("prop_cs_trowel");
			Menu::Option("prop_cs_truck_ladder");
			Menu::Option("prop_cs_tshirt_ball_01");
			Menu::Option("prop_cs_t_shirt_pile");
			Menu::Option("prop_cs_valve");
			Menu::Option("prop_cs_vent_cover");
			Menu::Option("prop_cs_walkie_talkie");
			Menu::Option("prop_cs_whiskey_bottle");
			Menu::Option("prop_cs_whiskey_bot_stop");
			Menu::Option("prop_cs_wrench");
			Menu::Option("prop_devin_box_01");
			Menu::Option("prop_devin_rope_01");
			Menu::Option("prop_direct_chair_01");
			Menu::Option("prop_direct_chair_02");
			Menu::Option("prop_disp_razor_01");
			Menu::Option("prop_distantcar_day");
			Menu::Option("prop_distantcar_night");
			Menu::Option("prop_distantcar_truck");
			Menu::Option("prop_donut_01");
			Menu::Option("prop_donut_02");
			Menu::Option("prop_donut_02b");
			Menu::Option("prop_door_bell_01");
			Menu::Option("prop_double_grid_line");
			Menu::Option("prop_drug_package");
			Menu::Option("prop_drug_package_02");
			Menu::Option("prop_dummy_car");
			Menu::Option("prop_ear_defenders_01");
			Menu::Option("prop_ecg_01");
			Menu::Option("prop_ecg_01_cable_01");
			Menu::Option("prop_ecg_01_cable_02");
			Menu::Option("prop_ecola_can");
			Menu::Option("prop_employee_month_01");
			Menu::Option("prop_employee_month_02");
			Menu::Option("prop_energy_drink");
			Menu::Option("prop_face_rag_01");
			Menu::Option("prop_fag_packet_01");
			Menu::Option("prop_fbi3_coffee_table");
			Menu::Option("prop_fib_badge");
			Menu::Option("prop_fib_skylight_piece");
			Menu::Option("prop_fishing_rod_01");
			Menu::Option("prop_fishing_rod_02");
			Menu::Option("prop_fish_slice_01");
			Menu::Option("prop_flare_01");
			Menu::Option("prop_flare_01b");
			Menu::Option("prop_flatbed_strap");
			Menu::Option("prop_flight_box_01");
			Menu::Option("prop_flight_box_insert");
			Menu::Option("prop_flight_box_insert2");
			Menu::Option("prop_franklin_dl");
			Menu::Option("prop_f_b_insert_broken");
			Menu::Option("prop_gaffer_arm_bind");
			Menu::Option("prop_gaffer_arm_bind_cut");
			Menu::Option("prop_gaffer_leg_bind");
			Menu::Option("prop_gaffer_leg_bind_cut");
			Menu::Option("prop_gaffer_tape");
			Menu::Option("prop_gaffer_tape_strip");
			Menu::Option("prop_glasscutter_01");
			Menu::Option("prop_glass_suck_holder");
			Menu::Option("prop_gold_cont_01");
			Menu::Option("prop_gold_cont_01b");
			Menu::Option("prop_gold_trolly_strap_01");
			Menu::Option("prop_gun_case_01");
			Menu::Option("prop_gun_case_02");
			Menu::Option("prop_gun_frame");
			Menu::Option("prop_hand_toilet");
			Menu::Option("prop_hard_hat_01");
			Menu::Option("prop_headphones_01");
			Menu::Option("prop_headset_01");
			Menu::Option("prop_hockey_bag_01");
			Menu::Option("prop_holster_01");
			Menu::Option("prop_hose_nozzle");
			Menu::Option("prop_huf_rag_01");
			Menu::Option("prop_ice_cube_01");
			Menu::Option("prop_ice_cube_02");
			Menu::Option("prop_ice_cube_03");
			Menu::Option("prop_id2_20_clock");
			Menu::Option("prop_idol_01");
			Menu::Option("prop_idol_case");
			Menu::Option("prop_idol_case_02");
			Menu::Option("prop_ing_crowbar");
			Menu::Option("prop_inhaler_01");
			Menu::Option("prop_iron_01");
			Menu::Option("prop_jet_bloodsplat_01");
			Menu::Option("prop_juice_pool_01");
			Menu::Option("prop_ld_ammo_pack_01");
			Menu::Option("prop_ld_ammo_pack_02");
			Menu::Option("prop_ld_ammo_pack_03");
			Menu::Option("prop_ld_barrier_01");
			Menu::Option("prop_ld_bomb_01");
			Menu::Option("prop_ld_bomb_01_open");
			Menu::Option("prop_ld_bomb_anim");
			Menu::Option("prop_ld_can_01");
			Menu::Option("prop_ld_contact_card");
			Menu::Option("prop_ld_crocclips01");
			Menu::Option("prop_ld_crocclips02");
			Menu::Option("prop_ld_dummy_rope");
			Menu::Option("prop_ld_fags_01");
			Menu::Option("prop_ld_fags_02");
			Menu::Option("prop_ld_faucet");
			Menu::Option("prop_ld_ferris_wheel");
			Menu::Option("prop_ld_fireaxe");
			Menu::Option("prop_ld_flow_bottle");
			Menu::Option("prop_ld_gold_tooth");
			Menu::Option("prop_ld_hdd_01");
			Menu::Option("prop_ld_peep_slider");
			Menu::Option("prop_ld_rail_01");
			Menu::Option("prop_ld_rail_02");
			Menu::Option("prop_ld_rubble_01");
			Menu::Option("prop_ld_rubble_02");
			Menu::Option("prop_ld_rubble_03");
			Menu::Option("prop_ld_rubble_04");
			Menu::Option("prop_ld_scrap");
			Menu::Option("prop_ld_shovel");
			Menu::Option("prop_ld_shovel_dirt");
			Menu::Option("prop_ld_snack_01");
			Menu::Option("prop_ld_test_01");
			Menu::Option("prop_ld_tooth");
			Menu::Option("prop_ld_wallet_02");
			Menu::Option("prop_ld_wallet_pickup");
			Menu::Option("prop_lev_des_barge_01");
			Menu::Option("prop_lev_des_barge_02");
			Menu::Option("prop_lift_overlay_01");
			Menu::Option("prop_lift_overlay_02");
			Menu::Option("prop_litter_picker");
			Menu::Option("prop_loose_rag_01");
			Menu::Option("prop_med_jet_01");
			Menu::Option("prop_megaphone_01");
			Menu::Option("prop_mem_candle_04");
			Menu::Option("prop_mem_candle_05");
			Menu::Option("prop_mem_candle_06");
			Menu::Option("prop_mem_reef_01");
			Menu::Option("prop_mem_reef_02");
			Menu::Option("prop_mem_reef_03");
			Menu::Option("prop_mem_teddy_01");
			Menu::Option("prop_mem_teddy_02");
			Menu::Option("prop_meth_bag_01");
			Menu::Option("prop_michael_balaclava");
			Menu::Option("prop_michael_sec_id");
			Menu::Option("prop_microphone_02");
			Menu::Option("prop_military_pickup_01");
			Menu::Option("prop_mil_crate_01");
			Menu::Option("prop_mil_crate_02");
			Menu::Option("prop_minigun_01");
			Menu::Option("prop_money_bag_01");
			Menu::Option("prop_mp3_dock");
			Menu::Option("prop_mp_arrow_barrier_01");
			Menu::Option("prop_mp_barrier_01");
			Menu::Option("prop_mp_barrier_01b");
			Menu::Option("prop_mp_barrier_02");
			Menu::Option("prop_mp_barrier_02b");
			Menu::Option("prop_mp_base_marker");
			Menu::Option("prop_mp_boost_01");
			Menu::Option("prop_mp_cant_place_lrg");
			Menu::Option("prop_mp_cant_place_med");
			Menu::Option("prop_mp_cant_place_sm");
			Menu::Option("prop_mp_cone_01");
			Menu::Option("prop_mp_cone_02");
			Menu::Option("prop_mp_cone_03");
			Menu::Option("prop_mp_cone_04");
			Menu::Option("prop_mp_drug_package");
			Menu::Option("prop_mp_drug_pack_blue");
			Menu::Option("prop_mp_drug_pack_red");
			Menu::Option("prop_mp_icon_shad_lrg");
			Menu::Option("prop_mp_icon_shad_med");
			Menu::Option("prop_mp_icon_shad_sm");
			Menu::Option("prop_mp_max_out_lrg");
			Menu::Option("prop_mp_max_out_med");
			Menu::Option("prop_mp_max_out_sm");
			Menu::Option("prop_mp_num_0");
			Menu::Option("prop_mp_num_1");
			Menu::Option("prop_mp_num_2");
			Menu::Option("prop_mp_num_3");
			Menu::Option("prop_mp_num_4");
			Menu::Option("prop_mp_num_5");
			Menu::Option("prop_mp_num_6");
			Menu::Option("prop_mp_num_7");
			Menu::Option("prop_mp_num_8");
			Menu::Option("prop_mp_num_9");
			Menu::Option("prop_mp_placement");
			Menu::Option("prop_mp_placement_lrg");
			Menu::Option("prop_mp_placement_maxd");
			Menu::Option("prop_mp_placement_med");
			Menu::Option("prop_mp_placement_red");
			Menu::Option("prop_mp_placement_sm");
			Menu::Option("prop_mp_ramp_01");
			Menu::Option("prop_mp_ramp_02");
			Menu::Option("prop_mp_ramp_03");
			Menu::Option("prop_mp_repair");
			Menu::Option("prop_mp_repair_01");
			Menu::Option("prop_mp_respawn_02");
			Menu::Option("prop_mp_rocket_01");
			Menu::Option("prop_mp_spike_01");
			Menu::Option("prop_m_pack_int_01");
			Menu::Option("prop_nigel_bag_pickup");
			Menu::Option("prop_notepad_01");
			Menu::Option("prop_notepad_02");
			Menu::Option("prop_old_boot");
			Menu::Option("prop_orang_can_01");
			Menu::Option("prop_parking_wand_01");
			Menu::Option("prop_passport_01");
			Menu::Option("prop_peanut_bowl_01");
			Menu::Option("prop_pencil_01");
			Menu::Option("prop_piercing_gun");
			Menu::Option("prop_ping_pong");
			Menu::Option("prop_pistol_holster");
			Menu::Option("prop_plastic_cup_02");
			Menu::Option("prop_player_gasmask");
			Menu::Option("prop_pliers_01");
			Menu::Option("prop_police_radio_handset");
			Menu::Option("prop_police_radio_main");
			Menu::Option("prop_poster_tube_01");
			Menu::Option("prop_poster_tube_02");
			Menu::Option("prop_power_cell");
			Menu::Option("prop_power_cord_01");
			Menu::Option("prop_premier_fence_01");
			Menu::Option("prop_premier_fence_02");
			Menu::Option("prop_quad_grid_line");
			Menu::Option("prop_rad_waste_barrel_01");
			Menu::Option("prop_rail_controller");
			Menu::Option("prop_range_target_01");
			Menu::Option("prop_range_target_02");
			Menu::Option("prop_range_target_03");
			Menu::Option("prop_riot_shield");
			Menu::Option("prop_rolled_sock_01");
			Menu::Option("prop_rolled_sock_02");
			Menu::Option("prop_rope_family_3");
			Menu::Option("prop_safety_glasses");
			Menu::Option("prop_sam_01");
			Menu::Option("prop_sandwich_01");
			Menu::Option("prop_scaffold_pole");
			Menu::Option("prop_scn_police_torch");
			Menu::Option("prop_scourer_01");
			Menu::Option("prop_scrap_2_crate");
			Menu::Option("prop_sewing_fabric");
			Menu::Option("prop_sewing_machine");
			Menu::Option("prop_shower_towel");
			Menu::Option("prop_sh_beer_pissh_01");
			Menu::Option("prop_sh_bong_01");
			Menu::Option("prop_sh_cigar_01");
			Menu::Option("prop_sh_joint_01");
			Menu::Option("prop_sh_mr_rasp_01");
			Menu::Option("prop_sh_shot_glass");
			Menu::Option("prop_sh_tall_glass");
			Menu::Option("prop_sh_tt_fridgedoor");
			Menu::Option("prop_sh_wine_glass");
			Menu::Option("prop_single_grid_line");
			Menu::Option("prop_smg_holster_01");
			Menu::Option("prop_space_pistol");
			Menu::Option("prop_space_rifle");
			Menu::Option("prop_spycam");
			Menu::Option("prop_squeegee");
			Menu::Option("prop_stag_do_rope");
			Menu::Option("prop_start_finish_line_01");
			Menu::Option("prop_start_grid_01");
			Menu::Option("prop_stockade_wheel");
			Menu::Option("prop_stockade_wheel_flat");
			Menu::Option("prop_sub_cover_01");
			Menu::Option("prop_sub_release");
			Menu::Option("prop_syringe_01");
			Menu::Option("prop_table_mic_01");
			Menu::Option("prop_table_ten_bat");
			Menu::Option("prop_taco_01");
			Menu::Option("prop_taco_02");
			Menu::Option("prop_tapeplayer_01");
			Menu::Option("prop_target_arm");
			Menu::Option("prop_target_arm_b");
			Menu::Option("prop_target_arm_long");
			Menu::Option("prop_target_arm_sm");
			Menu::Option("prop_target_backboard");
			Menu::Option("prop_target_backboard_b");
			Menu::Option("prop_target_blue");
			Menu::Option("prop_target_blue_arrow");
			Menu::Option("prop_target_bull");
			Menu::Option("prop_target_bull_b");
			Menu::Option("prop_target_comp_metal");
			Menu::Option("prop_target_comp_wood");
			Menu::Option("prop_target_frame_01");
			Menu::Option("prop_target_inner1");
			Menu::Option("prop_target_inner2");
			Menu::Option("prop_target_inner2_b");
			Menu::Option("prop_target_inner3");
			Menu::Option("prop_target_inner3_b");
			Menu::Option("prop_target_inner_b");
			Menu::Option("prop_target_orange_arrow");
			Menu::Option("prop_target_oran_cross");
			Menu::Option("prop_target_ora_purp_01");
			Menu::Option("prop_target_purp_arrow");
			Menu::Option("prop_target_purp_cross");
			Menu::Option("prop_target_red");
			Menu::Option("prop_target_red_arrow");
			Menu::Option("prop_target_red_blue_01");
			Menu::Option("prop_target_red_cross");
			Menu::Option("prop_tarp_strap");
			Menu::Option("prop_tea_trolly");
			Menu::Option("prop_temp_block_blocker");
			Menu::Option("prop_tennis_ball");
			Menu::Option("prop_tennis_rack_01");
			Menu::Option("prop_tennis_rack_01b");
			Menu::Option("prop_time_capsule_01");
			Menu::Option("prop_tornado_wheel");
			Menu::Option("prop_torture_01");
			Menu::Option("prop_tourist_map_01");
			Menu::Option("prop_trailer_01_new");
			Menu::Option("prop_trailer_door_closed");
			Menu::Option("prop_trailer_door_open");
			Menu::Option("prop_trevor_rope_01");
			Menu::Option("prop_trev_sec_id");
			Menu::Option("prop_triple_grid_line");
			Menu::Option("prop_tri_finish_banner");
			Menu::Option("prop_tri_start_banner");
			Menu::Option("prop_tumbler_01");
			Menu::Option("prop_tumbler_01b");
			Menu::Option("prop_tumbler_01_empty");
			Menu::Option("prop_turkey_leg_01");
			Menu::Option("prop_tv_cam_02");
			Menu::Option("prop_tv_test");
			Menu::Option("prop_t_shirt_ironing");
			Menu::Option("prop_voltmeter_01");
			Menu::Option("prop_water_corpse_01");
			Menu::Option("prop_water_corpse_02");
			Menu::Option("prop_weed_01");
			Menu::Option("prop_weed_02");
			Menu::Option("prop_weed_block_01");
			Menu::Option("prop_weed_bottle");
			Menu::Option("prop_weed_pallet");
			Menu::Option("prop_weed_tub_01");
			Menu::Option("prop_weed_tub_01b");
			Menu::Option("prop_welding_mask_01");
			Menu::Option("prop_weld_torch");
			Menu::Option("prop_wheat_grass_empty");
			Menu::Option("prop_wheat_grass_glass");
			Menu::Option("prop_winch_hook_long");
			Menu::Option("prop_winch_hook_short");
			Menu::Option("prop_wrecked_buzzard");
			Menu::Option("prop_yacht_lounger");
			Menu::Option("prop_yacht_seat_01");
			Menu::Option("prop_yacht_seat_02");
			Menu::Option("prop_yacht_seat_03");
			Menu::Option("prop_yacht_table_01");
			Menu::Option("prop_yacht_table_02");
			Menu::Option("prop_yacht_table_03");
			Menu::Option("prop_yell_plastic_target");
			Menu::Option("p_amb_bagel_01");
			Menu::Option("p_cs_bbbat_01");
			Menu::Option("p_cs_bottle_01");
			Menu::Option("p_cs_clipboard");
			Menu::Option("p_cs_joint_01");
			Menu::Option("p_cs_joint_02");
			Menu::Option("p_cs_lighter_01");
			Menu::Option("p_cs_papers_01");
			Menu::Option("p_cs_papers_02");
			Menu::Option("p_cs_papers_03");
			Menu::Option("p_ing_bagel_01");
			Menu::Option("p_ing_microphonel_01");
			Menu::Option("p_ld_bs_bag_01");
			Menu::Option("p_ld_id_card_002");
			Menu::Option("p_ld_id_card_01");
			Menu::Option("p_rc_handset");
			Menu::Option("p_whiskey_notop");
			Menu::Option("p_whiskey_notop_empty");
			Menu::Option("prop_crashed_heli");
			Menu::Option("prop_ld_bankdoors_02");
			Menu::Option("prop_ld_fragwall_01a");
			Menu::Option("prop_pipe_single_01");
			Menu::Option("prop_test_boulder_01");
			Menu::Option("prop_test_boulder_02");
			Menu::Option("prop_test_boulder_03");
			Menu::Option("prop_test_boulder_04");
			Menu::Option("prop_trailr_base");
			Menu::Option("prop_trailr_base_static");
			Menu::Option("proc_drkyel001");
			Menu::Option("proc_flower1");
			Menu::Option("proc_flower_wild_04");
			Menu::Option("proc_weeds01a");
			Menu::Option("proc_weeds01b");
			Menu::Option("proc_weeds01c");
			Menu::Option("prop_test_bed");
			Menu::Option("proair_hoc_puck");
			Menu::Option("prop_airhockey_01");
			Menu::Option("prop_air_hoc_paddle_01");
			Menu::Option("prop_air_hoc_paddle_02");
			Menu::Option("prop_arcade_01");
			Menu::Option("prop_arcade_02");
			Menu::Option("prop_ice_box_01");
			Menu::Option("prop_ice_box_01_l1");
			Menu::Option("prop_jukebox_01");
			Menu::Option("prop_jukebox_02");
			Menu::Option("prop_park_ticket_01");
			Menu::Option("prop_pier_kiosk_01");
			Menu::Option("prop_pier_kiosk_02");
			Menu::Option("prop_pier_kiosk_03");
			Menu::Option("prop_pooltable_02");
			Menu::Option("prop_pooltable_3b");
			Menu::Option("prop_pool_cue");
			Menu::Option("prop_pool_rack_01");
			Menu::Option("prop_pool_rack_02");
			Menu::Option("prop_pool_tri");
			Menu::Option("prop_telescope");
			Menu::Option("prop_train_ticket_02");
			Menu::Option("prop_turnstyle_01");
			Menu::Option("prop_vend_coffe_01");
			Menu::Option("prop_vend_condom_01");
			Menu::Option("prop_vend_fags_01");
			Menu::Option("prop_vend_fridge01");
			Menu::Option("prop_vend_snak_01");
			Menu::Option("prop_apple_box_01");
			Menu::Option("prop_apple_box_02");
			Menu::Option("prop_arm_wrestle_01");
			Menu::Option("prop_a_base_bars_01");
			Menu::Option("prop_barbell_01");
			Menu::Option("prop_barbell_02");
			Menu::Option("prop_barbell_100kg");
			Menu::Option("prop_barbell_10kg");
			Menu::Option("prop_barbell_20kg");
			Menu::Option("prop_barbell_30kg");
			Menu::Option("prop_barbell_40kg");
			Menu::Option("prop_barbell_50kg");
			Menu::Option("prop_barbell_60kg");
			Menu::Option("prop_barbell_80kg");
			Menu::Option("prop_basketball_net");
			Menu::Option("prop_bball_arcade_01");
			Menu::Option("prop_beachbag_01");
			Menu::Option("prop_beachbag_02");
			Menu::Option("prop_beachbag_03");
			Menu::Option("prop_beachbag_04");
			Menu::Option("prop_beachbag_05");
			Menu::Option("prop_beachbag_06");
			Menu::Option("prop_beachbag_combo_01");
			Menu::Option("prop_beachbag_combo_02");
			Menu::Option("prop_beachball_02");
			Menu::Option("prop_beachflag_le");
			Menu::Option("prop_beach_bars_01");
			Menu::Option("prop_beach_bars_02");
			Menu::Option("prop_beach_bbq");
			Menu::Option("prop_beach_dip_bars_01");
			Menu::Option("prop_beach_dip_bars_02");
			Menu::Option("prop_beach_fire");
			Menu::Option("prop_beach_lg_float");
			Menu::Option("prop_beach_lg_stretch");
			Menu::Option("prop_beach_lg_surf");
			Menu::Option("prop_beach_lotion_01");
			Menu::Option("prop_beach_lotion_02");
			Menu::Option("prop_beach_lotion_03");
			Menu::Option("prop_beach_punchbag");
			Menu::Option("prop_beach_rings_01");
			Menu::Option("prop_beach_sculp_01");
			Menu::Option("prop_beach_towel_02");
			Menu::Option("prop_beach_volball01");
			Menu::Option("prop_beach_volball02");
			Menu::Option("prop_bikini_disp_01");
			Menu::Option("prop_bikini_disp_02");
			Menu::Option("prop_bikini_disp_03");
			Menu::Option("prop_bikini_disp_04");
			Menu::Option("prop_bikini_disp_05");
			Menu::Option("prop_bikini_disp_06");
			Menu::Option("prop_bleachers_01");
			Menu::Option("prop_bleachers_02");
			Menu::Option("prop_bleachers_03");
			Menu::Option("prop_bleachers_04");
			Menu::Option("prop_bleachers_05");
			Menu::Option("prop_boogbd_stack_01");
			Menu::Option("prop_boogbd_stack_02");
			Menu::Option("prop_boogieboard_01");
			Menu::Option("prop_boogieboard_02");
			Menu::Option("prop_boogieboard_03");
			Menu::Option("prop_boogieboard_04");
			Menu::Option("prop_boogieboard_05");
			Menu::Option("prop_boogieboard_06");
			Menu::Option("prop_boogieboard_07");
			Menu::Option("prop_boogieboard_08");
			Menu::Option("prop_boogieboard_09");
			Menu::Option("prop_boogieboard_10");
			Menu::Option("prop_bowling_ball");
			Menu::Option("prop_bowling_pin");
			Menu::Option("prop_boxing_glove_01");
			Menu::Option("prop_buck_spade_01");
			Menu::Option("prop_buck_spade_02");
			Menu::Option("prop_buck_spade_03");
			Menu::Option("prop_buck_spade_04");
			Menu::Option("prop_buck_spade_05");
			Menu::Option("prop_buck_spade_06");
			Menu::Option("prop_buck_spade_07");
			Menu::Option("prop_buck_spade_08");
			Menu::Option("prop_buck_spade_09");
			Menu::Option("prop_buck_spade_10");
			Menu::Option("prop_bumper_car_01");
			Menu::Option("prop_can_canoe");
			Menu::Option("prop_cap_01");
			Menu::Option("prop_cap_01b");
			Menu::Option("prop_cap_row_01");
			Menu::Option("prop_cap_row_01b");
			Menu::Option("prop_cap_row_02");
			Menu::Option("prop_cap_row_02b");
			Menu::Option("prop_clothes_rail_02");
			Menu::Option("prop_clothes_rail_03");
			Menu::Option("prop_clothes_rail_2b");
			Menu::Option("prop_clothes_tub_01");
			Menu::Option("prop_cs_beachtowel_01");
			Menu::Option("prop_cup_saucer_01");
			Menu::Option("prop_curl_bar_01");
			Menu::Option("prop_dart_1");
			Menu::Option("prop_dart_2");
			Menu::Option("prop_dart_bd_01");
			Menu::Option("prop_dart_bd_cab_01");
			Menu::Option("prop_display_unit_01");
			Menu::Option("prop_display_unit_02");
			Menu::Option("prop_disp_cabinet_002");
			Menu::Option("prop_disp_cabinet_01");
			Menu::Option("prop_dolly_01");
			Menu::Option("prop_dolly_02");
			Menu::Option("prop_dress_disp_01");
			Menu::Option("prop_dress_disp_02");
			Menu::Option("prop_dress_disp_03");
			Menu::Option("prop_dress_disp_04");
			Menu::Option("prop_drug_burner");
			Menu::Option("prop_exer_bike_01");
			Menu::Option("prop_ferris_car_01");
			Menu::Option("prop_ferris_car_01_lod1");
			Menu::Option("prop_film_cam_01");
			Menu::Option("prop_flipchair_01");
			Menu::Option("prop_food_van_01");
			Menu::Option("prop_food_van_02");
			Menu::Option("prop_freeweight_01");
			Menu::Option("prop_freeweight_02");
			Menu::Option("prop_front_seat_01");
			Menu::Option("prop_front_seat_02");
			Menu::Option("prop_front_seat_03");
			Menu::Option("prop_front_seat_04");
			Menu::Option("prop_front_seat_05");
			Menu::Option("prop_front_seat_06");
			Menu::Option("prop_front_seat_07");
			Menu::Option("prop_front_seat_row_01");
			Menu::Option("prop_ftowel_01");
			Menu::Option("prop_ftowel_07");
			Menu::Option("prop_ftowel_08");
			Menu::Option("prop_ftowel_10");
			Menu::Option("prop_game_clock_01");
			Menu::Option("prop_game_clock_02");
			Menu::Option("prop_golf_bag_01");
			Menu::Option("prop_golf_bag_01b");
			Menu::Option("prop_golf_bag_01c");
			Menu::Option("prop_golf_ball");
			Menu::Option("prop_golf_ball_p2");
			Menu::Option("prop_golf_ball_p3");
			Menu::Option("prop_golf_ball_p4");
			Menu::Option("prop_golf_ball_tee");
			Menu::Option("prop_golf_driver");
			Menu::Option("prop_golf_iron_01");
			Menu::Option("prop_golf_marker_01");
			Menu::Option("prop_golf_pitcher_01");
			Menu::Option("prop_golf_putter_01");
			Menu::Option("prop_golf_tee");
			Menu::Option("prop_golf_wood_01");
			Menu::Option("prop_hat_box_01");
			Menu::Option("prop_hat_box_02");
			Menu::Option("prop_hat_box_03");
			Menu::Option("prop_hat_box_04");
			Menu::Option("prop_hat_box_05");
			Menu::Option("prop_hat_box_06");
			Menu::Option("prop_henna_disp_01");
			Menu::Option("prop_henna_disp_02");
			Menu::Option("prop_henna_disp_03");
			Menu::Option("prop_hwbowl_pseat_6x1");
			Menu::Option("prop_hwbowl_seat_01");
			Menu::Option("prop_hwbowl_seat_02");
			Menu::Option("prop_hwbowl_seat_03");
			Menu::Option("prop_hwbowl_seat_03b");
			Menu::Option("prop_hwbowl_seat_6x6");
			Menu::Option("prop_hydro_platform_01");
			Menu::Option("prop_inflatearch_01");
			Menu::Option("prop_inflategate_01");
			Menu::Option("prop_jeans_01");
			Menu::Option("prop_kayak_01");
			Menu::Option("prop_kayak_01b");
			Menu::Option("prop_kino_light_01");
			Menu::Option("prop_kino_light_03");
			Menu::Option("prop_ld_hat_01");
			Menu::Option("prop_ld_jeans_01");
			Menu::Option("prop_ld_jeans_02");
			Menu::Option("prop_ld_shirt_01");
			Menu::Option("prop_ld_shoe_01");
			Menu::Option("prop_ld_shoe_02");
			Menu::Option("prop_ld_tshirt_01");
			Menu::Option("prop_ld_tshirt_02");
			Menu::Option("prop_life_ring_02");
			Menu::Option("prop_makeup_trail_01");
			Menu::Option("prop_makeup_trail_02");
			Menu::Option("prop_mat_box");
			Menu::Option("prop_movie_rack");
			Menu::Option("prop_muscle_bench_01");
			Menu::Option("prop_muscle_bench_02");
			Menu::Option("prop_muscle_bench_03");
			Menu::Option("prop_muscle_bench_04");
			Menu::Option("prop_muscle_bench_05");
			Menu::Option("prop_muscle_bench_06");
			Menu::Option("prop_offroad_bale01");
			Menu::Option("prop_offroad_bale02_l1_frag_");
			Menu::Option("prop_offroad_barrel01");
			Menu::Option("prop_offroad_tyres01");
			Menu::Option("prop_plate_stand_01");
			Menu::Option("prop_poolball_1");
			Menu::Option("prop_poolball_10");
			Menu::Option("prop_poolball_11");
			Menu::Option("prop_poolball_12");
			Menu::Option("prop_poolball_13");
			Menu::Option("prop_poolball_14");
			Menu::Option("prop_poolball_15");
			Menu::Option("prop_poolball_2");
			Menu::Option("prop_poolball_3");
			Menu::Option("prop_poolball_4");
			Menu::Option("prop_poolball_5");
			Menu::Option("prop_poolball_6");
			Menu::Option("prop_poolball_7");
			Menu::Option("prop_poolball_8");
			Menu::Option("prop_poolball_9");
			Menu::Option("prop_poolball_cue");
			Menu::Option("prop_porn_mag_01");
			Menu::Option("prop_porn_mag_02");
			Menu::Option("prop_porn_mag_03");
			Menu::Option("prop_porn_mag_04");
			Menu::Option("prop_postcard_rack");
			Menu::Option("prop_pris_bars_01");
			Menu::Option("prop_pris_bench_01");
			Menu::Option("prop_prop_tree_01");
			Menu::Option("prop_prop_tree_02");
			Menu::Option("prop_punch_bag_l");
			Menu::Option("prop_roller_car_01");
			Menu::Option("prop_roller_car_02");
			Menu::Option("prop_scrim_01");
			Menu::Option("prop_set_generator_01");
			Menu::Option("prop_sglasses_stand_01");
			Menu::Option("prop_sglasses_stand_02");
			Menu::Option("prop_sglasses_stand_02b");
			Menu::Option("prop_sglasses_stand_03");
			Menu::Option("prop_sglasss_1b_lod");
			Menu::Option("prop_sglasss_1_lod");
			Menu::Option("prop_shop_front_door_l");
			Menu::Option("prop_shop_front_door_r");
			Menu::Option("prop_skate_flatramp");
			Menu::Option("prop_skate_funbox");
			Menu::Option("prop_skate_halfpipe");
			Menu::Option("prop_skate_kickers");
			Menu::Option("prop_skate_quartpipe");
			Menu::Option("prop_skate_rail");
			Menu::Option("prop_skate_spiner");
			Menu::Option("prop_skip_rope_01");
			Menu::Option("prop_slacks_01");
			Menu::Option("prop_slacks_02");
			Menu::Option("prop_speedball_01");
			Menu::Option("prop_sports_clock_01");
			Menu::Option("prop_studio_light_02");
			Menu::Option("prop_studio_light_03");
			Menu::Option("prop_suitcase_01");
			Menu::Option("prop_suitcase_01b");
			Menu::Option("prop_suitcase_01c");
			Menu::Option("prop_suitcase_01d");
			Menu::Option("prop_suitcase_02");
			Menu::Option("prop_suitcase_03");
			Menu::Option("prop_suitcase_03b");
			Menu::Option("prop_surf_board_ldn_01");
			Menu::Option("prop_surf_board_ldn_02");
			Menu::Option("prop_surf_board_ldn_03");
			Menu::Option("prop_surf_board_ldn_04");
			Menu::Option("prop_table_tennis");
			Menu::Option("prop_tennis_ball_lobber");
			Menu::Option("prop_tint_towel");
			Menu::Option("prop_tint_towels_01");
			Menu::Option("prop_tint_towels_01b");
			Menu::Option("prop_towel2_01");
			Menu::Option("prop_towel2_02");
			Menu::Option("prop_towel_shelf_01");
			Menu::Option("prop_tri_pod");
			Menu::Option("prop_tri_pod_lod");
			Menu::Option("prop_tshirt_box_02");
			Menu::Option("prop_tshirt_shelf_1");
			Menu::Option("prop_tshirt_shelf_2");
			Menu::Option("prop_tshirt_shelf_2a");
			Menu::Option("prop_tshirt_shelf_2b");
			Menu::Option("prop_tshirt_shelf_2c");
			Menu::Option("prop_tshirt_stand_01");
			Menu::Option("prop_tshirt_stand_01b");
			Menu::Option("prop_tshirt_stand_02");
			Menu::Option("prop_tshirt_stand_04");
			Menu::Option("prop_t_shirt_row_01");
			Menu::Option("prop_t_shirt_row_02");
			Menu::Option("prop_t_shirt_row_02b");
			Menu::Option("prop_t_shirt_row_03");
			Menu::Option("prop_t_shirt_row_04");
			Menu::Option("prop_t_shirt_row_05l");
			Menu::Option("prop_t_shirt_row_05r");
			Menu::Option("prop_venice_board_01");
			Menu::Option("prop_venice_board_02");
			Menu::Option("prop_venice_board_03");
			Menu::Option("prop_venice_counter_01");
			Menu::Option("prop_venice_counter_02");
			Menu::Option("prop_venice_counter_03");
			Menu::Option("prop_venice_counter_04");
			Menu::Option("prop_venice_shop_front_01");
			Menu::Option("prop_venice_sign_09");
			Menu::Option("prop_venice_sign_10");
			Menu::Option("prop_venice_sign_11");
			Menu::Option("prop_venice_sign_12");
			Menu::Option("prop_venice_sign_14");
			Menu::Option("prop_venice_sign_15");
			Menu::Option("prop_venice_sign_16");
			Menu::Option("prop_venice_sign_17");
			Menu::Option("prop_venice_sign_18");
			Menu::Option("prop_ven_market_stool");
			Menu::Option("prop_ven_market_table1");
			Menu::Option("prop_ven_shop_1_counter");
			Menu::Option("prop_v_15_cars_clock");
			Menu::Option("prop_v_5_bclock");
			Menu::Option("prop_weight_10k");
			Menu::Option("prop_weight_15k");
			Menu::Option("prop_weight_1_5k");
			Menu::Option("prop_weight_20k");
			Menu::Option("prop_weight_2_5k");
			Menu::Option("prop_weight_5k");
			Menu::Option("prop_weight_rack_01");
			Menu::Option("prop_weight_rack_02");
			Menu::Option("p_film_set_static_01");
			Menu::Option("prop_bath_dirt_01");
			Menu::Option("prop_broom_unit_01");
			Menu::Option("prop_handdry_01");
			Menu::Option("prop_handdry_02");
			Menu::Option("prop_shower_01");
			Menu::Option("prop_shower_rack_01");
			Menu::Option("prop_sink_01");
			Menu::Option("prop_sink_02");
			Menu::Option("prop_sink_03");
			Menu::Option("prop_sink_04");
			Menu::Option("prop_sink_05");
			Menu::Option("prop_sink_06");
			Menu::Option("prop_soap_disp_01");
			Menu::Option("prop_soap_disp_02");
			Menu::Option("prop_sponge_01");
			Menu::Option("prop_toilet_01");
			Menu::Option("prop_toilet_02");
			Menu::Option("prop_toilet_03");
			Menu::Option("prop_toilet_brush_01");
			Menu::Option("prop_toilet_cube_01");
			Menu::Option("prop_toilet_cube_02");
			Menu::Option("prop_toilet_roll_01");
			Menu::Option("prop_toilet_roll_02");
			Menu::Option("prop_toilet_roll_03");
			Menu::Option("prop_toilet_roll_04");
			Menu::Option("prop_toilet_roll_05");
			Menu::Option("prop_toilet_shamp_01");
			Menu::Option("prop_toilet_shamp_02");
			Menu::Option("prop_toilet_soap_01");
			Menu::Option("prop_toilet_soap_02");
			Menu::Option("prop_toilet_soap_03");
			Menu::Option("prop_toilet_soap_04");
			Menu::Option("prop_toothbrush_01");
			Menu::Option("prop_toothb_cup_01");
			Menu::Option("prop_toothpaste_01");
			Menu::Option("prop_towel_01");
			Menu::Option("prop_towel_rail_01");
			Menu::Option("prop_towel_rail_02");
			Menu::Option("prop_towel_small_01");
			Menu::Option("prop_w_fountain_01");
			Menu::Option("prop_amp_01");
			Menu::Option("prop_cctv_02_sm");
			Menu::Option("prop_cctv_cont_01");
			Menu::Option("prop_cctv_cont_03");
			Menu::Option("prop_cctv_cont_04");
			Menu::Option("prop_cctv_cont_05");
			Menu::Option("prop_cctv_cont_06");
			Menu::Option("prop_cctv_unit_01");
			Menu::Option("prop_cctv_unit_02");
			Menu::Option("prop_cctv_unit_05");
			Menu::Option("prop_console_01");
			Menu::Option("prop_cs_dvd_player");
			Menu::Option("prop_cs_keyboard_01");
			Menu::Option("prop_cs_mouse_01");
			Menu::Option("prop_cs_tv_stand");
			Menu::Option("prop_dj_deck_01");
			Menu::Option("prop_dj_deck_02");
			Menu::Option("prop_flatscreen_overlay");
			Menu::Option("prop_ghettoblast_02");
			Menu::Option("prop_hifi_01");
			Menu::Option("prop_keyboard_01a");
			Menu::Option("prop_keyboard_01b");
			Menu::Option("prop_laptop_02_closed");
			Menu::Option("prop_laptop_jimmy");
			Menu::Option("prop_laptop_lester");
			Menu::Option("prop_laptop_lester2");
			Menu::Option("prop_michaels_credit_tv");
			Menu::Option("prop_monitor_01c");
			Menu::Option("prop_monitor_01d");
			Menu::Option("prop_monitor_02");
			Menu::Option("prop_monitor_03b");
			Menu::Option("prop_mouse_01");
			Menu::Option("prop_mouse_01a");
			Menu::Option("prop_mouse_01b");
			Menu::Option("prop_mouse_02");
			Menu::Option("prop_pc_01a");
			Menu::Option("prop_pc_02a");
			Menu::Option("prop_portable_hifi_01");
			Menu::Option("prop_projector_overlay");
			Menu::Option("prop_speaker_01");
			Menu::Option("prop_speaker_02");
			Menu::Option("prop_speaker_03");
			Menu::Option("prop_speaker_05");
			Menu::Option("prop_speaker_06");
			Menu::Option("prop_speaker_07");
			Menu::Option("prop_speaker_08");
			Menu::Option("prop_till_01_dam");
			Menu::Option("prop_till_02");
			Menu::Option("prop_till_03");
			Menu::Option("prop_trailer_monitor_01");
			Menu::Option("prop_trev_tv_01");
			Menu::Option("prop_tt_screenstatic");
			Menu::Option("prop_tv_02");
			Menu::Option("prop_tv_03_overlay");
			Menu::Option("prop_tv_04");
			Menu::Option("prop_tv_05");
			Menu::Option("prop_tv_06");
			Menu::Option("prop_tv_07");
			Menu::Option("prop_tv_cabinet_03");
			Menu::Option("prop_tv_cabinet_04");
			Menu::Option("prop_tv_cabinet_05");
			Menu::Option("prop_tv_flat_01");
			Menu::Option("prop_tv_flat_01_screen");
			Menu::Option("prop_tv_flat_02b");
			Menu::Option("prop_tv_flat_03");
			Menu::Option("prop_tv_flat_03b");
			Menu::Option("prop_tv_flat_michael");
			Menu::Option("prop_vcr_01");
			Menu::Option("prop_white_keyboard");
			Menu::Option("prop_bbq_2");
			Menu::Option("prop_bbq_3");
			Menu::Option("prop_beware_dog_sign");
			Menu::Option("prop_forsalejr2");
			Menu::Option("prop_forsalejr3");
			Menu::Option("prop_forsalejr4");
			Menu::Option("prop_fountain1");
			Menu::Option("prop_fountain2");
			Menu::Option("prop_garden_dreamcatch_01");
			Menu::Option("prop_garden_edging_01");
			Menu::Option("prop_garden_edging_02");
			Menu::Option("prop_garden_zapper_01");
			Menu::Option("prop_gardnght_01");
			Menu::Option("prop_gazebo_03");
			Menu::Option("prop_glf_roller");
			Menu::Option("prop_glf_spreader");
			Menu::Option("prop_gravestones_01a");
			Menu::Option("prop_gravestones_02a");
			Menu::Option("prop_gravestones_03a");
			Menu::Option("prop_gravestones_04a");
			Menu::Option("prop_gravestones_05a");
			Menu::Option("prop_gravestones_06a");
			Menu::Option("prop_gravestones_07a");
			Menu::Option("prop_gravestones_08a");
			Menu::Option("prop_gravestones_09a");
			Menu::Option("prop_gravestones_10a");
			Menu::Option("prop_gravetomb_01a");
			Menu::Option("prop_gravetomb_02a");
			Menu::Option("prop_hedge_trimmer_01");
			Menu::Option("prop_hose_1");
			Menu::Option("prop_hose_2");
			Menu::Option("prop_hose_3");
			Menu::Option("prop_hottub2");
			Menu::Option("prop_lawnmower_01");
			Menu::Option("prop_leaf_blower_01");
			Menu::Option("prop_letterbox_04");
			Menu::Option("prop_outdoor_fan_01");
			Menu::Option("prop_owl_totem_01");
			Menu::Option("prop_poolskimmer");
			Menu::Option("prop_prlg_gravestone_05a_l1");
			Menu::Option("prop_prlg_gravestone_06a");
			Menu::Option("prop_shrub_rake");
			Menu::Option("prop_sign_mallet");
			Menu::Option("prop_spray_backpack_01");
			Menu::Option("prop_sprink_crop_01");
			Menu::Option("prop_sprink_golf_01");
			Menu::Option("prop_sprink_park_01");
			Menu::Option("prop_stickbfly");
			Menu::Option("prop_stickhbird");
			Menu::Option("prop_wateringcan");
			Menu::Option("prop_windmill2");
			Menu::Option("test_prop_gravestones_04a");
			Menu::Option("test_prop_gravestones_05a");
			Menu::Option("test_prop_gravestones_07a");
			Menu::Option("test_prop_gravestones_08a");
			Menu::Option("test_prop_gravestones_09a");
			Menu::Option("test_prop_gravetomb_01a");
			Menu::Option("test_prop_gravetomb_02a");
			Menu::Option("prop_breadbin_01");
			Menu::Option("prop_cleaver");
			Menu::Option("prop_cooker_03");
			Menu::Option("prop_copper_pan");
			Menu::Option("prop_fridge_01");
			Menu::Option("prop_fridge_03");
			Menu::Option("prop_ind_washer_02");
			Menu::Option("prop_kettle");
			Menu::Option("prop_kettle_01");
			Menu::Option("prop_kitch_juicer");
			Menu::Option("prop_kitch_pot_fry");
			Menu::Option("prop_kitch_pot_huge");
			Menu::Option("prop_kitch_pot_lrg");
			Menu::Option("prop_kitch_pot_lrg2");
			Menu::Option("prop_kitch_pot_med");
			Menu::Option("prop_kitch_pot_sm");
			Menu::Option("prop_knife");
			Menu::Option("prop_knife_stand");
			Menu::Option("prop_ladel");
			Menu::Option("prop_metalfoodjar_01");
			Menu::Option("prop_micro_01");
			Menu::Option("prop_micro_02");
			Menu::Option("prop_micro_cs_01");
			Menu::Option("prop_micro_cs_01_door");
			Menu::Option("prop_plate_04");
			Menu::Option("prop_plate_warmer");
			Menu::Option("prop_pot_01");
			Menu::Option("prop_pot_02");
			Menu::Option("prop_pot_03");
			Menu::Option("prop_pot_04");
			Menu::Option("prop_pot_05");
			Menu::Option("prop_pot_06");
			Menu::Option("prop_pot_rack");
			Menu::Option("prop_steam_basket_01");
			Menu::Option("prop_steam_basket_02");
			Menu::Option("prop_tea_urn");
			Menu::Option("prop_toaster_01");
			Menu::Option("prop_toaster_02");
			Menu::Option("prop_utensil");
			Menu::Option("prop_washer_01");
			Menu::Option("prop_washer_02");
			Menu::Option("prop_washer_03");
			Menu::Option("prop_washing_basket_01");
			Menu::Option("prop_whisk");
			Menu::Option("prop_wok");
			Menu::Option("prop_armchair_01");
			Menu::Option("prop_couch_01");
			Menu::Option("prop_couch_03");
			Menu::Option("prop_couch_04");
			Menu::Option("prop_couch_lg_02");
			Menu::Option("prop_couch_lg_05");
			Menu::Option("prop_couch_lg_06");
			Menu::Option("prop_couch_lg_07");
			Menu::Option("prop_couch_lg_08");
			Menu::Option("prop_couch_sm1_07");
			Menu::Option("prop_couch_sm2_07");
			Menu::Option("prop_couch_sm_02");
			Menu::Option("prop_couch_sm_05");
			Menu::Option("prop_couch_sm_06");
			Menu::Option("prop_couch_sm_07");
			Menu::Option("prop_yaught_chair_01");
			Menu::Option("prop_yaught_sofa_01");
			Menu::Option("prop_bin_04a");
			Menu::Option("prop_bin_10a");
			Menu::Option("prop_bin_10b");
			Menu::Option("prop_bin_11a");
			Menu::Option("prop_bin_11b");
			Menu::Option("prop_bin_12a");
			Menu::Option("prop_bin_13a");
			Menu::Option("prop_bin_14a");
			Menu::Option("prop_bin_14b");
			Menu::Option("prop_bin_beach_01d");
			Menu::Option("prop_bin_delpiero");
			Menu::Option("prop_bin_delpiero_b");
			Menu::Option("prop_dumpster_3a");
			Menu::Option("prop_dumpster_3step");
			Menu::Option("prop_dumpster_4a");
			Menu::Option("prop_dumpster_4b");
			Menu::Option("prop_recyclebin_02a");
			Menu::Option("prop_recyclebin_02b");
			Menu::Option("prop_recyclebin_02_c");
			Menu::Option("prop_recyclebin_02_d");
			Menu::Option("prop_recyclebin_03_a");
			Menu::Option("prop_recyclebin_04_a");
			Menu::Option("prop_recyclebin_04_b");
			Menu::Option("prop_recyclebin_05_a");
			Menu::Option("prop_skip_01a");
			Menu::Option("prop_skip_02a");
			Menu::Option("prop_skip_03");
			Menu::Option("prop_skip_04");
			Menu::Option("prop_skip_05a");
			Menu::Option("prop_skip_05b");
			Menu::Option("prop_skip_06a");
			Menu::Option("prop_skip_08a");
			Menu::Option("prop_skip_08b");
			Menu::Option("prop_skip_10a");
			Menu::Option("prop_bandsaw_01");
			Menu::Option("prop_barier_conc_01b");
			Menu::Option("prop_barier_conc_01c");
			Menu::Option("prop_barier_conc_02b");
			Menu::Option("prop_barier_conc_02c");
			Menu::Option("prop_barier_conc_03a");
			Menu::Option("prop_barier_conc_04a");
			Menu::Option("prop_barier_conc_05a");
			Menu::Option("prop_barier_conc_05b");
			Menu::Option("prop_barriercrash_03");
			Menu::Option("prop_barriercrash_04");
			Menu::Option("prop_barrier_wat_01a");
			Menu::Option("prop_barrier_wat_03b");
			Menu::Option("prop_barrier_work01c");
			Menu::Option("prop_cablespool_01a");
			Menu::Option("prop_cablespool_01b");
			Menu::Option("prop_cablespool_02");
			Menu::Option("prop_cablespool_03");
			Menu::Option("prop_cablespool_04");
			Menu::Option("prop_cablespool_05");
			Menu::Option("prop_cablespool_06");
			Menu::Option("prop_cementmixer_01a");
			Menu::Option("prop_cementmixer_02a");
			Menu::Option("prop_conc_sacks_02a");
			Menu::Option("prop_conschute");
			Menu::Option("prop_consign_01c");
			Menu::Option("prop_consign_02a");
			Menu::Option("prop_conslift_base");
			Menu::Option("prop_conslift_brace");
			Menu::Option("prop_conslift_cage");
			Menu::Option("prop_conslift_door");
			Menu::Option("prop_conslift_lift");
			Menu::Option("prop_conslift_rail");
			Menu::Option("prop_conslift_rail2");
			Menu::Option("prop_conslift_steps");
			Menu::Option("prop_cons_crate");
			Menu::Option("prop_cons_plank");
			Menu::Option("prop_cons_ply01");
			Menu::Option("prop_cons_ply02");
			Menu::Option("prop_crosssaw_01");
			Menu::Option("prop_diggerbkt_01");
			Menu::Option("prop_drywallpile_01");
			Menu::Option("prop_drywallpile_02");
			Menu::Option("prop_ducktape_01");
			Menu::Option("prop_etricmotor_01");
			Menu::Option("prop_generator_02a");
			Menu::Option("prop_generator_03a");
			Menu::Option("prop_generator_04");
			Menu::Option("prop_girder_01a");
			Menu::Option("prop_logpile_05");
			Menu::Option("prop_logpile_06");
			Menu::Option("prop_logpile_06b");
			Menu::Option("prop_logpile_07");
			Menu::Option("prop_logpile_07b");
			Menu::Option("prop_log_01");
			Menu::Option("prop_log_02");
			Menu::Option("prop_log_03");
			Menu::Option("prop_medstation_02");
			Menu::Option("prop_medstation_03");
			Menu::Option("prop_medstation_04");
			Menu::Option("prop_metal_plates01");
			Menu::Option("prop_metal_plates02");
			Menu::Option("prop_oiltub_01");
			Menu::Option("prop_oiltub_02");
			Menu::Option("prop_oiltub_03");
			Menu::Option("prop_oiltub_05");
			Menu::Option("prop_oiltub_06");
			Menu::Option("prop_paints_can01");
			Menu::Option("prop_paints_can02");
			Menu::Option("prop_paints_can03");
			Menu::Option("prop_paints_can04");
			Menu::Option("prop_paints_can05");
			Menu::Option("prop_paints_can06");
			Menu::Option("prop_paints_can07");
			Menu::Option("prop_paint_brush01");
			Menu::Option("prop_paint_brush02");
			Menu::Option("prop_paint_brush03");
			Menu::Option("prop_paint_brush04");
			Menu::Option("prop_paint_brush05");
			Menu::Option("prop_paint_roller");
			Menu::Option("prop_paint_spray01a");
			Menu::Option("prop_paint_spray01b");
			Menu::Option("prop_paint_stepl01");
			Menu::Option("prop_paint_stepl01b");
			Menu::Option("prop_paint_stepl02");
			Menu::Option("prop_paint_tray");
			Menu::Option("prop_paint_wpaper01");
			Menu::Option("prop_partsbox_01");
			Menu::Option("prop_pile_dirt_01");
			Menu::Option("prop_pile_dirt_02");
			Menu::Option("prop_pile_dirt_03");
			Menu::Option("prop_pile_dirt_04");
			Menu::Option("prop_pile_dirt_06");
			Menu::Option("prop_pile_dirt_07");
			Menu::Option("prop_pipes_01a");
			Menu::Option("prop_pipes_01b");
			Menu::Option("prop_pipes_03b");
			Menu::Option("prop_pipes_04a");
			Menu::Option("prop_pipes_05a");
			Menu::Option("prop_pipes_conc_01");
			Menu::Option("prop_pipes_conc_02");
			Menu::Option("prop_planer_01");
			Menu::Option("prop_plas_barier_01a");
			Menu::Option("prop_plywoodpile_01a");
			Menu::Option("prop_plywoodpile_01b");
			Menu::Option("prop_rebar_pile01");
			Menu::Option("prop_roadcone01a");
			Menu::Option("prop_roadcone01b");
			Menu::Option("prop_roadcone01c");
			Menu::Option("prop_roadcone02a");
			Menu::Option("prop_roadcone02b");
			Menu::Option("prop_roadcone02c");
			Menu::Option("prop_roadheader_01");
			Menu::Option("prop_scafold_01a");
			Menu::Option("prop_scafold_01c");
			Menu::Option("prop_scafold_01f");
			Menu::Option("prop_scafold_02a");
			Menu::Option("prop_scafold_02c");
			Menu::Option("prop_scafold_03a");
			Menu::Option("prop_scafold_03b");
			Menu::Option("prop_scafold_03c");
			Menu::Option("prop_scafold_03f");
			Menu::Option("prop_scafold_04a");
			Menu::Option("prop_scafold_05a");
			Menu::Option("prop_scafold_06a");
			Menu::Option("prop_scafold_06b");
			Menu::Option("prop_scafold_06c");
			Menu::Option("prop_scafold_07a");
			Menu::Option("prop_scafold_08a");
			Menu::Option("prop_scafold_09a");
			Menu::Option("prop_scafold_frame1a");
			Menu::Option("prop_scafold_frame1b");
			Menu::Option("prop_scafold_frame1c");
			Menu::Option("prop_scafold_frame1f");
			Menu::Option("prop_scafold_frame2a");
			Menu::Option("prop_scafold_frame2b");
			Menu::Option("prop_scafold_frame2c");
			Menu::Option("prop_scafold_frame3a");
			Menu::Option("prop_scafold_frame3c");
			Menu::Option("prop_scafold_rail_01");
			Menu::Option("prop_scafold_rail_02");
			Menu::Option("prop_scafold_rail_03");
			Menu::Option("prop_scafold_xbrace");
			Menu::Option("prop_shuttering01");
			Menu::Option("prop_shuttering02");
			Menu::Option("prop_shuttering03");
			Menu::Option("prop_shuttering04");
			Menu::Option("prop_spraygun_01");
			Menu::Option("prop_staticmixer_01");
			Menu::Option("prop_steps_big_01");
			Menu::Option("prop_tablesaw_01");
			Menu::Option("prop_tool_adjspanner");
			Menu::Option("prop_tool_bench01");
			Menu::Option("prop_tool_bluepnt");
			Menu::Option("prop_tool_box_01");
			Menu::Option("prop_tool_box_02");
			Menu::Option("prop_tool_box_03");
			Menu::Option("prop_tool_box_04");
			Menu::Option("prop_tool_box_05");
			Menu::Option("prop_tool_box_06");
			Menu::Option("prop_tool_box_07");
			Menu::Option("prop_tool_broom");
			Menu::Option("prop_tool_broom2");
			Menu::Option("prop_tool_broom2_l1");
			Menu::Option("prop_tool_cable01");
			Menu::Option("prop_tool_cable02");
			Menu::Option("prop_tool_consaw");
			Menu::Option("prop_tool_drill");
			Menu::Option("prop_tool_fireaxe");
			Menu::Option("prop_tool_hammer");
			Menu::Option("prop_tool_hardhat");
			Menu::Option("prop_tool_jackham");
			Menu::Option("prop_tool_mallet");
			Menu::Option("prop_tool_mopbucket");
			Menu::Option("prop_tool_nailgun");
			Menu::Option("prop_tool_pickaxe");
			Menu::Option("prop_tool_pliers");
			Menu::Option("prop_tool_rake");
			Menu::Option("prop_tool_rake_l1");
			Menu::Option("prop_tool_sawhorse");
			Menu::Option("prop_tool_screwdvr01");
			Menu::Option("prop_tool_screwdvr02");
			Menu::Option("prop_tool_screwdvr03");
			Menu::Option("prop_tool_shovel");
			Menu::Option("prop_tool_shovel006");
			Menu::Option("prop_tool_shovel2");
			Menu::Option("prop_tool_shovel3");
			Menu::Option("prop_tool_shovel4");
			Menu::Option("prop_tool_shovel5");
			Menu::Option("prop_tool_sledgeham");
			Menu::Option("prop_tool_spanner01");
			Menu::Option("prop_tool_spanner02");
			Menu::Option("prop_tool_spanner03");
			Menu::Option("prop_tool_torch");
			Menu::Option("prop_tool_wrench");
			Menu::Option("prop_towercrane_01a");
			Menu::Option("prop_towercrane_02a");
			Menu::Option("prop_towercrane_02b");
			Menu::Option("prop_towercrane_02c");
			Menu::Option("prop_towercrane_02d");
			Menu::Option("prop_towercrane_02e");
			Menu::Option("prop_towercrane_02el");
			Menu::Option("prop_towercrane_02el2");
			Menu::Option("prop_tunnel_liner01");
			Menu::Option("prop_tunnel_liner02");
			Menu::Option("prop_tunnel_liner03");
			Menu::Option("prop_vertdrill_01");
			Menu::Option("prop_wheelbarrow01a");
			Menu::Option("prop_wheelbarrow02a");
			Menu::Option("prop_woodpile_02a");
			Menu::Option("prop_worklight_01a_l1");
			Menu::Option("prop_worklight_03a_l1");
			Menu::Option("prop_worklight_03b_l1");
			Menu::Option("prop_worklight_04a");
			Menu::Option("prop_worklight_04b_l1");
			Menu::Option("prop_worklight_04c_l1");
			Menu::Option("prop_worklight_04d_l1");
			Menu::Option("prop_workwall_01");
			Menu::Option("prop_workwall_02");
			Menu::Option("prop_armenian_gate");
			Menu::Option("prop_arm_gate_l");
			Menu::Option("prop_const_fence01a");
			Menu::Option("prop_const_fence01b");
			Menu::Option("prop_const_fence02a");
			Menu::Option("prop_const_fence02b");
			Menu::Option("prop_const_fence03b");
			Menu::Option("prop_facgate_01");
			Menu::Option("prop_facgate_01b");
			Menu::Option("prop_facgate_02pole");
			Menu::Option("prop_facgate_02_l");
			Menu::Option("prop_facgate_03post");
			Menu::Option("prop_facgate_03_l");
			Menu::Option("prop_facgate_03_ld_l");
			Menu::Option("prop_facgate_03_ld_r");
			Menu::Option("prop_facgate_03_r");
			Menu::Option("prop_facgate_04_l");
			Menu::Option("prop_facgate_04_r");
			Menu::Option("prop_facgate_05_r");
			Menu::Option("prop_facgate_05_r_dam_l1");
			Menu::Option("prop_facgate_05_r_l1");
			Menu::Option("prop_facgate_06_l");
			Menu::Option("prop_facgate_06_r");
			Menu::Option("prop_facgate_07");
			Menu::Option("prop_facgate_07b");
			Menu::Option("prop_facgate_08");
			Menu::Option("prop_facgate_08_frame");
			Menu::Option("prop_facgate_08_ld2");
			Menu::Option("prop_facgate_id1_27");
			Menu::Option("prop_fence_log_01");
			Menu::Option("prop_fence_log_02");
			Menu::Option("prop_fncconstruc_02a");
			Menu::Option("prop_fnclog_01a");
			Menu::Option("prop_fnclog_01b");
			Menu::Option("prop_fncpeir_03a");
			Menu::Option("prop_fncres_02a");
			Menu::Option("prop_fncres_02b");
			Menu::Option("prop_fncres_02c");
			Menu::Option("prop_fncres_02d");
			Menu::Option("prop_fncres_02_gate1");
			Menu::Option("prop_fncres_03gate1");
			Menu::Option("prop_fncres_05c_l1");
			Menu::Option("prop_fncsec_01a");
			Menu::Option("prop_fncsec_01b");
			Menu::Option("prop_fncsec_01crnr");
			Menu::Option("prop_fncsec_01gate");
			Menu::Option("prop_fncsec_01pole");
			Menu::Option("prop_fncsec_02a");
			Menu::Option("prop_fncsec_02pole");
			Menu::Option("prop_fncwood_07gate1");
			Menu::Option("prop_fncwood_11a_l1");
			Menu::Option("prop_fncwood_16a");
			Menu::Option("prop_fncwood_16b");
			Menu::Option("prop_fncwood_16c");
			Menu::Option("prop_fncwood_18a");
			Menu::Option("prop_gatecom_02");
			Menu::Option("prop_gate_airport_01");
			Menu::Option("prop_gate_cult_01_l");
			Menu::Option("prop_gate_cult_01_r");
			Menu::Option("prop_gate_docks_ld");
			Menu::Option("prop_gate_farm_01a");
			Menu::Option("prop_gate_farm_post");
			Menu::Option("prop_gate_frame_01");
			Menu::Option("prop_gate_frame_02");
			Menu::Option("prop_gate_frame_04");
			Menu::Option("prop_gate_frame_05");
			Menu::Option("prop_gate_frame_06");
			Menu::Option("prop_gate_military_01");
			Menu::Option("prop_gate_prison_01");
			Menu::Option("prop_gate_tep_01_l");
			Menu::Option("prop_gate_tep_01_r");
			Menu::Option("prop_ld_balcfnc_01a");
			Menu::Option("prop_ld_balcfnc_02a");
			Menu::Option("prop_ld_balcfnc_02c");
			Menu::Option("prop_lrggate_01c_l");
			Menu::Option("prop_lrggate_01c_r");
			Menu::Option("prop_lrggate_01_l");
			Menu::Option("prop_lrggate_01_pst");
			Menu::Option("prop_lrggate_01_r");
			Menu::Option("prop_lrggate_02_ld");
			Menu::Option("prop_lrggate_03a");
			Menu::Option("prop_lrggate_03b");
			Menu::Option("prop_lrggate_03b_ld");
			Menu::Option("prop_lrggate_04a");
			Menu::Option("prop_lrggate_05a");
			Menu::Option("prop_lrggate_06a");
			Menu::Option("prop_fnccorgm_05a");
			Menu::Option("prop_fnccorgm_05b");
			Menu::Option("prop_fnccorgm_06a");
			Menu::Option("prop_fnccorgm_06b");
			Menu::Option("prop_fnclink_01gate1");
			Menu::Option("prop_fnclink_02gate1");
			Menu::Option("prop_fnclink_02gate2");
			Menu::Option("prop_fnclink_02gate5");
			Menu::Option("prop_fnclink_02gate6_l");
			Menu::Option("prop_fnclink_02gate6_r");
			Menu::Option("prop_fnclink_02gate7");
			Menu::Option("prop_fnclink_03gate1");
			Menu::Option("prop_fnclink_03gate2");
			Menu::Option("prop_fnclink_03gate4");
			Menu::Option("prop_fnclink_03gate5");
			Menu::Option("prop_fnclink_04gate1");
			Menu::Option("prop_fnclink_04h_l2");
			Menu::Option("prop_fnclink_06gate2");
			Menu::Option("prop_fnclink_06gate3");
			Menu::Option("prop_fnclink_06gatepost");
			Menu::Option("prop_fnclink_07gate1");
			Menu::Option("prop_fnclink_07gate2");
			Menu::Option("prop_fnclink_07gate3");
			Menu::Option("prop_fnclink_09gate1");
			Menu::Option("prop_fnclink_10a");
			Menu::Option("prop_fnclink_10b");
			Menu::Option("prop_fnclink_10c");
			Menu::Option("prop_fnclink_10d");
			Menu::Option("prop_fnclink_10e");
			Menu::Option("prop_fncsec_04a");
			Menu::Option("prop_gate_bridge_ld");
			Menu::Option("prop_hobo_stove_01");
			Menu::Option("prop_homeless_matress_01");
			Menu::Option("prop_homeless_matress_02");
			Menu::Option("prop_pizza_box_01");
			Menu::Option("prop_pizza_box_02");
			Menu::Option("prop_rub_bike_01");
			Menu::Option("prop_rub_bike_02");
			Menu::Option("prop_rub_bike_03");
			Menu::Option("prop_rub_busdoor_01");
			Menu::Option("prop_rub_busdoor_02");
			Menu::Option("prop_rub_buswreck_01");
			Menu::Option("prop_rub_buswreck_03");
			Menu::Option("prop_rub_buswreck_06");
			Menu::Option("prop_rub_cabinet");
			Menu::Option("prop_rub_cabinet01");
			Menu::Option("prop_rub_cabinet02");
			Menu::Option("prop_rub_cabinet03");
			Menu::Option("prop_rub_cage01a");
			Menu::Option("prop_rub_carpart_02");
			Menu::Option("prop_rub_carpart_03");
			Menu::Option("prop_rub_carpart_04");
			Menu::Option("prop_rub_chassis_01");
			Menu::Option("prop_rub_chassis_02");
			Menu::Option("prop_rub_chassis_03");
			Menu::Option("prop_rub_cont_01a");
			Menu::Option("prop_rub_cont_01b");
			Menu::Option("prop_rub_cont_01c");
			Menu::Option("prop_rub_flotsam_01");
			Menu::Option("prop_rub_flotsam_02");
			Menu::Option("prop_rub_flotsam_03");
			Menu::Option("prop_rub_frklft");
			Menu::Option("prop_rub_litter_01");
			Menu::Option("prop_rub_litter_02");
			Menu::Option("prop_rub_litter_03");
			Menu::Option("prop_rub_litter_03b");
			Menu::Option("prop_rub_litter_03c");
			Menu::Option("prop_rub_litter_04");
			Menu::Option("prop_rub_litter_04b");
			Menu::Option("prop_rub_litter_05");
			Menu::Option("prop_rub_litter_06");
			Menu::Option("prop_rub_litter_07");
			Menu::Option("prop_rub_litter_09");
			Menu::Option("prop_rub_litter_8");
			Menu::Option("prop_rub_matress_01");
			Menu::Option("prop_rub_matress_02");
			Menu::Option("prop_rub_matress_03");
			Menu::Option("prop_rub_matress_04");
			Menu::Option("prop_rub_monitor");
			Menu::Option("prop_rub_pile_01");
			Menu::Option("prop_rub_pile_02");
			Menu::Option("prop_rub_planks_01");
			Menu::Option("prop_rub_planks_02");
			Menu::Option("prop_rub_planks_03");
			Menu::Option("prop_rub_planks_04");
			Menu::Option("prop_rub_railwreck_1");
			Menu::Option("prop_rub_railwreck_2");
			Menu::Option("prop_rub_railwreck_3");
			Menu::Option("prop_rub_scrap_02");
			Menu::Option("prop_rub_scrap_03");
			Menu::Option("prop_rub_scrap_04");
			Menu::Option("prop_rub_scrap_05");
			Menu::Option("prop_rub_scrap_06");
			Menu::Option("prop_rub_scrap_07");
			Menu::Option("prop_rub_stool");
			Menu::Option("prop_rub_sunktyre");
			Menu::Option("prop_rub_t34");
			Menu::Option("prop_rub_trainers_01");
			Menu::Option("prop_rub_trolley01a");
			Menu::Option("prop_rub_trolley02a");
			Menu::Option("prop_rub_trolley03a");
			Menu::Option("prop_rub_trukwreck_1");
			Menu::Option("prop_rub_trukwreck_2");
			Menu::Option("prop_rub_tyre_01");
			Menu::Option("prop_rub_tyre_02");
			Menu::Option("prop_rub_tyre_03");
			Menu::Option("prop_rub_tyre_dam1");
			Menu::Option("prop_rub_tyre_dam2");
			Menu::Option("prop_rub_tyre_dam3");
			Menu::Option("prop_rub_washer_01");
			Menu::Option("prop_rub_wheel_01");
			Menu::Option("prop_rub_wheel_02");
			Menu::Option("prop_rub_wreckage_3");
			Menu::Option("prop_rub_wreckage_4");
			Menu::Option("prop_rub_wreckage_5");
			Menu::Option("prop_rub_wreckage_6");
			Menu::Option("prop_rub_wreckage_7");
			Menu::Option("prop_rub_wreckage_8");
			Menu::Option("prop_rub_wreckage_9");
			Menu::Option("prop_skid_chair_01");
			Menu::Option("prop_skid_chair_02");
			Menu::Option("prop_skid_chair_03");
			Menu::Option("prop_skid_sleepbag_1");
			Menu::Option("prop_skid_tent_01");
			Menu::Option("prop_skid_tent_01b");
			Menu::Option("prop_skid_tent_03");
			Menu::Option("prop_still");
			Menu::Option("prop_bench_01b");
			Menu::Option("prop_bench_01c");
			Menu::Option("prop_bench_04");
			Menu::Option("prop_bench_05");
			Menu::Option("prop_bench_09");
			Menu::Option("prop_chair_01a");
			Menu::Option("prop_chair_01b");
			Menu::Option("prop_chair_02");
			Menu::Option("prop_chair_03");
			Menu::Option("prop_chair_04a");
			Menu::Option("prop_chair_04b");
			Menu::Option("prop_chair_05");
			Menu::Option("prop_chair_06");
			Menu::Option("prop_chair_07");
			Menu::Option("prop_chair_08");
			Menu::Option("prop_chair_09");
			Menu::Option("prop_chair_10");
			Menu::Option("prop_chair_pile_01");
			Menu::Option("prop_chateau_chair_01");
			Menu::Option("prop_clown_chair");
			Menu::Option("prop_old_deck_chair");
			Menu::Option("prop_old_deck_chair_02");
			Menu::Option("prop_old_wood_chair");
			Menu::Option("prop_old_wood_chair_lod");
			Menu::Option("prop_parasol_01");
			Menu::Option("prop_parasol_01_b");
			Menu::Option("prop_parasol_01_c");
			Menu::Option("prop_parasol_01_down");
			Menu::Option("prop_parasol_02");
			Menu::Option("prop_parasol_02_b");
			Menu::Option("prop_parasol_02_c");
			Menu::Option("prop_parasol_03");
			Menu::Option("prop_parasol_03_b");
			Menu::Option("prop_parasol_03_c");
			Menu::Option("prop_parasol_04e");
			Menu::Option("prop_parasol_04e_lod1");
			Menu::Option("prop_parasol_bh_48");
			Menu::Option("prop_patio_heater_01");
			Menu::Option("prop_patio_lounger1");
			Menu::Option("prop_patio_lounger1b");
			Menu::Option("prop_patio_lounger1_table");
			Menu::Option("prop_patio_lounger_2");
			Menu::Option("prop_patio_lounger_3");
			Menu::Option("prop_picnictable_02");
			Menu::Option("prop_proxy_chateau_table");
			Menu::Option("prop_stool_01");
			Menu::Option("prop_table_02");
			Menu::Option("prop_table_03b_cs");
			Menu::Option("prop_table_04");
			Menu::Option("prop_table_04_chr");
			Menu::Option("prop_table_05");
			Menu::Option("prop_table_05_chr");
			Menu::Option("prop_table_06");
			Menu::Option("prop_table_06_chr");
			Menu::Option("prop_table_07");
			Menu::Option("prop_table_07_l1");
			Menu::Option("prop_table_08");
			Menu::Option("prop_table_08_chr");
			Menu::Option("prop_table_08_side");
			Menu::Option("prop_table_para_comb_04");
			Menu::Option("prop_umpire_01");
			Menu::Option("prop_afsign_amun");
			Menu::Option("prop_afsign_vbike");
			Menu::Option("prop_beer_neon_01");
			Menu::Option("prop_beer_neon_02");
			Menu::Option("prop_beer_neon_03");
			Menu::Option("prop_beer_neon_04");
			Menu::Option("prop_billboard_01");
			Menu::Option("prop_billboard_02");
			Menu::Option("prop_billboard_03");
			Menu::Option("prop_billboard_04");
			Menu::Option("prop_billboard_05");
			Menu::Option("prop_billboard_06");
			Menu::Option("prop_billboard_07");
			Menu::Option("prop_billboard_08");
			Menu::Option("prop_billboard_09");
			Menu::Option("prop_billboard_09wall");
			Menu::Option("prop_billboard_10");
			Menu::Option("prop_billboard_11");
			Menu::Option("prop_billboard_12");
			Menu::Option("prop_billboard_13");
			Menu::Option("prop_billboard_14");
			Menu::Option("prop_billboard_15");
			Menu::Option("prop_billboard_16");
			Menu::Option("prop_gas_01");
			Menu::Option("prop_gas_02");
			Menu::Option("prop_gas_03");
			Menu::Option("prop_gas_04");
			Menu::Option("prop_gas_05");
			Menu::Option("prop_pharm_sign_01");
			Menu::Option("prop_sign_airp_01a");
			Menu::Option("prop_sign_airp_02a");
			Menu::Option("prop_sign_airp_02b");
			Menu::Option("prop_sign_big_01");
			Menu::Option("prop_sign_road_04g_l1");
			Menu::Option("prop_barrel_01a");
			Menu::Option("prop_barrel_02a");
			Menu::Option("prop_barrel_02b");
			Menu::Option("prop_barrel_03a");
			Menu::Option("prop_barrel_03d");
			Menu::Option("prop_boxpile_10a");
			Menu::Option("prop_boxpile_10b");
			Menu::Option("prop_box_ammo01a");
			Menu::Option("prop_box_ammo02a");
			Menu::Option("prop_box_ammo03a_set");
			Menu::Option("prop_box_ammo03a_set2");
			Menu::Option("prop_box_ammo04a");
			Menu::Option("prop_box_ammo05b");
			Menu::Option("prop_box_ammo07a");
			Menu::Option("prop_box_ammo07b");
			Menu::Option("prop_box_guncase_01a");
			Menu::Option("prop_box_guncase_02a");
			Menu::Option("prop_box_guncase_03a");
			Menu::Option("prop_box_tea01a");
			Menu::Option("prop_box_wood05a");
			Menu::Option("prop_box_wood05b");
			Menu::Option("prop_box_wood08a");
			Menu::Option("prop_buckets_02");
			Menu::Option("prop_bucket_01a");
			Menu::Option("prop_bucket_01b");
			Menu::Option("prop_bucket_02a");
			Menu::Option("prop_cntrdoor_ld_l");
			Menu::Option("prop_cntrdoor_ld_r");
			Menu::Option("prop_container_01a");
			Menu::Option("prop_container_01b");
			Menu::Option("prop_container_01c");
			Menu::Option("prop_container_01d");
			Menu::Option("prop_container_01e");
			Menu::Option("prop_container_01f");
			Menu::Option("prop_container_01g");
			Menu::Option("prop_container_01h");
			Menu::Option("prop_container_01mb");
			Menu::Option("prop_container_02a");
			Menu::Option("prop_container_03a");
			Menu::Option("prop_container_03b");
			Menu::Option("prop_container_03mb");
			Menu::Option("prop_container_03_ld");
			Menu::Option("prop_container_04a");
			Menu::Option("prop_container_04mb");
			Menu::Option("prop_container_05mb");
			Menu::Option("prop_container_door_mb_l");
			Menu::Option("prop_container_door_mb_r");
			Menu::Option("prop_container_ld");
			Menu::Option("prop_container_ld2");
			Menu::Option("prop_container_old1");
			Menu::Option("prop_contnr_pile_01a");
			Menu::Option("prop_cratepile_07a_l1");
			Menu::Option("prop_crate_01a");
			Menu::Option("prop_crate_02a");
			Menu::Option("prop_crate_08a");
			Menu::Option("prop_crate_09a");
			Menu::Option("prop_crate_10a");
			Menu::Option("prop_crate_11a");
			Menu::Option("prop_crate_11b");
			Menu::Option("prop_crate_11c");
			Menu::Option("prop_crate_11d");
			Menu::Option("prop_dog_cage_01");
			Menu::Option("prop_dog_cage_02");
			Menu::Option("prop_drop_crate_01");
			Menu::Option("prop_drop_crate_01_set");
			Menu::Option("prop_drop_crate_01_set2");
			Menu::Option("prop_flattrailer_01a");
			Menu::Option("prop_flattruck_01a");
			Menu::Option("prop_fruitstand_b_nite");
			Menu::Option("prop_gascage01");
			Menu::Option("prop_keg_01");
			Menu::Option("prop_mb_crate_01a_set");
			Menu::Option("prop_pallettruck_01");
			Menu::Option("prop_sacktruck_01");
			Menu::Option("prop_sacktruck_02a");
			Menu::Option("prop_shelves_01");
			Menu::Option("prop_shelves_02");
			Menu::Option("prop_shelves_03");
			Menu::Option("prop_truktrailer_01a");
			Menu::Option("prop_warehseshelf01");
			Menu::Option("prop_warehseshelf02");
			Menu::Option("prop_warehseshelf03");
			Menu::Option("prop_watercrate_01");
			Menu::Option("prop_chall_lamp_01");
			Menu::Option("prop_chall_lamp_01n");
			Menu::Option("prop_chall_lamp_02");
			Menu::Option("prop_construcionlamp_01");
			Menu::Option("prop_dt1_13_groundlight");
			Menu::Option("prop_dt1_13_walllightsource");
			Menu::Option("prop_ind_light_01a");
			Menu::Option("prop_ind_light_01b");
			Menu::Option("prop_ind_light_01c");
			Menu::Option("prop_securityvan_lightrig");
			Menu::Option("prop_traffic_rail_1c");
			Menu::Option("prop_traffic_rail_2");
			Menu::Option("prop_walllight_ld_01b");
			Menu::Option("prop_wall_light_08a");
			Menu::Option("prop_wall_light_10a");
			Menu::Option("prop_wall_light_10b");
			Menu::Option("prop_wall_light_10c");
			Menu::Option("prop_wall_light_11");
			Menu::Option("prop_wall_light_12");
			Menu::Option("prop_wall_light_17b");
			Menu::Option("prop_wall_light_18a");
			Menu::Option("prop_warninglight_01");
			Menu::Option("prop_atm_02");
			Menu::Option("prop_atm_03");
			Menu::Option("prop_bikerack_2");
			Menu::Option("prop_bollard_01a");
			Menu::Option("prop_bollard_01b");
			Menu::Option("prop_bollard_01c");
			Menu::Option("prop_bollard_03a");
			Menu::Option("prop_elecbox_03a");
			Menu::Option("prop_elecbox_10");
			Menu::Option("prop_elecbox_12");
			Menu::Option("prop_elecbox_13");
			Menu::Option("prop_elecbox_14");
			Menu::Option("prop_elecbox_15");
			Menu::Option("prop_elecbox_16");
			Menu::Option("prop_elecbox_17");
			Menu::Option("prop_elecbox_18");
			Menu::Option("prop_elecbox_19");
			Menu::Option("prop_elecbox_20");
			Menu::Option("prop_elecbox_21");
			Menu::Option("prop_elecbox_22");
			Menu::Option("prop_elecbox_23");
			Menu::Option("prop_elecbox_24");
			Menu::Option("prop_elecbox_24b");
			Menu::Option("prop_elecbox_25");
			Menu::Option("prop_fire_driser_1a");
			Menu::Option("prop_fire_driser_1b");
			Menu::Option("prop_fire_driser_2b");
			Menu::Option("prop_fire_driser_3b");
			Menu::Option("prop_fire_driser_4a");
			Menu::Option("prop_fire_driser_4b");
			Menu::Option("prop_fire_hosereel");
			Menu::Option("prop_fleeca_atm");
			Menu::Option("prop_gshotsensor_01");
			Menu::Option("prop_mobile_mast_1");
			Menu::Option("prop_mobile_mast_2");
			Menu::Option("prop_parking_sign_06");
			Menu::Option("prop_parking_sign_07");
			Menu::Option("prop_parking_sign_1");
			Menu::Option("prop_parking_sign_2");
			Menu::Option("prop_phonebox_05a");
			Menu::Option("prop_telegraph_01a");
			Menu::Option("prop_telegraph_01b");
			Menu::Option("prop_telegraph_01c");
			Menu::Option("prop_telegraph_01d");
			Menu::Option("prop_telegraph_01e");
			Menu::Option("prop_telegraph_01f");
			Menu::Option("prop_telegraph_01g");
			Menu::Option("prop_telegraph_02a");
			Menu::Option("prop_telegraph_02b");
			Menu::Option("prop_telegraph_03");
			Menu::Option("prop_telegraph_04a");
			Menu::Option("prop_telegraph_04b");
			Menu::Option("prop_telegraph_05a");
			Menu::Option("prop_telegraph_05b");
			Menu::Option("prop_telegraph_05c");
			Menu::Option("prop_telegraph_06a");
			Menu::Option("prop_telegraph_06b");
			Menu::Option("prop_telegraph_06c");
			Menu::Option("prop_telegwall_01a");
			Menu::Option("prop_telegwall_01b");
			Menu::Option("prop_telegwall_02a");
			Menu::Option("prop_telegwall_03a");
			Menu::Option("prop_telegwall_03b");
			Menu::Option("prop_telegwall_04a");
			Menu::Option("prop_tram_pole_double01");
			Menu::Option("prop_tram_pole_double02");
			Menu::Option("prop_tram_pole_double03");
			Menu::Option("prop_tram_pole_roadside");
			Menu::Option("prop_tram_pole_single01");
			Menu::Option("prop_tram_pole_single02");
			Menu::Option("prop_tram_pole_wide01");
			Menu::Option("prop_tyre_rack_01");
			Menu::Option("prop_valet_03");
			Menu::Option("prop_cartwheel_01");
			Menu::Option("prop_cattlecrush");
			Menu::Option("prop_chickencoop_a");
			Menu::Option("prop_feeder1");
			Menu::Option("prop_grain_hopper");
			Menu::Option("prop_handrake");
			Menu::Option("prop_haybailer_01");
			Menu::Option("prop_haybale_01");
			Menu::Option("prop_haybale_02");
			Menu::Option("prop_haybale_stack_01");
			Menu::Option("prop_hunterhide");
			Menu::Option("prop_oldplough1");
			Menu::Option("prop_old_churn_01");
			Menu::Option("prop_old_churn_02");
			Menu::Option("prop_old_farm_01");
			Menu::Option("prop_old_farm_02");
			Menu::Option("prop_potatodigger");
			Menu::Option("prop_roundbailer01");
			Menu::Option("prop_roundbailer02");
			Menu::Option("prop_rural_windmill_l1");
			Menu::Option("prop_rural_windmill_l2");
			Menu::Option("prop_scythemower");
			Menu::Option("prop_side_spreader");
			Menu::Option("prop_snow_bailer_01");
			Menu::Option("prop_snow_barrel_pile_03");
			Menu::Option("prop_snow_bench_01");
			Menu::Option("prop_snow_bin_01");
			Menu::Option("prop_snow_bin_02");
			Menu::Option("prop_snow_cam_03");
			Menu::Option("prop_snow_cam_03a");
			Menu::Option("prop_snow_diggerbkt_01");
			Menu::Option("prop_snow_dumpster_01");
			Menu::Option("prop_snow_elecbox_16");
			Menu::Option("prop_snow_facgate_01");
			Menu::Option("prop_snow_flower_01");
			Menu::Option("prop_snow_flower_02");
			Menu::Option("prop_snow_fnclink_03crnr2");
			Menu::Option("prop_snow_fnclink_03h");
			Menu::Option("prop_snow_fnclink_03i");
			Menu::Option("prop_snow_fncwood_14a");
			Menu::Option("prop_snow_fncwood_14b");
			Menu::Option("prop_snow_fncwood_14c");
			Menu::Option("prop_snow_fncwood_14d");
			Menu::Option("prop_snow_fncwood_14e");
			Menu::Option("prop_snow_fnc_01");
			Menu::Option("prop_snow_gate_farm_03");
			Menu::Option("prop_snow_grain_01");
			Menu::Option("prop_snow_light_01");
			Menu::Option("prop_snow_oldlight_01b");
			Menu::Option("prop_snow_rail_signals02");
			Menu::Option("prop_snow_rub_trukwreck_2");
			Menu::Option("prop_snow_side_spreader_01");
			Menu::Option("prop_snow_streetlight01");
			Menu::Option("prop_snow_streetlight_01_frag_");
			Menu::Option("prop_snow_sub_frame_01a");
			Menu::Option("prop_snow_sub_frame_04b");
			Menu::Option("prop_snow_telegraph_01a");
			Menu::Option("prop_snow_telegraph_02a");
			Menu::Option("prop_snow_telegraph_03");
			Menu::Option("prop_snow_traffic_rail_1a");
			Menu::Option("prop_snow_traffic_rail_1b");
			Menu::Option("prop_snow_trailer01");
			Menu::Option("prop_snow_truktrailer_01a");
			Menu::Option("prop_snow_tyre_01");
			Menu::Option("prop_snow_wall_light_15a");
			Menu::Option("prop_snow_watertower01");
			Menu::Option("prop_snow_watertower01_l2");
			Menu::Option("prop_snow_watertower03");
			Menu::Option("prop_snow_woodpile_04a");
			Menu::Option("prop_sprayer");
			Menu::Option("prop_trailer01");
			Menu::Option("prop_trailer01_up");
			Menu::Option("prop_trough1");
			Menu::Option("prop_waterwheela");
			Menu::Option("prop_waterwheelb");
			Menu::Option("prop_wreckedcart");
			Menu::Option("prop_am_box_wood_01");
			Menu::Option("prop_bush_ivy_01_1m");
			Menu::Option("prop_bush_ivy_01_2m");
			Menu::Option("prop_bush_ivy_01_bk");
			Menu::Option("prop_bush_ivy_01_l");
			Menu::Option("prop_bush_ivy_01_pot");
			Menu::Option("prop_bush_ivy_01_r");
			Menu::Option("prop_bush_ivy_01_top");
			Menu::Option("prop_bush_ivy_02_1m");
			Menu::Option("prop_bush_ivy_02_2m");
			Menu::Option("prop_bush_ivy_02_l");
			Menu::Option("prop_bush_ivy_02_pot");
			Menu::Option("prop_bush_ivy_02_r");
			Menu::Option("prop_bush_ivy_02_top");
			Menu::Option("prop_bush_lrg_01");
			Menu::Option("prop_bush_lrg_01b");
			Menu::Option("prop_bush_lrg_01c");
			Menu::Option("prop_bush_lrg_01d");
			Menu::Option("prop_bush_lrg_01e");
			Menu::Option("prop_bush_lrg_02");
			Menu::Option("prop_bush_lrg_02b");
			Menu::Option("prop_bush_lrg_03");
			Menu::Option("prop_bush_lrg_03b");
			Menu::Option("prop_bush_lrg_04b");
			Menu::Option("prop_bush_lrg_04c");
			Menu::Option("prop_bush_lrg_04d");
			Menu::Option("prop_bush_med_01");
			Menu::Option("prop_bush_med_02");
			Menu::Option("prop_bush_med_03");
			Menu::Option("prop_bush_med_05");
			Menu::Option("prop_bush_med_06");
			Menu::Option("prop_bush_med_07");
			Menu::Option("prop_bush_neat_01");
			Menu::Option("prop_bush_neat_02");
			Menu::Option("prop_bush_neat_03");
			Menu::Option("prop_bush_neat_04");
			Menu::Option("prop_bush_neat_05");
			Menu::Option("prop_bush_neat_06");
			Menu::Option("prop_bush_neat_07");
			Menu::Option("prop_bush_neat_08");
			Menu::Option("prop_bush_ornament_01");
			Menu::Option("prop_bush_ornament_02");
			Menu::Option("prop_bush_ornament_03");
			Menu::Option("prop_bush_ornament_04");
			Menu::Option("prop_creosote_b_01");
			Menu::Option("prop_desert_iron_01");
			Menu::Option("prop_plant_group_01");
			Menu::Option("prop_plant_group_02");
			Menu::Option("prop_plant_group_03");
			Menu::Option("prop_plant_group_04");
			Menu::Option("prop_plant_group_05");
			Menu::Option("prop_plant_group_05b");
			Menu::Option("prop_plant_group_05c");
			Menu::Option("prop_plant_group_05d");
			Menu::Option("prop_plant_group_06a");
			Menu::Option("prop_plant_group_06b");
			Menu::Option("prop_plant_group_06c");
			Menu::Option("prop_skunk_bush_01");
			Menu::Option("prop_bush_grape_01");
			Menu::Option("prop_coral_bush_01");
			Menu::Option("prop_coral_flat_01");
			Menu::Option("prop_coral_flat_01_l1");
			Menu::Option("prop_coral_flat_02");
			Menu::Option("prop_coral_flat_brainy");
			Menu::Option("prop_coral_flat_clam");
			Menu::Option("prop_coral_grass_01");
			Menu::Option("prop_coral_grass_02");
			Menu::Option("prop_coral_kelp_01");
			Menu::Option("prop_coral_kelp_01_l1");
			Menu::Option("prop_coral_kelp_02");
			Menu::Option("prop_coral_kelp_02_l1");
			Menu::Option("prop_coral_kelp_03");
			Menu::Option("prop_coral_kelp_03a");
			Menu::Option("prop_coral_kelp_03b");
			Menu::Option("prop_coral_kelp_03c");
			Menu::Option("prop_coral_kelp_03d");
			Menu::Option("prop_coral_kelp_03_l1");
			Menu::Option("prop_coral_kelp_04");
			Menu::Option("prop_coral_kelp_04_l1");
			Menu::Option("prop_coral_pillar_01");
			Menu::Option("prop_coral_pillar_02");
			Menu::Option("prop_coral_spikey_01");
			Menu::Option("prop_coral_stone_03");
			Menu::Option("prop_coral_stone_04");
			Menu::Option("prop_coral_sweed_01");
			Menu::Option("prop_coral_sweed_02");
			Menu::Option("prop_coral_sweed_03");
			Menu::Option("prop_coral_sweed_04");
			Menu::Option("prop_cora_clam_01");
			Menu::Option("prop_tree_birch_05");
			Menu::Option("prop_veg_corn_01");
			Menu::Option("prop_veg_crop_01");
			Menu::Option("prop_veg_crop_02");
			Menu::Option("prop_veg_crop_04");
			Menu::Option("prop_veg_crop_04_leaf");
			Menu::Option("prop_veg_crop_05");
			Menu::Option("prop_veg_crop_06");
			Menu::Option("prop_veg_crop_orange");
			Menu::Option("prop_veg_crop_tr_01");
			Menu::Option("prop_veg_crop_tr_02");
			Menu::Option("prop_agave_01");
			Menu::Option("prop_agave_02");
			Menu::Option("prop_aloevera_01");
			Menu::Option("prop_bush_dead_02");
			Menu::Option("prop_cat_tail_01");
			Menu::Option("prop_cs_plant_01");
			Menu::Option("prop_grass_dry_02");
			Menu::Option("prop_grass_dry_03");
			Menu::Option("prop_plant_01a");
			Menu::Option("prop_plant_01b");
			Menu::Option("prop_plant_base_01");
			Menu::Option("prop_plant_base_02");
			Menu::Option("prop_plant_base_03");
			Menu::Option("prop_plant_cane_01a");
			Menu::Option("prop_plant_cane_01b");
			Menu::Option("prop_plant_cane_02a");
			Menu::Option("prop_plant_cane_02b");
			Menu::Option("prop_plant_clover_01");
			Menu::Option("prop_plant_clover_02");
			Menu::Option("prop_plant_fern_01a");
			Menu::Option("prop_plant_fern_01b");
			Menu::Option("prop_plant_fern_02a");
			Menu::Option("prop_plant_fern_02b");
			Menu::Option("prop_plant_fern_02c");
			Menu::Option("prop_plant_flower_01");
			Menu::Option("prop_plant_flower_02");
			Menu::Option("prop_plant_flower_03");
			Menu::Option("prop_plant_flower_04");
			Menu::Option("prop_plant_paradise");
			Menu::Option("prop_plant_paradise_b");
			Menu::Option("prop_p_spider_01a");
			Menu::Option("prop_p_spider_01c");
			Menu::Option("prop_p_spider_01d");
			Menu::Option("prop_veg_grass_01_a");
			Menu::Option("prop_veg_grass_01_b");
			Menu::Option("prop_veg_grass_01_c");
			Menu::Option("prop_veg_grass_01_d");
			Menu::Option("prop_veg_grass_02_a");
			Menu::Option("prop_fan_palm_01a");
			Menu::Option("prop_palm_fan_02_a");
			Menu::Option("prop_palm_fan_02_b");
			Menu::Option("prop_palm_fan_03_a");
			Menu::Option("prop_palm_fan_03_b");
			Menu::Option("prop_palm_fan_03_c");
			Menu::Option("prop_palm_fan_03_d");
			Menu::Option("prop_palm_fan_04_a");
			Menu::Option("prop_palm_fan_04_b");
			Menu::Option("prop_palm_fan_04_c");
			Menu::Option("prop_palm_fan_04_d");
			Menu::Option("prop_palm_huge_01a");
			Menu::Option("prop_palm_huge_01b");
			Menu::Option("prop_palm_med_01a");
			Menu::Option("prop_palm_med_01b");
			Menu::Option("prop_palm_med_01c");
			Menu::Option("prop_palm_med_01d");
			Menu::Option("prop_palm_sm_01a");
			Menu::Option("prop_palm_sm_01d");
			Menu::Option("prop_palm_sm_01e");
			Menu::Option("prop_palm_sm_01f");
			Menu::Option("prop_plant_int_02a");
			Menu::Option("prop_plant_int_02b");
			Menu::Option("prop_plant_int_05a");
			Menu::Option("prop_plant_int_05b");
			Menu::Option("prop_plant_int_06a");
			Menu::Option("prop_plant_int_06b");
			Menu::Option("prop_plant_int_06c");
			Menu::Option("prop_pot_plant_02a");
			Menu::Option("prop_pot_plant_02b");
			Menu::Option("prop_pot_plant_02c");
			Menu::Option("prop_pot_plant_02d");
			Menu::Option("prop_pot_plant_03a");
			Menu::Option("prop_pot_plant_04a");
			Menu::Option("prop_pot_plant_05d_l1");
			Menu::Option("prop_pot_plant_bh1");
			Menu::Option("prop_rock_1_a");
			Menu::Option("prop_rock_1_b");
			Menu::Option("prop_rock_1_c");
			Menu::Option("prop_rock_1_d");
			Menu::Option("prop_rock_1_e");
			Menu::Option("prop_rock_1_f");
			Menu::Option("prop_rock_1_g");
			Menu::Option("prop_rock_1_h");
			Menu::Option("prop_rock_1_i");
			Menu::Option("prop_rock_2_a");
			Menu::Option("prop_rock_2_c");
			Menu::Option("prop_rock_2_d");
			Menu::Option("prop_rock_2_f");
			Menu::Option("prop_rock_2_g");
			Menu::Option("prop_rock_3_a");
			Menu::Option("prop_rock_3_b");
			Menu::Option("prop_rock_3_c");
			Menu::Option("prop_rock_3_d");
			Menu::Option("prop_rock_3_e");
			Menu::Option("prop_rock_3_f");
			Menu::Option("prop_rock_3_g");
			Menu::Option("prop_rock_3_h");
			Menu::Option("prop_rock_3_i");
			Menu::Option("prop_rock_3_j");
			Menu::Option("prop_rock_4_c");
			Menu::Option("prop_rock_4_d");
			Menu::Option("rock_4_cl_2_1");
			Menu::Option("rock_4_cl_2_2");
			Menu::Option("prop_snow_bush_01_a");
			Menu::Option("prop_snow_bush_02_a");
			Menu::Option("prop_snow_bush_02_b");
			Menu::Option("prop_snow_bush_03");
			Menu::Option("prop_snow_bush_04");
			Menu::Option("prop_snow_bush_04b");
			Menu::Option("prop_snow_field_01");
			Menu::Option("prop_snow_field_02");
			Menu::Option("prop_snow_field_03");
			Menu::Option("prop_snow_field_04");
			Menu::Option("prop_snow_grass_01");
			Menu::Option("prop_snow_tree_03_e");
			Menu::Option("prop_snow_tree_03_h");
			Menu::Option("prop_snow_tree_03_i");
			Menu::Option("prop_snow_tree_04_d");
			Menu::Option("prop_snow_tree_04_f");
			Menu::Option("prop_snow_t_ml_01");
			Menu::Option("prop_snow_t_ml_02");
			Menu::Option("prop_snow_t_ml_03");
			Menu::Option("prop_rio_del_01");
			Menu::Option("prop_rus_olive");
			Menu::Option("prop_rus_olive_wint");
			Menu::Option("prop_s_pine_dead_01");
			Menu::Option("prop_tree_birch_01");
			Menu::Option("prop_tree_birch_02");
			Menu::Option("prop_tree_birch_03");
			Menu::Option("prop_tree_birch_03b");
			Menu::Option("prop_tree_birch_04");
			Menu::Option("prop_tree_cedar_02");
			Menu::Option("prop_tree_cedar_03");
			Menu::Option("prop_tree_cedar_04");
			Menu::Option("prop_tree_cedar_s_01");
			Menu::Option("prop_tree_cedar_s_02");
			Menu::Option("prop_tree_cedar_s_04");
			Menu::Option("prop_tree_cedar_s_05");
			Menu::Option("prop_tree_cedar_s_06");
			Menu::Option("prop_tree_cypress_01");
			Menu::Option("prop_tree_eng_oak_01");
			Menu::Option("prop_tree_eucalip_01");
			Menu::Option("prop_tree_fallen_01");
			Menu::Option("prop_tree_fallen_02");
			Menu::Option("prop_tree_fallen_pine_01");
			Menu::Option("prop_tree_jacada_01");
			Menu::Option("prop_tree_jacada_02");
			Menu::Option("prop_tree_lficus_02");
			Menu::Option("prop_tree_lficus_03");
			Menu::Option("prop_tree_lficus_05");
			Menu::Option("prop_tree_lficus_06");
			Menu::Option("prop_tree_log_01");
			Menu::Option("prop_tree_log_02");
			Menu::Option("prop_tree_maple_02");
			Menu::Option("prop_tree_maple_03");
			Menu::Option("prop_tree_mquite_01");
			Menu::Option("prop_tree_oak_01");
			Menu::Option("prop_tree_olive_01");
			Menu::Option("prop_tree_pine_01");
			Menu::Option("prop_tree_pine_02");
			Menu::Option("prop_tree_stump_01");
			Menu::Option("prop_w_r_cedar_01");
			Menu::Option("prop_w_r_cedar_dead");
			Menu::Option("w_am_baseball");
			Menu::Option("w_am_baseball_hi");
			Menu::Option("w_am_brfcase");
			Menu::Option("w_am_case");
			Menu::Option("w_am_digiscanner");
			Menu::Option("w_am_digiscanner_hi");
			Menu::Option("w_am_fire_exting");
			Menu::Option("w_am_flare");
			Menu::Option("w_am_flare_hi");
			Menu::Option("w_am_jerrycan");
			Menu::Option("w_ar_advancedrifle");
			Menu::Option("w_ar_advancedrifle_hi");
			Menu::Option("w_ar_advancedrifle_mag1");
			Menu::Option("w_ar_advancedrifle_mag2");
			Menu::Option("w_ar_assaultrifle");
			Menu::Option("w_ar_assaultrifle_hi");
			Menu::Option("w_ar_assaultrifle_mag1");
			Menu::Option("w_ar_assaultrifle_mag2");
			Menu::Option("w_ar_carbinerifle");
			Menu::Option("w_ar_carbinerifle_hi");
			Menu::Option("w_ar_carbinerifle_mag1");
			Menu::Option("w_ar_carbinerifle_mag2");
			Menu::Option("w_at_ar_afgrip");
			Menu::Option("w_at_ar_afgrip_hi");
			Menu::Option("w_at_ar_flsh");
			Menu::Option("w_at_ar_flsh_hi");
			Menu::Option("w_at_ar_supp");
			Menu::Option("w_at_ar_supp_02");
			Menu::Option("w_at_ar_supp_02_hi");
			Menu::Option("w_at_ar_supp_hi");
			Menu::Option("w_at_pi_flsh");
			Menu::Option("w_at_pi_flsh_hi");
			Menu::Option("w_at_pi_supp");
			Menu::Option("w_at_pi_supp_hi");
			Menu::Option("w_at_railcover_01");
			Menu::Option("w_at_railcover_01_hi");
			Menu::Option("w_at_scope_large");
			Menu::Option("w_at_scope_large_hi");
			Menu::Option("w_at_scope_macro");
			Menu::Option("w_at_scope_macro_hi");
			Menu::Option("w_at_scope_max");
			Menu::Option("w_at_scope_max_hi");
			Menu::Option("w_at_scope_medium");
			Menu::Option("w_at_scope_medium_hi");
			Menu::Option("w_at_scope_small");
			Menu::Option("w_at_scope_small_hi");
			Menu::Option("w_at_sr_supp");
			Menu::Option("w_at_sr_supp_hi");
			Menu::Option("w_ex_grenadefrag");
			Menu::Option("w_ex_grenadefrag_hi");
			Menu::Option("w_ex_grenadesmoke");
			Menu::Option("w_ex_molotov");
			Menu::Option("w_ex_molotov_hi");
			Menu::Option("w_ex_pe");
			Menu::Option("w_ex_pe_hi");
			Menu::Option("w_lr_40mm");
			Menu::Option("w_lr_40mm_pu");
			Menu::Option("w_lr_grenadelauncher");
			Menu::Option("w_lr_grenadelauncher_hi");
			Menu::Option("w_lr_rpg");
			Menu::Option("w_lr_rpg_hi");
			Menu::Option("w_lr_rpg_rocket");
			Menu::Option("w_lr_rpg_rocket_pu");
			Menu::Option("w_me_bat");
			Menu::Option("w_me_crowbar");
			Menu::Option("w_me_gclub");
			Menu::Option("w_me_hammer");
			Menu::Option("w_me_knife_01");
			Menu::Option("w_me_nightstick");
			Menu::Option("w_mg_combatmg");
			Menu::Option("w_mg_combatmg_hi");
			Menu::Option("w_mg_combatmg_mag1");
			Menu::Option("w_mg_combatmg_mag2");
			Menu::Option("w_mg_mg");
			Menu::Option("w_mg_mg_hi");
			Menu::Option("w_mg_mg_mag1");
			Menu::Option("w_mg_mg_mag2");
			Menu::Option("w_mg_minigun");
			Menu::Option("w_mg_minigun_hi");
			Menu::Option("w_pi_appistol");
			Menu::Option("w_pi_appistol_hi");
			Menu::Option("w_pi_appistol_mag1");
			Menu::Option("w_pi_appistol_mag2");
			Menu::Option("w_pi_combatpistol");
			Menu::Option("w_pi_combatpistol_hi");
			Menu::Option("w_pi_combatpistol_mag1");
			Menu::Option("w_pi_combatpistol_mag2");
			Menu::Option("w_pi_pistol");
			Menu::Option("w_pi_pistol50");
			Menu::Option("w_pi_pistol50_hi");
			Menu::Option("w_pi_pistol50_mag1");
			Menu::Option("w_pi_pistol50_mag2");
			Menu::Option("w_pi_pistol_hi");
			Menu::Option("w_pi_pistol_mag1");
			Menu::Option("w_pi_pistol_mag2");
			Menu::Option("w_pi_stungun");
			Menu::Option("w_pi_stungun_hi");
			Menu::Option("w_sb_assaultsmg");
			Menu::Option("w_sb_assaultsmg_hi");
			Menu::Option("w_sb_assaultsmg_mag1");
			Menu::Option("w_sb_assaultsmg_mag2");
			Menu::Option("w_sb_microsmg");
			Menu::Option("w_sb_microsmg_hi");
			Menu::Option("w_sb_microsmg_mag1");
			Menu::Option("w_sb_microsmg_mag2");
			Menu::Option("w_sb_smg");
			Menu::Option("w_sb_smg_hi");
			Menu::Option("w_sb_smg_mag1");
			Menu::Option("w_sb_smg_mag2");
			Menu::Option("w_sg_assaultshotgun");
			Menu::Option("w_sg_assaultshotgun_hi");
			Menu::Option("w_sg_assaultshotgun_mag1");
			Menu::Option("w_sg_assaultshotgun_mag2");
			Menu::Option("w_sg_bullpupshotgun");
			Menu::Option("w_sg_bullpupshotgun_hi");
			Menu::Option("w_sg_pumpshotgun");
			Menu::Option("w_sg_pumpshotgun_hi");
			Menu::Option("w_sg_sawnoff");
			Menu::Option("w_sg_sawnoff_hi");
			Menu::Option("w_sr_heavysniper");
			Menu::Option("w_sr_heavysniper_hi");
			Menu::Option("w_sr_heavysniper_mag1");
			Menu::Option("w_sr_sniperrifle");
			Menu::Option("w_sr_sniperrifle_hi");
			Menu::Option("w_sr_sniperrifle_mag1");

		}
		break;
		case ptfxpp:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~PTFX");
			Menu::Toggle("Lightning", Features::moneyeffect);
			Menu::Toggle("Clown Effects", Features::ClownLoop);
			Menu::Toggle("Firework", Features::fireworkloop);
			Menu::Toggle("Alien 1", Features::alien1);
			Menu::Toggle("Alien 2", Features::alien2);
			Menu::Toggle("Electric", Features::electric);
			Menu::Toggle("Electric Boosh", Features::electricberox);
			Menu::Toggle("Water Splash", Features::watereffect);
			Menu::Toggle("Smoke", Features::smokeeffect);
			Menu::Toggle("Ghost Rider", Features::ghosttif);

		}
		break;
		case ptfxpp1:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~PTFX");
			Menu::Toggle("Lightning", Features::moneyeffect9);
			Menu::Toggle("Clown Effects", Features::ClownLoop1);
			Menu::Toggle("Firework", Features::fireworkloop2);
			Menu::Toggle("Alien 1", Features::alien13);
			Menu::Toggle("Alien 2", Features::alien24);
			Menu::Toggle("Electric", Features::electric5);
			Menu::Toggle("Water Splash", Features::watereffect6);
			Menu::Toggle("Smoke", Features::smokeeffect7);


		}
		break;
		case ptfxveh:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~PTFX Vehicle");
			Menu::Drawing::Spriter("shopui_title_exec_vechupgrade", "shopui_title_exec_vechupgrade", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Toggle("Lightning", Features::CarLightning);
			Menu::Toggle("Clown Effects", Features::CarClownLoop);
			Menu::Toggle("Firework", Features::Carfireworkloop);
			Menu::Toggle("Alien 1", Features::Caralien1);
			Menu::Toggle("Alien 2", Features::Caralien2);
			Menu::Toggle("Electric", Features::Carelectric);
			Menu::Toggle("Burial Dirt", Features::moneyeffect15);
			Menu::Toggle("Ghost Rider", Features::ghooosoot);

			//if (Menu::Int("PTFX Size", Features::carPTFXsize, 0.0, 0.9));


		}
		break;
		case dropOnline22:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Cyrcle Drop");

			Menu::Break("~w~Cash Amount Options");



			if (Menu::Int("Amount Custom input", Features::DropAmount2, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount2 = NumberKeyboard();
				}
			}



			if (Menu::Int("Delay", Features::DropDelay, 50, 3000, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Cyrcle Drop", Features::cyrclenew, [] { Features::CyrcleNew(Features::cyrclenew); });


			Menu::Break("Models");
			dropModelsSelect();


		}
		break;
		case moneygun22:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("Money Gun");
			Menu::Drawing::Spriter("shopui_title_gr_gunmod", "shopui_title_gr_gunmod", Menu::Settings::menuX, 0.0800f, 0.21f, 0.090f, 0, Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b, Menu::Settings::titleRect.a);

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("Amount Custom input", Features::DropAmount3, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount3 = NumberKeyboard();
				}
			}

			if (Menu::Int("Delay", Features::DropDelay, 50, 1000))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}

			Menu::Toggle("~w~Money Gun", Features::moneyGundel, [] { Features::MoneyGunDel(Features::moneyGundel); });



			Menu::Break("Models");
			dropModelsSelect();


		}
		break;
		case Colours:
		{
			//Menu::DRAW_TEXTURE("shopui_title_clubhousemod", "shopui_title_clubhousemod", titlebox, 0.0800f, 0.21f, 0.090f, 0, 255, 255, 255, 255);
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Vehicle Colours");
			Menu::Int("Primary Color", Prim_, 0, 150); { int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
			VEHICLE::SET_VEHICLE_COLOURS(VehID, Prim_, Sec_);
			}
			Menu::Int("Secondary Color", Sec_, 0, 150); { int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
			VEHICLE::SET_VEHICLE_COLOURS(VehID, Prim_, Sec_);
			}

		}
		break;
		case ftpeffects:
		{

			 Menu::Title("Online Effects");
			Menu::Toggle("Looped", Features::PTLoopedO[Features::Online::selectedPlayer]);
			if (Menu::Option("Clown Appears"))Features::PTFXCALLO("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 1"))Features::PTFXCALLO("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 2"))Features::PTFXCALLO("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Firework 3"))Features::PTFXCALLO("proj_xmas_firework", "proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw", Features::Online::selectedPlayer);
			if (Menu::Option("Banknotes"))Features::PTFXCALLO("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes", Features::Online::selectedPlayer);
			if (Menu::Option("Truck Crash"))Features::PTFXCALLO("scr_fbi4", "scr_fbi4", "scr_fbi4_trucks_crash", Features::Online::selectedPlayer);
			if (Menu::Option("Ped Sliced"))Features::PTFXCALLO("scr_michael2", "scr_michael2", "scr_abattoir_ped_sliced", Features::Online::selectedPlayer);
			if (Menu::Option("Camera"))Features::PTFXCALLO("scr_rcpaparazzo1", "scr_rcpaparazzo1", "scr_rcpap1_camera", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 1"))Features::PTFXCALLO("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", Features::Online::selectedPlayer);
			if (Menu::Option("Alien 2"))Features::PTFXCALLO("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", Features::Online::selectedPlayer);
			if (Menu::Option("Electric Box"))Features::PTFXCALLO("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", Features::Online::selectedPlayer);
			if (Menu::Option("Water Splash"))Features::PTFXCALLO("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", Features::Online::selectedPlayer);
			if (Menu::Option("Bubbles"))Features::PTFXCALLO("scr_fbi5a", "scr_fbi5a", "water_splash_ped_bubbles", Features::Online::selectedPlayer);
			if (Menu::Option("Blood Entry"))Features::PTFXCALLO("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", Features::Online::selectedPlayer);
			if (Menu::Option("Sniper Impact"))Features::PTFXCALLO("scr_martin1", "scr_martin1", "scr_sol1_sniper_impact", Features::Online::selectedPlayer);
			if (Menu::Option("Dirt Throw"))Features::PTFXCALLO("core_snow", "core_snow", "cs_mich1_spade_dirt_throw", Features::Online::selectedPlayer);
			if (Menu::Option("Blood Stab"))Features::PTFXCALLO("scr_michael2", "scr_michael2", "scr_mich2_blood_stab", Features::Online::selectedPlayer);
			if (Menu::Option("Meth Smoke"))Features::PTFXCALLO("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", Features::Online::selectedPlayer);
			if (Menu::Option("Burial Dirt"))Features::PTFXCALLO("scr_reburials", "scr_reburials", "scr_burial_dirt", Features::Online::selectedPlayer);
			

		case dropOnline:
		{
			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Drop Options");

			Features::LoadPlayerInfo(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer), Features::Online::selectedPlayer);
			Menu::Title(PLAYER::GET_PLAYER_NAME(Features::Online::selectedPlayer));

			if (selecArrow) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
				GRAPHICS::DRAW_MARKER(2, coords.x, coords.y, coords.z + 1.3f, 0, 0, 0, 0, 180, 0, 0.3, 0.3, 0.3, 118, 21, 246, 200, 1, 1, 1, 0, 0, 0, 0);
			}

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("Amount Custom input", Features::DropAmount1, 1, 2500))
			{ // btw here, is key pressed is not needed, you can delete this xdd
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount1 = NumberKeyboard();
				}
			}



			if (Menu::Int("Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}




			if (Menu::Int("Delay", Features::DropDelay, 50, 3000, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}
			Menu::Int("Bags", Features::Bags, 0, 20);
			Menu::Toggle("Cash Drop", Features::savenewdrop2444[Features::Online::selectedPlayer], [] {Features::cashdrop2444(Features::savenewdrop2444[Features::Online::selectedPlayer]); });
			Menu::Toggle("Random Cash Drop", Features::geotit[Features::Online::selectedPlayer], [] {Features::titgeo(Features::geotit[Features::Online::selectedPlayer]); });
			Menu::Toggle("Cyrcle Drop", Features::cyrcleon[Features::Online::selectedPlayer], [] {Features::Cyrclelon(Features::cyrcleon[Features::Online::selectedPlayer]); });
			Menu::Toggle("Money Fake Drop", Features::moneyguntogglesfake[Features::Online::selectedPlayer], [] {Features::OtherPlayerMoneyGunfakse(Features::moneyguntogglesfake[Features::Online::selectedPlayer]); });


			Menu::Break("Models");
			dropModelsSelect();


		}
		break;
		case dropall:
		{

			Menu::Title("~w~Ephesys ~w~VIP");
			Menu::Subtitle("~w~Money Drop Options");

			Menu::Break("~w~Cash Amount Options");

			if (Menu::Int("~w~Amount Custom input", Features::DropAmount1, 1, 2500))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropAmount1 = NumberKeyboard();
				}
			}



			if (Menu::Int("~w~Height", Features::DropHeight, 1, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropHeight = NumberKeyboard();
				}
			}




			if (Menu::Int("~w~Delay", Features::DropDelay, 50, 3000, 50))
			{
				if (IsKeyPressed(VK_NUMPAD5)) {
					Features::DropDelay = NumberKeyboard();
				}
			}



			Menu::Int("Bags", Features::Bags, 0, 20);
			Menu::Toggle("~w~Cash Drop", Features::alldrop, [] { Features::AllDrop(Features::alldrop); });
			Menu::Toggle("~w~Random Cash Drop", Features::lookall, [] { Features::kallall(Features::lookall); });
			Menu::Toggle("~w~Cyrcle Drop", Features::cyrclall, [] { Features::Cyrclelonall(Features::cyrclall); });
			Menu::Toggle("~w~Cash Rain", Features::moneyrain001all, [] { Features::MoneyRain001all(Features::moneyrain001all); });


			Menu::Break("~w~Models");
			dropModelsSelect();





		}
		break;


		}
		break;
		}
		Menu::End("Welcome to EphesysMenu");
		WAIT(0);
	}
}

void ScriptMain() {
	srand(GetTickCount());
	Features::TimePD = timeGetTime();
	Features::TimePD1 = timeGetTime();
	Features::TimePD2 = timeGetTime();
	Features::TimePD3 = timeGetTime();
	Features::TimePD4 = timeGetTime();
	Features::TimePD5 = timeGetTime();
	Features::TimePD6 = timeGetTime();
	Features::TimePD7 = timeGetTime();
	Features::TimePD8 = timeGetTime();
	main();
}











#include "stdafx.h"



#define PICKUP_MONEY_CASE 0x1E9A99F8
#define PROP_MONEY_BAG_02 -1666779307
#define PROP_MONEY_BAG_01 0xB8CFE3E3
#define PROP_MONEY_BAG_03 0x113FD533
#define PROP_MONEY_BAG_04 0xCE6FDD6B
#define PICKUP_MONEY_CASE_3 0xCE6FDD6B
#define PICKUP_MONEY_PAPER_BAG 0x711D02A4

// Do not change these values, its for blame explosion
int Features::l = 1;
int Features::l1 = 1;
int Features::l2 = 1;
int Features::l3 = 1;
int Features::l4 = 1;
int Features::l5 = 1;
int Features::l6 = 1;

int TimePD1;
bool air = 0;

char* CharKeyboard2(char* windowName = "", int maxInput = 21, char* defaultText = "")
{
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}

#pragma region long bois

int StuntlistPos207 = 0;
std::vector<char*> Stuntlist44 = {
	"stt_prop_c4_stack",
	"stt_prop_corner_sign_01",
	"stt_prop_corner_sign_02",
	"stt_prop_corner_sign_03",
	"stt_prop_corner_sign_04",
	"stt_prop_corner_sign_05",
	"stt_prop_corner_sign_06",
	"stt_prop_corner_sign_07",
	"stt_prop_corner_sign_07",
	"stt_prop_corner_sign_08",
	"stt_prop_corner_sign_09",
	"stt_prop_corner_sign_10",
	"stt_prop_corner_sign_11",
	"stt_prop_corner_sign_12",
	"stt_prop_corner_sign_13",
	"stt_prop_corner_sign_14",
	"stt_prop_flagpole_1a",
	"stt_prop_flagpole_1b",
	"stt_prop_flagpole_1c",
	"stt_prop_flagpole_1d",
	"stt_prop_flagpole_1e",
	"stt_prop_flagpole_1f",
	"stt_prop_flagpole_2a",
	"stt_prop_flagpole_2b",
	"stt_prop_flagpole_2c",
	"stt_prop_flagpole_2d",
	"stt_prop_flagpole_2e",
	"stt_prop_flagpole_2f",
	"stt_prop_hoop_constraction_01a",
	"stt_prop_hoop_small_01",
	"stt_prop_hoop_tyre_01a",
	"stt_prop_lives_bottle",
	"stt_prop_race_gantry_01",
	"stt_prop_race_start_line_01",
	"stt_prop_race_start_line_01b",
	"stt_prop_race_start_line_02",
	"stt_prop_race_start_line_02b",
	"stt_prop_race_start_line_03",
	"stt_prop_race_start_line_03b",
	"stt_prop_race_tannoy",
	"stt_prop_ramp_adj_flip_m",
	"stt_prop_ramp_adj_flip_mb",
	"stt_prop_ramp_adj_flip_s",
	"stt_prop_ramp_adj_flip_sb",
	"stt_prop_ramp_adj_hloop",
	"stt_prop_ramp_adj_loop",
	"stt_prop_ramp_jump_l",
	"stt_prop_ramp_jump_m",
	"stt_prop_ramp_jump_s",
	"stt_prop_ramp_jump_xl",
	"stt_prop_ramp_jump_xs",
	"stt_prop_ramp_jump_xxl",
	"stt_prop_ramp_multi_loop_rb",
	"stt_prop_ramp_spiral_l",
	"stt_prop_ramp_spiral_l_l",
	"stt_prop_ramp_spiral_l_m",
	"stt_prop_ramp_spiral_l_s",
	"stt_prop_ramp_spiral_l_xxl",
	"stt_prop_ramp_spiral_m",
	"stt_prop_ramp_spiral_s",
	"stt_prop_ramp_spiral_xxl",
	"stt_prop_sign_circuit_01",
	"stt_prop_sign_circuit_02",
	"stt_prop_sign_circuit_03",
	"stt_prop_sign_circuit_04",
	"stt_prop_sign_circuit_05",
	"stt_prop_sign_circuit_06",
	"stt_prop_sign_circuit_07",
	"stt_prop_sign_circuit_08",
	"stt_prop_sign_circuit_09",
	"stt_prop_sign_circuit_10",
	"stt_prop_sign_circuit_11",
	"stt_prop_sign_circuit_11b",
	"stt_prop_sign_circuit_12",
	"stt_prop_sign_circuit_13",
	"stt_prop_sign_circuit_13b",
	"stt_prop_sign_circuit_14",
	"stt_prop_sign_circuit_14b",
	"stt_prop_sign_circuit_15",
	"stt_prop_slow_down",
	"stt_prop_speakerstack_01a",
	"stt_prop_startline_gantry",
	"stt_prop_stunt_bblock_huge_01",
	"stt_prop_stunt_bblock_huge_02",
	"stt_prop_stunt_bblock_huge_03",
	"stt_prop_stunt_bblock_huge_04",
	"stt_prop_stunt_bblock_huge_05",
	"stt_prop_stunt_bblock_hump_01",
	"stt_prop_stunt_bblock_hump_02",
	"stt_prop_stunt_bblock_lrg1",
	"stt_prop_stunt_bblock_lrg2",
	"stt_prop_stunt_bblock_lrg3",
	"stt_prop_stunt_bblock_mdm1",
	"stt_prop_stunt_bblock_mdm2",
	"stt_prop_stunt_bblock_mdm3",
	"stt_prop_stunt_bblock_qp",
	"stt_prop_stunt_bblock_qp2",
	"stt_prop_stunt_bblock_qp3",
	"stt_prop_stunt_bblock_sml1",
	"stt_prop_stunt_bblock_sml2",
	"stt_prop_stunt_bblock_sml3",
	"stt_prop_stunt_bblock_xl1",
	"stt_prop_stunt_bblock_xl2",
	"stt_prop_stunt_bblock_xl3",
	"stt_prop_stunt_bowling_ball",
	"stt_prop_stunt_bowling_pin",
	"stt_prop_stunt_bowlpin_stand",
	"stt_prop_stunt_domino",
	"stt_prop_stunt_jump15",
	"stt_prop_stunt_jump30",
	"stt_prop_stunt_jump45",
	"stt_prop_stunt_jump_l",
	"stt_prop_stunt_jump_lb",
	"stt_prop_stunt_jump_loop",
	"stt_prop_stunt_jump_m",
	"stt_prop_stunt_jump_mb",
	"stt_prop_stunt_jump_s",
	"stt_prop_stunt_jump_sb",
	"stt_prop_stunt_landing_zone_01",
	"stt_prop_stunt_ramp",
	"stt_prop_stunt_soccer_ball",
	"stt_prop_stunt_soccer_goal",
	"stt_prop_stunt_soccer_lball",
	"stt_prop_stunt_soccer_sball",
	"stt_prop_stunt_target",
	"stt_prop_stunt_target_small",
	"stt_prop_stunt_track_bumps",
	"stt_prop_stunt_track_cutout",
	"stt_prop_stunt_track_dwlink",
	"stt_prop_stunt_track_dwlink_02",
	"stt_prop_stunt_track_dwsh15",
	"stt_prop_stunt_track_dwshort",
	"stt_prop_stunt_track_dwslope15",
	"stt_prop_stunt_track_dwslope30",
	"stt_prop_stunt_track_dwslope45",
	"stt_prop_stunt_track_dwturn",
	"stt_prop_stunt_track_dwuturn",
	"stt_prop_stunt_track_exshort",
	"stt_prop_stunt_track_fork",
	"stt_prop_stunt_track_funlng",
	"stt_prop_stunt_track_funnel",
	"stt_prop_stunt_track_hill",
	"stt_prop_stunt_track_hill2",
	"stt_prop_stunt_track_jump",
	"stt_prop_stunt_track_link",
	"stt_prop_stunt_track_otake",
	"stt_prop_stunt_track_sh15",
	"stt_prop_stunt_track_sh30",
	"stt_prop_stunt_track_sh45",
	"stt_prop_stunt_track_sh45_a",
	"stt_prop_stunt_track_short",
	"stt_prop_stunt_track_slope15",
	"stt_prop_stunt_track_slope30",
	"stt_prop_stunt_track_slope45",
	"stt_prop_stunt_track_start",
	"stt_prop_stunt_track_start_02",
	"stt_prop_stunt_track_straight",
	"stt_prop_stunt_track_straightice",
	"stt_prop_stunt_track_st_01",
	"stt_prop_stunt_track_st_02",
	"stt_prop_stunt_track_turn",
	"stt_prop_stunt_track_turnice",
	"stt_prop_stunt_track_uturn",
	"stt_prop_stunt_tube_crn",
	"stt_prop_stunt_tube_crn2",
	"stt_prop_stunt_tube_crn_15d",
	"stt_prop_stunt_tube_crn_30d",
	"stt_prop_stunt_tube_crn_5d",
	"stt_prop_stunt_tube_cross",
	"stt_prop_stunt_tube_end",
	"stt_prop_stunt_tube_ent",
	"stt_prop_stunt_tube_fn_01",
	"stt_prop_stunt_tube_fn_02",
	"stt_prop_stunt_tube_fn_03",
	"stt_prop_stunt_tube_fn_04",
	"stt_prop_stunt_tube_fn_05",
	"stt_prop_stunt_tube_fork",
	"stt_prop_stunt_tube_gap_01",
	"stt_prop_stunt_tube_gap_02",
	"stt_prop_stunt_tube_gap_03",
	"stt_prop_stunt_tube_hg",
	"stt_prop_stunt_tube_jmp",
	"stt_prop_stunt_tube_jmp2",
	"stt_prop_stunt_tube_l",
	"stt_prop_stunt_tube_m",
	"stt_prop_stunt_tube_qg",
	"stt_prop_stunt_tube_s",
	"stt_prop_stunt_tube_speed",
	"stt_prop_stunt_tube_speeda",
	"stt_prop_stunt_tube_speedb",
	"stt_prop_stunt_tube_xs",
	"stt_prop_stunt_tube_xxs",
	"stt_prop_stunt_wideramp",
	"stt_prop_track_bend2_bar_l",
	"stt_prop_track_bend2_bar_l_b",
	"stt_prop_track_bend2_l",
	"stt_prop_track_bend2_l_b",
	"stt_prop_track_bend_15d",
	"stt_prop_track_bend_15d_bar",
	"stt_prop_track_bend_180d",
	"stt_prop_track_bend_180d_bar",
	"stt_prop_track_bend_30d",
	"stt_prop_track_bend_30d_bar",
	"stt_prop_track_bend_5d",
	"stt_prop_track_bend_5d_bar",
	"stt_prop_track_bend_bar_l",
	"stt_prop_track_bend_bar_l_b",
	"stt_prop_track_bend_bar_m",
	"stt_prop_track_bend_l",
	"stt_prop_track_bend_l_b",
	"stt_prop_track_bend_m",
	"stt_prop_track_block_01",
	"stt_prop_track_block_02",
	"stt_prop_track_block_03",
	"stt_prop_track_chicane_l",
	"stt_prop_track_chicane_l_02",
	"stt_prop_track_chicane_r",
	"stt_prop_track_chicane_r_02",
	"stt_prop_track_cross",
	"stt_prop_track_cross_bar",
	"stt_prop_track_fork",
	"stt_prop_track_fork_bar",
	"stt_prop_track_funnel",
	"stt_prop_track_funnel_ads_01a",
	"stt_prop_track_funnel_ads_01b",
	"stt_prop_track_funnel_ads_01c",
	"stt_prop_track_jump_01a",
	"stt_prop_track_jump_01b",
	"stt_prop_track_jump_01c",
	"stt_prop_track_jump_02a",
	"stt_prop_track_jump_02b",
	"stt_prop_track_jump_02c",
	"stt_prop_track_link",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown",
	"stt_prop_track_slowdown_t1",
	"stt_prop_track_slowdown_t2",
	"stt_prop_track_speedup",
	"stt_prop_track_speedup_t1",
	"stt_prop_track_speedup_t2",
	"stt_prop_track_start",
	"stt_prop_track_start_02",
	"stt_prop_track_stop_sign",
	"stt_prop_track_straight_bar_l",
	"stt_prop_track_straight_bar_m",
	"stt_prop_track_straight_bar_s",
	"stt_prop_track_straight_l",
	"stt_prop_track_straight_lm",
	"stt_prop_track_straight_lm_bar",
	"stt_prop_track_straight_m",
	"stt_prop_track_straight_s",
	"stt_prop_track_tube_01",
	"stt_prop_track_tube_02",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_010",
	"stt_prop_tyre_wall_011",
	"stt_prop_tyre_wall_012",
	"stt_prop_tyre_wall_013",
	"stt_prop_tyre_wall_01",
	"stt_prop_tyre_wall_015",
	"stt_prop_tyre_wall_02",
	"stt_prop_tyre_wall_03",
	"stt_prop_tyre_wall_04",
	"stt_prop_tyre_wall_05",
	"stt_prop_tyre_wall_06",
	"stt_prop_tyre_wall_07",
	"stt_prop_tyre_wall_08",
	"stt_prop_tyre_wall_09",
	"stt_prop_tyre_wall_0l010",
	"stt_prop_tyre_wall_0l012",
	"stt_prop_tyre_wall_0l013",
	"stt_prop_tyre_wall_0l014",
	"stt_prop_tyre_wall_0l015",
	"stt_prop_tyre_wall_0l018",
	"stt_prop_tyre_wall_0l019",
	"stt_prop_tyre_wall_0l020",
	"stt_prop_tyre_wall_0l04",
	"stt_prop_tyre_wall_0l05",
	"stt_prop_tyre_wall_0l06",
	"stt_prop_tyre_wall_0l07",
	"stt_prop_tyre_wall_0l08",
	"stt_prop_tyre_wall_0l1",
	"stt_prop_tyre_wall_0l16",
	"stt_prop_tyre_wall_0l17",
	"stt_prop_tyre_wall_0l2",
	"stt_prop_tyre_wall_0l3",
	"stt_prop_tyre_wall_0r010",
	"stt_prop_tyre_wall_0r011",
	"stt_prop_tyre_wall_0r012",
	"stt_prop_tyre_wall_0r013",
	"stt_prop_tyre_wall_0r014,"
	"stt_prop_tyre_wall_0r015,"
	"stt_prop_tyre_wall_0r016",
	"stt_prop_tyre_wall_0r017",
	"stt_prop_tyre_wall_0r018",
	"stt_prop_tyre_wall_0r019",
	"stt_prop_tyre_wall_0r04",
	"stt_prop_tyre_wall_0r05",
	"stt_prop_tyre_wall_0r06",
	"stt_prop_tyre_wall_0r07",
	"stt_prop_tyre_wall_0r08",
	"stt_prop_tyre_wall_0r09",
	"stt_prop_tyre_wall_0r1",
	"stt_prop_tyre_wall_0r2",
	"stt_prop_tyre_wall_0r3",
	"stt_prop_wallride_01",
	"stt_prop_wallride_01b",
	"stt_prop_wallride_02",
	"stt_prop_wallride_02b",
	"stt_prop_wallride_04",
	"stt_prop_wallride_05",
	"stt_prop_wallride_05b",
	"stt_prop_wallride_45l",
	"stt_prop_wallride_45la",
	"stt_prop_wallride_45r",
	"stt_prop_wallride_45ra",
	"stt_prop_wallride_90l",
	"stt_prop_wallride_90lb",
	"stt_prop_wallride_90r",
	"stt_prop_wallride_90rb",
};



int Features::DropHeight = 35;
int Features::DropAmount = 2500;
int Features::DropAmount1 = 2500;
int Features::DropAmountggg1 = 0;
int Features::DropAmount2 = 2500;
int Features::DropAmount3 = 2500;
int Features::DropDelay = 500;
int Features::bandelay = 200;
int Features::setrank = 8000;
int Features::stealthDelay1 = 3000;
int Features::stealthDelay02222 = 3000;
int Features::stealthDelaydel = 500;
Hash Features::bagHash = 0x9CA6F755;
Hash Features::bagHash1;
Hash Features::bagHash1555;
Hash Features::bagHash55;
Hash Features::bagHash556;
Hash Features::bagHash557;
LPCSTR  Features::bagHash2;
Hash Features::bagHash4;




void repairnearbyvehicles()
{
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;

	Vehicle *vehs = new Vehicle[ArrSize];
	vehs[0] = ElementAmount;
	int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

	for (int i = 0; i < VehFound; i++)
	{
		int OffsetID = i * 2 + 2;
		if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
		{
			RequestControlOfEnt(vehs[OffsetID]);
			for (int i = 0; i < 50; i++)
			{
				VEHICLE::SET_VEHICLE_FIXED(vehs[OffsetID]);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehs[OffsetID]);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehs[OffsetID], 0);
			}

		}
	}
}void Features::repairnearbyvehicles()
{
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;

	Vehicle *vehs = new Vehicle[ArrSize];
	vehs[0] = ElementAmount;
	int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

	for (int i = 0; i < VehFound; i++)
	{
		int OffsetID = i * 2 + 2;
		if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
		{
			RequestControlOfEnt(vehs[OffsetID]);
			for (int i = 0; i < 50; i++)
			{
				VEHICLE::SET_VEHICLE_FIXED(vehs[OffsetID]);
				VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(vehs[OffsetID]);
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehs[OffsetID], 0);
			}

		}
	}
}


void Features::CloneVehicle()
{
	int model = PED::GET_VEHICLE_PED_IS_IN(Features::Online::selectedPlayer, 1);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(model) && STREAMING::IS_MODEL_A_VEHICLE(model))
	{
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(1);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, coords.x, coords.y, coords.z, 1.0f, 1, 1);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		ENTITY::SET_ENTITY_CAN_BE_DAMAGED(veh, false);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
		STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_firework_xmas_burst_rgw", PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
	}
}

bool Features::forceexplodewave = false;
void Features::ForceExplodeWavePED(bool toggle)
{
	if (ForceExplodeWavePED)
	{
		const int numElements = 10;
		const int arrSize = numElements * 2 + 2;
		Ped ped[arrSize];
		ped[0] = numElements;
		int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
		if (ped != NULL)
		{
			for (int i = 1; i <= count; i++)
			{
				int offsettedID = i;
				if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
				{
					int TargetHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
					RequestControlOfEnt(ped[offsettedID]);
					ENTITY::SET_ENTITY_HEALTH(ped[offsettedID], 0);
				}
			}
		}
	}
}





Vector3 add3(Vector3* vectorA, Vector3* vectorB)
{
	Vector3 result;
	result.x = vectorA->x;
	result.y = vectorA->y;
	result.z = vectorA->z;

	result.x += vectorB->x;
	result.y += vectorB->y;
	result.z += vectorB->z;

	return result;
}
Vector3 multiply3(Vector3* vector, float x)
{
	Vector3 result;
	result.x = vector->x;
	result.y = vector->y;
	result.z = vector->z;

	result.x *= x;
	result.y *= x;
	result.z *= x;

	return result;
}

Vector3 rotDirection(Vector3* rot)
{
	float radianz = rot->z * 0.0174532924f;
	float radianx = rot->x * 0.0174532924f;
	float num = std::abs((float)std::cos((double)radianx));

	Vector3 dir;

	dir.x = (float)((double)((float)(-(float)std::sin((double)radianz))) * (double)num);
	dir.y = (float)((double)((float)std::cos((double)radianz)) * (double)num);
	dir.z = (float)std::sin((double)radianx);

	return dir;
}

float Features::accelerationmultiplier = 0;
float Features::brakesmultiplier = 0;
float Features::suspensionseight = 0;



char *call1o;
char *call2o;
char *nameo;
Ped PTLoopPed;

char *call1s;
char *call2s;
char *names;

typedef void(__fastcall* tSET_ENTITY_INVINCIBLE)(int entity, bool toggle);
//Set Invincible Ped
void SET_ENTITY_INVINCIBLE(const int& entity, const bool& toggle) //can i use this? : ( ( PATTERNS ARE PATCHED
{
	static tSET_ENTITY_INVINCIBLE oSET_ENTITY_INVINCIBLE = (tSET_ENTITY_INVINCIBLE)(Memory::pattern("48 89 5C 24 ? 48 89 74 24 ? 57 48 83 EC 20 40 8A F2 E8 ? ? ? ? 33 DB").count(1).get(0).get<void>(0));
	oSET_ENTITY_INVINCIBLE(entity, toggle);
}

void WheelPTFX(char* streamName, char* PTFXName) {

	uint myVeh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());

	STREAMING::REQUEST_NAMED_PTFX_ASSET(streamName);
	if (STREAMING::HAS_NAMED_PTFX_ASSET_LOADED(streamName))
	{
		Vector3 pos = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(myVeh, ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(myVeh, "wheel_lf"));
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(streamName);
		GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(PTFXName, pos.x, pos.y, pos.z, 0.f, 0.f, 0.f, Features::carPTFXsize, false, false, false);

		Vector3 pos1 = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(myVeh, ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(myVeh, "wheel_lr"));
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(streamName);
		GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(PTFXName, pos1.x, pos1.y, pos1.z, 0.f, 0.f, 0.f, Features::carPTFXsize, false, false, false);

		Vector3 pos2 = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(myVeh, ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(myVeh, "wheel_rf"));
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(streamName);
		GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(PTFXName, pos2.x, pos2.y, pos2.z, 0.f, 0.f, 0.f, Features::carPTFXsize, false, false, false);

		Vector3 pos3 = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(myVeh, ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(myVeh, "wheel_rr"));
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(streamName);
		GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(PTFXName, pos3.x, pos3.y, pos3.z, 0.f, 0.f, 0.f, Features::carPTFXsize, false, false, false);
	}
	else STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2");
}

void PTFXCALLBoneless(char* call1, char* call2, char* name, int bone) {
	float fx = 0.08f;
	STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
	GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
	int ptfx = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(name, PLAYER::PLAYER_PED_ID(), 0.00f, 0.00f, 0.00f,
		0.00f, 0.00f, 0.0f, bone, fx, 1, 1, 1);
	STREAMING::REMOVE_PTFX_ASSET();

}

void PTFXCALLBonelessplayer(char* call1, char* call2, char* name, int bone) {
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, 1);
			float fx = 0.08f;
			STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
			int ptfx = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(name, iPed, pos.x, pos.y, pos.z,
				0.00f, 0.00f, 0.0f, bone, fx, 1, 1, 1);
			STREAMING::REMOVE_PTFX_ASSET();



		}
	}
}
std::vector<std::string> listFiles(LPCSTR directory)
{
	std::vector<std::string> tempVector;
	int fileCount = 0;
	std::stringstream tempStringStream;
	for (auto & collectedFiles : std::experimental::filesystem::v1::directory_iterator(directory)) {
		tempStringStream << collectedFiles;
		std::string testing = tempStringStream.str();
		if (testing.substr(testing.find_last_of(".") + 1) == "mp3") {
			unsigned foundAmount = testing.find_last_of("/");
			std::string TempHolder = testing.substr(0, foundAmount);
			std::string TempHolder2 = testing.substr(foundAmount + 1);
			tempVector.push_back(TempHolder2.substr(0, TempHolder2.find(".", 0)));
		}
	}
	return tempVector;
}
std::string FloatToString(float flt) {
	std::ostringstream ss;
	ss << flt;
	std::string str(ss.str());
	return str;
}

float StringToFloat(std::string str) {
	return ::atof(str.c_str());
}
Vehicle SpawnVehicleH(DWORD model, Vector3 coords, bool tpinto = 0, float heading = 0.0f) {
	if (STREAMING::IS_MODEL_IN_CDIMAGE(model)) {
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, coords.x, coords.y, coords.z, heading, 1, 1);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		if (tpinto) {
			ENTITY::SET_ENTITY_HEADING(veh, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()));
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
		}
		VEHICLE::SET_VEHICLE_IS_STOLEN(veh, 0);
		return veh;
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
	}
}
std::vector<int> ToggleTypes = { 17, 18, 19, 20, 21, 22 };
std::vector<int> ModTypes = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 26, 25, 48, 37, 27, 28, 30, 33, 34, 35, 38, 39, 45 };
std::vector<Object> Spawned;
void printf(std::string f) {
	printf(f.c_str());
}
Object AttachObjectToVehicleByHash(Hash hash, float x, float y, float z, float rotx, float roty, float rotz, Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0)) {
	if (!PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 1)) {
		//CMenu::notifyBottom("~r~You need to be in a vehicle to load a preset !");
		return -1;
	}
	if (STREAMING::IS_MODEL_IN_CDIMAGE(hash)) {
		STREAMING::REQUEST_MODEL(hash);
		while (!STREAMING::HAS_MODEL_LOADED(hash)) WAIT(0);
		Vector3 co = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		Object obj = OBJECT::CREATE_OBJECT_NO_OFFSET(hash, co.x, co.y, co.z, 1, 0, 0);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(obj);
		ENTITY::FREEZE_ENTITY_POSITION(obj, 1);
		printf("Calling");
		ENTITY::ATTACH_ENTITY_TO_ENTITY(obj, veh, 0, x, y, z, rotx, roty, rotz, 1, 0, 1, 0, 2, 1);
		WAIT(25);
		return obj;
	}
	else {
		printf("Not in image");
		return -1;
	}
}
bool DoesFileExists(std::string path) {
	if (std::ifstream(path)) return true;
	return false;
}
void WriteVehicle(std::string name, Vehicle veh) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini";
	for (int i = 0; i < ModTypes.size(); i++) {
		WritePrivateProfileStringA("Vehicle", FloatToString(ModTypes[i]).c_str(), FloatToString(VEHICLE::GET_VEHICLE_MOD(veh, ModTypes[i])).c_str(), iniPath.c_str());
	}
	int HUDColour, HUDLightsColour;
	//VEHICLE::_GET_INTERIOR_DASH_LIGHT_COLOR(veh, &HUDLightsColour);
	//VEHICLE::_GET_INTERIOR_COATING_COLOR(veh, &HUDColour);
	WritePrivateProfileStringA("Vehicle", "DashColor", FloatToString(HUDColour).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "DashLightColor", FloatToString(HUDLightsColour).c_str(), iniPath.c_str());
	int PpaintType = 0;
	int Pcolor = 0;
	int SpaintType = 0;
	int Scolor = 0;
	int Sr, Sg, Sb, Pr, Pg, Pb;
	int Prnd;
	int pearlescent, wheelColor;
	int wheelType = VEHICLE::GET_VEHICLE_WHEEL_TYPE(veh);
	int PlateIndex = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh);
	char* PlateText = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(veh);
	bool Bulletproof = !VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(veh);
	bool CustomTyres = VEHICLE::GET_VEHICLE_MOD_VARIATION(veh, 23);
	WritePrivateProfileStringA("Vehicle", "Bulletproof", FloatToString(Bulletproof).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "CustomTyres", FloatToString(CustomTyres).c_str(), iniPath.c_str());
	int NeonR, NeonG, NeonB, SmokeR, SmokeG, SmokeB;
	bool NeonEnabled;
	VEHICLE::_GET_VEHICLE_NEON_LIGHTS_COLOUR(veh, &NeonR, &NeonG, &NeonB);
	VEHICLE::GET_VEHICLE_TYRE_SMOKE_COLOR(veh, &SmokeR, &SmokeG, &SmokeB);
	if (VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 0)) NeonEnabled = 1;
	for (int i = 0; i < ToggleTypes.size(); i++) {
		WritePrivateProfileStringA("Vehicle", std::string("TOGGLE_" + FloatToString(ToggleTypes[i])).c_str(), FloatToString(VEHICLE::IS_TOGGLE_MOD_ON(veh, ToggleTypes[i])).c_str(), iniPath.c_str());
	}
	int WindowTintIndex = VEHICLE::GET_VEHICLE_WINDOW_TINT(veh);
	WritePrivateProfileStringA("Vehicle", "NeonEnabled", FloatToString(NeonEnabled).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "NeonR", FloatToString(NeonR).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "NeonG", FloatToString(NeonG).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "NeonB", FloatToString(NeonB).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SmokeR", FloatToString(SmokeR).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SmokeG", FloatToString(SmokeG).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SmokeB", FloatToString(SmokeB).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "WindowTint", FloatToString(WindowTintIndex).c_str(), iniPath.c_str());
	VEHICLE::GET_VEHICLE_MOD_COLOR_1(veh, &PpaintType, &Pcolor, &Prnd);
	VEHICLE::GET_VEHICLE_MOD_COLOR_2(veh, &SpaintType, &Scolor);
	VEHICLE::GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, &Pr, &Pg, &Pb);
	VEHICLE::GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, &Sr, &Sg, &Sb);
	VEHICLE::GET_VEHICLE_EXTRA_COLOURS(veh, &pearlescent, &wheelColor);
	std::ostringstream os; os << ENTITY::GET_ENTITY_MODEL(veh);
	WritePrivateProfileStringA("Vehicle", "Model", os.str().c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PrimaryPaintT", FloatToString(PpaintType).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SecondaryPaintT", FloatToString(SpaintType).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PrimaryPaint", FloatToString(Pcolor).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SecondaryPaint", FloatToString(Scolor).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "Pearlescent", FloatToString(pearlescent).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PrimaryR", FloatToString(Pr).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PrimaryG", FloatToString(Pg).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PrimaryB", FloatToString(Pb).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SecondaryR", FloatToString(Sr).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SecondaryG", FloatToString(Sg).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "SecondaryB", FloatToString(Sb).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "WheelsColor", FloatToString(wheelColor).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "WheelsType", FloatToString(wheelType).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "Unknown", FloatToString(Prnd).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "Unknown", FloatToString(PlateIndex).c_str(), iniPath.c_str());
	WritePrivateProfileStringA("Vehicle", "PlateText", PlateText, iniPath.c_str());
	for (int i = 0; i < 10; i++) {
		if (VEHICLE::DOES_EXTRA_EXIST(veh, i)) {
			WritePrivateProfileStringA("Vehicle", std::string("Extra_" + FloatToString(i)).c_str(), FloatToString(VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(veh, i)).c_str(), iniPath.c_str());
		}
	}
	//CMenu::notifyBottom("~g~Successfully saved vehicle. !");
}

void WritePreset(std::string name, float id, float x, float y, float z, float rotx, float roty, float rotz, Hash model) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini"; //change path
	if (!std::ifstream(iniPath)) std::ofstream file(iniPath);
	if (DoesFileExists(iniPath)) {
		//CMenu::notifyBottom("~r~You already have a preset with this name");
		return;
	}
	std::string X = FloatToString(x);
	std::string Y = FloatToString(y);
	std::string Z = FloatToString(z);
	std::string RotX = FloatToString(rotx);
	std::string RotY = FloatToString(roty);
	std::string RotZ = FloatToString(rotz);
	std::string Model = FloatToString(model);
	std::string Id = FloatToString(id);
	WritePrivateProfileStringA(Id.c_str(), "X", X.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "Y", Y.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "Z", Z.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "RotX", RotX.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "RotY", RotY.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "RotZ", RotZ.c_str(), iniPath.c_str());
	WritePrivateProfileStringA(Id.c_str(), "Model", Model.c_str(), iniPath.c_str());
}
void SavePreset(std::vector<ObjectInfo> ObjectList, std::string name, bool bWriteVehicle = 0) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini"; //change path
	if (bWriteVehicle) WriteVehicle(name, PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
	for (int i = 0; i < ObjectList.size(); i++) {
		std::ostringstream os;
		os << ObjectList[i].hash;
		ObjectList[i].X = round(ObjectList[i].X * 10000) / 10000;
		ObjectList[i].Y = round(ObjectList[i].Y * 10000) / 10000;
		ObjectList[i].Z = round(ObjectList[i].Z * 10000) / 10000;
		ObjectList[i].RotX = round(ObjectList[i].RotX * 10000) / 10000;
		ObjectList[i].RotY = round(ObjectList[i].RotY * 10000) / 10000;
		ObjectList[i].RotZ = round(ObjectList[i].RotZ * 10000) / 10000;
		WritePrivateProfileStringA(FloatToString(i).c_str(), "X", FloatToString(ObjectList[i].X).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "Y", FloatToString(ObjectList[i].Y).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "Z", FloatToString(ObjectList[i].Z).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "RotX", FloatToString(ObjectList[i].RotX).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "RotY", FloatToString(ObjectList[i].RotY).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "RotZ", FloatToString(ObjectList[i].RotZ).c_str(), iniPath.c_str());
		WritePrivateProfileStringA(FloatToString(i).c_str(), "Model", os.str().c_str(), iniPath.c_str());
		printf("\r\n<SAVE # " + FloatToString(i) + " > \r\n");
		printf("\r\nName:" + name);
		printf("\r\X:" + FloatToString(ObjectList[i].X));
		printf("\r\nY:" + FloatToString(ObjectList[i].Y));
		printf("\r\nZ:" + FloatToString(ObjectList[i].Z));
		printf("\r\nRotX:" + FloatToString(ObjectList[i].RotX));
		printf("\r\nRotY:" + FloatToString(ObjectList[i].RotY));
		printf("\r\nRotZ:" + FloatToString(ObjectList[i].RotZ));
		printf("\r\n< END OF SAVE # " + FloatToString(i) + " > \r\n");
	}
	//CMenu::notifyBottom("Preset Saved !");
}
std::string ReadPresetKey(std::string name, std::string section, std::string key) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini";
	if (!std::ifstream(iniPath)) {
		std::ofstream file(iniPath);
	}
	char retVal[255];
	GetPrivateProfileStringA(section.c_str(), key.c_str(), "", retVal, 255, iniPath.c_str());
	return retVal;
}
bool DoesPresetKeyExists(std::string name, std::string section, std::string key) {
	return ReadPresetKey(name, section, key).length() > 0;
}
int GetNumberOfObjectFromFile(std::string name) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini";
	int no = 0;
	for (int i = 0; i < 150; i++) {
		if (DoesPresetKeyExists(name, FloatToString(i), "X")) {
			no++;
		}
		else {
			return no;
		}
	}
	return no;
}
DWORD StringToDWORD(std::string str) {
	DWORD doubleWord;
	std::string dwordHexString = str;
	std::stringstream dwordStream;
	dwordStream << dwordHexString;
	dwordStream >> std::hex >> doubleWord;
	return doubleWord;
}
int st(std::string txt) { return atoi(txt.c_str()); }
Vehicle LoadVehicle(std::string name) {
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini";
	if (DoesPresetKeyExists(name, "Vehicle", "Model")) {
		Hash Model = static_cast<DWORD>(atoll(ReadPresetKey(name, "Vehicle", "Model").c_str()));
		Vehicle veh = SpawnVehicleH(Model, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0, 5, 0), 1);
		RequestControlOfEnt(veh);
		VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
		int WheelsType;
		WheelsType = st(ReadPresetKey(name, "Vehicle", "WheelsType"));
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(veh, WheelsType);
		bool CustomTyres = st(ReadPresetKey(name, "Vehicle", "CustomTyres"));
		for (int i = 0; i < ModTypes.size(); i++) {
			int mod = st(ReadPresetKey(name, "Vehicle", FloatToString(ModTypes[i])));
			VEHICLE::SET_VEHICLE_MOD(veh, ModTypes[i], mod, CustomTyres);
		}
		int HUDColor = st(ReadPresetKey(name, "Vehicle", "DashColor"));
		int HUDLightsColor = st(ReadPresetKey(name, "Vehicle", "DashLightColor"));
		TEST::_SET_INTERIOR_DASH_LIGHT_COLOR(veh, HUDLightsColor);
		TEST::_SET_INTERIOR_COATING_COLOR(veh, HUDColor);
		std::string PlateText;
		int NeonR, NeonG, NeonB, SmokeR, SmokeG, SmokeB, BulletProof;
		bool NeonEnabled;
		for (int i = 0; i < ToggleTypes.size(); i++) {
			int mod = st(ReadPresetKey(name, "Vehicle", std::string("TOGGLE_" + FloatToString(ToggleTypes[i])).c_str()));

			VEHICLE::TOGGLE_VEHICLE_MOD(veh, ToggleTypes[i], mod);
		}
		int WindowTintIndex = st(ReadPresetKey(name, "Vehicle", "WindowTint"));
		NeonEnabled = st(ReadPresetKey(name, "Vehicle", "NeonEnabled"));
		NeonR = st(ReadPresetKey(name, "Vehicle", "NeonR"));
		NeonG = st(ReadPresetKey(name, "Vehicle", "NeonG"));
		NeonB = st(ReadPresetKey(name, "Vehicle", "NeonB"));
		SmokeR = st(ReadPresetKey(name, "Vehicle", "SmokeR"));
		SmokeG = st(ReadPresetKey(name, "Vehicle", "SmokeG"));
		SmokeB = st(ReadPresetKey(name, "Vehicle", "SmokeB"));
		BulletProof = st(ReadPresetKey(name, "Vehicle", "Bulletproof"));
		if (BulletProof == 1) {
			VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(veh, 0);
			VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(veh, 0);
		}
		if (NeonEnabled) {
			VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 0, 1);
			VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 1, 1);
			VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 2, 1);
			VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 3, 1);
			VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(veh, NeonR, NeonG, NeonB);
		}
		VEHICLE::SET_VEHICLE_WINDOW_TINT(veh, WindowTintIndex);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(veh, SmokeR, SmokeG, SmokeB);
		int PrimaryPaintType, SecondaryPaintType, PrimaryPaintID, SecondaryPaintID, Pearlescent, PrimaryR, PrimaryG, PrimaryB, SecondaryR, SecondaryG, SecondaryB, WheelsColor, Unknown, PlateIndex;
		PrimaryPaintType = st(ReadPresetKey(name, "Vehicle", "PrimaryPaintT"));
		SecondaryPaintType = st(ReadPresetKey(name, "Vehicle", "SecondaryPaintT"));
		PrimaryPaintID = st(ReadPresetKey(name, "Vehicle", "PrimaryPaint"));
		SecondaryPaintID = st(ReadPresetKey(name, "Vehicle", "SecondaryPaint"));
		Pearlescent = st(ReadPresetKey(name, "Vehicle", "Pearlescent"));
		PrimaryR = st(ReadPresetKey(name, "Vehicle", "PrimaryR"));
		PrimaryG = st(ReadPresetKey(name, "Vehicle", "PrimaryG"));
		PrimaryB = st(ReadPresetKey(name, "Vehicle", "PrimaryB"));
		SecondaryR = st(ReadPresetKey(name, "Vehicle", "SecondaryR"));
		SecondaryG = st(ReadPresetKey(name, "Vehicle", "SecondaryG"));
		SecondaryB = st(ReadPresetKey(name, "Vehicle", "SecondaryB"));
		WheelsColor = st(ReadPresetKey(name, "Vehicle", "WheelsColor"));
		Unknown = st(ReadPresetKey(name, "Vehicle", "Unknown"));
		PlateIndex = st(ReadPresetKey(name, "Vehicle", "PlateIndex"));
		PlateText = ReadPresetKey(name, "Vehicle", "PlateText");
		VEHICLE::SET_VEHICLE_MOD_COLOR_1(veh, PrimaryPaintType, PrimaryPaintID, Unknown);
		VEHICLE::SET_VEHICLE_MOD_COLOR_2(veh, SecondaryPaintType, SecondaryPaintID);
		VEHICLE::SET_VEHICLE_COLOURS(veh, PrimaryPaintID, SecondaryPaintID);
		VEHICLE::SET_VEHICLE_EXTRA_COLOURS(veh, Pearlescent, WheelsColor);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, PrimaryR, PrimaryG, PrimaryB);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, SecondaryR, SecondaryG, SecondaryB);
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh, PlateIndex);
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, (char*)PlateText.c_str());
		//CMenu::notifyBottom("~g~Successfully loaded vehicle. !");
		for (int i = 0; i < 10; i++) {
			if (VEHICLE::DOES_EXTRA_EXIST(veh, i)) {
				int ExtraToggle = st(ReadPresetKey(name, "Vehicle", "Extra_" + FloatToString(i)));
				if (ExtraToggle == 1) {
					VEHICLE::SET_VEHICLE_EXTRA(veh, i, 0);
				}
				else {
					VEHICLE::SET_VEHICLE_EXTRA(veh, i, -1);
				}
			}
		}
		return veh;
	}
	return -1;
}
ObjectInfo ReadCustomPreset(std::string name, int id) {
	ObjectInfo oi;
	std::string iniPath = ".\\Ephesys\\ini files\\" + name + ".ini";
	std::ostringstream ID; ID << id;
	oi.hash = static_cast<DWORD>(atoll(ReadPresetKey(name, ID.str(), "Model").c_str()));
	oi.X = StringToFloat((char*)ReadPresetKey(name, ID.str(), "X").c_str());
	oi.Y = StringToFloat((char*)ReadPresetKey(name, ID.str(), "Y").c_str());
	oi.Z = StringToFloat((char*)ReadPresetKey(name, ID.str(), "Z").c_str());
	oi.RotX = StringToFloat((char*)ReadPresetKey(name, ID.str(), "RotX").c_str());
	oi.RotY = StringToFloat((char*)ReadPresetKey(name, ID.str(), "RotY").c_str());
	oi.RotZ = StringToFloat((char*)ReadPresetKey(name, ID.str(), "RotZ").c_str());
	return oi;
}
std::vector<std::string> listPresets(LPCSTR directory)
{
	std::vector<std::string> tempVector;
	int fileCount = 0;
	std::stringstream tempStringStream;
	for (auto & collectedFiles : std::experimental::filesystem::v1::directory_iterator(directory)) {
		tempStringStream << collectedFiles;
		std::string testing = tempStringStream.str();
		if (testing.substr(testing.find_last_of(".") + 1) == "ini") {
			unsigned foundAmount = testing.find_last_of("/\\");
			std::string TempHolder = testing.substr(0, foundAmount);
			std::string TempHolder2 = testing.substr(foundAmount + 1);
			tempVector.push_back(TempHolder2.substr(0, TempHolder2.find(".", 0)));
		}
	}
	return tempVector;
}
void LoadPreset(std::string name) {
	Vehicle veh = LoadVehicle(name);
	for (int i = 0; i < GetNumberOfObjectFromFile(name); i++) {
		if (veh != -1) {
			ObjectInfo preset = ReadCustomPreset(name, i);
			Object ob = AttachObjectToVehicleByHash(preset.hash, preset.X, preset.Y, preset.Z, preset.RotX, preset.RotY, preset.RotZ, veh);
			Spawned.push_back(ob);
		}
		else {
			if (!PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 1)) {
				//CMenu::notifyBottom("You need to be in a vehicle to do this"); return;
			}
			ObjectInfo preset = ReadCustomPreset(name, i);
			Object ob = AttachObjectToVehicleByHash(preset.hash, preset.X, preset.Y, preset.Z, preset.RotX, preset.RotY, preset.RotZ);
			Spawned.push_back(ob);
		}
	}
}
bool Features::metior_rain[32];
void Features::rain_metior(Player target) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Thunder");
	static auto ticker = GetTickCount();
	if ((GetTickCount() - ticker) >= 2000) {
		Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
		STREAMING::REQUEST_MODEL($("prop_asteroid_01"));
		Object astreoid = OBJECT::CREATE_OBJECT($("prop_asteroid_01"), pos.x + GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-30.f, 30.f), pos.y + GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-30.f, 30.f), pos.z + 70.f, 1, 1, 1);
		ENTITY::APPLY_FORCE_TO_ENTITY(astreoid, 1, 0.f, 0.f, -50.f, 0.0f, 0.0f, 0.0f, 0, TRUE, TRUE, TRUE, FALSE, TRUE);
		ticker = GetTickCount();
	}
}

bool Features::AsteroidShower = false;
void Features::AsteroidShowerToggle(bool toggle) {
	if (AsteroidShowerToggle)
	{
		Hash ast = GAMEPLAY::GET_HASH_KEY("prop_asteroid_01");
		GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST("Thunder");

		auto kek12 = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), ast);
		auto kek13 = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), ast);
		Vector3 kek = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
		if ((timeGetTime() - Features::TimePD3) > 600) // myTimer >> in main >> "myTimer = timeGetTime();" you can also set the delay faster or slower as 600
		{
			if (STREAMING::IS_MODEL_VALID(ast))
			{
				STREAMING::REQUEST_MODEL(ast);
				while (!STREAMING::HAS_MODEL_LOADED(ast)) WAIT(0);
				float ang = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(0.0f, 20.0f) * 3.14159265359f, kek12;
				float rad = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(0.0f, 20.0f) * 15.0f, kek13;
				float x = kek.x + rad * cos(ang);
				float y = kek.y + rad * sin(ang);
				Object Asteroid = OBJECT::CREATE_OBJECT(ast, x, y, 200.0f, 1, 1, 1);
				ENTITY::SET_ENTITY_COLLISION(Asteroid, 1, 1);
				ENTITY::APPLY_FORCE_TO_ENTITY(Asteroid, 1, 150.0f, 180.0f, 200.0f, 20.0f, 20.0f, 50.0f, 0, 0, 1, 1, 0, 1);
				Features::TimePD3 = timeGetTime();
			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(ast);
		}
		return;
	}
	notifyBottom("The world End");
}


void Features::spawn_vehicle22(char* toSpawn) {

	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			Hash model = GAMEPLAY::GET_HASH_KEY(toSpawn);
			if (STREAMING::IS_MODEL_VALID(model))
			{

				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
				Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), false);
				float forward = 5.f;
				float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i));
				float xVector = forward * sin(degToRad(heading)) * -1.f;
				float yVector = forward * cos(degToRad(heading));
				Vehicle veh = Hooking::create_vehicle(model, &ourCoords, heading, true, true);
				RequestControlOfEnt(veh);
				VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				NETWORK::NETWORK_FADE_IN_ENTITY(veh, 0);
				DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
				auto networkId = NETWORK::VEH_TO_NET(veh);
				ENTITY::_SET_ENTITY_REGISTER(veh, true);
				BypassOnlineVehicleKick(0);
				if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
					NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
				if (Features::spawnincar)
				{
					PED::SET_PED_INTO_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), veh, -1);
				}
				if (Features::spawnmaxed)
				{
					VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
					for (int i = 0; i < 50; i++)
					{

						VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
						VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
						AUDIO::SET_VEH_RADIO_STATION(veh, "OFF");
						//GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
						//GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", veh, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 2.0, false, false, false);

					}
				}
			}
		}
	}
}

bool Features::Deleter = false;
void Features::deleter(bool toggle)
{
	if (Deleter)
	{
		Menu::Settings::deleter = true;
	}
	else
	{
		Menu::Settings::deleter = false;
	}
}









bool Features::okokokloo = false;
void Features::okokok(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();
	Vector3 kek = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
	if ((timeGetTime() - Features::TimePD2) > 600)
	{
		float ang = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(0.0f, 10.0f) * 3.14159265359f;
		float rad = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(0.0f, 10.0f) * 15.0f;
		float x = kek.x + rad * cos(ang);
		float y = kek.y + rad * sin(ang);
		Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
		WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
		while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
			WAIT(0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x, y, 200.0f, x, y, 0, 250, 1, airStrike, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);

		Features::TimePD2 = timeGetTime();
	}

}

int Features::current_frame;
char* Features::current_header;

int Features::current_frame1;
char* Features::current_header1;

void Features::UpdatePerTick()
{

	static auto ticker = GetTickCount();  //you can get the way to 1 BUT I HAVE THIS WAY, ok wait let me check
	if ((GetTickCount() - ticker) >= Features::bandelay) {
		if (current_frame >= 15) {
			current_frame = 1;
		}
		else {
			current_frame++;
		}

		current_header = _strdup(("frame" + std::to_string(current_frame)).c_str());


		ticker = GetTickCount();
	}

	static auto ticker1 = GetTickCount();  //you can get the way to 1 BUT I HAVE THIS WAY, ok wait let me check
	if ((GetTickCount() - ticker1) >= 200) {
		if (current_frame1 >= 2) {
			current_frame1 = 0;
		}
		else {
			current_frame1++;
		}

		current_header1 = _strdup(("rumm" + std::to_string(current_frame1)).c_str());

		ticker1 = GetTickCount();
	}





	playerGodMode ? GodMode(true) : NULL;

	enginealwaysonbool ? enginealwayson(true) : NULL;


	Rainbowslow ? rainbowslow(true) : NULL;

	dropme2 ? cashdrop2(true) : NULL;



	cargodmodebool ? cargodmode(true) : NULL;

	if (rapidfirer)
	{
		rapidmaker();
	}

	if (killpedsbool)
	{
		killpeds();
	}
	if (explodepedsbool)
	{
		explodepeds();
	}
	if (explodenearbyvehiclesbool)
	{
		explodenearbyvehicles();
	}
	if (deletenearbyvehiclesbool)
	{
		deletenearbyvehicles();
	}
	if (bypass)
	{
		moneyBypass();
	}
	if (votes)
	{
		kickvotes();
	}
	if (explosion)
	{
		antiexplosion();
	}
	if (profire)
	{
		antifire();
	}
	if (revweapons)
	{
		remoweapons();
	}
	if (remote)
	{
		inforemote();
	}
	if (report)
	{
		reattacks();
	}
	if (att)
	{
		antiattacks();
	}
	if (WEATHER)
	{
		WEATHERtacks();
	}
	if (WANTED)
	{
		WANTEDLEVEL();
	}
	if (WANTED_LEVEL)
	{
		WANTEDLEVELL();
	}
	if (RAGDOLL)
	{
		REQUESTEVENT();
	}
	if (TAUNT)
	{
		PLAYERTAUNT();
	}
	if (NETWORK)
	{
		INCREMENT();
	}
	if (NETWORKCRC)
	{
		NETWORK_CRC();
	}

	if (ClownLoop) {
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0x796e);
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0x8cbd);
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0xdead);
	}
	if (fireworkloop) {
		PTFXCALLBoneless("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0x796e);
		PTFXCALLBoneless("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0x8cbd);
		PTFXCALLBoneless("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0xdead);
	}
	if (alien1) {
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0x796e);
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0x8cbd);
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0xdead);
	}
	if (alien2) {
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0x796e);
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0x8cbd);
		PTFXCALLBoneless("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0xdead);
	}
	if (electric) {
		PTFXCALLBoneless("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0x796e);
		PTFXCALLBoneless("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0x8cbd);
		PTFXCALLBoneless("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0xdead);
	}
	if (electricberox) {
		PTFXCALLBoneless("scr_trevor1", "scr_trevor1", "scr_trev1_trailer_boosh", 0x796e);
		PTFXCALLBoneless("scr_trevor1", "scr_trevor1", "scr_trev1_trailer_boosh", 0x8cbd);
		PTFXCALLBoneless("scr_trevor1", "scr_trevor1", "scr_trev1_trailer_boosh", 0xdead);
	}
	if (watereffect) {
		PTFXCALLBoneless("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0x796e);
		PTFXCALLBoneless("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0x8cbd);
		PTFXCALLBoneless("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0xdead);
	}
	if (bloodeffect) {
		PTFXCALLBoneless("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0x796e);
		PTFXCALLBoneless("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0x8cbd);
		PTFXCALLBoneless("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0xdead);
	}
	if (smokeeffect) {
		PTFXCALLBoneless("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0x796e); // Kopf
		PTFXCALLBoneless("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0x8cbd); // hand
		PTFXCALLBoneless("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0xdead); // Fuß
	}
	if (moneyeffect) {
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0x796e);
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0x8cbd);
		PTFXCALLBoneless("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0xdead);
	}
	if (ghosttif) {
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0x796e); // Kopf
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0x8cbd); // hand
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0xdead); // Fuß
	}





	if (ClownLoop1) {
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0x796e);
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0x8cbd);
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears", 0xdead);
	}
	if (fireworkloop2) {
		PTFXCALLBonelessplayer("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0x796e);
		PTFXCALLBonelessplayer("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0x8cbd);
		PTFXCALLBonelessplayer("scr_indep_fireworks", "scr_indep_fireworks", "scr_indep_firework_trailburst", 0xdead);
	}
	if (alien13) {
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0x796e);
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0x8cbd);
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_disintegrate", 0xdead);
	}
	if (alien24) {
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0x796e);
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0x8cbd);
		PTFXCALLBonelessplayer("scr_rcbarry1", "scr_rcbarry1", "scr_alien_teleport", 0xdead);
	}
	if (electric5) {
		PTFXCALLBonelessplayer("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0x796e);
		PTFXCALLBonelessplayer("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0x8cbd);
		PTFXCALLBonelessplayer("scr_agencyheistb", "scr_agencyheistb", "scr_agency3b_elec_box", 0xdead);
	}
	if (watereffect6) {
		PTFXCALLBonelessplayer("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0x796e);
		PTFXCALLBonelessplayer("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0x8cbd);
		PTFXCALLBonelessplayer("scr_fbi5a", "scr_fbi5a", "scr_fbi5_ped_water_splash", 0xdead);
	}
	if (bloodeffect8) {
		PTFXCALLBonelessplayer("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0x796e);
		PTFXCALLBonelessplayer("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0x8cbd);
		PTFXCALLBonelessplayer("scr_finalec2", "scr_finalec2", "scr_finale2_blood_entry", 0xdead);
	}
	if (smokeeffect7) {
		PTFXCALLBonelessplayer("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0x796e); // Kopf
		PTFXCALLBonelessplayer("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0x8cbd); // hand
		PTFXCALLBonelessplayer("scr_familyscenem", "scr_familyscenem", "scr_meth_pipe_smoke", 0xdead); // Fuß
	}
	if (moneyeffect9) {
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0x796e);
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0x8cbd);
		PTFXCALLBonelessplayer("scr_rcbarry2", "scr_rcbarry2", "scr_clown_death", 0xdead);
	}
	if (moneyeffect10) {
		PTFXCALLBonelessplayer("scr_reburials", "scr_reburials", "scr_burial_dirt", 0x796e);
		PTFXCALLBonelessplayer("scr_reburials", "scr_reburials", "scr_burial_dirt", 0x8cbd);
		PTFXCALLBonelessplayer("scr_reburials", "scr_reburials", "scr_burial_dirt", 0xdead);
	}


	if (CarClownLoop) {
		WheelPTFX("scr_rcbarry2", "scr_clown_appears");
	}
	if (Carfireworkloop) {
		WheelPTFX("scr_indep_fireworks", "scr_indep_firework_trailburst");
	}
	if (Caralien1) {
		WheelPTFX("scr_rcbarry1", "scr_alien_disintegrate");
	}
	if (Caralien2) {
		WheelPTFX("scr_rcbarry1", "scr_alien_teleport");
	}
	if (Carelectric) {
		WheelPTFX("scr_agencyheistb", "scr_agency3b_elec_box");
	}
	if (CarLightning) {
		WheelPTFX("scr_rcbarry2", "scr_clown_death");
	}
	if (ghooosoot) {
		WheelPTFX("scr_agencyheist", "scr_fbi_dd_breach_smoke");
	}
	if (moneyeffect15) {
		WheelPTFX("scr_reburials", "scr_burial_dirt");
		WheelPTFX("scr_reburials", "scr_burial_dirt");
		WheelPTFX("scr_reburials", "scr_burial_dirt");
	}


	giver1 ? StealthDropinte22(true) : NULL;


	playerWantedLevel ? ChangeWanted(true) : NULL;

	NeverWantedTest1 ? NeverWantedTest2(true) : NULL;



	playerinvisjoooohhibility ? lobbyinfo(true) : NULL;

	customped ? pedcust(true) : NULL;

	armorff ? arnor333(true) : NULL;

	clown1 ? clown2(true) : NULL;

	ada ? vsdv(true) : NULL;

	flxneav ? nearbflx(true) : NULL;

	playersuperjump ? SuperJump(true) : NULL;

	GetWantedTest1 ? GetWantedTest2(true) : NULL;

	firewgun ? fireWgun(true) : NULL;

	offline_mode_snow ? OfflineModeSnow(true) : NULL;


	tpp ? Teleportprotec(true) : NULL;

	peddroper ? proped(true) : NULL;

	manrgb ? rgbman(false) : NULL;

	Vehgun148 ? vehgun148(true) : NULL;

	soundall1 ? Soundall(true) : NULL;


	SendToJobProtection ? STJp(true) : NULL;

	Vehgun147 ? vehgun147(true) : NULL;

	CEOKickProtection ? CEOKickp(true) : NULL;
	boostloo ? carloo(true) : NULL;

	giver ? StealthDropinte(true) : NULL;

	freezed11 ? Freezer11(true) : NULL;

	camshaker112 ? shakecam11(true) : NULL;

	mobileradiokek ? MobileRadioKek(true) : NULL;



	free_cam ? freecam(true) : NULL;

	playerwaterloopall ? WaterLoopall(true) : NULL;

	particle2 ? ParticlE2(true) : NULL;

	particle3 ? ParticlE3(true) : NULL;

	featureMiscHideHud ? featureiscHideHud(true) : NULL;

	particle4 ? ParticlE4(true) : NULL;

	particle5 ? ParticlE5(true) : NULL;

	particle6 ? ParticlE6(true) : NULL;

	particle7 ? ParticlE7(true) : NULL;

	cyrclall ? Cyrclelonall(true) : NULL;

	TeleportGun ? featureTeleportGun(true) : NULL;

	particle8 ? ParticlE8(true) : NULL;

	particle9 ? ParticlE9(true) : NULL;

	randommonww ? randommonnnw(true) : NULL;

	particle10 ? ParticlE10(true) : NULL;

	particle11 ? ParticlE11(true) : NULL;

	particle12 ? ParticlE12(true) : NULL;

	particle13 ? ParticlE13(true) : NULL;

	particle14 ? ParticlE14(true) : NULL;

	particle15 ? ParticlE15(true) : NULL;

	particle16 ? ParticlE16(true) : NULL;

	particle17 ? ParticlE17(true) : NULL;

	particle18 ? ParticlE18(true) : NULL;

	SoundSpamProtection ? Spamp(true) : NULL;

	Mapweck ? mapweck(true) : NULL;

	delop ? lolop(true) : NULL;

	particle19 ? ParticlE19(true) : NULL;

	Objectgun ? objectgun(true) : NULL;

	Explodegun ? explodegun(true) : NULL;

	smogun ? SmoWgun(true) : NULL;

	animgun ? animWgun(true) : NULL;

	Testgun ? testgun(true) : NULL;

	offradardeath ? deathoffradar(true) : NULL;



	bomber ? bomber_mode(true) : NULL;


	savenewdinner_forcerop119 ? forcoook(true) : NULL;


	clearreport ? ClearReport(true) : NULL;

	bcgun ? BCWgun(true) : NULL;

	stickgun ? StickWgun(true) : NULL;

	snowgun ? snowWgun(true) : NULL;

	ppgun ? PPWgun(true) : NULL;

	cccar ? CCCar(true) : NULL;

	CeoBanProtection ? CEOBanp(true) : NULL;


	antifkk ? kffanti(true) : NULL;

	forcedefense ? ForceDefense(true) : NULL;

	Stopall ? stopall(true) : NULL;

	Vehgun146 ? vehgun146(true) : NULL;

	explodenearbytiresbool ? explodenearbytires(true) : NULL;


	stealthnewsafe12ok ? newStealthLoop12ok(true) : NULL;

	stealthnewsafe2211 ? newStealthLoop2211(true) : NULL;

	ballgun ? BallWgun(true) : NULL;

	betiny ? TinyPlayer(true) : NULL;

	playerfireloopall ? FireLoopall(true) : NULL;

	Vehgun144 ? vehgun144(true) : NULL;


	gotmode ? godlol(true) : NULL;

	//lasersight ? LaserSight(true) : NULL;

	Vehgun ? vehgun(true) : NULL;

	norecoil ? recoil(true) : NULL;

	molgun ? MolWgun(true) : NULL;


	rocketrain ? rainro(true) : NULL;

	moneyGunBagfakeplal ? MoneyGunBagfakeplaaa(true) : NULL;

	wwcar ? WWCar(true) : NULL;

	grangun ? GranWgun(true) : NULL;

	Batgun ? BatWgun(true) : NULL;

	moneyrain001all ? MoneyRain001all(true) : NULL;

	rainbowmenu ? Rainbowmenu(true) : NULL;

	flaregun ? FlareWgun(true) : NULL;

	moneyrain2k ? RainMoney(true) : NULL;

	fiream ? fireammoo(true) : NULL;

	savenewdrop118 ? cashdrop118(true) : NULL;

	air1 ? air(true) : NULL;
	Teleport ? teleport(true) : NULL;

	savenewdrop117 ? cashdrop117(true) : NULL;

	savenewdrop112 ? cashdrop112(true) : NULL;

	savenewdrop113 ? cashdrop113(true) : NULL;

	savenewdrop115 ? cashdrop115(true) : NULL;

	shootcontainier ? shootContainer(true) : NULL;

	radiomob ? modradio(true) : NULL;

	savenewdrop88 ? cashdrop88(true) : NULL;

	moneyGun ? MoneyGun(true) : NULL;

	meeleexp ? melexp(true) : NULL;

	isSeatBelt ? seatBelt(true) : NULL;

	moneyGun99 ? MoneyGun99(true) : NULL;

	particle1 ? ParticlE1(true) : NULL;

	Speedometerbool ? Speedometer(true) : NULL;

	moneyGunBag ? MoneyGunBag(true) : NULL;

	moneyGunBagfake ? MoneyGunBagfake(true) : NULL;

	carRPG ? shootRPGCar(true) : NULL;

	ttcar ? TTCar(true) : NULL;

	ttcarflare ? TTCarflare(true) : NULL;



	okokoko ? fearureqeq(true) : NULL;

	VALKYIREROCKET ? valkyirerocket(true) : NULL;

	ride_container ? container_rider(true) : NULL;

	ROPEGUN ? ropegun(true) : NULL;

	CLOWNGUN ? clowngun(true) : NULL;


	stealthnewsafe22 ? newStealthLoop22(true) : NULL;

	runfast ? RunFast(true) : NULL;

	GravityGun ? gravitygun(true) : NULL;

	Rneon ? RainbowNeon(true) : NULL;


	astorrain ? rainastor(true) : NULL;


	editmoney ? MoneyEdit(true) : NULL;

	stickToGround ? vehStuckToGround() : NULL;

	isAutoRegHealth ? AutoRegHealth(true) : NULL;


	phonedisable ? disablephone() : NULL;

	rbgun ? RBGuner(true) : NULL;

	featurePlayermoneyDrop1 ? bPlayerExists(true) : NULL;

	stealthnewsafe ? newStealthLoop(true) : NULL;



	explodeGunall ? ExplodeGunall(true) : NULL;

	mp12 ? pm1(true) : NULL;

	expAmmo ? expAmmos(true) : NULL;

	orbool ? OffRadar(true) : NULL;

	ShootMini ? ShootMiniGun(true) : NULL;

	ShootBall ? ShootBalls(true) : NULL;

	ShootTankR ? ShootTankRounds(true) : NULL;

	ShootT ? ShootTanks(true) : NULL;

	ShootR ? ShootRocket(true) : NULL;

	randommon ? randommonnn(true) : NULL;

	cyrclenew ? CyrcleNew(true) : NULL;

	cloneProtection ? cloneProtection22(true) : NULL;

	dowbool ? DriveOnWater(true) : NULL;

	alldrop ? AllDrop(true) : NULL;

	lookall ? kallall(true) : NULL;

	shootramp ? shootRamp(true) : NULL;



	cargopall ? cargoPall(true) : NULL;

	mcriot ? MCRiot(true) : NULL;


	Stop1 ? stop(true) : NULL;

	qqcar ? QQCar(true) : NULL;



	forceexplodewave ? ForceExplodeWavePED(true) : NULL;

	mgun ? Mcgun(true) : NULL;

	rlbool ? HasPaintLoop(true) : NULL;



	isInfBoost ? InfiniteBoost(true) : NULL;

	ffgun ? FFWgun(true) : NULL;

	moneydropp ? dildomoneylocal(true) : NULL;





	okokokloo ? okokok(true) : NULL;

	launchnearbyvehiclesbool ? launchnearbyvehicles(true) : NULL;

	infammo ? noreloadv(true) : NULL;

	unlimitedorb ? orbital(true) : NULL;

	boostbool ? carboost(true) : NULL;

	ShootHydra ? Shootthehydra(true) : NULL;

	Rainb ? Rainbow(true) : NULL;

	savenewdrop ? cashdrop(true) : NULL;




	superman ? SuperMan(true) : NULL;


	stealthnewsafe22ok ? newStealthLoop22ok(true) : NULL;

	afkanti ? antiAFK(true) : NULL;

	ShootWeaponT ? ShootWeaponTank(true) : NULL;

	savenewdrop10 ? cashdrop10(true) : NULL;

	savenewdrop11 ? cashdrop11(true) : NULL;

	moneyGundel ? MoneyGunDel(true) : NULL;

	savenewdrop3 ? cashdrop3(true) : NULL;

	llcar ? LLCar(true) : NULL;

	stsp ? sendtospprotec(true) : NULL;

	polficl ? ficklpol(true) : NULL;

	savenewdrop77 ? cashdrop77(true) : NULL;

	savenewdrop114 ? cashdrop114(true) : NULL;

	anewgun ? AneWgun(true) : NULL;


	jokokok ? teleport_to_marker(true) : NULL;

	savenewdrop119 ? cashdrop119(true) : NULL;

	savenewdrop1191 ? cashdrop1191(true) : NULL;

	savenewdrop1192 ? cashdrop1192(true) : NULL;

	savenewdrop1193 ? cashdrop1193(true) : NULL;

	Superr ? SuperDooper(true) : NULL;

	cashself1 ? CashSelf1(true) : NULL;

	savenewdrop1194 ? cashdrop1194(true) : NULL;

	savenewdrop1195 ? cashdrop1195(true) : NULL;

	shoottoilt ? shootToilt(true) : NULL;

	savenewdrop1196 ? cashdrop1196(true) : NULL;

	savenewdrop1197 ? cashdrop1197(true) : NULL;

	savenewdrop1198 ? cashdrop1198(true) : NULL;

	savenewdrop1199 ? cashdrop1199(true) : NULL;

	savenewdrop116 ? cashdrop116(true) : NULL;

	delgun ? DelGun(true) : NULL;

	resetv ? reset(true) : NULL;

	extremejump ? Extremejump(true) : NULL;

	savenewdrop12 ? cashdrop12(true) : NULL;

	taip1 ? Taip(true) : NULL;



	trns ? remore(true) : NULL;

	sounderrorall ? sound55errorall(true) : NULL;

	LASERSIGHT ? lasersight(true) : NULL;

	meclosefee ? closedoorsme(true) : NULL;

	rpstealth ? StealthRP(true) : NULL;



	stealthnewsafe22okoklol ? newStealthLoop22okoklol(true) : NULL;




	explodeGun223 ? ExplodeGun223(true) : NULL;

	DisplayFPS ? featureDisplayFPS(true) : NULL;


	savenewdrop13 ? cashdrop13(true) : NULL;

	remover ? RemoveR(true) : NULL;



	removerlol ? RemoveRlop(true) : NULL;

	cashrandhgg ? cashrandhggh(true) : NULL;

	namesesp ? NameSP(true) : NULL;

	savenewdrop44 ? cashdrop44(true) : NULL;

	proxgun ? proxWgun(true) : NULL;




	explodeGun223 ? ExplodeGun223(true) : NULL;

	Time ? time(true) : NULL;

	Drift ? DriftMode(true) : NULL;

	ghostrider ? firerider(true) : NULL;

	fireGun ? FireGun(true) : NULL;


	stealthnewsafe22okok ? newStealthLoop22okok(true) : NULL;


	playerinvisibility ? Invisibility(true) : NULL;



	FIREBREATH ? firebreath(true) : NULL;


	fixfire ? firefix(true) : NULL;

	hornnearbyvehiclesbool ? hornnearbyvehicles(true) : NULL;

	moneyrain001 ? MoneyRain001(true) : NULL;

	playernoragdoll ? NoRagdoll(true) : NULL;



	ggcar ? GGCar(true) : NULL;

	qqcarxdsa ? QQCarsd(true) : NULL;

	leagun ? leaWgun(true) : NULL;

	ShootBuz ? ShootBuzzard(true) : NULL;

	pedGun ? PedGun(true) : NULL;

	RHINO ? RHINOBuzzard(true) : NULL;

	ShootDump ? ShootDumpTruck(true) : NULL;

	Adder ? Addershoot(true) : NULL;

	featureVisionDrunk ? featureVisionDrunkUpdated(true) : NULL;  //where is now the loop ?

	ChaosMode ? Chaos(true) : NULL;

	Weapontest ? weapontest(true) : NULL;

	Backboost ? backboost(true) : NULL;


	snowballs ? Snowballs(true) : NULL;

	rocktest ? RockTest(true) : NULL;

	savenewdrop111 ? cashdrop111(true) : NULL;

	trigger ? triggerbot(true) : NULL;

	Vehgun145 ? vehgun145(true) : NULL;

	waterGun ? WaterGun(true) : NULL;

	RPLoop ? rpLoop() : NULL;

	savenewdrop55 ? cashdrop55(true) : NULL;

	explodeGun ? ExplodeGun(true) : NULL;

	tipTruck ? TipTruck(true) : NULL;

	stealth ? Stealth(true) : NULL;

	stealth2 ? Stealth2(true) : NULL;




	gay ? Gay(true) : NULL;

	gay2 ? Gay2(true) : NULL;

	AsteroidShower ? AsteroidShowerToggle(true) : NULL;




	PLAYER::_SET_WORLD_BOUNDS_LIMIT(FLT_MAX, FLT_MAX, FLT_MAX);
	for (int ix = 0; ix < 33; ix++)
	{
		if (freezed[ix])
		{
			Freezer(ix);
		}
		if (cargop[ix])
		{
			cargoP(ix);
		}
		if (undrivablecar[ix])
		{
			undrivablecar2(ix);
		}
		if (spectate[ix])
		{
			specter(ix);
		}
		if (playerfireloop[ix])
		{
			FireLoop(ix);
		}
		if (playerwaterloop[ix])
		{
			WaterLoop(ix);
		}
		if (savenewdrop2[ix])
		{
			cashdrop2(ix);
		}
		if (savenewdrop2[ix])
		{
			cashdrop2(ix);
		}
		if (savenewdrop204[ix])
		{
			cashdrop204(ix);
		}
		if (savenewdrop21[ix])
		{
			cashdrop21(ix);
		}
		if (savenewdrop4[ix])
		{
			cashdrop4(ix);
		}
		if (pickup122[ix])
		{
			droppickup(ix);
		}
		if (savenewdrop5[ix])
		{
			cashdrop5(ix);
		}
		if (savenewdrop999[ix])
		{
			cashdrop999(ix);
		}
		if (savenewdropbag[ix])
		{
			cashdropbag(ix);
		}
		if (savenewdrop6[ix])
		{
			cashdrop6(ix);
		}
		if (savenewdrop222[ix])
		{
			cashdrop222(ix);
		}
		if (savenewdrop2444[ix])
		{
			cashdrop2444(ix);
		}
		if (geotit[ix])
		{
			titgeo(ix);
		}
		if (savenewdrop333[ix])
		{
			cashdrop333(ix);
		}
		if (moneyguntoggles[ix])
		{
			OtherPlayerMoneyGun(ix);
		}
		if (Vehgunpl[ix])
		{
			vehgunpl(ix);
		}
		if (Vehgunplnew[ix])
		{
			vehgunplnew(ix);
		}
		if (moneyGunBagfakepl[ix])
		{
			moneyGunBagfakeplall(ix);
		}
		if (explodeGunpl[ix])
		{
			ExplodeGunpl(ix);
		}
		if (savenewdrop444[ix])
		{
			cashdrop444(ix);
		}
		if (savenewdrop2229[ix])
		{
			cashdrop2229(ix);
		}
		if (savenewdrop22291[ix])
		{
			cashdrop22291(ix);
		}
		if (savenewdrop22292[ix])
		{
			cashdrop22292(ix);
		}
		if (Stoppl[ix])
		{
			stoppl(ix);
		}
		if (savenewdrop22293[ix])
		{
			cashdrop22293(ix);
		}
		if (savenewdrop22294[ix])
		{
			cashdrop22294(ix);
		}
		if (savenewdrop22295[ix])
		{
			cashdrop22295(ix);
		}
		if (savenewdrop22296[ix])
		{
			cashdrop22296(ix);
		}
		if (savenewdrop22297[ix])
		{
			cashdrop22297(ix);
		}
		if (savenewdrop22298[ix])
		{
			cashdrop22298(ix);
		}
		if (savenewdrop9[ix])
		{
			cashdrop9(ix);
		}
		if (camshaker[ix])
		{
			shakecam(ix);
		}
		if (exploder[ix])
		{
			explodeloop(ix);
		}
		if (playercrash1[ix])
		{
			CrashPlayer(ix);
		}
		if (closedoors[ix])
		{
			doorsclose(ix);
		}
		if (enginealwaysonboolpl[ix])
		{
			enginealwaysonpl(ix);
		}
		if (fixfire2[ix])
		{
			firefix2(ix);
		}
		if (Explodegunpl[ix])
		{
			explodegunl(ix);
		}
		if (loopfick[ix])
		{
			fickloop(ix);
		}
		if (moneyguntogglesfake[ix])
		{
			OtherPlayerMoneyGunfakse(ix);
		}
		if (esper)
		{
			esp(ix);
		}
		if (toBank) {
			StealthDropintee();
		}
		if (toBank15) {
			StealthDropintee15();
		}
		if (toBank16) {
			StealthDropintee16();
		}
		if (toBank110) {
			StealthDropintee110();
		}
		if (PTLoopedO[ix])
		{
			PTLopperO(ix);
		}
		if (Objectgunpl[ix])
		{
			objectgunpl(ix);
		}
		if (orboolfr[ix])
		{
			OffRadarfr(ix);
		}
		if (stickToGround22[ix])
		{
			vehStuckToGround22(ix);
		}
		if (ShootTplpl[ix])
		{
			ShootTanksplpl(ix);
		}
		if (Speedometerboolpl[ix])
		{
			Speedometerpl(ix);
		}
		if (driveitgun[ix])
		{
			gundriveit(ix);
		}
		if (sound1[ix])
		{
			sound11(ix);
		}
		if (sound2[ix])
		{
			sound22(ix);
		}
		if (sound3[ix])
		{
			sound33(ix);
		}
		if (sound4[ix])
		{
			sound44(ix);
		}
		if (sound5[ix])
		{
			sound55(ix);
		}
		if (sounderror[ix])
		{
			sound55error(ix);
		}
		/*if (metior_rain[ix])
		{
			rain_metior(ix);
		}*/
		if (fielfick[ix])
		{
			hhforcefield(ix);
		}

		// In the loop


		for (int i = 0; i <= 32; i++) {
			if (cyrcleon[ix])
			{
				Cyrclelon(ix);
			}
		}

		if (playermon[ix])
		{
			monplayer(ix);
		}


	}


	if (orbool == false) { globalHandle(2421664).At(PLAYER::PLAYER_ID(), 358).At(203).As<int>() = 0; }

	flybool ? playerflyer(true) : NULL;

}


bool Features::driveitgun[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::gundriveit(Player target)
{
	Ped op = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	Vector3 iCoord;
	if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(op, &iCoord))
	{
		int VehID = VEHICLE::GET_CLOSEST_VEHICLE(iCoord.x, iCoord.y, iCoord.z, 100.0f, 0, 71);
		PED::SET_PED_INTO_VEHICLE(op, VehID, -1);
	}



}

bool Features::Testgun = false;
void Features::testgun(bool toggle)
{
	Vector3 iCoord;
	if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), &iCoord))
	{
		int VehID = VEHICLE::GET_CLOSEST_VEHICLE(iCoord.x, iCoord.y, iCoord.z, 100.0f, 0, 71);
		PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), VehID, -1);
	}



}



bool Features::antifkk = false;
void Features::kffanti(bool toggle)
{

	if (antifkk)
	{

		globalHandle(262145).At(86).As<int>() = 999999;
		globalHandle(262145).At(87).As<int>() = 999999;
		globalHandle(262145).At(88).As<int>() = 999999;
		globalHandle(262145).At(89).As<int>() = 999999;

	}

}


bool Features::Backboost = false;
void Features::backboost(bool toggle) {
	Features::boostbool = false;
	if (PLAYER::IS_PLAYER_PRESSING_HORN(PLAYER::PLAYER_ID()))
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::APPLY_FORCE_TO_ENTITY(VehID, 1, 0, -10, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1);
	}
}


bool Features::stealth = false;
void Features::Stealth(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > Features::stealthDelay1)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = true ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Menu::Settings::gayStealth, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);


		Features::TimePD3 = timeGetTime();
	}
}

bool Features::stealth2 = false;
void Features::Stealth2(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > 2000)
	{
		Any var0 = 0ul;
		int var3 = -1586170317;
		int bankVal = true ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Menu::Settings::gayStealth2, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);
	}
}
bool Features::gay = false;
void Features::Gay(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > Features::stealthDelay1)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Menu::Settings::gayStealth, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		TimePD3 = timeGetTime();
	}
}

int TimePD77;
int  Features::amount22 = 15000000;
bool Features::giver = false;
void Features::StealthDropinte(bool toggle) {
	if ((timeGetTime() - TimePD77) > Features::stealthDelay1)
	{
		globalHandle(4262669).At(1).As <int>() = 2147483646;
		globalHandle(4262669).At(7).As <int>() = 2147483647;
		globalHandle(4262669).At(6).As <int>() = 0;
		globalHandle(4262669).At(5).As <int>() = 0;
		globalHandle(4262669).At(3).As <int>() = -1586170317;
		globalHandle(4262669).At(2).As <int>() = Features::amount22;
		globalHandle(4262669).As<int>() = 1;

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount22, 1);

		TimePD77 = timeGetTime();



		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);


	}
}


bool Features::gay2 = false;
void Features::Gay2(bool toggle) {
	if ((timeGetTime() - TimePD77) > Features::stealthDelay1)
	{
		Any var0 = 0ul;
		int var3 = -1586170317;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Features::amount22, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		TimePD77 = timeGetTime();
	}
}





bool Features::giver1 = false;
void Features::StealthDropinte22(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > 2000)
	{
		if (amount > 0) {
			Any idk = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(1500000000, 2999999999);
			UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&idk, 1474183246, -1586170317, 1445302971, Features::amount, Features::giver ? 4 : 1);
			UNK3::_NETWORK_SHOP_CHECKOUT_START(idk);
		}
		else if (amount < 0) {
			Any izmon = 2147483647;
			if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&izmon, 1474183246, -1586170317, 1445302971, Features::amount, Features::giver ? 4 : 1)) {
				UNK3::_NETWORK_SHOP_CHECKOUT_START(izmon);
			}
		}


		Features::TimePD3 = timeGetTime();
	}
}



bool Features::Speedometerbool = false;
void Features::Speedometer(bool toggle) {

	Ped ped = PLAYER::PLAYER_PED_ID();
	RequestControlOfEnt(ped);



	bool inVehicle = PED::IS_PED_IN_ANY_VEHICLE(ped, 0);
	std::ostringstream VehicleModel; VehicleModel << "Vehicle:~s~ ";

	std::ostringstream Speed; Speed << "Speed:~s~ ";
	std::ostringstream IsInAVehicle; IsInAVehicle << "In Vehicle:~s~ ";
	if (inVehicle) {
		IsInAVehicle << "Yes";
		Hash vehHash = ENTITY::GET_ENTITY_MODEL(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		VehicleModel << UI::_GET_LABEL_TEXT(VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(vehHash));
		float vehSpeed = ENTITY::GET_ENTITY_SPEED(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		float vehSpeedConverted;
		vehSpeedConverted = round(vehSpeed *3.6);

		Speed << vehSpeedConverted << " ~r~KM/H";

		Menu::AddSmallInfo2((char*)Speed.str().c_str(), 5);
	}

}

int  Features::amount5 = 0;
bool Features::removerlol = false;
void Features::RemoveRlop(bool toggle) {
	if ((timeGetTime() - Features::TimePD77) > Features::stealthDelaydel)
		if (Features::StealthDropinte) {
			if (Features::removerlol) //detected // BUT IS WORKING AND OTHER PEOPLE HAVE NOT USED THE OPTION
			{
				int bankVal = false ? 4 : 1;
				if (Features::amount5 > 0) {
					Any idk = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(1000000000, 2999999999);
					UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&idk, 1474183246, 454359403, 537254313, Features::amount5, bankVal);
					UNK3::_NETWORK_SHOP_CHECKOUT_START(idk);
				}
				else if (Features::amount5 < 0) {
					Any izmon = 2147483647;
					if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&izmon, 1474183246, 454359403, 537254313, Features::amount5, bankVal)) {
						UNK3::_NETWORK_SHOP_CHECKOUT_START(izmon);
					}
				}

				Features::TimePD77 = timeGetTime();
			}

			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Remove your Money");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);



		}
}




bool Features::remover = false;
void Features::RemoveR(bool toggle) {
	if ((timeGetTime() - Features::TimePD77) > Features::stealthDelaydel)
		if (Features::StealthDropinte) {
			if (Features::remover) //detected // BUT IS WORKING AND OTHER PEOPLE HAVE NOT USED THE OPTION
			{

				if (Features::amount5 > 0) {
					Any idk = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(1000000000, 2999999999);
					UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&idk, 1474183246, 454359403, 537254313, Features::amount5, Features::remover ? 4 : 1);
					UNK3::_NETWORK_SHOP_CHECKOUT_START(idk);
				}
				else if (Features::amount5 < 0) {
					Any izmon = 2147483647;
					if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&izmon, 1474183246, 454359403, 537254313, Features::amount5, Features::remover ? 4 : 1)) {
						UNK3::_NETWORK_SHOP_CHECKOUT_START(izmon);
					}
				}

				Features::TimePD77 = timeGetTime();
			}

			UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
			UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Remove your Money");
			UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
			UI::_DRAW_NOTIFICATION(FALSE, FALSE);



		}
}

Any var0 = 0ul;
int var3 = 312105838;
int bankVal = false ? 4 : 1;

bool Features::TeleportGun = false;
void Features::featureTeleportGun(bool toogle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (ENTITY::DOES_ENTITY_EXIST(playerPed) && PED::IS_PED_SHOOTING(playerPed))
	{
		float xD[6];
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, (Vector3*)xD);
		if (xD[0] != 0 || xD[2] != 0 || xD[4] != 0)
		{
			ENTITY::SET_ENTITY_COORDS(playerPed, xD[0], xD[2], xD[4], 0, true, false, false);
		}
	}
}

bool Features::Superr = false;
void Features::SuperDooper(bool toggle)
{
	if (GetAsyncKeyState(VK_NUMPAD9))
	{
		const int numElements = 10;
		const int arrSize = numElements * 2 + 2;
		Vehicle veh[arrSize];
		veh[0] = numElements;
		setAnimation("rcmpaparazzo_4", "lift_hands_in_air_loop");
		int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
		if (veh != NULL)
		{
			for (int i = 1; i <= count; i++)
			{
				int offsettedID = i;
				if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, 5, 0, 0, 0, 1, false, true, true, true, true);
					STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_trevor1");
					GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_trevor1");
					GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_trev1_trailer_boosh", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
					GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_trev1_trailer_boosh", veh[offsettedID], 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				}
			}
		}
	}
}

bool Features::snowballs = false;
void Features::Snowballs(bool toggle)
{
	globalHandle(262145).At(8316).As<bool>() = Features::snowballs;
}



bool Features::flxneav = false;
void Features::nearbflx(bool toggle)
{


	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Vehicle veh[arrSize];
	veh[0] = numElements;
	setAnimation("rcmpaparazzo_4", "lift_hands_in_air_loop");
	int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	if (veh != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, 5, 0, 0, 0, 1, false, true, true, true, true);

			}
		}
	}


}
std::vector<char*> Features::username;
std::vector<char*> Features::password;
char* Features::Status = "";
bool Features::loggedIn = false;
bool Features::loginAttempted = false;
std::string Features::connstring = std::string("lel");
void Features::login() {

}
void Features::enterInfo() {

}
void Features::typeInUser() {
	Features::username.clear();
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "Username", "", "", "", "", "", 60);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	char* placeholder = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	Features::username.push_back(placeholder);
}
void Features::typeInPass() {
	Features::password.clear();
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "Password", "", "", "", "", "", 60);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	char* placeholder2 = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
	Features::password.push_back(placeholder2);
}

bool Features::savenewdrop55 = false;
void Features::cashdrop55(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 1000)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE); // which method? moneybag prop on object spawn
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 2000, GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

void shootAtPed(Player selectedPlayer)
{
	Vector3 Mouth = PED::GET_PED_BONE_COORDS(selectedPlayer, SKEL_Head, 0.1f, 0.0f, 0.0f);
	PED::SET_PED_SHOOTS_AT_COORD(PLAYER::PLAYER_PED_ID(), Mouth.x, Mouth.y, Mouth.z, true);
}



bool Features::savenewdrop77 = false;
void Features::cashdrop77(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1999, GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop88 = false;
void Features::cashdrop88(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1999, GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop111 = false;
void Features::cashdrop111(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1777, GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_armour_pickup"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop112 = false;
void Features::cashdrop112(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1666, GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop113 = false;
void Features::cashdrop113(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_handbag"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_handbag"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1555, GAMEPLAY::GET_HASH_KEY("prop_ld_handbag"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_handbag"));
		}

		Features::TimePD1 = timeGetTime();

	}

}


bool Features::savenewdrop114 = false;
void Features::cashdrop114(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1444, GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_gun_case_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop115 = false;
void Features::cashdrop115(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1333, GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_golf_bag_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop116 = false;
void Features::cashdrop116(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_cs_whiskey_bottle"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_cs_whiskey_bottle"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1222, GAMEPLAY::GET_HASH_KEY("prop_cs_whiskey_bottle"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_cs_whiskey_bottle"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop117 = false;
void Features::cashdrop117(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_cs_toaster"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_cs_toaster"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1111, GAMEPLAY::GET_HASH_KEY("prop_cs_toaster"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_cs_toaster"));
		}

		Features::TimePD1 = timeGetTime();

	}
}


bool Features::savenewdrop118 = false;
void Features::cashdrop118(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 1000, GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdinner_forcerop119 = false;
void Features::forcoook(bool toggle) {
	if (GetAsyncKeyState(VK_NUMPAD9))
	{
		const int numElements = 10;
		const int arrSize = numElements * 2 + 2;
		Vehicle veh[arrSize];
		veh[0] = numElements;
		//setAnimation("rcmpaparazzo_4", "lift_hands_in_air_loop");
		int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
		if (veh != NULL)
		{
			for (int i = 1; i <= count; i++)
			{
				int offsettedID = i;
				if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, 5, 0, 0, 0, 1, false, true, true, true, true);
					STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_trevor1");
					GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_trevor1");
					GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_trev1_trailer_boosh", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
					GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_trev1_trailer_boosh", veh[offsettedID], 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

				}
			}
		}
	}
}

bool Features::savenewdrop119 = false;
void Features::cashdrop119(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_cs_beer_bot_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_cs_beer_bot_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 999, GAMEPLAY::GET_HASH_KEY("prop_cs_beer_bot_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_cs_beer_bot_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1191 = false;
void Features::cashdrop1191(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 888, GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"));
		}

		Features::TimePD1 = timeGetTime();

	}
}




bool Features::savenewdrop1192 = false;
void Features::cashdrop1192(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 777, GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_acc_guitar_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1193 = false;
void Features::cashdrop1193(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 666, GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1194 = false;
void Features::cashdrop1194(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 555, GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1195 = false;
void Features::cashdrop1195(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_printer_02"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_printer_02"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 444, GAMEPLAY::GET_HASH_KEY("prop_printer_02"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_printer_02"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1196 = false;
void Features::cashdrop1196(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_purse_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_purse_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 333, GAMEPLAY::GET_HASH_KEY("prop_ld_purse_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_purse_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1197 = false;
void Features::cashdrop1197(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_rub_binbag_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_rub_binbag_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 222, GAMEPLAY::GET_HASH_KEY("prop_ld_rub_binbag_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_rub_binbag_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::Stop1 = false;
void Features::stop(bool toggle)
{
	if (stop)
	{
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 0);
	}
}

bool Features::stickToGround22[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::vehStuckToGround22(Player target) {
	Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(PED::GET_VEHICLE_PED_IS_IN(selectedPlayer, 0));
}

bool Features::Stoppl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::stoppl(bool target)
{
	if (stoppl)
	{

		Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(selectedPlayer, 0), 0);

	}

}

bool Features::Stopall = false;
void Features::stopall(bool toggle)
{
	for (int i = 0; i < 32; i++)
	{
		Player allplayers = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(allplayers, 0), 0);
	}
}

void Features::BoatPickup()
{
	globalHandle(2519572).At(823).As<int>() = 1;
}

bool Features::savenewdrop1198 = false;
void Features::cashdrop1198(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 111, GAMEPLAY::GET_HASH_KEY("prop_minigun_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::savenewdrop1199 = false;
void Features::cashdrop1199(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 600)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 100, GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		}

		Features::TimePD1 = timeGetTime();

	}
}





char* Tastatur(char* windowName = "", int maxInput = 21, char* defaultText = "") {
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}



bool Features::savenewdrop204[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop204(Player target) { // ok, so create ambient pickup is very risky yet now


	if ((timeGetTime() - Features::TimePD2) > 1000)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"))) {
			WAIT(0);
		}
		else
		{
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 2000, GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::orbool = false;
void Features::OffRadar(bool toggle)
{
	globalHandle(2423841).At(PLAYER::PLAYER_ID() * 406).As<bool>() = !!!!!false; //i have globals right, but i not find it on freemode.c script lol hm wait i wanna check something 
	globalHandle(2436711).As<int>() = NETWORK::GET_NETWORK_TIME(false);
}

bool Features::offradardeath = false;
void Features::deathoffradar(bool toggle)
{
	Memory::set_value<float>({ 0x8, 0x2A0 }, 0.0f); // is that wroks? XD YES wtf :joy:, i used global handle method xdd but patched and i'm too lazy for find new one
}



bool Features::featureVisionDrunk = false;
void Features::featureVisionDrunkUpdated(bool toggle)
{
	BOOL bPlayerExists = ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID());
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (featureVisionDrunkUpdated)
		if (featureVisionDrunk)
		{
			STREAMING::REQUEST_ANIM_SET("move_m@drunk@verydrunk");
			while (!STREAMING::HAS_ANIM_SET_LOADED("move_m@drunk@verydrunk"))
			{
				WAIT(0);
			}
			PED::SET_PED_MOVEMENT_CLIPSET(playerPed, "move_m@drunk@verydrunk", 1.0f);
			CAM::SHAKE_GAMEPLAY_CAM("DRUNK_SHAKE", 1.0f);
		}
		else
		{
			PED::RESET_PED_MOVEMENT_CLIPSET(playerPed, 1.0f);
			CAM::STOP_GAMEPLAY_CAM_SHAKING(true);
		}
	AUDIO::SET_PED_IS_DRUNK(playerPed, featureVisionDrunk);
}


bool Features::NeverWantedTest1 = false;
void Features::NeverWantedTest2(bool toggle)
{ // wtf is that XD ( BUT IT WORKS GREAT AND WILL NEVER DETECTED, so, it's working same as offset player, offset player info, offset wanted level and set it to 0 xd it's lol
	Memory::set_value<int32_t>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, -1 + 1 - 0 + 1 - 1);
}

bool Features::armorff = false;
void Features::arnor333(bool toggle)
{
	Memory::set_value<int>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , OFFSET_PLAYER_ARMOR }, 1);
}

/*bool Features::neverwanted = false;
void Features::NeverGetWanted(bool toggle)
{
	if (neverwanted == TRUE)
	{
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
		PLAYER::SET_MAX_WANTED_LEVEL(0);// cannot get over 0
	}
	if (neverwanted == FALSE)
	{
		PLAYER::SET_MAX_WANTED_LEVEL(5);
	}
}*/


bool RequestNetworkControl(uint vehID)
{
	int Tries = 0;
	bool hasControl = false;
	bool giveUp = false;

	do
	{
		hasControl = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehID) ? true : false;
		Tries++;
		if (Tries > 300) {
			giveUp = true;
		}

	} while (!hasControl && !giveUp);

	return !giveUp;
}


int Features::attachobj22[100];
int Features::nuattach22 = 1;
void Features::attachobjects222(char* object)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			bool custom = false;
			int hash = 0;
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			hash = GAMEPLAY::GET_HASH_KEY(object);
			if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
			{
				if (STREAMING::IS_MODEL_VALID(hash))
				{
					STREAMING::REQUEST_MODEL(hash);
					if (STREAMING::HAS_MODEL_LOADED(hash))
					{
						Features::attachobj[Features::nuattach] = OBJECT::CREATE_OBJECT(hash, playerPosition.x, playerPosition.y, playerPosition.z, 1, 1, 1);
						if (ENTITY::DOES_ENTITY_EXIST(Features::attachobj[Features::nuattach]))
						{
							ENTITY::ATTACH_ENTITY_TO_ENTITY(Features::attachobj[Features::nuattach], PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 31086, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
							nuattach++;
							if (nuattach22 >= 101) { nuattach = 1; }
						}
					}
				}

			}
		}
	}
}

bool Features::freezed11 = false;
void Features::Freezer11(bool toggle) {
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{


			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			AI::CLEAR_PED_TASKS_IMMEDIATELY(iPed);
			AI::CLEAR_PED_TASKS(iPed);
			AI::CLEAR_PED_SECONDARY_TASK(iPed);


		}
	}


}



bool Features::cloneProtection = false;
void Features::cloneProtection22(bool toggle)
{
	if (cloneProtection)
	{
		if (!CUTSCENE::IS_CUTSCENE_ACTIVE() && !CUTSCENE::IS_CUTSCENE_PLAYING() && !STREAMING::IS_NETWORK_LOADING_SCENE() && !NETWORK::NETWORK_IS_IN_MP_CUTSCENE() && !INTERIOR::IS_INTERIOR_SCENE())
		{
			Ped Closest;
			Vector3 MyPos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			if (PED::GET_CLOSEST_PED(MyPos.x, MyPos.y, MyPos.z, 5, true, true, &Closest, false, true, -1))
			{
				if (ENTITY::GET_ENTITY_MODEL(Closest) == ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()))
				{
					if (!PED::IS_PED_A_PLAYER(Closest))
					{
						if (ENTITY::DOES_ENTITY_EXIST(Closest))
						{
							if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Closest))
							{
								if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(Closest))
								{
									ENTITY::DETACH_ENTITY(Closest, 1, 1);
									ENTITY::SET_ENTITY_COORDS(Closest, 6000.0, 6000.0, 6000.0, true, false, false, true);
									ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Closest, 1, 1);
									PED::DELETE_PED(&Closest);
									ENTITY::DELETE_ENTITY(&Closest);
									notifyMap("Stopped ~r~freeze ~w~attempt.");
								}
							}
						}
					}
				}
			}
		}
	}
}



bool Features::controler = false;
bool Features::infammo = false;
bool Features::freezed[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::Freezer(Player target) {
	Ped vic = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	AI::CLEAR_PED_TASKS_IMMEDIATELY(vic);
	AI::CLEAR_PED_TASKS(vic);
	AI::CLEAR_PED_SECONDARY_TASK(vic);
}

int Features::ExploCh = 1;

void Features::BypassOnlineVehicleKick(Vehicle vehicle)
{
	Player player = PLAYER::PLAYER_ID();
	int var;
	DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
}


bool Features::toBank = false;
void Features::StealthDropintee() {
	if ((timeGetTime() - Features::TimePD3) > 1000)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = 1;

		if (!toBank)
			bankVal = 4;

		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, 10000000, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD3 = timeGetTime();
	}
}


bool Features::toBank15 = false;
void Features::StealthDropintee15() {
	if ((timeGetTime() - Features::TimePD3) > 800)
	{
		int money = 312105838;
		Any transactionID = money;
		if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 15000000, 4))
			UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

		Features::TimePD3 = timeGetTime();
	}
}



bool Features::superman = false;
void Features::SuperMan(bool toggle)
{

	if (GetAsyncKeyState(VK_SPACE))
	{
		ENTITY::APPLY_FORCE_TO_ENTITY(PLAYER::PLAYER_PED_ID(), 1, 0, 0, 10, 0, 0, 0, 1, true, true, true, true, true);
	}
	Hash hash = GAMEPLAY::GET_HASH_KEY("GADGET_PARACHUTE");
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 1, 1);
	GodMode(PLAYER::PLAYER_ID());
	NoRagdoll;

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~g~press Space, W, A, D, S");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Welcome", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	if (ENTITY::IS_ENTITY_IN_AIR(PLAYER::PLAYER_PED_ID()) && !PED::IS_PED_RAGDOLL(PLAYER::PLAYER_PED_ID()))
	{
		if (GetAsyncKeyState(0x57)) // W key
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 0, 0);
		}

		if (GetAsyncKeyState(0x53)) // S key
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 6, 0);
		}
		if (GetAsyncKeyState(VK_SHIFT))
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 6, 0, 0);
		}
	}





	notifyBottom("~r~Use Space to Up and w for Wordward and s for Stop !");

}



void GiveWeaponPed(int Ped, int WeaponHash)
{
	WEAPON::GIVE_WEAPON_TO_PED(Ped, WeaponHash, 9999, 1, 1);

}



void DeletePed(int pedID)
{
	if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(pedID))
		while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(pedID));

	ENTITY::SET_ENTITY_AS_MISSION_ENTITY(pedID, 1, 1);
	PED::DELETE_PED(&pedID);
}


void makePedHostile(uint Ped, int Target, bool choporswat = false, bool isClone = false)
{


	if (choporswat)
	{
		AI::TASK_COMBAT_PED(Ped, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0, 16);
		PED::SET_PED_CAN_SWITCH_WEAPON(Ped, true);
	}
	else
	{
		if (isClone)
		{
			int Hash = ENTITY::GET_ENTITY_MODEL(Ped);
			DeletePed(Ped);

			STREAMING::REQUEST_MODEL(Hash);
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Target), 1);
			if (STREAMING::HAS_MODEL_LOADED(Hash))
			{
				int newPed = PED::CREATE_PED(21, Hash, coords.x, coords.y, coords.z, 0, 1, 0);
				if (ENTITY::GET_ENTITY_HEALTH(newPed) == ENTITY::GET_ENTITY_MAX_HEALTH(newPed))
				{
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Hash);
					RequestNetworkControl(newPed);
					AI::TASK_COMBAT_PED(newPed, PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0, 16);
					PED::SET_PED_CAN_SWITCH_WEAPON(Ped, true);
				}
			}
		}
		else
		{
			int TargetHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Target);
			AI::TASK_COMBAT_PED(Ped, TargetHandle, 0, 16);
		}
	}
}

bool Features::mcriot = false;
void Features::MCRiot(bool toggle)
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);
				GiveWeaponPed(ped[offsettedID], Features::bagHash55);
				makePedHostile(ped[offsettedID], TargetHandle, true);
			}
		}
	}


}


bool Features::peddroper = false;
void Features::proped(bool toggle)
{

	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;
	Vector3 position = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Entity alien = GAMEPLAY::GET_HASH_KEY("A_M_M_Tourist_01");
	STREAMING::REQUEST_MODEL(alien);
	while (!STREAMING::HAS_MODEL_LOADED(alien)) WAIT(0);
	PED::CREATE_PED(26, alien, position.x + 1, position.y + 1, position.z + 1, 0, 1, 1);
	ENTITY::SET_ENTITY_INVINCIBLE(alien, false);
	PED::SET_PED_MONEY(alien, 2000);
	ENTITY::SET_ENTITY_HEALTH(alien, 0);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(alien);


}



bool Features::f9stealth = true;
void Features::F9Stealth() {

	if (IsKeyPressed(VK_F9))
	{

		if ((timeGetTime() - Features::TimePD3) > 800)
		{
			globalHandle(4262669).At(1).As <int>() = 2147483646;
			globalHandle(4262669).At(7).As <int>() = 2147483647;
			globalHandle(4262669).At(6).As <int>() = 0;
			globalHandle(4262669).At(5).As <int>() = 0;
			globalHandle(4262669).At(3).As <int>() = 312105838;
			globalHandle(4262669).At(2).As <int>() = 10000000;
			globalHandle(4262669).As<int>() = 1;


			int iVar0;
			STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
			Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + 10000000, 1);

			Features::TimePD3 = timeGetTime();
		}
	}
}





bool Features::toBank16 = false;
void Features::StealthDropintee16() {
	if ((timeGetTime() - Features::TimePD3) > 800)
	{
		int money = 312105838;
		Any transactionID = money;
		if (UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&transactionID, 1474183246, -1586170317, 1445302971, 12000000, 4))
			UNK3::_NETWORK_SHOP_CHECKOUT_START(transactionID);

		Features::TimePD3 = timeGetTime();
	}
}

bool Features::clearreport = false;
void Features::ClearReport(bool toggle)
{


	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, true);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, true);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_1ST_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_2ND_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_3RD_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_4TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_5TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_6TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_7TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_8TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_9TH_OFFENCE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_NUMDAYS_10TH_OFFENCE"), 0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("BADSPORT_RESET_MINUTES"), 1.0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_BADSPORT_RESET_MINUTES"), 1.0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);
	Hooking::stat_set_float(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OVERALL_BADSPORT"), 0, 1);
	Hooking::stat_set_bool(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_CHAR_IS_BADSPORT"), false, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_BAD_SPORT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHEAT_BITSET"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_REPORT_STRENGTH"), 32, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_COMMEND_STRENGTH"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_FRIENDLY"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_HELPFUL"), 100, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GRIEFING"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_LANGUAGE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_OFFENSIVE_UGC"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_VC_HATE"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_GAME_EXPLOITS"), 0, 1);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MPPLY_ISPUNISHED"), 0, 1);

}

int clone[1000];
int gcount = 1;

void Features::spawn_body(char* cootoSpawn) {
	Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
	Hash railgun = Features::bagHash55;
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
	Hash pedm = GAMEPLAY::GET_HASH_KEY(cootoSpawn);
	STREAMING::REQUEST_MODEL(pedm);
	while (!STREAMING::HAS_MODEL_LOADED(pedm))
		WAIT(0);
	int my_group = PLAYER::GET_PLAYER_GROUP(selectedplayer);
	clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
	PED::SET_PED_AS_GROUP_LEADER(selectedplayer, my_group);
	PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
	PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
	ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
	PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
	WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
	PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
	PED::SET_GROUP_FORMATION(my_group, 3);
	PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
	gcount++;

}

void Features::spawn_body2(char* cootoSpawn) {
	Ped selectedplayer = PLAYER::PLAYER_PED_ID();
	if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
	Hash railgun = Features::bagHash55;
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
	Hash pedm = GAMEPLAY::GET_HASH_KEY(cootoSpawn);
	STREAMING::REQUEST_MODEL(pedm);
	while (!STREAMING::HAS_MODEL_LOADED(pedm))
		WAIT(0);
	int my_group = PLAYER::GET_PLAYER_GROUP(selectedplayer);
	clone[gcount] = PED::CREATE_PED(26, pedm, pos.x + rand() % 1, pos.y + rand() % 1, pos.z + 1, 0, 1, 1);
	PED::SET_PED_AS_GROUP_LEADER(selectedplayer, my_group);
	PED::SET_PED_AS_GROUP_MEMBER(clone[gcount], my_group);
	PED::SET_PED_NEVER_LEAVES_GROUP(clone[gcount], my_group);
	ENTITY::SET_ENTITY_INVINCIBLE(clone[gcount], false);
	PED::SET_PED_COMBAT_ABILITY(clone[gcount], 100);
	WEAPON::GIVE_WEAPON_TO_PED(clone[gcount], railgun, railgun, 9999, 9999);
	PED::SET_PED_CAN_SWITCH_WEAPON(clone[gcount], true);
	PED::SET_GROUP_FORMATION(my_group, 3);
	PED::SET_PED_MAX_HEALTH(clone[gcount], 5000);
	gcount++;

}

bool Features::stickToGround = false;
void Features::vehStuckToGround() {
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
}

void Features::spawn_vehicle54(Hash toSpawn) {
	Hash model = static_cast<Hash>(toSpawn);
	if (STREAMING::IS_MODEL_VALID(model))
	{

		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		float forward = 5.f;
		float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
		float xVector = forward * sin(degToRad(heading)) * -1.f;
		float yVector = forward * cos(degToRad(heading));
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, ourCoords.x + xVector, ourCoords.y + yVector, ourCoords.z, heading, true, true);
		RequestControlOfEnt(veh);
		VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
		auto networkId = NETWORK::VEH_TO_NET(veh);
		ENTITY::_SET_ENTITY_REGISTER(veh, true);
		BypassOnlineVehicleKick(0);
		if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
		if (Features::spawnincar)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
		}
		if (Features::spawnmaxed)
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
			for (int i = 0; i < 50; i++)
			{

				VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
				AUDIO::SET_VEH_RADIO_STATION(veh, "OFF");
				//GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
				//GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", veh, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 2.0, false, false, false);

			}
		}
	}
}




void Features::spawn_vehicle(char* toSpawn) { // what? native is probably detected i spammed it and i got banned for that xD
	Hash model = GAMEPLAY::GET_HASH_KEY(toSpawn);
	if (STREAMING::IS_MODEL_VALID(model))
	{

		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		float forward = 5.f;
		float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
		//float xVector = forward * sin(degToRad(heading)) * -1.f;
		//float yVector = forward * cos(degToRad(heading));
		Vehicle veh = Hooking::create_vehicle(model, &ourCoords, heading, true, true);
		RequestControlOfEnt(veh);
		VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		NETWORK::NETWORK_FADE_IN_ENTITY(veh, 0);
		DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
		auto networkId = NETWORK::VEH_TO_NET(veh);
		ENTITY::_SET_ENTITY_REGISTER(veh, true);
		BypassOnlineVehicleKick(0);
		if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
		if (Features::spawnincar)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
		}
		if (Features::spawnmaxed)
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
			for (int i = 0; i < 50; i++)
			{

				VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
				AUDIO::SET_VEH_RADIO_STATION(veh, "OFF");
				//GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
				//GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", veh, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 2.0, false, false, false);

			}
		}
	}

}

bool Features::closedoors[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::doorsclose(Player target) {



	Player selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	VEHICLE::SET_VEHICLE_DOORS_SHUT(PED::GET_VEHICLE_PED_IS_USING(selectedplayer), true);


}



void Features::spawn_vehiclealone(char* toSpawn) {
	Hash model = GAMEPLAY::GET_HASH_KEY(toSpawn);
	if (STREAMING::IS_MODEL_VALID(model))
	{

		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), false);
		float forward = 5.f;
		float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer));
		float xVector = forward * sin(degToRad(heading)) * -1.f;
		float yVector = forward * cos(degToRad(heading));
		Vehicle veh = Hooking::create_vehicle(model, &ourCoords, heading, true, true);
		RequestControlOfEnt(veh);
		VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		NETWORK::NETWORK_FADE_IN_ENTITY(veh, 0);
		DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
		auto networkId = NETWORK::VEH_TO_NET(veh);
		ENTITY::_SET_ENTITY_REGISTER(veh, true);
		BypassOnlineVehicleKick(0);
		if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
		if (Features::spawnincar)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), veh, -1);
		}
		if (Features::spawnmaxed)
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
			for (int i = 0; i < 50; i++)
			{

				VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
				AUDIO::SET_VEH_RADIO_STATION(veh, "OFF");
				//GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
				//GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_clown_appears", veh, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 2.0, false, false, false);

			}
		}
	}
}

bool Features::lasersight = false;
void Features::LaserSight(bool toggle)
{
	Hash WeapHash;
	if (!lasersight)
	{
		lasersight = true;
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::ENABLE_LASER_SIGHT_RENDERING(true);
		notifyMap("Laser Sight: ~b~Enabled");
	}
	else
	{
		lasersight = false;
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::ENABLE_LASER_SIGHT_RENDERING(false);
		notifyMap("Laser Sight: ~r~Disabled");
	}
}




bool Features::rbgun = false;
void Features::RBGuner(bool toggle) {
	Hash WeapHash;
	WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
	WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-1, 8));
}
bool Features::cstrcmp(const char* s1, const char* s2)
{
	while (*s1 && (*s1 == *s2))
		s1++, s2++;
	if (*(const unsigned char*)s1 - *(const unsigned char*)s2 == 0)
		return true;
	else
		return false;
}

void Features::TPtoWaypoint()
{
	int WaypointHandle = UI::GET_FIRST_BLIP_INFO_ID(8);
	if (UI::DOES_BLIP_EXIST(WaypointHandle))
	{
		Vector3 WaypointPos = UI::GET_BLIP_COORDS(WaypointHandle);
		WaypointPos.z += 25.0f;
		int Handle = PLAYER::PLAYER_PED_ID();
		if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
			Handle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::SET_ENTITY_COORDS(Handle, WaypointPos.x, WaypointPos.y, WaypointPos.z, 0, 0, 0, 1);
	}
}

void Features::LockPlayersDoors()
{
	int Player = PLAYER::PLAYER_PED_ID();
	int Vehicle = PED::GET_VEHICLE_PED_IS_IN(Player, 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(Vehicle, 4);
	notifyMap("Vehicle Doors: ~HUD_COLOUR_RED~ Locked Vehicle Doors!");
}

void Features::LockPlayersDoors1()
{
	int Player = PLAYER::PLAYER_PED_ID();
	int Vehicle = PED::GET_VEHICLE_PED_IS_IN(Player, 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(Vehicle, 0);
	notifyMap("Vehicle Doors: ~HUD_COLOUR_GREEN~ Open Vehicle Doors");
}


void Features::LockPlayersDoorspl(Player target)
{
	int Player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	int Vehicle = PED::GET_VEHICLE_PED_IS_IN(Player, 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(Vehicle, 4);
	notifyMap("Vehicle Doors: ~HUD_COLOUR_RED~ Locked Players Vehicle Doors!");
}

void Features::LockPlayersDoorsplop(Player target)
{
	int Player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	int Vehicle = PED::GET_VEHICLE_PED_IS_IN(Player, 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(Vehicle, 0);
	notifyMap("Vehicle Doors: ~HUD_COLOUR_GREEN~ Open Players Vehicle Doors!");
}


int Features::smpdswimm = 3;
bool Features::fastswim = false;
void Features::SwimFast(bool toggle)
{
	if (!fastswim)
	{
		Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , OFFSET_PLAYER_INFO_SWIM_SPD }, 1);
	}
	else
	{
		Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , OFFSET_PLAYER_INFO_SWIM_SPD }, Features::smpdswimm);
	}
}


int Features::runfast8 = 3;
bool Features::runfast = false;
void Features::RunFast(bool toggle)
{
	if (!runfast)
	{
		Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , OFFSET_PLAYER_INFO_RUN_SPD }, 1);
	}
	else
	{
		Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , OFFSET_PLAYER_INFO_RUN_SPD }, Features::runfast8);
	}
}




bool Features::explodeGunpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::ExplodeGunpl(Player target) {
	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

	if (PED::IS_PED_SHOOTING(ped))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &coords))
		{
			FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 10.0f, false, false, false);
		}

	}
}

void RequestingControl(Entity e)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
	if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(e))
		WAIT(0);
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
}

void Features::Airstrike()
{
	globalHandle(2519572).At(4376).As<int>() = 1;
}

void Features::TPForward()
{
	Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	float forward = 5.f;
	float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
	float xVector = forward * sin(degToRad(heading)) * -1.f;
	float yVector = forward * cos(degToRad(heading));
	int Handle = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0)) {
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Handle, false), ourCoords.x + xVector, ourCoords.y + yVector, ourCoords.z, 0, 0, 0, 1);
		notifyMap("Teleported!");
	}
	else {
		ENTITY::SET_ENTITY_COORDS(Handle, ourCoords.x + xVector, ourCoords.y + yVector, ourCoords.z, 0, 0, 0, 1);
		notifyMap("Teleported!");
	}

}

bool Features::forcedefense = false;
void Features::ForceDefense(bool toggle)
{
	bool exploded = false;
	int LocalID = PLAYER::PLAYER_ID();
	int LocalPED = PLAYER::PLAYER_PED_ID();
	for (int i = 0; i < 30; i++)
	{
		if (PLAYER::IS_PLAYER_TARGETTING_ENTITY(i, LocalPED) && !exploded)
		{
			Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), true);
			FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 1, 5.0, 0, 1, 0);
			exploded = true;
		}
	}
}

/*bool Features::vis1 = false;
void Features::HeatVision(bool toggle)
{
	if (vis1 == false)
	{
		vis1 = true;
		GRAPHICS::SET_SEETHROUGH(1);
		notifyMap("HeatVision ~g~ON", 2000);
	}
	else
	{
		vis1 = false;
		GRAPHICS::SET_SEETHROUGH(0);
		notifyMap("HeatVision ~r~OFF", 2000);
	}
}*/

bool Features::Speedometerboolpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::Speedometerpl(Player target) {

	Ped ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	RequestControlOfEnt(ped);



	bool inVehicle = PED::IS_PED_IN_ANY_VEHICLE(ped, 0);
	std::ostringstream VehicleModel; VehicleModel << "Vehicle:~s~ ";

	std::ostringstream Speed; Speed << "Speed:~s~ ";
	std::ostringstream IsInAVehicle; IsInAVehicle << "In Vehicle:~s~ ";
	if (inVehicle) {
		IsInAVehicle << "Yes";
		Hash vehHash = ENTITY::GET_ENTITY_MODEL(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		VehicleModel << UI::_GET_LABEL_TEXT(VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(vehHash));
		float vehSpeed = ENTITY::GET_ENTITY_SPEED(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		float vehSpeedConverted;
		vehSpeedConverted = round(vehSpeed *3.6);

		Speed << vehSpeedConverted << " ~r~KM/H";

		Menu::AddSmallInfo2((char*)Speed.str().c_str(), 5);
	}

}

bool Features::playercrash1[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::CrashPlayer(Player target)
{
	const int maxPeds = 225;
	Ped ClonedPed[maxPeds];
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	Player ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	Vector3 selectedPedPosition = ENTITY::GET_ENTITY_COORDS(ped, FALSE);
	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerPed, FALSE);

	if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(playerPosition.x, playerPosition.y, playerPosition.z, selectedPedPosition.x, selectedPedPosition.y, selectedPedPosition.z, false) > 350.0f)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PED::GET_VEHICLE_PED_IS_IN(ped, 1), FALSE))
		{
			AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
			AI::CLEAR_PED_SECONDARY_TASK(ped);
		}
		notifyMap("~b~Wait a moment, player is being crashed....");
		for (int i = 0; i < maxPeds; i++)
		{

			ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
			WAIT(0);
			RequestingControl(ClonedPed[i]);
			WAIT(0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
			AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
			WAIT(5);
		}
		if (ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(ped)))
		{
			notifyMap("~r~First Attempt Failed~b~ ... Wait While We Try A Second Attempt!");
			for (int i = 0; i < maxPeds; i++)
			{
				ClonedPed[i] = PED::CLONE_PED(ped, ENTITY::GET_ENTITY_HEADING(playerPed), 1, 1);
				WAIT(0);
				RequestingControl(ClonedPed[i]);
				WAIT(0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(ClonedPed[i], ped, PED::GET_PED_BONE_INDEX(ped, SKEL_ROOT), 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, false, false, false, false, 2, true);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(ped);
				WAIT(3);
			}
		}
		notifyMap("~b~Crashed! ~b~Player will now leave the session");
		for (int i = 0; i < maxPeds; i++)
		{
			WAIT(10);
			RequestingControl(ClonedPed[i]);
			ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&ClonedPed[i]);
			PED::DELETE_PED(&ClonedPed[i]);
		}
	}
	else
	{
		notifyMap("~r~Too Close To The Player For An Crash Attempt.");
	}
}



bool Features::moneyguntoggles[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::OtherPlayerMoneyGun(Player target) {


	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (PED::IS_PED_SHOOTING(ped))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &coords))
		{
			STREAMING::REQUEST_MODEL(Features::bagHash);
			if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
				WAIT(0);
			}
			else {

				Hooking::create_ambient_pickup(0x1E9A99F8, &coords, 0, Features::DropAmount3, Features::bagHash, FALSE, TRUE);

				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
			}
		}

	}
}

//bool Features::moneyguntogglesfake[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
//void Features::OtherPlayerMoneyGunfakse(Player target) {
//
//	if ((timeGetTime() - Features::TimePD2) > 20)
//	{
//
//			Ped ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
//			if (PED::IS_PED_SHOOTING(ped))
//			{
//				Vector3 coords;
//				if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &coords))
//				{
//					STREAMING::REQUEST_MODEL(Features::bagHash4);
//					if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash4)) {
//						WAIT(0);
//					}
//					else {
//						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(ped, FALSE);
//						playerPosition.z = playerPosition.z + 1;
//						Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, 0, Features::bagHash, FALSE, TRUE);
//
//						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash4);
//					}
//				}
//
//			}
//			Features::TimePD2 = timeGetTime();
//	}
//
//}

bool Features::CLOWNGUN = false;
void Features::clowngun(bool toggle)
{
	if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
		STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2");
		while (!STREAMING::HAS_NAMED_PTFX_ASSET_LOADED("scr_rcbarry2")) WAIT(0);

		auto w = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(WEAPON::GET_SELECTED_PED_WEAPON(PLAYER::PLAYER_PED_ID()), &v0, &v1);
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_rcbarry2");
		GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2("muz_clown", w, (v0.x - v1.x) / 2.0f + 0.7f, 0.f, 0.f, 0.f, 180.f, 0.f, 1.f, 1, 1, 1);
	}
}

bool Features::moneyguntogglesfake[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::OtherPlayerMoneyGunfakse(Player target) // now i need try it? yes
{

	if ((timeGetTime() - Features::TimePD2) > 20)
	{

		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);

		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			playerPosition.z = playerPosition.z + Features::DropHeight;
			for (int i = 0; i < Features::Bagslol; i++)
			{
				Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, Features::DropAmountggg1, Features::bagHash, FALSE, TRUE);
			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
		}

		Features::TimePD2 = timeGetTime();

	}
}



bool Features::explodeGunall = false;
void Features::ExplodeGunall(bool toggle) {


	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			if (explodeGunall)
			{
				if (PED::IS_PED_SHOOTING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i))) {
					float Tmp[6];
					WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), (Vector3*)Tmp);
					if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
					{
						FIRE::ADD_EXPLOSION(Tmp[0], Tmp[2], Tmp[4], Menu::Settings::Explosionfick, Menu::Settings::ficksize, true, false, 0);
					}
				}
			}

		}

	}
}

bool Features::FIREBREATH = false;
void Features::firebreath(bool toggle)
{
	float XPos = 0.02, YPos = 0.2, ZPos = 0.0, XOff = 90.0, YOff = -100.0, ZOff = 90.0;

	STREAMING::REQUEST_NAMED_PTFX_ASSET("core");
	GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("core");
	if ((timeGetTime() - Features::TimePD5) > 200)
	{
		int ptfx = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2("ent_sht_flame", PLAYER::PLAYER_PED_ID(), XPos, YPos, ZPos,
			XOff, YOff, ZOff, SKEL_Head, 1, 1, 1, 1);
		Features::TimePD5 = timeGetTime();
	}
	STREAMING::REMOVE_PTFX_ASSET();
}

bool Features::mp12 = false;
void Features::pm1(bool toggle) {

	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{
			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			if (PED::IS_PED_SHOOTING(iPed))
			{
				Vector3 coords;
				if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(iPed, &coords))
				{
					STREAMING::REQUEST_MODEL(Features::bagHash);
					if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
						WAIT(0);
					}
					else {

						Hooking::create_ambient_pickup(0x1E9A99F8, &coords, 0, Features::DropAmount3, Features::bagHash, FALSE, TRUE);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);

					}
				}
			}
		}
	}
}



bool Features::playerwaterloopall = false;
void Features::WaterLoopall(bool toggle)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			Vector3 Pos = ENTITY::GET_ENTITY_COORDS(iPed, true);
			FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 13, 5, true, 0, 0);



		}
	}
}





bool Features::pickup122[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::droppickup(Player target) {


	Ped selectedplayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (!ENTITY::DOES_ENTITY_EXIST(selectedplayer)) return;
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(selectedplayer, 1);
	OBJECT::CREATE_AMBIENT_PICKUP(Features::bagHash1, pos.x, pos.y, pos.z + 1.5, 0, 100000, 1, 0, 1);



}











/*bool Features::neverwanted = false;
void Features::NeverGetWanted(bool toggle)
{
if (neverwanted == TRUE)
{
PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
PLAYER::SET_MAX_WANTED_LEVEL(0);// cannot get over 0
}
if (neverwanted == FALSE)
{
PLAYER::SET_MAX_WANTED_LEVEL(5);
}
}*/

bool Features::gotmode = false;
void Features::godlol(bool toggle) {

	if (gotmode)
	{
		uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()));
		VEHICLE::SET_VEHICLE_FIXED(Vehicle);
		VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
		VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);

	}


}


bool Features::playerGodMode = false;
void Features::GodMode(bool toggle) {

	std::vector< DWORD > God_Mode = { 0x08, 0x189 };
	Memory::set_value< bool >(God_Mode, toggle);

}



int Features::TimePD;
int Features::TimePD1;
int Features::TimePD2;
int Features::TimePD3;
int Features::TimePD4;
int Features::TimePD5;
int Features::TimePD6;
int Features::TimePD7;
int Features::TimePD8;
int Features::TimePD77;
bool Features::playerfireloop[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::FireLoop(Player target)
{
	Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(selectedPlayer, true);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 12, 5, true, 0, 0);
}

std::string get_ingame_keyboard_result()
{
	std::string    r = "!!INVALID!!";
	if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD())
	{
		char* pCh = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
		if (pCh != nullptr)
			r = pCh;
	}
	return r;
}







bool Features::playerfireloopall = false;
void Features::FireLoopall(bool toggle)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			Vector3 Pos = ENTITY::GET_ENTITY_COORDS(iPed, true);
			FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 12, 5, true, 0, 0);

		}
	}
}

char* CharKeyboard1(char* windowName = "", int maxInput = 21, char* defaultText = "")
{
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "", "", defaultText, "", "", "", maxInput);
	while (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 0) WAIT(0);
	if (!GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()) return "";
	return GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
}

void Features::setplayername(std::string& name)
{
	size_t newLen = name.size() + 1;
	if (newLen <= 1 || newLen > 20)
		return;
	char    buffer[0x20] = {};
	char*    pSearch = (char*)Hooking::m_onlineName + 0x5C;
	size_t    curLen = strlen(pSearch) + 1;
	strncpy_s(buffer, pSearch, curLen);
	for (uint32_t i = 0, found = 0, match = 0; found < 4; ++pSearch)
	{
		if (*pSearch != buffer[i])
			goto LABEL_RESET;
		if (++match < curLen)
		{
			++i;
			continue;
		}
		strncpy_s(pSearch - i, newLen, &name[0], newLen);
		++found;
	LABEL_RESET:
		i = match = 0;
	}
	strncpy(Hooking::get_player_name(PLAYER::PLAYER_ID()), &name[0], newLen);
}
void Features::NameChanger()
{
	CharKeyboard1("", 21, "");
	std::string str = get_ingame_keyboard_result();
	if (str != "!!INVALID!!" && str != "")
	{
		setplayername(str);
	}
}

bool Features::radiomob = false;
void Features::modradio(bool toggle)
{

	int station = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();
	AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true);
	AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);
	AUDIO::SET_RADIO_TO_STATION_INDEX(station);

}

bool Features::playerwaterloop[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::WaterLoop(Player target)
{
	Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(selectedPlayer, true);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 13, 5, true, 0, 0);
}

bool Features::isSeatBelt = false;
void Features::seatBelt(bool toggle) {
	if (isSeatBelt) {
		Memory::set_value<int>({ 0x08, 0x13EC }, 201);
	}
	else {
		Memory::set_value<int>({ 0x08, 0x13EC }, 200);
	}
}
int getHost()
{
	return NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0);
}
char* getHostName()
{
	return PLAYER::GET_PLAYER_NAME(getHost());
}
bool cstrcmp1(const char* s1, const char* s2)
{
	while (*s1 && (*s1 == *s2))
		s1++, s2++;
	if (*(const unsigned char*)s1 - *(const unsigned char*)s2 == 0)
		return true;
	else
		return false;
}
int getNumPlayers()
{
	int Amount = 0;
	for (int i = 0; i < 18; i++)
	{
		if (!(cstrcmp1(PLAYER::GET_PLAYER_NAME(i), "-")))
			Amount++;
	}
	return Amount;
}
int getFreeSpots()
{
	int amount = getNumPlayers();
	return (18 - amount);
}




bool Features::playerinvisjoooohhibility = false;
void Features::lobbyinfo(bool toggle) {
	if (lobbyinfo)
	{
		/*	memset(VEH, 0, sizeof(VEH));
		memset(PED1, 0, sizeof(PED1));
		memset(HST, 0, sizeof(HST));
		memset(NUM, 0, sizeof(NUM));*/
		char* Host = getHostName();
		if (cstrcmp1(Host, "-"))
			Host = "~r~Singleplayer";
		std::string HST2;
		Menu::Main::ExtraTitle(Host = "~r~Lobby Info");
		if (cstrcmp1(Host, "-")) {
			HST2 = "Server Host: ~r~Singleplayer";
		}
		else {
			HST2 = "Server Host: ~b~" + std::string(getHostName());
		}
		std::string NUM2 = "Free Spots: ~b~" + std::to_string(getFreeSpots());
		std::string VEH2 = "Time Since Last Collision: ~b~" + std::to_string((float)PLAYER::GET_TIME_SINCE_PLAYER_HIT_VEHICLE(PLAYER::PLAYER_ID()) / 1000);
		std::string PED12 = "Time Since Last Hit n Run: ~b~" + std::to_string((float)PLAYER::GET_TIME_SINCE_PLAYER_HIT_PED(PLAYER::PLAYER_ID()) / 1000);
		Menu::Main::ExtraOption((char*)HST2.c_str());
		Menu::Main::ExtraOption((char*)NUM2.c_str());
		Menu::Main::ExtraOption((char*)VEH2.c_str());
		Menu::Main::ExtraOption((char*)PED12.c_str());

	}
}//drawTalker(TLK, i);

bool Features::playerinvisibility = false;
void Features::Invisibility(bool toggle)
{
	if (toggle == true)
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), false, false);
	}
	else
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, false);
	}
}



bool Features::playernoragdoll = false;
void Features::NoRagdoll(bool toggle)
{
	Memory::set_value<DWORD>({ OFFSET_PLAYER, OFFSET_PLAYER_INFO, OFFSET_PLAYER_RAGDOLL }, toggle ? 0x20 : 0x01);
	PED::SET_PED_RAGDOLL_ON_COLLISION(PLAYER::PLAYER_PED_ID(), !toggle);
	PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(PLAYER::PLAYER_PED_ID(), !toggle);
	PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_PED_ID(), !toggle);
}


/*bool Features::playersuperjump = false;
void Features::SuperJump(bool toggle)
{
	Player playerPed = PLAYER::PLAYER_PED_ID();
	GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_ID()); //this native is detected like last year no fix.ok remove theseur
	GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(playerPed);
}*/






int Features::Online::selectedPlayer = 0;
void Features::Online::TeleportToPlayer(Player player) {

	Entity handle;
	Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(player), false);
	PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false) ? handle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()) : handle = PLAYER::PLAYER_PED_ID();
	ENTITY::SET_ENTITY_COORDS(handle, coords.x, coords.y, coords.z, false, false, false, false);
	Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
}

int Features::goof2 = 0;
void Features::ChangeWantedgoof(int level) {

	int time = TIME::GET_CLOCK_HOURS();
	NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(time, 10, 10);
	NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(Features::goof2, 0, 0);
}

void Features::SetRank(int rpvalue)
{
	if (rpvalue < 0 && rpvalue > 8000)
	{
		rpvalue = 8000;
	}
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), Features::Levels[rpvalue], 0);
	Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), Features::Levels[rpvalue], 0);
}



int Features::playerWantedLevel = 0;
void Features::ChangeWanted(int level) {
	Memory::set_value<int32_t>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, Features::playerWantedLevel - 1 + 1 - 0 + 1 - 1);
}


int Features::GetWanted(Player player) {
	return PLAYER::GET_PLAYER_WANTED_LEVEL(player);
}

bool Features::RPLoop = false;
int Features::RPLoopDelay = 5;
int Rptick2 = 0;
int Rptick = 0;
void Features::rpLoop() {
	if (Features::RPLoop)
	{
		Rptick++;
		if (Rptick > Features::RPLoopDelay) {
			Memory::set_value<int>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, 5);
			Rptick2++;
			if (Rptick2 > Features::RPLoopDelay) {
				Memory::set_value<int>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, 0);
				Rptick = 0;
				Rptick2 = 0;
			}
		}
	}
	else
	{
		Memory::set_value<int>({ (2 * 4 * 2) / 2, 4 * 1000 + 280, 500 * 4 - 70 + 70 + 72 }, false);

	}
}

bool Features::isInfBoost = false;
void Features::InfiniteBoost(bool toggle) {
	Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_PLAYER_VEHICLE, 0x320 }, 6.f);
}




int Features::Levels[8000] = { 0, 800, 2100, 3800, 6100, 9500, 12500, 16000, 19800, 24000, 28500, 33400, 38700, 44200, 50200, 56400, 63000, 69900, 77100, 84700, 92500, 100700, 109200, 118000, 127100, 136500, 146200,
156200, 166500, 177100, 188000, 199200, 210700, 222400, 234500, 246800, 259400, 272300, 285500, 299000, 312700, 326800, 341000, 355600, 370500, 385600, 401000, 416600, 432600, 448800, 465200, 482000, 499000,
516300, 533800, 551600, 569600, 588000, 606500, 625400, 644500, 663800, 683400, 703300, 723400, 743800, 764500, 785400, 806500, 827900, 849600, 871500, 893600, 916000, 938700, 961600, 984700, 1008100, 1031800,
1055700, 1079800, 1104200, 1128800, 1153700, 1178800, 1204200, 1229800, 1255600, 1281700, 1308100, 1334600, 1361400, 1388500, 1415800, 1443300, 1471100, 1499100, 1527300, 1555800, 1584350, 1612950, 1641600,
1670300, 1699050, 1727850, 1756700, 1785600, 1814550, 1843550, 1872600, 1901700, 1930850, 1960050, 1989300, 2018600, 2047950, 2077350, 2106800, 2136300, 2165850, 2195450, 2225100, 2254800, 2284550, 2314350,
2344200, 2374100, 2404050, 2434050, 2464100, 2494200, 2524350, 2554550, 2584800, 2615100, 2645450, 2675850, 2706300, 2736800, 2767350, 2797950, 2828600, 2859300, 2890050, 2920850, 2951700, 2982600, 3013550,
3044550, 3075600, 3106700, 3137850, 3169050, 3200300, 3231600, 3262950, 3294350, 3325800, 3357300, 3388850, 3420450, 3452100, 3483800, 3515550, 3547350, 3579200, 3611100, 3643050, 3675050, 3707100, 3739200,
3771350, 3803550, 3835800, 3868100, 3900450, 3932850, 3965300, 3997800, 4030350, 4062950, 4095600, 4128300, 4161050, 4193850, 4226700, 4259600, 4292550, 4325550, 4358600, 4391700, 4424850, 4458050, 4491300,
4524600, 4557950, 4591350, 4624800, 4658300, 4691850, 4725450, 4759100, 4792800, 4826550, 4860350, 4894200, 4928100, 4962050, 4996050, 5030100, 5064200, 5098350, 5132550, 5166800, 5201100, 5235450, 5269850,
5304300, 5338800, 5373350, 5407950, 5442600, 5477300, 5512050, 5546850, 5581700, 5616600, 5651550, 5686550, 5721600, 5756700, 5791850, 5827050, 5862300, 5897600, 5932950, 5968350, 6003800, 6039300, 6074850,
6110450, 6146100, 6181800, 6217550, 6253350, 6289200, 6325100, 6361050, 6397050, 6433100, 6469200, 6505350, 6541550, 6577800, 6614100, 6650450, 6686850, 6723300, 6759800, 6796350, 6832950, 6869600, 6906300,
6943050, 6979850, 7016700, 7053600, 7090550, 7127550, 7164600, 7201700, 7238850, 7276050, 7313300, 7350600, 7387950, 7425350, 7462800, 7500300, 7537850, 7575450, 7613100, 7650800, 7688550, 7726350, 7764200,
7802100, 7840050, 7878050, 7916100, 7954200, 7992350, 8030550, 8068800, 8107100, 8145450, 8183850, 8222300, 8260800, 8299350, 8337950, 8376600, 8415300, 8454050, 8492850, 8531700, 8570600, 8609550, 8648550,
8687600, 8726700, 8765850, 8805050, 8844300, 8883600, 8922950, 8962350, 9001800, 9041300, 9080850, 9120450, 9160100, 9199800, 9239550, 9279350, 9319200, 9359100, 9399050, 9439050, 9479100, 9519200, 9559350,
9599550, 9639800, 9680100, 9720450, 9760850, 9801300, 9841800, 9882350, 9922950, 9963600, 10004300, 10045050, 10085850, 10126700, 10167600, 10208550, 10249550, 10290600, 10331700, 10372850, 10414050, 10455300,
10496600, 10537950, 10579350, 10620800, 10662300, 10703850, 10745450, 10787100, 10828800, 10870550, 10912350, 10954200, 10996100, 11038050, 11080050, 11122100, 11164200, 11206350, 11248550, 11290800, 11333100,
11375450, 11417850, 11460300, 11502800, 11545350, 11587950, 11630600, 11673300, 11716050, 11758850, 11801700, 11844600, 11887550, 11930550, 11973600, 12016700, 12059850, 12103050, 12146300, 12189600, 12232950,
12276350, 12319800, 12363300, 12406850, 12450450, 12494100, 12537800, 12581550, 12625350, 12669200, 12713100, 12757050, 12801050, 12845100, 12889200, 12933350, 12977550, 13021800, 13066100, 13110450, 13154850,
13199300, 13243800, 13288350, 13332950, 13377600, 13422300, 13467050, 13511850, 13556700, 13601600, 13646550, 13691550, 13736600, 13781700, 13826850, 13872050, 13917300, 13962600, 14007950, 14053350, 14098800,
14144300, 14189850, 14235450, 14281100, 14326800, 14372550, 14418350, 14464200, 14510100, 14556050, 14602050, 14648100, 14694200, 14740350, 14786550, 14832800, 14879100, 14925450, 14971850, 15018300, 15064800,
15111350, 15157950, 15204600, 15251300, 15298050, 15344850, 15391700, 15438600, 15485550, 15532550, 15579600, 15626700, 15673850, 15721050, 15768300, 15815600, 15862950, 15910350, 15957800, 16005300, 16052850,
16100450, 16148100, 16195800, 16243550, 16291350, 16339200, 16387100, 16435050, 16483050, 16531100, 16579200, 16627350, 16675550, 16723800, 16772100, 16820450, 16868850, 16917300, 16965800, 17014350, 17062950,
17111600, 17160300, 17209050, 17257850, 17306700, 17355600, 17404550, 17453550, 17502600, 17551700, 17600850, 17650050, 17699300, 17748600, 17797950, 17847350, 17896800, 17946300, 17995850, 18045450, 18095100,
18144800, 18194550, 18244350, 18294200, 18344100, 18394050, 18444050, 18494100, 18544200, 18594350, 18644550, 18694800, 18745100, 18795450, 18845850, 18896300, 18946800, 18997350, 19047950, 19098600, 19149300,
19200050, 19250850, 19301700, 19352600, 19403550, 19454550, 19505600, 19556700, 19607850, 19659050, 19710300, 19761600, 19812950, 19864350, 19915800, 19967300, 20018850, 20070450, 20122100, 20173800, 20225550,
20277350, 20329200, 20381100, 20433050, 20485050, 20537100, 20589200, 20641350, 20693550, 20745800, 20798100, 20850450, 20902850, 20955300, 21007800, 21060350, 21112950, 21165600, 21218300, 21271050, 21323850,
21376700, 21429600, 21482550, 21535550, 21588600, 21641700, 21694850, 21748050, 21801300, 21854600, 21907950, 21961350, 22014800, 22068300, 22121850, 22175450, 22229100, 22282800, 22336550, 22390350, 22444200,
22498100, 22552050, 22606050, 22660100, 22714200, 22768350, 22822550, 22876800, 22931100, 22985450, 23039850, 23094300, 23148800, 23203350, 23257950, 23312600, 23367300, 23422050, 23476850, 23531700, 23586600,
23641550, 23696550, 23751600, 23806700, 23861850, 23917050, 23972300, 24027600, 24082950, 24138350, 24193800, 24249300, 24304850, 24360450, 24416100, 24471800, 24527550, 24583350, 24639200, 24695100, 24751050,
24807050, 24863100, 24919200, 24975350, 25031550, 25087800, 25144100, 25200450, 25256850, 25313300, 25369800, 25426350, 25482950, 25539600, 25596300, 25653050, 25709850, 25766700, 25823600, 25880550, 25937550,
25994600, 26051700, 26108850, 26166050, 26223300, 26280600, 26337950, 26395350, 26452800, 26510300, 26567850, 26625450, 26683100, 26740800, 26798550, 26856350, 26914200, 26972100, 27030050, 27088050, 27146100,
27204200, 27262350, 27320550, 27378800, 27437100, 27495450, 27553850, 27612300, 27670800, 27729350, 27787950, 27846600, 27905300, 27964050, 28022850, 28081700, 28140600, 28199550, 28258550, 28317600, 28376700,
28435850, 28495050, 28554300, 28613600, 28672950, 28732350, 28791800, 28851300, 28910850, 28970450, 29030100, 29089800, 29149550, 29209350, 29269200, 29329100, 29389050, 29449050, 29509100, 29569200, 29629350,
29689550, 29749800, 29810100, 29870450, 29930850, 29991300, 30051800, 30112350, 30172950, 30233600, 30294300, 30355050, 30415850, 30476700, 30537600, 30598550, 30659550, 30720600, 30781700, 30842850, 30904050,
30965300, 31026600, 31087950, 31149350, 31210800, 31272300, 31333850, 31395450, 31457100, 31518800, 31580550, 31642350, 31704200, 31766100, 31828050, 31890050, 31952100, 32014200, 32076350, 32138550, 32200800,
32263100, 32325450, 32387850, 32450300, 32512800, 32575350, 32637950, 32700600, 32763300, 32826050, 32888850, 32951700, 33014600, 33077550, 33140550, 33203600, 33266700, 33329850, 33393050, 33456300, 33519600,
33582950, 33646350, 33709800, 33773300, 33836850, 33900450, 33964100, 34027800, 34091550, 34155350, 34219200, 34283100, 34347050, 34411050, 34475100, 34539200, 34603350, 34667550, 34731800, 34796100, 34860450,
34924850, 34989300, 35053800, 35118350, 35182950, 35247600, 35312300, 35377050, 35441850, 35506700, 35571600, 35636550, 35701550, 35766600, 35831700, 35896850, 35962050, 36027300, 36092600, 36157950, 36223350,
36288800, 36354300, 36419850, 36485450, 36551100, 36616800, 36682550, 36748350, 36814200, 36880100, 36946050, 37012050, 37078100, 37144200, 37210350, 37276550, 37342800, 37409100, 37475450, 37541850, 37608300,
37674800, 37741350, 37807950, 37874600, 37941300, 38008050, 38074850, 38141700, 38208600, 38275550, 38342550, 38409600, 38476700, 38543850, 38611050, 38678300, 38745600, 38812950, 38880350, 38947800, 39015300,
39082850, 39150450, 39218100, 39285800, 39353550, 39421350, 39489200, 39557100, 39625050, 39693050, 39761100, 39829200, 39897350, 39965550, 40033800, 40102100, 40170450, 40238850, 40307300, 40375800, 40444350,
40512950, 40581600, 40650300, 40719050, 40787850, 40856700, 40925600, 40994550, 41063550, 41132600, 41201700, 41270850, 41340050, 41409300, 41478600, 41547950, 41617350, 41686800, 41756300, 41825850, 41895450,
41965100, 42034800, 42104550, 42174350, 42244200, 42314100, 42384050, 42454050, 42524100, 42594200, 42664350, 42734550, 42804800, 42875100, 42945450, 43015850, 43086300, 43156800, 43227350, 43297950, 43368600,
43439300, 43510050, 43580850, 43651700, 43722600, 43793550, 43864550, 43935600, 44006700, 44077850, 44149050, 44220300, 44291600, 44362950, 44434350, 44505800, 44577300, 44648850, 44720450, 44792100, 44863800,
44935550, 45007350, 45079200, 45151100, 45223050, 45295050, 45367100, 45439200, 45511350, 45583550, 45655800, 45728100, 45800450, 45872850, 45945300, 46017800, 46090350, 46162950, 46235600, 46308300, 46381050,
46453850, 46526700, 46599600, 46672550, 46745550, 46818600, 46891700, 46964850, 47038050, 47111300, 47184600, 47257950, 47331350, 47404800, 47478300, 47551850, 47625450, 47699100, 47772800, 47846550, 47920350,
47994200, 48068100, 48142050, 48216050, 48290100, 48364200, 48438350, 48512550, 48586800, 48661100, 48735450, 48809850, 48884300, 48958800, 49033350, 49107950, 49182600, 49257300, 49332050, 49406850, 49481700,
49556600, 49631550, 49706550, 49781600, 49856700, 49931850, 50007050, 50082300, 50157600, 50232950, 50308350, 50383800, 50459300, 50534850, 50610450, 50686100, 50761800, 50837550, 50913350, 50989200, 51065100,
51141050, 51217050, 51293100, 51369200, 51445350, 51521550, 51597800, 51674100, 51750450, 51826850, 51903300, 51979800, 52056350, 52132950, 52209600, 52286300, 52363050, 52439850, 52516700, 52593600, 52670550,
52747550, 52824600, 52901700, 52978850, 53056050, 53133300, 53210600, 53287950, 53365350, 53442800, 53520300, 53597850, 53675450, 53753100, 53830800, 53908550, 53986350, 54064200, 54142100, 54220050, 54298050,
54376100, 54454200, 54532350, 54610550, 54688800, 54767100, 54845450, 54923850, 55002300, 55080800, 55159350, 55237950, 55316600, 55395300, 55474050, 55552850, 55631700, 55710600, 55789550, 55868550, 55947600,
56026700, 56105850, 56185050, 56264300, 56343600, 56422950, 56502350, 56581800, 56661300, 56740850, 56820450, 56900100, 56979800, 57059550, 57139350, 57219200, 57299100, 57379050, 57459050, 57539100, 57619200,
57699350, 57779550, 57859800, 57940100, 58020450, 58100850, 58181300, 58261800, 58342350, 58422950, 58503600, 58584300, 58665050, 58745850, 58826700, 58907600, 58988550, 59069550, 59150600, 59231700, 59312850,
59394050, 59475300, 59556600, 59637950, 59719350, 59800800, 59882300, 59963850, 60045450, 60127100, 60208800, 60290550, 60372350, 60454200, 60536100, 60618050, 60700050, 60782100, 60864200, 60946350, 61028550,
61110800, 61193100, 61275450, 61357850, 61440300, 61522800, 61605350, 61687950, 61770600, 61853300, 61936050, 62018850, 62101700, 62184600, 62267550, 62350550, 62433600, 62516700, 62599850, 62683050, 62766300,
62849600, 62932950, 63016350, 63099800, 63183300, 63266850, 63350450, 63434100, 63517800, 63601550, 63685350, 63769200, 63853100, 63937050, 64021050, 64105100, 64189200, 64273350, 64357550, 64441800, 64526100,
64610450, 64694850, 64779300, 64863800, 64948350, 65032950, 65117600, 65202300, 65287050, 65371850, 65456700, 65541600, 65626550, 65711550, 65796600, 65881700, 65966850, 66052050, 66137300, 66222600, 66307950,
66393350, 66478800, 66564300, 66649850, 66735450, 66821100, 66906800, 66992550, 67078350, 67164200, 67250100, 67336050, 67422050, 67508100, 67594200, 67680350, 67766550, 67852800, 67939100, 68025450, 68111850,
68198300, 68284800, 68371350, 68457950, 68544600, 68631300, 68718050, 68804850, 68891700, 68978600, 69065550, 69152550, 69239600, 69326700, 69413850, 69501050, 69588300, 69675600, 69762950, 69850350, 69937800,
70025300, 70112850, 70200450, 70288100, 70375800, 70463550, 70551350, 70639200, 70727100, 70815050, 70903050, 70991100, 71079200, 71167350, 71255550, 71343800, 71432100, 71520450, 71608850, 71697300, 71785800,
71874350, 71962950, 72051600, 72140300, 72229050, 72317850, 72406700, 72495600, 72584550, 72673550, 72762600, 72851700, 72940850, 73030050, 73119300, 73208600, 73297950, 73387350, 73476800, 73566300, 73655850,
73745450, 73835100, 73924800, 74014550, 74104350, 74194200, 74284100, 74374050, 74464050, 74554100, 74644200, 74734350, 74824550, 74914800, 75005100, 75095450, 75185850, 75276300, 75366800, 75457350, 75547950,
75638600, 75729300, 75820050, 75910850, 76001700, 76092600, 76183550, 76274550, 76365600, 76456700, 76547850, 76639050, 76730300, 76821600, 76912950, 77004350, 77095800, 77187300, 77278850, 77370450, 77462100,
77553800, 77645550, 77737350, 77829200, 77921100, 78013050, 78105050, 78197100, 78289200, 78381350, 78473550, 78565800, 78658100, 78750450, 78842850, 78935300, 79027800, 79120350, 79212950, 79305600, 79398300,
79491050, 79583850, 79676700, 79769600, 79862550, 79955550, 80048600, 80141700, 80234850, 80328050, 80421300, 80514600, 80607950, 80701350, 80794800, 80888300, 80981850, 81075450, 81169100, 81262800, 81356550,
81450350, 81544200, 81638100, 81732050, 81826050, 81920100, 82014200, 82108350, 82202550, 82296800, 82391100, 82485450, 82579850, 82674300, 82768800, 82863350, 82957950, 83052600, 83147300, 83242050, 83336850,
83431700, 83526600, 83621550, 83716550, 83811600, 83906700, 84001850, 84097050, 84192300, 84287600, 84382950, 84478350, 84573800, 84669300, 84764850, 84860450, 84956100, 85051800, 85147550, 85243350, 85339200,
85435100, 85531050, 85627050, 85723100, 85819200, 85915350, 86011550, 86107800, 86204100, 86300450, 86396850, 86493300, 86589800, 86686350, 86782950, 86879600, 86976300, 87073050, 87169850, 87266700, 87363600,
87460550, 87557550, 87654600, 87751700, 87848850, 87946050, 88043300, 88140600, 88237950, 88335350, 88432800, 88530300, 88627850, 88725450, 88823100, 88920800, 89018550, 89116350, 89214200, 89312100, 89410050,
89508050, 89606100, 89704200, 89802350, 89900550, 89998800, 90097100, 90195450, 90293850, 90392300, 90490800, 90589350, 90687950, 90786600, 90885300, 90984050, 91082850, 91181700, 91280600, 91379550, 91478550,
91577600, 91676700, 91775850, 91875050, 91974300, 92073600, 92172950, 92272350, 92371800, 92471300, 92570850, 92670450, 92770100, 92869800, 92969550, 93069350, 93169200, 93269100, 93369050, 93469050, 93569100,
93669200, 93769350, 93869550, 93969800, 94070100, 94170450, 94270850, 94371300, 94471800, 94572350, 94672950, 94773600, 94874300, 94975050, 95075850, 95176700, 95277600, 95378550, 95479550, 95580600, 95681700,
95782850, 95884050, 95985300, 96086600, 96187950, 96289350, 96390800, 96492300, 96593850, 96695450, 96797100, 96898800, 97000550, 97102350, 97204200, 97306100, 97408050, 97510050, 97612100, 97714200, 97816350,
97918550, 98020800, 98123100, 98225450, 98327850, 98430300, 98532800, 98635350, 98737950, 98840600, 98943300, 99046050, 99148850, 99251700, 99354600, 99457550, 99560550, 99663600, 99766700, 99869850, 99973050,
100076300, 100179600, 100282950, 100386350, 100489800, 100593300, 100696850, 100800450, 100904100, 101007800, 101111550, 101215350, 101319200, 101423100, 101527050, 101631050, 101735100, 101839200, 101943350,
102047550, 102151800, 102256100, 102360450, 102464850, 102569300, 102673800, 102778350, 102882950, 102987600, 103092300, 103197050, 103301850, 103406700, 103511600, 103616550, 103721550, 103826600, 103931700,
104036850, 104142050, 104247300, 104352600, 104457950, 104563350, 104668800, 104774300, 104879850, 104985450, 105091100, 105196800, 105302550, 105408350, 105514200, 105620100, 105726050, 105832050, 105938100,
106044200, 106150350, 106256550, 106362800, 106469100, 106575450, 106681850, 106788300, 106894800, 107001350, 107107950, 107214600, 107321300, 107428050, 107534850, 107641700, 107748600, 107855550, 107962550,
108069600, 108176700, 108283850, 108391050, 108498300, 108605600, 108712950, 108820350, 108927800, 109035300, 109142850, 109250450, 109358100, 109465800, 109573550, 109681350, 109789200, 109897100, 110005050,
110113050, 110221100, 110329200, 110437350, 110545550, 110653800, 110762100, 110870450, 110978850, 111087300, 111195800, 111304350, 111412950, 111521600, 111630300, 111739050, 111847850, 111956700, 112065600,
112174550, 112283550, 112392600, 112501700, 112610850, 112720050, 112829300, 112938600, 113047950, 113157350, 113266800, 113376300, 113485850, 113595450, 113705100, 113814800, 113924550, 114034350, 114144200,
114254100, 114364050, 114474050, 114584100, 114694200, 114804350, 114914550, 115024800, 115135100, 115245450, 115355850, 115466300, 115576800, 115687350, 115797950, 115908600, 116019300, 116130050, 116240850,
116351700, 116462600, 116573550, 116684550, 116795600, 116906700, 117017850, 117129050, 117240300, 117351600, 117462950, 117574350, 117685800, 117797300, 117908850, 118020450, 118132100, 118243800, 118355550,
118467350, 118579200, 118691100, 118803050, 118915050, 119027100, 119139200, 119251350, 119363550, 119475800, 119588100, 119700450, 119812850, 119925300, 120037800, 120150350, 120262950, 120375600, 120488300,
120601050, 120713850, 120826700, 120939600, 121052550, 121165550, 121278600, 121391700, 121504850, 121618050, 121731300, 121844600, 121957950, 122071350, 122184800, 122298300, 122411850, 122525450, 122639100,
122752800, 122866550, 122980350, 123094200, 123208100, 123322050, 123436050, 123550100, 123664200, 123778350, 123892550, 124006800, 124121100, 124235450, 124349850, 124464300, 124578800, 124693350, 124807950,
124922600, 125037300, 125152050, 125266850, 125381700, 125496600, 125611550, 125726550, 125841600, 125956700, 126071850, 126187050, 126302300, 126417600, 126532950, 126648350, 126763800, 126879300, 126994850,
127110450, 127226100, 127341800, 127457550, 127573350, 127689200, 127805100, 127921050, 128037050, 128153100, 128269200, 128385350, 128501550, 128617800, 128734100, 128850450, 128966850, 129083300, 129199800,
129316350, 129432950, 129549600, 129666300, 129783050, 129899850, 130016700, 130133600, 130250550, 130367550, 130484600, 130601700, 130718850, 130836050, 130953300, 131070600, 131187950, 131305350, 131422800,
131540300, 131657850, 131775450, 131893100, 132010800, 132128550, 132246350, 132364200, 132482100, 132600050, 132718050, 132836100, 132954200, 133072350, 133190550, 133308800, 133427100, 133545450, 133663850,
133782300, 133900800, 134019350, 134137950, 134256600, 134375300, 134494050, 134612850, 134731700, 134850600, 134969550, 135088550, 135207600, 135326700, 135445850, 135565050, 135684300, 135803600, 135922950,
136042350, 136161800, 136281300, 136400850, 136520450, 136640100, 136759800, 136879550, 136999350, 137119200, 137239100, 137359050, 137479050, 137599100, 137719200, 137839350, 137959550, 138079800, 138200100,
138320450, 138440850, 138561300, 138681800, 138802350, 138922950, 139043600, 139164300, 139285050, 139405850, 139526700, 139647600, 139768550, 139889550, 140010600, 140131700, 140252850, 140374050, 140495300,
140616600, 140737950, 140859350, 140980800, 141102300, 141223850, 141345450, 141467100, 141588800, 141710550, 141832350, 141954200, 142076100, 142198050, 142320050, 142442100, 142564200, 142686350, 142808550,
142930800, 143053100, 143175450, 143297850, 143420300, 143542800, 143665350, 143787950, 143910600, 144033300, 144156050, 144278850, 144401700, 144524600, 144647550, 144770550, 144893600, 145016700, 145139850,
145263050, 145386300, 145509600, 145632950, 145756350, 145879800, 146003300, 146126850, 146250450, 146374100, 146497800, 146621550, 146745350, 146869200, 146993100, 147117050, 147241050, 147365100, 147489200,
147613350, 147737550, 147861800, 147986100, 148110450, 148234850, 148359300, 148483800, 148608350, 148732950, 148857600, 148982300, 149107050, 149231850, 149356700, 149481600, 149606550, 149731550, 149856600,
149981700, 150106850, 150232050, 150357300, 150482600, 150607950, 150733350, 150858800, 150984300, 151109850, 151235450, 151361100, 151486800, 151612550, 151738350, 151864200, 151990100, 152116050, 152242050,
152368100, 152494200, 152620350, 152746550, 152872800, 152999100, 153125450, 153251850, 153378300, 153504800, 153631350, 153757950, 153884600, 154011300, 154138050, 154264850, 154391700, 154518600, 154645550,
154772550, 154899600, 155026700, 155153850, 155281050, 155408300, 155535600, 155662950, 155790350, 155917800, 156045300, 156172850, 156300450, 156428100, 156555800, 156683550, 156811350, 156939200, 157067100,
157195050, 157323050, 157451100, 157579200, 157707350, 157835550, 157963800, 158092100, 158220450, 158348850, 158477300, 158605800, 158734350, 158862950, 158991600, 159120300, 159249050, 159377850, 159506700,
159635600, 159764550, 159893550, 160022600, 160151700, 160280850, 160410050, 160539300, 160668600, 160797950, 160927350, 161056800, 161186300, 161315850, 161445450, 161575100, 161704800, 161834550, 161964350,
162094200, 162224100, 162354050, 162484050, 162614100, 162744200, 162874350, 163004550, 163134800, 163265100, 163395450, 163525850, 163656300, 163786800, 163917350, 164047950, 164178600, 164309300, 164440050,
164570850, 164701700, 164832600, 164963550, 165094550, 165225600, 165356700, 165487850, 165619050, 165750300, 165881600, 166012950, 166144350, 166275800, 166407300, 166538850, 166670450, 166802100, 166933800,
167065550, 167197350, 167329200, 167461100, 167593050, 167725050, 167857100, 167989200, 168121350, 168253550, 168385800, 168518100, 168650450, 168782850, 168915300, 169047800, 169180350, 169312950, 169445600,
169578300, 169711050, 169843850, 169976700, 170109600, 170242550, 170375550, 170508600, 170641700, 170774850, 170908050, 171041300, 171174600, 171307950, 171441350, 171574800, 171708300, 171841850, 171975450,
172109100, 172242800, 172376550, 172510350, 172644200, 172778100, 172912050, 173046050, 173180100, 173314200, 173448350, 173582550, 173716800, 173851100, 173985450, 174119850, 174254300, 174388800, 174523350,
174657950, 174792600, 174927300, 175062050, 175196850, 175331700, 175466600, 175601550, 175736550, 175871600, 176006700, 176141850, 176277050, 176412300, 176547600, 176682950, 176818350, 176953800, 177089300,
177224850, 177360450, 177496100, 177631800, 177767550, 177903350, 178039200, 178175100, 178311050, 178447050, 178583100, 178719200, 178855350, 178991550, 179127800, 179264100, 179400450, 179536850, 179673300,
179809800, 179946350, 180082950, 180219600, 180356300, 180493050, 180629850, 180766700, 180903600, 181040550, 181177550, 181314600, 181451700, 181588850, 181726050, 181863300, 182000600, 182137950, 182275350,
182412800, 182550300, 182687850, 182825450, 182963100, 183100800, 183238550, 183376350, 183514200, 183652100, 183790050, 183928050, 184066100, 184204200, 184342350, 184480550, 184618800, 184757100, 184895450,
185033850, 185172300, 185310800, 185449350, 185587950, 185726600, 185865300, 186004050, 186142850, 186281700, 186420600, 186559550, 186698550, 186837600, 186976700, 187115850, 187255050, 187394300, 187533600,
187672950, 187812350, 187951800, 188091300, 188230850, 188370450, 188510100, 188649800, 188789550, 188929350, 189069200, 189209100, 189349050, 189489050, 189629100, 189769200, 189909350, 190049550, 190189800,
190330100, 190470450, 190610850, 190751300, 190891800, 191032350, 191172950, 191313600, 191454300, 191595050, 191735850, 191876700, 192017600, 192158550, 192299550, 192440600, 192581700, 192722850, 192864050,
193005300, 193146600, 193287950, 193429350, 193570800, 193712300, 193853850, 193995450, 194137100, 194278800, 194420550, 194562350, 194704200, 194846100, 194988050, 195130050, 195272100, 195414200, 195556350,
195698550, 195840800, 195983100, 196125450, 196267850, 196410300, 196552800, 196695350, 196837950, 196980600, 197123300, 197266050, 197408850, 197551700, 197694600, 197837550, 197980550, 198123600, 198266700,
198409850, 198553050, 198696300, 198839600, 198982950, 199126350, 199269800, 199413300, 199556850, 199700450, 199844100, 199987800, 200131550, 200275350, 200419200, 200563100, 200707050, 200851050, 200995100,
201139200, 201283350, 201427550, 201571800, 201716100, 201860450, 202004850, 202149300, 202293800, 202438350, 202582950, 202727600, 202872300, 203017050, 203161850, 203306700, 203451600, 203596550, 203741550,
203886600, 204031700, 204176850, 204322050, 204467300, 204612600, 204757950, 204903350, 205048800, 205194300, 205339850, 205485450, 205631100, 205776800, 205922550, 206068350, 206214200, 206360100, 206506050,
206652050, 206798100, 206944200, 207090350, 207236550, 207382800, 207529100, 207675450, 207821850, 207968300, 208114800, 208261350, 208407950, 208554600, 208701300, 208848050, 208994850, 209141700, 209288600,
209435550, 209582550, 209729600, 209876700, 210023850, 210171050, 210318300, 210465600, 210612950, 210760350, 210907800, 211055300, 211202850, 211350450, 211498100, 211645800, 211793550, 211941350, 212089200,
212237100, 212385050, 212533050, 212681100, 212829200, 212977350, 213125550, 213273800, 213422100, 213570450, 213718850, 213867300, 214015800, 214164350, 214312950, 214461600, 214610300, 214759050, 214907850,
215056700, 215205600, 215354550, 215503550, 215652600, 215801700, 215950850, 216100050, 216249300, 216398600, 216547950, 216697350, 216846800, 216996300, 217145850, 217295450, 217445100, 217594800, 217744550,
217894350, 218044200, 218194100, 218344050, 218494050, 218644100, 218794200, 218944350, 219094550, 219244800, 219395100, 219545450, 219695850, 219846300, 219996800, 220147350, 220297950, 220448600, 220599300,
220750050, 220900850, 221051700, 221202600, 221353550, 221504550, 221655600, 221806700, 221957850, 222109050, 222260300, 222411600, 222562950, 222714350, 222865800, 223017300, 223168850, 223320450, 223472100,
223623800, 223775550, 223927350, 224079200, 224231100, 224383050, 224535050, 224687100, 224839200, 224991350, 225143550, 225295800, 225448100, 225600450, 225752850, 225905300, 226057800, 226210350, 226362950,
226515600, 226668300, 226821050, 226973850, 227126700, 227279600, 227432550, 227585550, 227738600, 227891700, 228044850, 228198050, 228351300, 228504600, 228657950, 228811350, 228964800, 229118300, 229271850,
229425450, 229579100, 229732800, 229886550, 230040350, 230194200, 230348100, 230502050, 230656050, 230810100, 230964200, 231118350, 231272550, 231426800, 231581100, 231735450, 231889850, 232044300, 232198800,
232353350, 232507950, 232662600, 232817300, 232972050, 233126850, 233281700, 233436600, 233591550, 233746550, 233901600, 234056700, 234211850, 234367050, 234522300, 234677600, 234832950, 234988350, 235143800,
235299300, 235454850, 235610450, 235766100, 235921800, 236077550, 236233350, 236389200, 236545100, 236701050, 236857050, 237013100, 237169200, 237325350, 237481550, 237637800, 237794100, 237950450, 238106850,
238263300, 238419800, 238576350, 238732950, 238889600, 239046300, 239203050, 239359850, 239516700, 239673600, 239830550, 239987550, 240144600, 240301700, 240458850, 240616050, 240773300, 240930600, 241087950,
241245350, 241402800, 241560300, 241717850, 241875450, 242033100, 242190800, 242348550, 242506350, 242664200, 242822100, 242980050, 243138050, 243296100, 243454200, 243612350, 243770550, 243928800, 244087100,
244245450, 244403850, 244562300, 244720800, 244879350, 245037950, 245196600, 245355300, 245514050, 245672850, 245831700, 245990600, 246149550, 246308550, 246467600, 246626700, 246785850, 246945050, 247104300,
247263600, 247422950, 247582350, 247741800, 247901300, 248060850, 248220450, 248380100, 248539800, 248699550, 248859350, 249019200, 249179100, 249339050, 249499050, 249659100, 249819200, 249979350, 250139550,
250299800, 250460100, 250620450, 250780850, 250941300, 251101800, 251262350, 251422950, 251583600, 251744300, 251905050, 252065850, 252226700, 252387600, 252548550, 252709550, 252870600, 253031700, 253192850,
253354050, 253515300, 253676600, 253837950, 253999350, 254160800, 254322300, 254483850, 254645450, 254807100, 254968800, 255130550, 255292350, 255454200, 255616100, 255778050, 255940050, 256102100, 256264200,
256426350, 256588550, 256750800, 256913100, 257075450, 257237850, 257400300, 257562800, 257725350, 257887950, 258050600, 258213300, 258376050, 258538850, 258701700, 258864600, 259027550, 259190550, 259353600,
259516700, 259679850, 259843050, 260006300, 260169600, 260332950, 260496350, 260659800, 260823300, 260986850, 261150450, 261314100, 261477800, 261641550, 261805350, 261969200, 262133100, 262297050, 262461050,
262625100, 262789200, 262953350, 263117550, 263281800, 263446100, 263610450, 263774850, 263939300, 264103800, 264268350, 264432950, 264597600, 264762300, 264927050, 265091850, 265256700, 265421600, 265586550,
265751550, 265916600, 266081700, 266246850, 266412050, 266577300, 266742600, 266907950, 267073350, 267238800, 267404300, 267569850, 267735450, 267901100, 268066800, 268232550, 268398350, 268564200, 268730100,
268896050, 269062050, 269228100, 269394200, 269560350, 269726550, 269892800, 270059100, 270225450, 270391850, 270558300, 270724800, 270891350, 271057950, 271224600, 271391300, 271558050, 271724850, 271891700,
272058600, 272225550, 272392550, 272559600, 272726700, 272893850, 273061050, 273228300, 273395600, 273562950, 273730350, 273897800, 274065300, 274232850, 274400450, 274568100, 274735800, 274903550, 275071350,
275239200, 275407100, 275575050, 275743050, 275911100, 276079200, 276247350, 276415550, 276583800, 276752100, 276920450, 277088850, 277257300, 277425800, 277594350, 277762950, 277931600, 278100300, 278269050,
278437850, 278606700, 278775600, 278944550, 279113550, 279282600, 279451700, 279620850, 279790050, 279959300, 280128600, 280297950, 280467350, 280636800, 280806300, 280975850, 281145450, 281315100, 281484800,
281654550, 281824350, 281994200, 282164100, 282334050, 282504050, 282674100, 282844200, 283014350, 283184550, 283354800, 283525100, 283695450, 283865850, 284036300, 284206800, 284377350, 284547950, 284718600,
284889300, 285060050, 285230850, 285401700, 285572600, 285743550, 285914550, 286085600, 286256700, 286427850, 286599050, 286770300, 286941600, 287112950, 287284350, 287455800, 287627300, 287798850, 287970450,
288142100, 288313800, 288485550, 288657350, 288829200, 289001100, 289173050, 289345050, 289517100, 289689200, 289861350, 290033550, 290205800, 290378100, 290550450, 290722850, 290895300, 291067800, 291240350,
291412950, 291585600, 291758300, 291931050, 292103850, 292276700, 292449600, 292622550, 292795550, 292968600, 293141700, 293314850, 293488050, 293661300, 293834600, 294007950, 294181350, 294354800, 294528300,
294701850, 294875450, 295049100, 295222800, 295396550, 295570350, 295744200, 295918100, 296092050, 296266050, 296440100, 296614200, 296788350, 296962550, 297136800, 297311100, 297485450, 297659850, 297834300,
298008800, 298183350, 298357950, 298532600, 298707300, 298882050, 299056850, 299231700, 299406600, 299581550, 299756550, 299931600, 300106700, 300281850, 300457050, 300632300, 300807600, 300982950, 301158350,
301333800, 301509300, 301684850, 301860450, 302036100, 302211800, 302387550, 302563350, 302739200, 302915100, 303091050, 303267050, 303443100, 303619200, 303795350, 303971550, 304147800, 304324100, 304500450,
304676850, 304853300, 305029800, 305206350, 305382950, 305559600, 305736300, 305913050, 306089850, 306266700, 306443600, 306620550, 306797550, 306974600, 307151700, 307328850, 307506050, 307683300, 307860600,
308037950, 308215350, 308392800, 308570300, 308747850, 308925450, 309103100, 309280800, 309458550, 309636350, 309814200, 309992100, 310170050, 310348050, 310526100, 310704200, 310882350, 311060550, 311238800,
311417100, 311595450, 311773850, 311952300, 312130800, 312309350, 312487950, 312666600, 312845300, 313024050, 313202850, 313381700, 313560600, 313739550, 313918550, 314097600, 314276700, 314455850, 314635050,
314814300, 314993600, 315172950, 315352350, 315531800, 315711300, 315890850, 316070450, 316250100, 316429800, 316609550, 316789350, 316969200, 317149100, 317329050, 317509050, 317689100, 317869200, 318049350,
318229550, 318409800, 318590100, 318770450, 318950850, 319131300, 319311800, 319492350, 319672950, 319853600, 320034300, 320215050, 320395850, 320576700, 320757600, 320938550, 321119550, 321300600, 321481700,
321662850, 321844050, 322025300, 322206600, 322387950, 322569350, 322750800, 322932300, 323113850, 323295450, 323477100, 323658800, 323840550, 324022350, 324204200, 324386100, 324568050, 324750050, 324932100,
325114200, 325296350, 325478550, 325660800, 325843100, 326025450, 326207850, 326390300, 326572800, 326755350, 326937950, 327120600, 327303300, 327486050, 327668850, 327851700, 328034600, 328217550, 328400550,
328583600, 328766700, 328949850, 329133050, 329316300, 329499600, 329682950, 329866350, 330049800, 330233300, 330416850, 330600450, 330784100, 330967800, 331151550, 331335350, 331519200, 331703100, 331887050,
332071050, 332255100, 332439200, 332623350, 332807550, 332991800, 333176100, 333360450, 333544850, 333729300, 333913800, 334098350, 334282950, 334467600, 334652300, 334837050, 335021850, 335206700, 335391600,
335576550, 335761550, 335946600, 336131700, 336316850, 336502050, 336687300, 336872600, 337057950, 337243350, 337428800, 337614300, 337799850, 337985450, 338171100, 338356800, 338542550, 338728350, 338914200,
339100100, 339286050, 339472050, 339658100, 339844200, 340030350, 340216550, 340402800, 340589100, 340775450, 340961850, 341148300, 341334800, 341521350, 341707950, 341894600, 342081300, 342268050, 342454850,
342641700, 342828600, 343015550, 343202550, 343389600, 343576700, 343763850, 343951050, 344138300, 344325600, 344512950, 344700350, 344887800, 345075300, 345262850, 345450450, 345638100, 345825800, 346013550,
346201350, 346389200, 346577100, 346765050, 346953050, 347141100, 347329200, 347517350, 347705550, 347893800, 348082100, 348270450, 348458850, 348647300, 348835800, 349024350, 349212950, 349401600, 349590300,
349779050, 349967850, 350156700, 350345600, 350534550, 350723550, 350912600, 351101700, 351290850, 351480050, 351669300, 351858600, 352047950, 352237350, 352426800, 352616300, 352805850, 352995450, 353185100,
353374800, 353564550, 353754350, 353944200, 354134100, 354324050, 354514050, 354704100, 354894200, 355084350, 355274550, 355464800, 355655100, 355845450, 356035850, 356226300, 356416800, 356607350, 356797950,
356988600, 357179300, 357370050, 357560850, 357751700, 357942600, 358133550, 358324550, 358515600, 358706700, 358897850, 359089050, 359280300, 359471600, 359662950, 359854350, 360045800, 360237300, 360428850,
360620450, 360812100, 361003800, 361195550, 361387350, 361579200, 361771100, 361963050, 362155050, 362347100, 362539200, 362731350, 362923550, 363115800, 363308100, 363500450, 363692850, 363885300, 364077800,
364270350, 364462950, 364655600, 364848300, 365041050, 365233850, 365426700, 365619600, 365812550, 366005550, 366198600, 366391700, 366584850, 366778050, 366971300, 367164600, 367357950, 367551350, 367744800,
367938300, 368131850, 368325450, 368519100, 368712800, 368906550, 369100350, 369294200, 369488100, 369682050, 369876050, 370070100, 370264200, 370458350, 370652550, 370846800, 371041100, 371235450, 371429850,
371624300, 371818800, 372013350, 372207950, 372402600, 372597300, 372792050, 372986850, 373181700, 373376600, 373571550, 373766550, 373961600, 374156700, 374351850, 374547050, 374742300, 374937600, 375132950,
375328350, 375523800, 375719300, 375914850, 376110450, 376306100, 376501800, 376697550, 376893350, 377089200, 377285100, 377481050, 377677050, 377873100, 378069200, 378265350, 378461550, 378657800, 378854100,
379050450, 379246850, 379443300, 379639800, 379836350, 380032950, 380229600, 380426300, 380623050, 380819850, 381016700, 381213600, 381410550, 381607550, 381804600, 382001700, 382198850, 382396050, 382593300,
382790600, 382987950, 383185350, 383382800, 383580300, 383777850, 383975450, 384173100, 384370800, 384568550, 384766350, 384964200, 385162100, 385360050, 385558050, 385756100, 385954200, 386152350, 386350550,
386548800, 386747100, 386945450, 387143850, 387342300, 387540800, 387739350, 387937950, 388136600, 388335300, 388534050, 388732850, 388931700, 389130600, 389329550, 389528550, 389727600, 389926700, 390125850,
390325050, 390524300, 390723600, 390922950, 391122350, 391321800, 391521300, 391720850, 391920450, 392120100, 392319800, 392519550, 392719350, 392919200, 393119100, 393319050, 393519050, 393719100, 393919200,
394119350, 394319550, 394519800, 394720100, 394920450, 395120850, 395321300, 395521800, 395722350, 395922950, 396123600, 396324300, 396525050, 396725850, 396926700, 397127600, 397328550, 397529550, 397730600,
397931700, 398132850, 398334050, 398535300, 398736600, 398937950, 399139350, 399340800, 399542300, 399743850, 399945450, 400147100, 400348800, 400550550, 400752350, 400954200, 401156100, 401358050, 401560050,
401762100, 401964200, 402166350, 402368550, 402570800, 402773100, 402975450, 403177850, 403380300, 403582800, 403785350, 403987950, 404190600, 404393300, 404596050, 404798850, 405001700, 405204600, 405407550,
405610550, 405813600, 406016700, 406219850, 406423050, 406626300, 406829600, 407032950, 407236350, 407439800, 407643300, 407846850, 408050450, 408254100, 408457800, 408661550, 408865350, 409069200, 409273100,
409477050, 409681050, 409885100, 410089200, 410293350, 410497550, 410701800, 410906100, 411110450, 411314850, 411519300, 411723800, 411928350, 412132950, 412337600, 412542300, 412747050, 412951850, 413156700,
413361600, 413566550, 413771550, 413976600, 414181700, 414386850, 414592050, 414797300, 415002600, 415207950, 415413350, 415618800, 415824300, 416029850, 416235450, 416441100, 416646800, 416852550, 417058350,
417264200, 417470100, 417676050, 417882050, 418088100, 418294200, 418500350, 418706550, 418912800, 419119100, 419325450, 419531850, 419738300, 419944800, 420151350, 420357950, 420564600, 420771300, 420978050,
421184850, 421391700, 421598600, 421805550, 422012550, 422219600, 422426700, 422633850, 422841050, 423048300, 423255600, 423462950, 423670350, 423877800, 424085300, 424292850, 424500450, 424708100, 424915800,
425123550, 425331350, 425539200, 425747100, 425955050, 426163050, 426371100, 426579200, 426787350, 426995550, 427203800, 427412100, 427620450, 427828850, 428037300, 428245800, 428454350, 428662950, 428871600,
429080300, 429289050, 429497850, 429706700, 429915600, 430124550, 430333550, 430542600, 430751700, 430960850, 431170050, 431379300, 431588600, 431797950, 432007350, 432216800, 432426300, 432635850, 432845450,
433055100, 433264800, 433474550, 433684350, 433894200, 434104100, 434314050, 434524050, 434734100, 434944200, 435154350, 435364550, 435574800, 435785100, 435995450, 436205850, 436416300, 436626800, 436837350,
437047950, 437258600, 437469300, 437680050, 437890850, 438101700, 438312600, 438523550, 438734550, 438945600, 439156700, 439367850, 439579050, 439790300, 440001600, 440212950, 440424350, 440635800, 440847300,
441058850, 441270450, 441482100, 441693800, 441905550, 442117350, 442329200, 442541100, 442753050, 442965050, 443177100, 443389200, 443601350, 443813550, 444025800, 444238100, 444450450, 444662850, 444875300,
445087800, 445300350, 445512950, 445725600, 445938300, 446151050, 446363850, 446576700, 446789600, 447002550, 447215550, 447428600, 447641700, 447854850, 448068050, 448281300, 448494600, 448707950, 448921350,
449134800, 449348300, 449561850, 449775450, 449989100, 450202800, 450416550, 450630350, 450844200, 451058100, 451272050, 451486050, 451700100, 451914200, 452128350, 452342550, 452556800, 452771100, 452985450,
453199850, 453414300, 453628800, 453843350, 454057950, 454272600, 454487300, 454702050, 454916850, 455131700, 455346600, 455561550, 455776550, 455991600, 456206700, 456421850, 456637050, 456852300, 457067600,
457282950, 457498350, 457713800, 457929300, 458144850, 458360450, 458576100, 458791800, 459007550, 459223350, 459439200, 459655100, 459871050, 460087050, 460303100, 460519200, 460735350, 460951550, 461167800,
461384100, 461600450, 461816850, 462033300, 462249800, 462466350, 462682950, 462899600, 463116300, 463333050, 463549850, 463766700, 463983600, 464200550, 464417550, 464634600, 464851700, 465068850, 465286050,
465503300, 465720600, 465937950, 466155350, 466372800, 466590300, 466807850, 467025450, 467243100, 467460800, 467678550, 467896350, 468114200, 468332100, 468550050, 468768050, 468986100, 469204200, 469422350,
469640550, 469858800, 470077100, 470295450, 470513850, 470732300, 470950800, 471169350, 471387950, 471606600, 471825300, 472044050, 472262850, 472481700, 472700600, 472919550, 473138550, 473357600, 473576700,
473795850, 474015050, 474234300, 474453600, 474672950, 474892350, 475111800, 475331300, 475550850, 475770450, 475990100, 476209800, 476429550, 476649350, 476869200, 477089100, 477309050, 477529050, 477749100,
};

bool Features::savenewdrop = false;
void Features::cashdrop(bool toggle)
{


	Ped iPed = PLAYER::PLAYER_PED_ID();

	int amount = 2000; //i have test it but not working

	if ((timeGetTime() - Features::TimePD1) > 200) // Time between drops
	{
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_03);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_03)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_03, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_03);

			Features::TimePD1 = timeGetTime();
		}
	}
}

bool Features::savenewdrop3 = false;
void Features::cashdrop3(bool toggle)
{


	Ped iPed = PLAYER::PLAYER_PED_ID();

	int amount = 2500; //i have test it but not working

	if ((timeGetTime() - Features::TimePD1) > 1000) // Time between drops
	{
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_02, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);

			Features::TimePD1 = timeGetTime();
		}
	}
}
bool Features::savenewdrop12 = false;
void Features::cashdrop12(bool toggle)
{


	Ped iPed = PLAYER::PLAYER_PED_ID();

	int amount = 1000; //i have test it but not working



	if ((timeGetTime() - Features::TimePD1) > 200) // Time between drops
	{
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_01);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_01)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_01, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_01);

			Features::TimePD1 = timeGetTime();
		}
	}
}


//Money Drop Other Players
bool Features::savenewdrop2[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop2(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 200) // Time between drops
	{

		int amount = 2000;
		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_01);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_01)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_01, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_01);
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::norecoil = false;
void Features::recoil(bool toggle)
{
	if (Features::norecoil) {
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, 0x02D8 }, 0);
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, 0x2A8 }, 0);
	}
	else {
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, 0x02D8 }, 1);
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, 0x2A8 }, 1);
	}
}

bool Features::savenewdropbag[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdropbag(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 200) // Time between drops
	{

		int amount = 1987;
		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_01);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_01)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_PAPER_BAG, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_01, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_01);
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop222[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop222(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1999, GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_xmas_tree_int"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop333[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop333(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 2000, GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop444[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop444(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 0, GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_asteroid_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop2229[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop2229(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1777, GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_int_safe_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::mobileradiokek = false;
void Features::MobileRadioKek(bool toggle)
{
	int station = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();
	if (!MobileRadioKek)
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(false);
		AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);

	}
	else
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true);
		AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);
		AUDIO::SET_RADIO_TO_STATION_INDEX(station);

	}
}

bool Features::savenewdrop22291[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22291(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			Vector3 pos = { playerPosition.x, playerPosition.y, playerPosition.z + 0.5 / 10 };
			//OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1666, GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"), FALSE, TRUE);
			Hooking::create_ambient_pickup(0xDE78F17E, &pos, 0, 1666, GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"), 0, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_med_bag_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

int Features::espr = 255;
int Features::espg = 255;
int Features::espb = 255;
bool Features::esper = false;
void Features::esp(Player target)
{
	if (target != PLAYER::PLAYER_ID() && ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target)))
	{
		Vector3 entitylocation = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target), false);
		Vector3 top1world = { entitylocation.x + 0.3f, NULL, entitylocation.y + 0.3f, NULL, entitylocation.z + .8f, NULL };
		Vector3 top2world = { entitylocation.x - 0.3f, NULL, entitylocation.y + 0.3f, NULL, entitylocation.z + .8f, NULL };
		Vector3 top3world = { entitylocation.x + 0.3f, NULL, entitylocation.y - 0.3f, NULL, entitylocation.z + .8f, NULL };
		Vector3 top4world = { entitylocation.x - 0.3f, NULL, entitylocation.y - 0.3f, NULL, entitylocation.z + .8f, NULL };
		Vector3 bottom1world = { entitylocation.x + 0.3f, NULL, entitylocation.y + 0.3f, NULL, entitylocation.z - .8f, NULL };
		Vector3 bottom2world = { entitylocation.x - 0.3f, NULL, entitylocation.y + 0.3f, NULL, entitylocation.z - .8f, NULL };
		Vector3 bottom3world = { entitylocation.x + 0.3f, NULL, entitylocation.y - 0.3f, NULL, entitylocation.z - .8f, NULL };
		Vector3 bottom4world = { entitylocation.x - 0.3f, NULL, entitylocation.y - 0.3f, NULL, entitylocation.z - .8f, NULL };
		GRAPHICS::DRAW_LINE(top1world.x, top1world.y, top1world.z, top2world.x, top2world.y, top2world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top2world.x, top2world.y, top2world.z, top4world.x, top4world.y, top4world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top4world.x, top4world.y, top4world.z, top3world.x, top3world.y, top3world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top1world.x, top1world.y, top1world.z, top3world.x, top3world.y, top3world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(bottom1world.x, bottom1world.y, bottom1world.z, bottom2world.x, bottom2world.y, bottom2world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(bottom2world.x, bottom2world.y, bottom2world.z, bottom4world.x, bottom4world.y, bottom4world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(bottom3world.x, bottom3world.y, bottom3world.z, bottom4world.x, bottom4world.y, bottom4world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(bottom3world.x, bottom3world.y, bottom3world.z, bottom1world.x, bottom1world.y, bottom1world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top1world.x, top1world.y, top1world.z, bottom1world.x, bottom1world.y, bottom1world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top2world.x, top2world.y, top2world.z, bottom2world.x, bottom2world.y, bottom2world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top3world.x, top3world.y, top3world.z, bottom3world.x, bottom3world.y, bottom3world.z, Features::espr, Features::espg, Features::espb, 255);
		GRAPHICS::DRAW_LINE(top4world.x, top4world.y, top4world.z, bottom4world.x, bottom4world.y, bottom4world.z, Features::espr, Features::espg, Features::espb, 255);
		Vector3 locationOne = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target), false);
		Vector3 locationTwo = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		GRAPHICS::DRAW_LINE(locationOne.x, locationOne.y, locationOne.z, locationTwo.x, locationTwo.y, locationTwo.z, Features::espr, Features::espg, Features::espb, 255);
	}
}

bool Features::savenewdrop22292[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22292(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1555, GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_dummy_plane"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop22293[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22293(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_megaphone_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_megaphone_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1444, GAMEPLAY::GET_HASH_KEY("prop_megaphone_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_megaphone_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop22294[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22294(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1333, GAMEPLAY::GET_HASH_KEY("prop_minigun_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_minigun_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop22295[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22295(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1222, GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_health_pack"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop22296[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22296(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_ld_shoe_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_ld_shoe_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1111, GAMEPLAY::GET_HASH_KEY("prop_ld_shoe_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_ld_shoe_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::isAutoRegHealth = false;
void Features::AutoRegHealth(bool toggle) {
	if (Features::isAutoRegHealth)
	{
		float fHealth = Memory::get_value<float>({ OFFSET_PLAYER , OFFSET_ENTITY_HEALTH });
		float fHealthMax = Memory::get_value<float>({ OFFSET_PLAYER , OFFSET_ENTITY_HEALTH_MAX });
		float value = 30.f;

		if ((timeGetTime() - Features::TimePD5) > 400) {
			value += fHealth;
			if (value <= fHealthMax) {
				fHealth = value;
				Memory::set_value<float>({ OFFSET_PLAYER , OFFSET_ENTITY_HEALTH }, value);
			}
			else if (fHealth == fHealthMax) {
				fHealth = fHealthMax;
			}
			Features::TimePD5 = timeGetTime();
		}
	}
}


bool Features::randommon = false;
void Features::randommonnn(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > Features::stealthDelay02222)
	{
		globalHandle(4262669).At(1).As <int>() = 2147483646;
		globalHandle(4262669).At(7).As <int>() = 2147483647;
		globalHandle(4262669).At(6).As <int>() = 0;
		globalHandle(4262669).At(5).As <int>() = 0;
		globalHandle(4262669).At(3).As <int>() = 312105838;
		globalHandle(4262669).At(2).As <int>() = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(15466, 10000000);
		globalHandle(4262669).As<int>() = 1;



		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);




		Features::TimePD3 = timeGetTime();


	}
}

bool Features::randommonww = false;
void Features::randommonnnw(bool toggle) {
	if ((timeGetTime() - Features::TimePD3) > Features::stealthDelay1)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(15466, 10000000), bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD3 = timeGetTime();
	}
}

bool Features::savenewdrop22297[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22297(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1111, GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_barbell_10kg"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop22298[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop22298(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 500) // Time between drops
	{


		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"))) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f / 10, 0, 1111, GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		}

		Features::TimePD2 = timeGetTime();

	}
}

//Money Drop Other Players 2.5k
bool Features::savenewdrop5[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop5(Player target)
{

	if ((timeGetTime() - Features::TimePD2) > 200) // Time between drops
	{

		int amount = 2500;
		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
		STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
		if (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_02, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);
		}

		Features::TimePD2 = timeGetTime();

	}
}

bool Features::savenewdrop999[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop999(Player target)
{
	Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	int amount = 2500;

	if ((timeGetTime() - TimePD2) > 150) // Time between drops
	{
		STREAMING::REQUEST_MODEL(-1666779307);
		if (!STREAMING::HAS_MODEL_LOADED(-1666779307)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_MONEY_PICKUPS(playerPosition.x, playerPosition.y, playerPosition.z, 2500, 1, -1666779307);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(-1666779307);
			TimePD2 = timeGetTime();

		}
	}
}// its done  THANK YOU! bro i want this carPTFXsize

bool Features::savenewdrop21[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop21(Player target)
{

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	while (!STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pp.x + offset1, pp.y + offset2, pp.z, 0, 2500, 0x9CA6F755, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x9CA6F755);
	}
}

bool Features::savenewdrop10 = false;
void Features::cashdrop10(bool toggle)
{

	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	while (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
	{
		int amount = 2500;
		OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, pp.x + offset1, pp.y + offset2, pp.z, 0, amount, PROP_MONEY_BAG_02, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);
	}
}

bool Features::savenewdrop11 = false;
void Features::cashdrop11(bool toggle)
{

	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	while (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
	{
		int amount = 2000;
		OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, pp.x + offset1, pp.y + offset2, pp.z, 0, amount, PROP_MONEY_BAG_02, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);
	}
}

bool Features::savenewdrop13 = false;
void Features::cashdrop13(bool toggle)
{

	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_02);
	while (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_02))
	{
		int amount = 1000;
		OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, pp.x + offset1, pp.y + offset2, pp.z, 0, amount, PROP_MONEY_BAG_02, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);
	}
}

bool Features::savenewdrop9[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop9(Player target)
{

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	while (!STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pp.x + offset1, pp.y + offset2, pp.z, 0, 1000, 0x9CA6F755, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x9CA6F755);
	}
}


bool Features::savenewdrop4[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop4(Player target)
{

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-15, 15);

	STREAMING::REQUEST_MODEL(0x9CA6F755);
	while (!STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(0x9CA6F755))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pp.x + offset1, pp.y + offset2, pp.z, 0, 2000, 0x9CA6F755, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x9CA6F755);
	}
}

bool Features::savenewdrop6[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop6(Player target)
{

	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_01);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


	STREAMING::REQUEST_MODEL(PROP_MONEY_BAG_01);
	while (!STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_01))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(PROP_MONEY_BAG_01))
	{
		int amount = 1999;
		OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, pp.x + offset1, pp.y + offset2, pp.z, 0, amount, PROP_MONEY_BAG_01, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_01);
	}
}


int Features::attachobj[100];  //PED::CREATE_PED
int Features::nuattach = 1;
void Features::attachobjects2(char* object)
{
	bool custom = false;
	int hash = 0;
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true);
	hash = GAMEPLAY::GET_HASH_KEY(object);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
	{
		if (STREAMING::IS_MODEL_VALID(hash))
		{
			STREAMING::REQUEST_MODEL(hash);
			if (STREAMING::HAS_MODEL_LOADED(hash))
			{
				Features::attachobj[Features::nuattach] = OBJECT::CREATE_OBJECT(hash, pos.x, pos.y, pos.z, 1, 1, 1);
				if (ENTITY::DOES_ENTITY_EXIST(Features::attachobj[Features::nuattach]))
				{
					ENTITY::ATTACH_ENTITY_TO_ENTITY(Features::attachobj[Features::nuattach], PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 31086, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1);
					nuattach++;
					if (nuattach >= 101) { nuattach = 1; }
				}
			}
		}
	}
}

bool Features::launchnearbyvehiclesbool = false;
void Features::launchnearbyvehicles(bool toggle)
{
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;

	Vehicle *vehs = new Vehicle[ArrSize];
	vehs[0] = ElementAmount;
	int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

	for (int i = 0; i < VehFound; i++)
	{
		int OffsetID = i * 2 + 2;
		if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
		{
			RequestControlOfEnt(vehs[OffsetID]);
			ENTITY::APPLY_FORCE_TO_ENTITY(vehs[OffsetID], 1, 0, 0, 20, 0, 0, 0, 1, false, true, true, true, true);
		}
	}
}

int Features::attachobj[100];  //PED::CREATE_PED
int Features::nuattach = 1;
void Features::attachobjects233(char* object)
{
	bool custom = false;
	int hash = 0;
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), true);
	hash = GAMEPLAY::GET_HASH_KEY(object);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
	{
		if (STREAMING::IS_MODEL_VALID(hash))
		{
			STREAMING::REQUEST_MODEL(hash);
			if (STREAMING::HAS_MODEL_LOADED(hash))
			{
				Features::attachobj[Features::nuattach] = PED::CREATE_PED(hash, pos.x, pos.y, pos.z, 1, 1, 1, 1);
				if (ENTITY::DOES_ENTITY_EXIST(Features::attachobj[Features::nuattach]))
				{
					ENTITY::ATTACH_ENTITY_TO_ENTITY(Features::attachobj[Features::nuattach], PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer))0, 0, 0, 0, 0);
					nuattach++;
					if (nuattach >= 101) { nuattach = 1; }
				}
			}
		}
	}
}

bool Features::offline_mode_snow = false;
void Features::OfflineModeSnow(bool toggle)
{
	static void* snow_ting = nullptr;
	constexpr size_t snow_num_bytes = 20;
	static uint8_t snow_restore[snow_num_bytes] = {};
	static bool saved = false;
	if (!saved)
	{
		saved = true;
		snow_ting = Memory::pattern("74 25 B9 ? ? ? ? E8 ? ? ? ? 84 C0").count(1).get(0).get<void>(0);
		memcpy(snow_restore, snow_ting, snow_num_bytes);
	}

	if (toggle)
	{
		memset(snow_ting, 0x90, snow_num_bytes);
	}
	else
	{
		memcpy(snow_ting, snow_restore, snow_num_bytes);
	}
}


int Features::boostdelay = 50;
bool Features::boostbool = false;
void Features::carboost(bool toggle) {
	if (PLAYER::IS_PLAYER_PRESSING_HORN(PLAYER::PLAYER_ID()))
	{
		Vehicle Veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()), false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(Veh))
		{
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(Veh, Features::boostdelay);// eh, looks good so it's not detected
		}
	}
}



bool Features::boostloo = true;
void Features::carloo(bool toggle) {

	if (IsKeyPressed(VK_NUMPAD7)) {

		if (PLAYER::IS_PLAYER_PRESSING_HORN(PLAYER::PLAYER_ID()))
		{
			Vehicle Veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()), true);
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh); //NETWORK_REQUEST_CONTROL_OF_ENTITY this needs to be hooked, i will have to do that offline
			if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(Veh)) //OK
			{
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(Veh, 50);
			}
		}

	}
}

bool Features::astorrain = false;
void Features::rainastor(bool toggle) {


	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 20.0);
	int offsetX = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-5, 0);
	int offsetyY = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-5, 0);
	int offsetX1 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-6, 6);
	int offsetyY1 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-3, 3);
	int offsetZ = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-2, 2);
	int PickupHash = GAMEPLAY::GET_HASH_KEY("prop_asteroid_01");
	STREAMING::REQUEST_MODEL(PickupHash);
	while (!STREAMING::HAS_MODEL_LOADED(PickupHash)) WAIT(0);

	int AMOUNT = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(20000, 40000);
	int test = OBJECT::CREATE_OBJECT(PickupHash, pp.x + offsetX, pp.y + offsetyY, pp.z, AMOUNT, false, false);
	ENTITY::SET_ENTITY_VELOCITY(test, 0, 0, 0);



}







bool Features::Teleport = true;
void Features::teleport(bool toggle)
{
	if (IsKeyPressed(VK_F10))
	{
		Vector3 coords = get_blip_marker();

		if (coords.x == 0 && coords.y == 0)
		{
			notifyMap("No Waypoint has been set!", 0);
			return;
		}

		// get entity to teleport
		Entity e = PLAYER::PLAYER_PED_ID();
		if (PED::IS_PED_IN_ANY_VEHICLE(e, 0))
		{
			e = PED::GET_VEHICLE_PED_IS_USING(e);
		}

		// load needed map region and check height levels for ground existence
		bool groundFound = false;
		static float groundCheckHeight[] =
		{ 100.0, 150.0, 50.0, 0.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0 };
		for (int i = 0; i < sizeof(groundCheckHeight) / sizeof(float); i++)
		{
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(e, coords.x, coords.y, groundCheckHeight[i], 0, 0, 1);
			WAIT(100);
			if (GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(coords.x, coords.y, groundCheckHeight[i], &coords.z, 0))
			{
				groundFound = true;
				coords.z += 3.0;
				break;
			}
		}
		// if ground not found then set Z in air and give player a parachute
		if (!groundFound)
		{
			coords.z = 1000.0;
			WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFBAB5776, 1, 0);
		}
		//do it
		teleport_to_coords(e, coords);
	}
}






bool Features::dowbool = false;
void Features::DriveOnWater(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	DWORD model = ENTITY::GET_ENTITY_MODEL(veh);
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
	float height = 0;
	WATER::_SET_WAVES_INTENSITY(height);
	if ((!(VEHICLE::IS_THIS_MODEL_A_PLANE(ENTITY::GET_ENTITY_MODEL(veh)))) && WATER::GET_WATER_HEIGHT_NO_WAVES(pos.x, pos.y, pos.z, &height)) {
		Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(container) && height > -50.0f) {
			Vector3 pRot = ENTITY::GET_ENTITY_ROTATION(playerPed, 0);
			if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 1)) pRot = ENTITY::GET_ENTITY_ROTATION(veh, 0);
			RequestControlOfEnt(container);
			ENTITY::SET_ENTITY_COORDS(container, pos.x, pos.y, height - 1.5f, 0, 0, 0, 1);
			ENTITY::SET_ENTITY_ROTATION(container, 0, 0, pRot.z, 0, 1);
			Vector3 containerCoords = ENTITY::GET_ENTITY_COORDS(container, 1);
			if (pos.z < containerCoords.z) {
				if (!PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0)) {
					ENTITY::SET_ENTITY_COORDS(playerPed, pos.x, pos.y, containerCoords.z + 2.0f, 0, 0, 0, 1);
				}
				else {
					RequestControlOfEnt(veh);
					Vector3 vehc = ENTITY::GET_ENTITY_COORDS(veh, 1);
					ENTITY::SET_ENTITY_COORDS(veh, vehc.x, vehc.y, containerCoords.z + 2.0f, 0, 0, 0, 1);
				}
			}
		}
		else {
			Hash model = GAMEPLAY::GET_HASH_KEY("prop_container_ld2");
			STREAMING::REQUEST_MODEL(model);
			while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
			container = OBJECT::CREATE_OBJECT(model, pos.x, pos.y, pos.z, 1, 1, 0);
			RequestControlOfEnt(container);
			ENTITY::FREEZE_ENTITY_POSITION(container, 1);
			ENTITY::SET_ENTITY_ALPHA(container, 0, 1);
			ENTITY::SET_ENTITY_VISIBLE(container, 0, 1);
		}
	}
	else {
		Object container = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(pos.x, pos.y, pos.z, 4.0, GAMEPLAY::GET_HASH_KEY("prop_container_ld2"), 0, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(container)) {
			RequestControlOfEnt(container);
			ENTITY::SET_ENTITY_COORDS(container, 0, 0, -1000.0f, 0, 0, 0, 1);
			WAIT(10);
			ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&container);
			ENTITY::DELETE_ENTITY(&container);
			WATER::_RESET_WAVES_INTENSITY();
		}
	}
}

bool Features::hornnearbyvehiclesbool = false;
void Features::hornnearbyvehicles(bool toggle)
{
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;

	Vehicle *vehs = new Vehicle[ArrSize];
	vehs[0] = ElementAmount;
	int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

	for (int i = 0; i < VehFound; i++)
	{
		int OffsetID = i * 2 + 2;
		if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
		{
			RequestControlOfEnt(vehs[OffsetID]);
			VEHICLE::START_VEHICLE_HORN(vehs[OffsetID], 5000, AUDIO::_GET_VEHICLE_HORN_HASH(vehs[OffsetID]), true);
		}
	}
}





void Features::RequestControl(DWORD entity)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);
	int tick = 0;
	while (tick <= 50)
	{
		if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity))
			WAIT(0);
		else
			return;
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);
		tick++;
	}
}

bool Features::flyToggle = false;

float yaw, rotation, pitch, roll = 0.0f;

void Features::flyingCar1() {
	if (flyToggle) {
		if (PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()) != NULL)
		{
			VEHICLE::SET_VEHICLE_GRAVITY(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), FALSE); // No more falling.
			pitch = ENTITY::GET_ENTITY_PITCH(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()));
			float curSpeed = ENTITY::GET_ENTITY_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()));

			bool isBackward;
			if (IsKeyPressed(0x57)) /* W DOWN - GO FORWARD */
			{
				isBackward = false;
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch, 0.0f, yaw, 2, TRUE);
				RequestControl(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()));
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), curSpeed += 3.0f);
			}
			else if (IsKeyPressed(0x53)) /* S DOWN - GO BACKWARD */
			{
				isBackward = true;
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch, 0.0f, yaw, 2, TRUE);
				RequestControl(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()));
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), (curSpeed * -1.0f) - 3.0f);
			}
			else {
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch, roll, yaw, 2, TRUE);
				if (curSpeed > 3.0f && isBackward)
				{
					VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), curSpeed - 3.0f);
				}
				else
				{
					VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0.0f);
				}
			}

			if (IsKeyPressed(0x41)) /* A DOWN - TURN LEFT */
			{
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch, roll, yaw += 4.5f, 2, TRUE);
			}

			if (IsKeyPressed(0x44)) /* D DOWN - TURN RIGHT */
			{
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch, roll, yaw -= 4.5f, 2, TRUE);
			}

			if (IsKeyPressed(VK_SHIFT)) /* SHIFT DOWN - PITCH UP */
			{
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch -= 4.5f, roll, yaw, 2, TRUE);
			}

			if (IsKeyPressed(VK_CONTROL)) /* CTRL DOWN - PITCH DOWN */
			{
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), pitch += 4.5f, roll, yaw, 2, TRUE);
			}

			if (IsKeyPressed(VK_SPACE)) /* SPACE DOWN - STOP */
			{
				ENTITY::SET_ENTITY_ROTATION(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0.0f, roll, yaw, 2, TRUE);
				RequestControl(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()));
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), 0.0f);
			}
		}
		else
		{
			VEHICLE::SET_VEHICLE_GRAVITY(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), TRUE);
		}
	}
	else {
		VEHICLE::SET_VEHICLE_GRAVITY(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), TRUE);
	}
}



void Features::noreloadv(bool toggle) {
	Hash cur;
	if (WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &cur, 1))
	{
		if (WEAPON::IS_WEAPON_VALID(cur))
		{
			int maxAmmo;
			if (WEAPON::GET_MAX_AMMO(PLAYER::PLAYER_PED_ID(), cur, &maxAmmo))
			{
				WEAPON::SET_PED_AMMO(PLAYER::PLAYER_PED_ID(), cur, maxAmmo);

				maxAmmo = WEAPON::GET_MAX_AMMO_IN_CLIP(PLAYER::PLAYER_PED_ID(), cur, 1);
				if (maxAmmo > 0)
					WEAPON::SET_AMMO_IN_CLIP(PLAYER::PLAYER_PED_ID(), cur, maxAmmo);
			}
		}
	}
}

bool Features::featureMiscHideHud = false;
void Features::featureiscHideHud(bool toggle) {
	if (featureMiscHideHud)
		UI::HIDE_HUD_AND_RADAR_THIS_FRAME();
}

int Features::stealthDelay4033 = 100;
bool Features::rlbool = false;
void Features::HasPaintLoop(bool toggle)
{
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay4033) // Time between drops
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		Features::TimePD5 = timeGetTime();
	}
}


int Features::manpr = 255;
int Features::manpg = 255;
int Features::manpb = 255;
bool Features::manrgb = false;
void Features::rgbman(bool toggle)
{

	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
	int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehID, Features::manpr, Features::manpg, Features::manpb);
	VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehID, Features::manpr, Features::manpg, Features::manpb);
	VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, Features::manpr, Features::manpg, Features::manpb);


}

bool Features::annupla = false;
char * Features::nu1 = "x";
char * Features::nu2 = "x";
char * Features::nu3 = "x";
char * Features::nu4 = "x";
int aniloopnum = 1;


/*bool Features::mobileRadio = false;// ITS NOT WORKINIG, its patched
void Features::mobilevoid(bool toggle) {
	int station = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();
	if (toggle == false)
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(false);
		AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);

	}
	else
	{
		AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true);
		AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);
		AUDIO::SET_RADIO_TO_STATION_INDEX(station);

	}
}*/



void Features::ramWithVeh(Player target)
{
	Hash model = $("trophytruck2");
	if (STREAMING::IS_MODEL_VALID(model))
	{
		for (int i = 0; i < 3; i++)
		{
			STREAMING::REQUEST_MODEL(model);
			while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
			Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target), false);
			float forward = 10.f;
			float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target));
			float xVector = forward * sin(degToRad(heading)) * -1.f;
			float yVector = forward * cos(degToRad(heading));
			Vehicle veh = VEHICLE::CREATE_VEHICLE(model, ourCoords.x - xVector, ourCoords.y - yVector, ourCoords.z, heading, true, true);
			RequestControlOfEnt(veh);
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 250);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
		}
	}
}



void Features::RequestControlOfid(Entity netid)
{
	int tick = 0;

	while (!NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(netid) && tick <= 25)
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netid);
		tick++;
	}
}

void Features::RequestingControl(Entity e)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
	if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(e))
		WAIT(0);
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
}

void Features::playAnimationPlayer(Player player, bool loop, char * dict, char * anim)
{
	LoadAnim(dict);
	int a = -1;
	int b = 1;

	if (!loop)
	{
		a = 1;
		b = 0;
	}

	AI::TASK_PLAY_ANIM(player, dict, anim, 10000.0f, -1.5f, a, b, 0.445f, false, false, false);

}


bool Features::cargodmodebool = false;
void Features::cargodmode(bool toggle)
{

	if (toggle == true)
	{
		ENTITY::SET_ENTITY_INVINCIBLE(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), true);
	}
	else
	{
		ENTITY::SET_ENTITY_INVINCIBLE(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), false);
	}
}

bool Features::enginealwaysonbool = false;
void Features::enginealwayson(bool toggle)
{
	Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
	VEHICLE::SET_VEHICLE_ENGINE_ON(veh, Features::enginealwaysonbool, Features::enginealwaysonbool, Features::enginealwaysonbool);
	VEHICLE::SET_VEHICLE_LIGHTS(veh, 0);
	VEHICLE::_SET_VEHICLE_LIGHTS_MODE(veh, 2);
}


bool Features::enginealwaysonboolpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::enginealwaysonpl(Player target)
{
	Player veh = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	VEHICLE::SET_VEHICLE_ENGINE_ON(veh, Features::enginealwaysonboolpl[35], Features::enginealwaysonboolpl[35], Features::enginealwaysonboolpl[35]);
	VEHICLE::SET_VEHICLE_LIGHTS(veh, 0);
	VEHICLE::_SET_VEHICLE_LIGHTS_MODE(veh, 2);
}
bool Features::sound1[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound11(Player target)
{
	DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 1 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
}
bool Features::sound2[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound22(Player target)
{
	DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 2 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
}
bool Features::sound3[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound33(Player target)
{
	DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 3 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
}
bool Features::sound4[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound44(Player target)
{
	DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 6 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
}
bool Features::sound5[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound55(Player target)
{
	DWORD64 args[3] = { 729971264, Features::Online::selectedPlayer, 7 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << Features::Online::selectedPlayer);
}
void Features::flipup()
{
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false));
}

bool Features::sounderror[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::sound55error(Player target)
{
	auto unkKek1 = globalHandle(1624079 + 1 + Features::Online::selectedPlayer * 558 + 491).As<std::uint64_t>();
	auto unkKek2 = globalHandle(1641937 + 9).As<std::uint64_t>();
	std::uint64_t args[8] = {
		-1241703753,
		Features::Online::selectedPlayer,
		10000, // amount
		0,
		0,
		unkKek1, unkKek2, unkKek2
	};
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 8, 1 << Features::Online::selectedPlayer);
}




bool Features::sounderrorall = false;
void Features::sound55errorall(bool toggle)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			auto unkKek1 = globalHandle(1624079 + 1 + i * 558 + 491).As<std::uint64_t>();
			auto unkKek2 = globalHandle(1641937 + 9).As<std::uint64_t>();
			std::uint64_t args[8] = {
				-1241703753,
				i,
				10000, // amount
				0,
				0,
				unkKek1, unkKek2, unkKek2
			};
			SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 8, 1 << i);

		}

	}
}



void Features::maxvehicle()
{
	Vehicle vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
	VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, 0);
	for (int i = 0; i < 50; i++)
	{
		VEHICLE::SET_VEHICLE_MOD(vehicle, i, VEHICLE::GET_NUM_VEHICLE_MODS(vehicle, i) - 1, false);
	}
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "Ephesys");
}


bool Features::camshaker[32] = { false };
void Features::shakecam(Player target)
{
	Player selectedPlayer = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	Vector3 targetCords = ENTITY::GET_ENTITY_COORDS(selectedPlayer, false);
	FIRE::ADD_EXPLOSION(targetCords.x, targetCords.y, targetCords.z, 4, 0.f, false, true, 1000.f);
}



bool Features::camshaker112 = false;
void Features::shakecam11(bool toggle)
{
	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{


			Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Ped playerPed = PLAYER::PLAYER_PED_ID();
			Vector3 targetCords = ENTITY::GET_ENTITY_COORDS(iPed, false);
			FIRE::ADD_EXPLOSION(targetCords.x, targetCords.y, targetCords.z, 4, 0.f, false, true, 1000.f);


		}
	}
}

bool Features::exploder[32] = { false };
void Features::explodeloop(Player target)
{
	Vector3 targetCords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target), false);
	FIRE::ADD_EXPLOSION(targetCords.x, targetCords.y, targetCords.z, 0, 0.0f, true, false, 10.0f);
}

void Features::DepositToBank()
{
	int32_t character;
	STATS::STAT_GET_INT($("MPPLY_LAST_MP_CHAR"), &character, 1);

	UNK3::_NETWORK_TRANSFER_WALLET_TO_BANK(character, Features::ammoutwithraw);
	UNK3::_NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED();

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Transfer your Money to Bank");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}

void Features::deposit()
{
	int iVar0;
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_LAST_MP_CHAR"), &iVar0, 1);
	UNK3::_NETWORK_TRANSFER_WALLET_TO_BANK(iVar0, Features::ammoutwithraw);
	UNK3::_NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED();

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Transfer your Money to Wallet");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}

int Features::ammoutwithraw = 0;
void Features::withdraw()
{
	int iVar0;
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_LAST_MP_CHAR"), &iVar0, 1);
	UNK3::_NETWORK_TRANSFER_BANK_TO_WALLET(iVar0, Features::ammoutwithraw);
	UNK3::_NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED();

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Transfer your Money to Wallet");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}

void Features::animation(char* anim, char* dict)
{
	Ped targ_ped = PLAYER::PLAYER_PED_ID();//seleted player
	STREAMING::REQUEST_ANIM_DICT(dict);
	if (STREAMING::HAS_ANIM_DICT_LOADED(dict))
	{
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(targ_ped, 0.0, 0.0, 0.0);//since get_coord is patched i found this native
		int sceneID = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f);
		NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(targ_ped, sceneID, dict, anim, 8.0f, -8.0f, 120, 0, 100, 0);/*i changed any to char* i provide the native below(modificated)*/
		NETWORK::NETWORK_START_SYNCHRONISED_SCENE(sceneID);//will start the animation

	}
}

void Features::clearanim()
{
	AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::PLAYER_PED_ID());

}



static std::vector<DWORD64>	NameAddresses;

std::vector<DWORD64> getNameAdresses()
{
	return NameAddresses;
}


void Features::SpoofName(std::string name)
{
	name += ('\0');

	auto byteSize = name.length();

	for each (DWORD64 addr in getNameAdresses())
	{
		unsigned long OldProtection;
		VirtualProtect((LPVOID)(addr), byteSize, PAGE_EXECUTE_READWRITE, &OldProtection);
		RtlCopyMemory((LPVOID)addr, name.data(), byteSize);
		+VirtualProtect((LPVOID)(addr), byteSize, OldProtection, NULL);
	}

}




bool Features::betiny = false;
void Features::TinyPlayer(bool toggle)
{
	PED::SET_PED_CONFIG_FLAG(PLAYER::PLAYER_PED_ID(), 223, toggle);
}


void Features::HeliPickup()
{
	globalHandle(2519572).At(824).As<int>() = 1;
}

void Features::changeplate()
{
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(true, "", "", "", "", "", "", 64);
	std::string str = get_ingame_keyboard_result();
	if (str != "!!INVALID!!" && str != "")
	{
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), &str[0]);
	}
}

bool Features::osk = false;
void Features::OSKR(bool toggle)
{
	if (!osk) {
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, OFFSET_WEAPON_BULLET_DMG }, 1.f);
	}
	else {
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_WEAPON_MANAGER, OFFSET_WEAPON_CURRENT, OFFSET_WEAPON_BULLET_DMG }, 10000.0f);
	}
}


bool Features::spectate[32] = { false };
void Features::specter(Player target)
{
	if (Features::spectate[target] == true) {
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(Features::spectate[target], PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target));
	}
	else if (Features::spectate[target] == false) {
		NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(false, PLAYER::PLAYER_PED_ID());
	}
}

void Features::trapcage(Ped ped)
{
	Vector3 remotePos = ENTITY::GET_ENTITY_COORDS(ped, 0);
	Object obj = OBJECT::CREATE_OBJECT($("prop_gold_cont_01"), remotePos.x, remotePos.y, remotePos.z - 1.f, true, false, false);
}

void Features::trapcagecable(Ped ped)
{
	Vector3 remotePos = ENTITY::GET_ENTITY_COORDS(ped, 0);
	Object obj = OBJECT::CREATE_OBJECT($("p_cablecar_s_door_r"), remotePos.x, remotePos.y, remotePos.z - 1.f, true, false, false);
}

float roll12;
float yaw12;
float pitch12;
float MoveX2;
float MoveY2;
float MoveZ2;


void Features::trapstunt(Ped ped)
{

	MoveX2 = -1091.963745f;
	MoveY2 = -2909.602051f;
	MoveZ2 = 16.345360f;

	Vector3 remotePos = ENTITY::GET_ENTITY_COORDS(ped, 0);
	Object obj = OBJECT::CREATE_OBJECT($("stt_prop_stunt_tube_crn_15d"), MoveX2, MoveY2, MoveZ2 - 1.f, remotePos.x, remotePos.y, remotePos.z);
}

bool Features::afkanti = false;
void Features::antiAFK(bool toggle) {
	if (afkanti) {
		globalHandle(262145).At(88, 4).As<int>() = 9999999;
		globalHandle(262145).At(89, 4).As<int>() = 9999999;
		globalHandle(262145).At(90, 4).As<int>() = 9999999;
		globalHandle(262145).At(91, 4).As<int>() = 9999999;
	}

}

void Features::trapall() {
	for (int i = 1; i <= 32; i++) {
		if (PLAYER::PLAYER_ID() != i) {
			Vector3 remotePos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 0);
			Object obj = OBJECT::CREATE_OBJECT($("prop_gold_cont_01"), remotePos.x, remotePos.y, remotePos.z - 1.f, true, false, false);
		}
	}
}
bool Features::rocketrain = false;
void Features::rainro(bool toggle) {

	Vector3 coords = ENTITY::GET_ENTITY_COORDS(0, 0);
	Hash airStrike4 = $("VEHICLE_WEAPON_SPACE_ROCKET");
	if (WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike4))
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x + (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-10.f, 10.f)), coords.y + (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-10.f, 10.f)), coords.z + 50.f, coords.x + (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-10.f, 10.f)), coords.y + (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(-10.f, 10.f)), coords.z, 250, 1, airStrike4, PLAYER::PLAYER_PED_ID(), 1, 0, -1.0);
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), airStrike4, 1, 0);

}
bool Features::firewgun = false;
void Features::fireWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREWORK");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::anewgun = false;
void Features::AneWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_RPG");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::flaregun = false;
void Features::FlareWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FLARE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::molgun = false;
void Features::MolWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_MOLOTOV");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::ballgun = false;
void Features::BallWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_BALL");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::grangun = false;
void Features::GranWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADELAUNCHER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::Batgun = false;
void Features::BatWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_STINGER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::snowgun = false;
void Features::snowWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_SNOWBALL");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::proxgun = false;
void Features::proxWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_PROXMINE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::leagun = false;
void Features::leaWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_ENEMY_LASER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}
bool Features::fielfick[32];
void Features::hhforcefield(Player target)
{
	Player playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
	FIRE::ADD_EXPLOSION(pCoords.x, pCoords.y, pCoords.z, 7, 9.0f, false, true, 0.0f);
}




bool Features::stickgun = false;
void Features::StickWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_STICKYBOMB");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}
static std::vector<void*> EventPtr;
static char EventRestore[REVENT_END] = {};
void patchEvent(eRockstarEvent e, bool b) {
	if (EventPtr.size() == 0) return;
	static const BYTE ret = 0xC3;
	BYTE* ptr = (BYTE*)EventPtr[e];
	if (b) {
		if (EventRestore[e] == 0) EventRestore[e] = ptr[0];
		*ptr = ret;
	}
	else if (EventRestore[e] != 0) *ptr = EventRestore[e];
}
bool Features::remweat = false; //sec
void Features::wetett(bool toggle)
{
	enum eWeatherClockEvent : DWORD
	{
		GAME_CLOCK_EVENT = 0x6,
		GAME_WEATHER_EVENT = 0x7
	}
	patchEvent(GAME_CLOCK_EVENT);
	patchEvent(GAME_WEATHER_EVENT);
}

bool Features::SoundSpamProtection = false;
void Features::Spamp(bool toggle)
{
	globalHandle(1377446).At(33).As<bool>() = toggle;
}
bool Features::SendToJobProtection = false;
void Features::STJp(bool toggle)
{
	globalHandle(1377446).At(663).As<bool>() = toggle;
}
bool Features::CeoBanProtection = false;
void Features::CEOBanp(bool toggle)
{
	globalHandle(1377446).At(545).As<bool>() = toggle;
}
bool Features::CEOKickProtection = false;
void Features::CEOKickp(bool toggle)
{
	globalHandle(1377446).At(523).As<bool>() = toggle;
}
bool Features::kickp = false;
void Features::Kickprotec(bool toggle)
{
	globalHandle(1377446).At(595).As<bool>() = toggle;
}
bool Features::tpp = false;
void Features::Teleportprotec(bool toggle)
{
	globalHandle(1377446).At(486).As<bool>() = toggle;
}

bool Features::trns = false;
void Features::remore(bool toggle)
{
	globalHandle(1624079).At(558).As<bool>() = toggle;
	globalHandle(1641937).At(491).As<bool>() = toggle;
}
bool Features::smogun = false;
void Features::SmoWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_SMOKEGRENADE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::ffgun = false;
void Features::FFWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREEXTINGUISHER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::ppgun = false;
void Features::PPWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_PETROLCAN");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::bcgun = false;
void Features::BCWgun(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	float startDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	float endDistance = distance(&CAM::GET_GAMEPLAY_CAM_COORD(), &ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true));
	startDistance += 5.25;
	endDistance += 1000.0;
	if (PED::IS_PED_ON_FOOT(playerPed) && PED::GET_PED_CONFIG_FLAG(playerPed, 58, 1))
	{
		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_BRIEFCASE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), startDistance)).z, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).x, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).y, add3(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply3(&rotDirection(&CAM::GET_GAMEPLAY_CAM_ROT(0)), endDistance)).z, 250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
	}
}

bool Features::is_file_exist(const char *fileName) {
	ifstream infile(fileName);
	return infile.good();
}

float Features::gameCamZoomInt = 1.0f;
bool Features::gameCamZoom = false;
void Features::zoomCam() {
	CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(Features::gameCamZoomInt, Features::gameCamZoomInt);
}

bool Features::PTLoopedO[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::PTLopperO(Player target)
{

	if ((timeGetTime() - Features::TimePD6) > 500) // Time between drops
	{
		STREAMING::REQUEST_NAMED_PTFX_ASSET(call1o);
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2o);
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(nameo, PTLoopPed, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		Features::TimePD6 = timeGetTime();

	}
}

int Features::stealthDelay405 = 3000;
int  Features::amount405 = 10000000;
bool Features::stealthnewsafe = false;
void Features::newStealthLoop(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay405) { // Delay
		globalHandle(4262669).At(1).As <int>() = 2147483646;
		globalHandle(4262669).At(7).As <int>() = 2147483647;
		globalHandle(4262669).At(6).As <int>() = 0;
		globalHandle(4262669).At(5).As <int>() = 0;
		globalHandle(4262669).At(3).As <int>() = 312105838;
		globalHandle(4262669).At(2).As <int>() = Features::amount405;
		globalHandle(4262669).As<int>() = 1;
		// oh ok . ahh, i need to go now xdd if you have more questions, ask on discord ;) byee
		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount405, 1);

		Features::TimePD5 = timeGetTime();
	}

	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_BUGSTARS", "CHAR_BUGSTARS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
	UI::_DRAW_NOTIFICATION(FALSE, FALSE);
}

int Features::stealthDelay4051 = 3000;
int  Features::amount4051 = 10000000;
bool Features::stealthnewsafe22 = false;
void Features::newStealthLoop22(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay405) { // Delay
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = true ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Features::amount4051, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount405, 1);
	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}
}

int Features::stealthDelay4051okok = 3000;
bool Features::stealthnewsafe22okok = false;
void Features::newStealthLoop22okok(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay4051okok) { // Delay
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = true ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(15466, 10000000), bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();


	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}
}


bool Features::stealthnewsafe22okoklol = false;
void Features::newStealthLoop22okoklol(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay4051okok) { // Delay
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(15466, 10000000), bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}
}

void Features::givewao(char* koook) {

	int gock = GAMEPLAY::GET_HASH_KEY(koook);
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), gock, 9999, 1);

}
void Features::flatbed(char* loooop) {

	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
	Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
	Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
	Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
	Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
	Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
	Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
	Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
	Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
	int hash2 = GAMEPLAY::GET_HASH_KEY(loooop);
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
	int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
	int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hash3);
	STREAMING::REQUEST_MODEL(hash4);
	STREAMING::REQUEST_MODEL(hash5);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
		int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
		int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(Object, "Ephesys");
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true, false);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);

		}

	}

}

int Features::stealthDelay4051ok = 3000;
int  Features::amount4051ok = 15000000;
bool Features::stealthnewsafe22ok = false;
void Features::newStealthLoop22ok(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay4051ok) { // Delay
		Any var0 = 0ul;
		int var3 = -1586170317;
		int bankVal = true ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Features::amount4051ok, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount4051ok, 1);
	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}
}



bool Features::stealthnewsafe12ok = false;
void Features::newStealthLoop12ok(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay4051ok) { // Delay
		Any var0 = 0ul;
		int var3 = -1586170317;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Features::amount4051ok, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount4051ok, 1);
	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}
}



bool Features::stealthnewsafe2211 = false;
void Features::newStealthLoop2211(bool toggle) {//Stealth Loop any amount
	if ((timeGetTime() - Features::TimePD5) > Features::stealthDelay405) { // Delay
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, Features::amount4051, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount405, 1); notifyMap("~b~Click Numpad9!");


	}
	else
	{
		UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
		UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("~w~Edit your Money");
		UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("Textures", "CHAR_EPHESYS", 1, 8, "Ephesys", "Recovery", 1, "", 9, 0);
		UI::_DRAW_NOTIFICATION(FALSE, FALSE);

	}

}




bool Features::ChaosMode = false;
void Features::Chaos(bool toggle)
{
	const int numElements = 15;
	const int arrSize = numElements * 2 + 2;
	Ped peds[arrSize];
	peds[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);

	// Nearby Peds
	for (int i = 0; i < count; ++i)
	{
		int offsettedID = i * 2 + 2;
		if (ENTITY::DOES_ENTITY_EXIST(peds[offsettedID]) && peds[offsettedID] != PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::GET_PLAYER_INDEX()))
		{
			ENTITY::SET_ENTITY_HAS_GRAVITY(peds[offsettedID], false);
			Vector3 velocity = ENTITY::GET_ENTITY_VELOCITY(peds[offsettedID]);
			velocity.z = 2.f;
			if (ENTITY::IS_ENTITY_A_PED(peds[offsettedID]) && !PED::IS_PED_RAGDOLL(peds[offsettedID]))
			{
				PED::SET_PED_TO_RAGDOLL(peds[offsettedID], 2000, 0, 2, false, false, false);
				velocity.z = 5.f;
				ENTITY::APPLY_FORCE_TO_ENTITY(peds[offsettedID], 1, 0, 0, ENTITY::IS_ENTITY_A_PED(peds[offsettedID]) ? 10.f : 5.f, 0, 0, 0, 1, 1, 1, 1, 1, 1);
			}
			ENTITY::SET_ENTITY_VELOCITY(peds[offsettedID], velocity.x, velocity.y, velocity.z);
		}
	}

	// Nearby Vehicles
	const int numElements2 = 15;
	const int arrSize2 = numElements2 * 2 + 2;
	Vehicle veh[arrSize2];
	veh[0] = numElements2;
	int count2 = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);

	if (veh != NULL)
	{
		for (int i = 0; i < count2; i++)
		{
			int offsettedID = i * 2 + 2;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]) && veh[offsettedID] != PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::GET_PLAYER_INDEX())))
			{
				ENTITY::SET_ENTITY_HAS_GRAVITY(veh[offsettedID], false);
				Vector3 velocity = ENTITY::GET_ENTITY_VELOCITY(veh[offsettedID]);
				velocity.z = 2.f;
				ENTITY::SET_ENTITY_VELOCITY(veh[offsettedID], velocity.x, velocity.y, velocity.z);
				ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, ENTITY::IS_ENTITY_A_PED(veh[offsettedID]) ? 10.f : 5.f, 0, 0, 0, 1, 1, 1, 1, 1, 1);
			}
		}
	}
}

namespace Features {

	bool vehiclegravitybool = false;
	void vehiclegravity()
	{
		Memory::set_value<float>({ OFFSET_PLAYER, OFFSET_PLAYER_VEHICLE, OFFSET_VEHICLE_GRAVITY }, vehiclegravitybool ? 0.f : 9.8f);
	}
	bool killpedsbool = false;
	void killpeds()
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;

		Ped *peds = new Ped[ArrSize];
		peds[0] = ElementAmount;

		int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);

		for (int i = 0; i < PedFound; i++)
		{
			int OffsetID = i * 2 + 2;
			RequestControlOfEnt(peds[OffsetID]);
			if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
			{
				PED::APPLY_DAMAGE_TO_PED(peds[OffsetID], 1000, false);
			}
		}
	}
	void doAnimation(char* anim, char* animid)
	{
		int pPlayer = PLAYER::PLAYER_PED_ID();
		RequestNetworkControl(pPlayer);
		STREAMING::REQUEST_ANIM_DICT(anim);
		if (STREAMING::HAS_ANIM_DICT_LOADED((anim)))
		{
			AI::TASK_PLAY_ANIM(pPlayer, anim, animid, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
		}
	}
	void PTFXCALL(char *call1, char *call2, char *name)
	{
		call1o = call1;
		call2o = call2;
		nameo = name;

		STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(name, PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

	}

	void PTFXCALLppl(char *call1, char *call2, char *name, Player target)
	{
		Ped user = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);

		call1o = call1;
		call2o = call2;
		nameo = name;
		PTLoopPed = user;

		STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(name, user, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

	}
	void Features::PTFXCALLO(char *call1, char *call2, char *name, Player target)
	{
		Ped user = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);

		call1o = call1;
		call2o = call2;
		nameo = name;
		PTLoopPed = user;

		STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(name, user, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

	}
	bool explodepedsbool = false;
	void explodepeds()
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;

		Ped *peds = new Ped[ArrSize];
		peds[0] = ElementAmount;

		int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);

		for (int i = 0; i < PedFound; i++)
		{
			int OffsetID = i * 2 + 2;
			RequestControlOfEnt(peds[OffsetID]);
			if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
			{
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(peds[OffsetID], false);
				FIRE::ADD_EXPLOSION(pos.x, pos.y, pos.z, 0, 1000.f, true, false, 0.f);
			}
		}
	}

	bool explodenearbyvehiclesbool = false;
	void explodenearbyvehicles()
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;

		Vehicle *vehs = new Vehicle[ArrSize];
		vehs[0] = ElementAmount;
		int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

		for (int i = 0; i < VehFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
			{
				RequestControlOfEnt(vehs[OffsetID]);
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(vehs[OffsetID], false);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 1000.f, true, false, 0.f);
			}
		}
		delete vehs;
	}

	bool deletenearbyvehiclesbool = false;
	void deletenearbyvehicles()
	{
		const int ElementAmount = 10;
		const int ArrSize = ElementAmount * 2 + 2;

		Vehicle *vehs = new Vehicle[ArrSize];
		vehs[0] = ElementAmount;
		int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

		for (int i = 0; i < VehFound; i++)
		{
			int OffsetID = i * 2 + 2;
			if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
			{
				RequestControlOfEnt(vehs[OffsetID]);
				ENTITY::SET_ENTITY_COORDS(vehs[OffsetID], 6400.f, 6400.f, 0.f, false, false, false, false);
			}
		}
		delete vehs;
	}
}







bool Features::animgun = false;
void Features::animWgun(bool toggle) {
	LPCSTR animalModels[26] = { "a_c_boar", "a_c_chimp", "a_c_cow", "a_c_coyote", "a_c_deer", "a_c_fish", "a_c_hen", "a_c_cat_01", "a_c_chickenhawk",
		"a_c_cormorant", "a_c_crow", "a_c_dolphin", "a_c_humpback", "a_c_killerwhale", "a_c_pigeon", "a_c_seagull", "a_c_sharkhammer",
		"a_c_pig", "a_c_rat", "a_c_rhesus", "a_c_chop", "a_c_husky", "a_c_mtlion", "a_c_retriever", "a_c_gsharktiger", "a_c_shepherd" };

	if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
	{
		Vector3 rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 dir = rot_to_direction(&rot);
		Vector3 camPosition = CAM::GET_GAMEPLAY_CAM_COORD();
		Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		float spawnDistance = get_distance(&camPosition, &playerPosition);
		spawnDistance += 2;
		Vector3 spawnPosition = add(&camPosition, &multiply(&dir, spawnDistance));
		Hash model = GAMEPLAY::GET_HASH_KEY((char *)animalModels[rand() % 26]);
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
		{
			Vector3 playerOffset = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0, 5, 0);
			if (PED::IS_PED_ON_FOOT(PLAYER::PLAYER_PED_ID()))
			{
				STREAMING::REQUEST_MODEL(model);
				while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
				{
					Ped spawnedPed = PED::CREATE_PED(26, model, spawnPosition.x, spawnPosition.y, spawnPosition.z, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), 1, 1);
					ENTITY::SET_ENTITY_HEALTH(spawnedPed, 0);
					ENTITY::APPLY_FORCE_TO_ENTITY(spawnedPed, 1, dir.x * 10000.0f, dir.y * 10000.0f, dir.z * 10000.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
					ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&spawnedPed);
				}
			}
		}
	}

}

bool Features::Time = false;
void Features::time(bool toggle)
{
	int time = TIME::GET_CLOCK_HOURS();
	NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(time, 10, 10);
}

Vehicle Features::SpawnVehicle(char* modelg, Vector3 coords, bool tpinto = 0, float heading = 0.0f) {
	DWORD model = GAMEPLAY::GET_HASH_KEY(modelg);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(model) && STREAMING::IS_MODEL_A_VEHICLE(model)) {
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, coords.x, coords.y, coords.z, heading, 1, 1);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		VEHICLE::SET_VEHICLE_IS_STOLEN(veh, 0);
		return veh;
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
		DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", 0);
	}

}

int Features::spawn_vehicle99(std::string vehicle)
{
	Hash model = GAMEPLAY::GET_HASH_KEY((char*)_strdup(vehicle.c_str()));
	if (STREAMING::IS_MODEL_VALID(model))
	{
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		float forward = 5.f;
		float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
		float xVector = forward * sin(degToRad(heading)) * -1.f;
		float yVector = forward * cos(degToRad(heading));
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, ourCoords.x + xVector, ourCoords.y + yVector, ourCoords.z, heading, true, true);
		RequestControlOfEnt(veh);
		VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
		DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
		auto networkId = NETWORK::VEH_TO_NET(veh);
		ENTITY::_SET_ENTITY_SOMETHING(veh, true);
		if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
		if (spawnincar)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
		}
		if (spawnmaxed)
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
			for (int i = 0; i < 50; i++)
			{
				VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
			}
			VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, "Ephesys");
		}
		WAIT(150);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
	}
	Hash model = GAMEPLAY::GET_HASH_KEY(toSpawn);
	if (STREAMING::IS_MODEL_VALID(model))
	{
	STREAMING::REQUEST_MODEL(model);
	while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
	Vector3 ourCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	float forward = 5.f;
	float heading = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
	float xVector = forward * sin(degToRad(heading)) * -1.f;
	float yVector = forward * cos(degToRad(heading));
	Vehicle veh = VEHICLE::CREATE_VEHICLE(model, ourCoords.x + xVector, ourCoords.y + yVector, ourCoords.z, heading, true, true);
	RequestControlOfEnt(veh);
	VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
	VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
	DECORATOR::DECOR_SET_INT(veh, "MPBitset", 0);
	auto networkId = NETWORK::VEH_TO_NET(veh);
	ENTITY::_SET_ENTITY_SOMETHING(veh, true);
	if (NETWORK::NETWORK_GET_ENTITY_IS_NETWORKED(veh))
	NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(networkId, true);
	if (Features::spawnincar)
	{
	PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), veh, -1);
	}
	if (Features::spawnmaxed)
	{
	VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
	for (int i = 0; i < 50; i++)
	{
	VEHICLE::SET_VEHICLE_MOD(veh, i, VEHICLE::GET_NUM_VEHICLE_MODS(veh, i) - 1, false);
	}
	}
	WAIT(150);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
	}
}

bool Features::stsp = false;
void Features::sendtospprotec(bool toggle)
{
	globalHandle(1377446).At(594).As<bool>() = toggle;
}

void SET_INTO_VEHICLE1(int VehicleHandle)
{
	bool Max = VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(VehicleHandle), Existing = VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(VehicleHandle);
	if (!Max == Existing)
	{
		for (int SeatIndex = -1; SeatIndex <= Max; SeatIndex++)
		{
			if (VEHICLE::IS_VEHICLE_SEAT_FREE(VehicleHandle, SeatIndex))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), VehicleHandle, SeatIndex);
				SeatIndex = Max + 1;
			}
		}
	}
}

void Features::spawnChauffer()
{
	int WaypointHandle = UI::GET_FIRST_BLIP_INFO_ID(8);
	if (UI::DOES_BLIP_EXIST(WaypointHandle))
	{
		float coords;
		Vector3 waypoint1 = UI::GET_BLIP_COORDS(WaypointHandle);
		int veh = Features::spawn_vehicle99("stretch");
		if (veh != 0)
		{
			int Driver = PED::CREATE_RANDOM_PED_AS_DRIVER(veh, false);
			SET_INTO_VEHICLE1(veh);
			float coord[] = { waypoint1.x, waypoint1.y, waypoint1.z };
			AI::TASK_VEHICLE_DRIVE_TO_COORD(Driver, veh, coords, 40, 1, ENTITY::GET_ENTITY_MODEL(veh), 1, 0x2C0025, -1, false, false);
			notifyMap("Spawned!");
		}
	}
	else
		notifyMap("Please choose a waypoint");
}



void Features::fakelelvel(Player target)
{
	Player wanted = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	PLAYER::SET_PLAYER_WANTED_LEVEL(wanted, 5, false);

}

bool Features::cargop[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cargoP(Player target)
{

	if (cargoP)
	{
		int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
		Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
		Vehicle zentorno = Features::SpawnVehicle("CARGOPLANE", Ocoords, 0, 0.0f);
		ENTITY::SET_ENTITY_INVINCIBLE(zentorno, 0);
	}






}

bool Features::astrain[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::astraom(Player target)
{

	if (astrain)
	{
		int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
		Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
		DWORD Model = $("prop_asteroid_01");
		ENTITY::SET_ENTITY_INVINCIBLE(Model, 0); // i don't think so it's working
	}






}

bool Features::playersuperjump = false;
void Features::SuperJump(bool toggle)
{
	Memory::set_value<int>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , 0x1F8 }, eFrameFlagSuperJump);
}

void Features::Bullshark()
{
	globalHandle(2519572).At(830).As<int>() = 1;
}

void Features::GivePlayerThreeStars(Player selectedPlayer)
{
	if (ENTITY::DOES_ENTITY_EXIST(selectedPlayer))
	{
		const int maxPeds = 40;
		Ped ClonedPed[maxPeds];
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(selectedPlayer, 0);
		for (int i = 0; i < maxPeds; i++)
		{
			ClonedPed[i] = PED::CLONE_PED(selectedPlayer, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), 1, 1);
			ENTITY::SET_ENTITY_COORDS(ClonedPed[i], coords.x, coords.y, coords.z + 25, 0, 0, 0, 1);
			PED::SET_PED_AS_COP(ClonedPed[i], true);
			WAIT(20);
			Vector3 cloneCoord = ENTITY::GET_ENTITY_COORDS(ClonedPed[i], 0);
			ENTITY::SET_ENTITY_VISIBLE(ClonedPed[i], false, false);
			FIRE::ADD_OWNED_EXPLOSION(selectedPlayer, cloneCoord.x, cloneCoord.y, cloneCoord.z, 9, 5.0f, 0, 1, 0.0f);
			WAIT(20);
			PED::DELETE_PED(&ClonedPed[i]);
		}
	}
}

bool Features::ada = false;
void Features::vsdv(bool toggle) {
	if (Menu::Option("Explosive Force")) {
		GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("proj_xmas_firework");
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_firework_xmas_burst_rgw", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(PLAYER::PLAYER_ID()); // ok, it's problem of your detection.. you're using detected native!11
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, FLT_MAX, false, true, 0.0f, false);
		FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, FLT_MAX, false, true, 0.0f, false);
	}
}

bool Features::Weapontest = false;
void Features::weapontest(bool toggle)
{
	if (Weapontest)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
		{
			Vector3 Rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
			Vector3 Dir = rot_to_direction(&Rot);
			Vector3 CPosition = CAM::GET_GAMEPLAY_CAM_COORD();
			Vector3 PlayerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
			float spawnDistance = get_distance(&CPosition, &PlayerPosition);
			spawnDistance += 2;
			Vector3 SPosition = add(&CPosition, &multiply(&Dir, spawnDistance));
			DWORD Model = $("prop_asteroid_01");
			Object ObJect = OBJECT::CREATE_OBJECT(Model, SPosition.x, SPosition.y, SPosition.z, 1, 1, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Model);
			if (ENTITY::DOES_ENTITY_EXIST(ObJect))
			{
				ENTITY::SET_ENTITY_RECORDS_COLLISIONS(ObJect, true);
				for (float f = 0.0f; f < 75.0f; f++) {
					if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(ObJect))break;
					ENTITY::APPLY_FORCE_TO_ENTITY(ObJect, 1, Dir.x*10.0f, Dir.y*10.0f, Dir.z*10.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);
					WAIT(0);
				}
				Vector3 Coordinates = ENTITY::GET_ENTITY_COORDS(ObJect, 1);
				FIRE::ADD_EXPLOSION(Coordinates.x, Coordinates.y, Coordinates.z, 9, 25.0f, 1, 1, 0.5f);
			}
		}
	}
}






string Features::name = "";
string Features::pw = "";



Vector3 addVector(Vector3 vector, Vector3 vector2) {
	vector.x += vector2.x;
	vector.y += vector2.y;
	vector.z += vector2.z;
	vector._paddingx += vector2._paddingx;
	vector._paddingy += vector2._paddingy;
	vector._paddingz += vector2._paddingz;
	return vector;
}
double DegreeToRadian(double n) {
	return n * 0.017453292519943295;
}
Vector3 RotationToDirection(Vector3 rot) {
	double num = DegreeToRadian(rot.z);
	double num2 = DegreeToRadian(rot.x);
	double val = cos(num2);
	double num3 = abs(val);
	rot.x = (float)(-(float)sin(num) * num3);
	rot.y = (float)(cos(num) * num3);
	rot.z = (float)sin(num2);
	return rot;

}
Vector3 multiplyVector(Vector3 vector, float inc) {
	vector.x *= inc;
	vector.y *= inc;
	vector.z *= inc;
	vector._paddingx *= inc;
	vector._paddingy *= inc;
	vector._paddingz *= inc;
	return vector;
}

bool Features::Vehgunpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::vehgunpl(Player target)
{
	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (PED::IS_PED_SHOOTING(ped))
	{
		float offset;
		const int Veh[] = { 0xB779A091,
			0x00ABB0C0,
			0xD756460C,
			0xEDD516C6,
			0x2BEC3CBE,
			0x7074F39D,
			0x9AE6DDA1,
			0xAFBB2CA4,
			0xC9E8FF76,
			0x98171BD3,
			0x353B561D,
			0x437CF2A0,
			0x53174EEF,
			0xD577C962,
			0x2F03547B,
			0x2C75F0DD,
			0x44623884,
			0xDFF0594C,
			0x6FD95F68,
			0x067BC037,
			0x00ABB0C0,
			0x15F27762,
			0xC3FBA120,
			0xCB44B1CA,
			0x3D6AAA9B,
			0x0AFD22A6,
			0x810369E2,
			0x04CE68AC };
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 28);
		int Player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(ped);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(ped, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(ped, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgunplnew[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::vehgunplnew(Player target)
{
	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (PED::IS_PED_SHOOTING(ped))
	{
		float offset;
		const int Veh[] = { 0xEDA4ED97,
			0xFCC2F483,
			0x79DD18AE,
			0x73F4110E,
			0x7B54A9D3,
			0xE6E967F8,
			0x149BD32A,
			0x6290F15B,
			0xD9F0503D,
			0x0D17099D,
			0x1324E960,
			0x64DE07A1,
			0x1DD4C0FF,
			0x897AFC65

		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 14);
		int Player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(ped);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(ped, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(ped, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}



bool Features::ShootWeaponT = false;
void Features::ShootWeaponTank(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("TROPIC");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}


bool Features::ShootHydra = false;
void Features::Shootthehydra(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("HYDRA");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}



bool Features::rapidfirer = false;
void Features::rapidmaker() {
	Player playerPed = PLAYER::PLAYER_PED_ID();
	if (!PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 1)) {
		PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 1);
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 1.0f)));
		Vector3 endCoords = addVector(startCoords, multiplyVector(gameplayCamDirection, 500.0f));
		Hash weaponhash;
		WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &weaponhash, 1);
		if (CONTROLS::IS_CONTROL_PRESSED(2, 208) || (GetKeyState(VK_LBUTTON) & 0x8000)) {
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(startCoords.x, startCoords.y, startCoords.z, endCoords.x, endCoords.y, endCoords.z, 50, 1, weaponhash, playerPed, 1, 1, 0xbf800000);
		}
	}
}








bool Features::spawnincar = true;
bool Features::spawnincar22 = true;
bool Features::spawnincar24 = true;
bool Features::spawnmaxed = false;



int Features::amount2 = 50000;
int Features::amount3 = -100000;
float Get3DDistance(Vector3 a, Vector3 b) {
	float x = pow((a.x - b.x), 2);
	float y = pow((a.y - b.y), 2);
	float z = pow((a.z - b.z), 2);
	return sqrt(x + y + z);
}
void Features::LoadPlayerInfo(char* playerName, Player p) {


	Ped ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(p);

	RequestControlOfEnt(ped);

	int money = globalHandle(1589291).At(p, 770).At(211).At(3).As<int>(); // i need think okk, wait 1 minute please, be right back
	int rp = globalHandle(1589291).At(p, 770).At(211).At(5).As<int>();
	int rank = globalHandle(1589291).At(p, 770).At(211).At(6).As<int>();
	int kills = globalHandle(1589291).At(p, 770).At(211).At(28).As<int>();
	int deaths = globalHandle(1589291).At(p, 770).At(211).At(29).As<int>();
	float kd = globalHandle(1589291).At(p, 770).At(211).At(26).As<float>();  // so i use for stealth money the transactions globals from benny garage , after used stealth benny garage not work anymorehm can i look?
	ostringstream Money, RP, Rank, Kills, Deaths, KD;

	Vector3 __coords = ENTITY::GET_ENTITY_COORDS(ped, 0);
	char buf[0x80]; snprintf(buf, sizeof(buf), "X: ~g~%f", __coords.x);
	char buf1[0x80]; snprintf(buf1, sizeof(buf1), "~s~Y: ~g~%f", __coords.y);
	char buf2[0x80]; snprintf(buf2, sizeof(buf2), "~s~Z: ~g~%f", __coords.z);

	if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(p)) {
		Money << "~w~Cash:~s~ N/A";
		RP << "~w~RP:~s~ N/A";
		Rank << "~w~Rank:~s~ N/A";
		Kills << "~w~Kills:~s~ N/A";
		Deaths << "~w~Deaths:~s~ N/A";
		KD << "~w~KD Ratio:~s~ N/A";
		//__ipbuf << "~w~ IP::~s~ N/A";

	}
	else {
		Money << "~w~Cash:~s~ $" << money;
		RP << "~w~RP:~s~ " << rp;
		Rank << "~w~Rank:~s~ " << rank;
		Kills << "~w~Kills:~s~ " << kills;
		Deaths << "~w~Deaths:~s~ " << deaths;
		KD << "~w~KD Ratio:~s~ " << kd;

	}

	float health = ENTITY::GET_ENTITY_HEALTH(ped);
	float maxHealth = ENTITY::GET_ENTITY_MAX_HEALTH(ped);
	float healthPercent = health * 100 / maxHealth;
	ostringstream Health; Health << "Health:~s~ " << healthPercent;
	float armor = PED::GET_PED_ARMOUR(ped);
	float maxArmor = PLAYER::GET_PLAYER_MAX_ARMOUR(p);
	float armorPercent = armor * 100 / maxArmor;
	ostringstream Armor; Armor << "Armor:~s~ " << armorPercent;
	bool alive = !PED::IS_PED_DEAD_OR_DYING(ped, 1);
	char* aliveStatus;
	if (alive) aliveStatus = "Yes"; else aliveStatus = "No";
	ostringstream Alive; Alive << "Alive:~s~ " << aliveStatus;
	bool inVehicle = PED::IS_PED_IN_ANY_VEHICLE(ped, 0);
	ostringstream VehicleModel; VehicleModel << "Vehicle:~s~ ";
	ostringstream Speed; Speed << "Speed:~s~ ";
	ostringstream IsInAVehicle; IsInAVehicle << "In Vehicle:~s~ ";
	if (inVehicle) {
		IsInAVehicle << "Yes";
		Hash vehHash = ENTITY::GET_ENTITY_MODEL(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		VehicleModel << UI::_GET_LABEL_TEXT(VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(vehHash));
		float vehSpeed = ENTITY::GET_ENTITY_SPEED(PED::GET_VEHICLE_PED_IS_IN(ped, 0));
		float vehSpeedConverted;
		vehSpeedConverted = round(vehSpeed * 1.6);
		Speed << vehSpeedConverted << " KM/H";
	}
	else {
		IsInAVehicle << "No";
		float speed = round(ENTITY::GET_ENTITY_SPEED(ped) * 100) / 100;
		Speed << speed << " M/S";
		VehicleModel << "--------";
	}

	ostringstream WantedLevel; WantedLevel << "Wanted Level:~s~ " << PLAYER::GET_PLAYER_WANTED_LEVEL(p);
	ostringstream Weapon; Weapon << "Weapon: ~s~";
	Hash weaponHash;
	if (WEAPON::GET_CURRENT_PED_WEAPON(ped, &weaponHash, 1)) {
		char* weaponName;
		if (weaponHash == 2725352035) {
			weaponName = "Unarmed";
		}
		else if (weaponHash == 2578778090) {
			weaponName = "Knife";
		}
		else if (weaponHash == 0x678B81B1) {
			weaponName = "Nightstick";
		}
		else if (weaponHash == 0x4E875F73) {
			weaponName = "Hammer";
		}
		else if (weaponHash == 0x958A4A8F) {
			weaponName = "Bat";
		}
		else if (weaponHash == 0x440E4788) {
			weaponName = "GolfClub";
		}
		else if (weaponHash == 0x84BD7BFD) {
			weaponName = "Crowbar";
		}
		else if (weaponHash == 0x1B06D571) {
			weaponName = "Pistol";
		}
		else if (weaponHash == 0x5EF9FEC4) {
			weaponName = "Combat Pistol";
		}
		else if (weaponHash == 0x22D8FE39) {
			weaponName = "AP Pistol";
		}
		else if (weaponHash == 0x99AEEB3B) {
			weaponName = "Pistol 50";
		}
		else if (weaponHash == 0x13532244) {
			weaponName = "Micro SMG";
		}
		else if (weaponHash == 0x2BE6766B) {
			weaponName = "SMG";
		}
		else if (weaponHash == 0xEFE7E2DF) {
			weaponName = "Assault SMG";
		}
		else if (weaponHash == 0xBFEFFF6D) {
			weaponName = "Assault Riffle";
		}
		else if (weaponHash == 0x83BF0278) {
			weaponName = "Carbine Riffle";
		}
		else if (weaponHash == 0xAF113F99) {
			weaponName = "Advanced Riffle";
		}
		else if (weaponHash == 0x9D07F764) {
			weaponName = "MG";
		}
		else if (weaponHash == 0x7FD62962) {
			weaponName = "Combat MG";
		}
		else if (weaponHash == 0x1D073A89) {
			weaponName = "Pump Shotgun";
		}
		else if (weaponHash == 0x7846A318) {
			weaponName = "Sawed-Off Shotgun";
		}
		else if (weaponHash == 0xE284C527) {
			weaponName = "Assault Shotgun";
		}
		else if (weaponHash == 0x9D61E50F) {
			weaponName = "Bullpup Shotgun";
		}
		else if (weaponHash == 0x3656C8C1) {
			weaponName = "Stun Gun";
		}
		else if (weaponHash == 0x05FC3C11) {
			weaponName = "Sniper Rifle";
		}
		else if (weaponHash == 0x0C472FE2) {
			weaponName = "Heavy Sniper";
		}
		else if (weaponHash == 0xA284510B) {
			weaponName = "Grenade Launcher";
		}
		else if (weaponHash == 0x4DD2DC56) {
			weaponName = "Smoke Grenade Launcher";
		}
		else if (weaponHash == 0xB1CA77B1) {
			weaponName = "RPG";
		}
		else if (weaponHash == 0x42BF8A85) {
			weaponName = "Minigun";
		}
		else if (weaponHash == 0x93E220BD) {
			weaponName = "Grenade";
		}
		else if (weaponHash == 0x2C3731D9) {
			weaponName = "Sticky Bomb";
		}
		else if (weaponHash == 0xFDBC8A50) {
			weaponName = "Smoke Grenade";
		}
		else if (weaponHash == 0xA0973D5E) {
			weaponName = "BZGas";
		}
		else if (weaponHash == 0x24B17070) {
			weaponName = "Molotov";
		}
		else if (weaponHash == 0x060EC506) {
			weaponName = "Fire Extinguisher";
		}
		else if (weaponHash == 0x34A67B97) {
			weaponName = "Petrol Can";
		}
		else if (weaponHash == 0xFDBADCED) {
			weaponName = "Digital scanner";
		}
		else if (weaponHash == 0x88C78EB7) {
			weaponName = "Briefcase";
		}
		else if (weaponHash == 0x23C9F95C) {
			weaponName = "Ball";
		}
		else if (weaponHash == 0x497FACC3) {
			weaponName = "Flare";
		}
		else if (weaponHash == 0xF9E6AA4B) {
			weaponName = "Bottle";
		}
		else if (weaponHash == 0x61012683) {
			weaponName = "Gusenberg";
		}
		else if (weaponHash == 0xC0A3098D) {
			weaponName = "Special Carabine";
		}
		else if (weaponHash == 0xD205520E) {
			weaponName = "Heavy Pistol";
		}
		else if (weaponHash == 0xBFD21232) {
			weaponName = "SNS Pistol";
		}
		else if (weaponHash == 0x7F229F94) {
			weaponName = "Bullpup Rifle";
		}
		else if (weaponHash == 0x92A27487) {
			weaponName = "Dagger";
		}
		else if (weaponHash == 0x083839C4) {
			weaponName = "Vintage Pistol";
		}
		else if (weaponHash == 0x7F7497E5) {
			weaponName = "Firework";
		}
		else if (weaponHash == 0xA89CB99E) {
			weaponName = "Musket";
		}
		else if (weaponHash == 0x3AABBBAA) {
			weaponName = "Heavy Shotgun";
		}
		else if (weaponHash == 0xC734385A) {
			weaponName = "Marksman Rifle";
		}
		else if (weaponHash == 0x63AB0442) {
			weaponName = "Homing Launcher";
		}
		else if (weaponHash == 0xAB564B93) {
			weaponName = "Proximity Mine";
		}
		else if (weaponHash == 0x787F0BB) {
			weaponName = "Snowball";
		}
		else if (weaponHash == 0x47757124) {
			weaponName = "Flare Gun";
		}
		else if (weaponHash == 0xE232C28C) {
			weaponName = "Garbage Bag";
		}
		else if (weaponHash == 0xD04C944D) {
			weaponName = "Handcuffs";
		}
		else if (weaponHash == 0x0A3D4D34) {
			weaponName = "Combat PDW";
		}
		else if (weaponHash == 0xDC4DB296) {
			weaponName = "Marksman Pistol";
		}
		else if (weaponHash == 0xD8DF3C3C) {
			weaponName = "Brass Knuckles";
		}
		else if (weaponHash == 0x6D544C99) {
			weaponName = "Railgun";
		}
		else {
			weaponName = "Unarmed";
		}
		Weapon << weaponName;


	}
	else Weapon << "Unarmed";
	Vector3 myCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 coords = ENTITY::GET_ENTITY_COORDS(ped, 1);
	ostringstream Zone; Zone << "Zone: ~s~" << UI::_GET_LABEL_TEXT(ZONE::GET_NAME_OF_ZONE(coords.x, coords.y, coords.z));
	Hash streetName, crossingRoad;
	PATHFIND::GET_STREET_NAME_AT_COORD(coords.x, coords.y, coords.z, &streetName, &crossingRoad);
	ostringstream Street; Street << "Street: ~s~" << UI::GET_STREET_NAME_FROM_HASH_KEY(streetName);
	float distance = Get3DDistance(coords, myCoords);
	ostringstream Distance; Distance << "Distance: ~s~";

	if (distance > 1000) {
		distance = round((distance / 1000) * 100) / 100;
		Distance << distance << " Kilometers";
	}
	else {
		distance = round(distance * 1000) / 100;
		Distance << distance << " Meters";
	}
	struct IPAddress
	{
		union
		{
			struct
			{
				std::uint8_t four;
				std::uint8_t three;
				std::uint8_t two;
				std::uint8_t one;
			} fields;

			std::uint32_t packed;
		};
	};

	/*
	char* addr = Hooking::get_player_name(ped);
	unsigned char ip1 = *(int*)(addr - 0x48);
	unsigned char ip2 = *(int*)(addr - 0x47);
	unsigned char ip3 = *(int*)(addr - 0x46);
	unsigned char ip4 = *(int*)(addr - 0x45);
	char __ipbuf[4000];
	sprintf(__ipbuf, "IP: %o.%i.%i.%i", ip4, ip3, ip2, ip1);
	*/
	/*char* addr1 = Hooking::get_player_name(p);
	unsigned char ip11 = *(int*)(addr1 - 0x34);
	unsigned char ip22 = *(int*)(addr1 - 0x35);
	unsigned char ip33 = *(int*)(addr1 - 0x36);
	unsigned char ip44 = *(int*)(addr1 - 0x37);

	char __ipbuf1[4000];
	sprintf(__ipbuf1, "IP: %i.%i.%i.%o", ip44, ip33, ip22, ip11);*/




	char ipBuf[32] = {};
	static auto nigNog = (std::uintptr_t(*)(int))(Memory::pattern("40 53 48 83 EC 20 33 DB 38 1D ? ? ? ? 74 1C").count(1).get(0).get<void>(0));
	auto nigger = nigNog(p);



	if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(p)) {

		for (int i = 0; i < 3; i++)
		{
			if (nigger)
			{
				auto faggot = *(uintptr_t*)(nigger + 0x10b8);
				if (faggot)
				{


					auto ip = (BYTE*)(faggot + 0x44);
					std::snprintf(ipBuf, sizeof(ipBuf) - 1, "~r~IP: ~s~Hide", i);

				}
			}

		}

	}
	else {

		if (nigger)
		{
			auto faggot = *(uintptr_t*)(nigger + 0x10b8);
			if (faggot)
			{
				auto ip = (BYTE*)(faggot + 0x44);
				std::snprintf(ipBuf, sizeof(ipBuf) - 1, "~r~IP: %u.%u.%u.%u", ip[3], ip[2], ip[1], *ip);

			}
		}

	}

#





	Menu::AddSmallTitle(playerName);
	Menu::AddSmallInfo((char*)Health.str().c_str(), 0);
	Menu::AddSmallInfo((char*)Armor.str().c_str(), 1);
	Menu::AddSmallInfo((char*)Alive.str().c_str(), 2);
	Menu::AddSmallInfo((char*)IsInAVehicle.str().c_str(), 3);
	Menu::AddSmallInfo((char*)VehicleModel.str().c_str(), 4);
	Menu::AddSmallInfo((char*)Speed.str().c_str(), 5);
	Menu::AddSmallInfo((char*)WantedLevel.str().c_str(), 6);
	Menu::AddSmallInfo((char*)Weapon.str().c_str(), 7);
	Menu::AddSmallInfo((char*)Zone.str().c_str(), 8);
	Menu::AddSmallInfo((char*)Street.str().c_str(), 9);
	Menu::AddSmallInfo((char*)Distance.str().c_str(), 10);
	Menu::AddSmallInfo((char*)Money.str().c_str(), 11);
	Menu::AddSmallInfo((char*)Rank.str().c_str(), 12);
	Menu::AddSmallInfo((char*)Kills.str().c_str(), 13);
	Menu::AddSmallInfo((char*)Deaths.str().c_str(), 14);
	Menu::AddSmallInfo((char*)KD.str().c_str(), 15);
	Menu::AddSmallInfo(ipBuf, 16);
	Menu::AddSmallInfo(buf, 17);
	Menu::AddSmallInfo(buf1, 18);
	Menu::AddSmallInfo(buf2, 19);
	/*Menu::Option(reportstringkek.c_str());*/
#
	// try now, i saw one big mistake
	//Menu::AddSmallInfo(buf_ip2, 17);

}


void Features::RequestControlOfid(DWORD netid)
{
	int tick = 0;

	while (!NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(netid) && tick <= 12)
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netid);
		tick++;
	}
}

int Features::number = 1;
void Features::tester(int i) {
	DWORD64 args[5] = { i, PLAYER::PLAYER_ID(), PLAYER::PLAYER_ID(), 1, 10 };
	int playerId;
	GAMEPLAY::SET_BIT(&playerId, PLAYER::PLAYER_ID());
	SCRIPT::TRIGGER_SCRIPT_EVENT(0x1, args, 5, playerId);
	GAMEPLAY::CLEAR_BIT(&playerId, PLAYER::PLAYER_ID());
}



bool Features::Adder = false;
void Features::Addershoot(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("ADDER");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}

}

bool Features::tipTruck = false;
void Features::TipTruck(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("TIPTRUCK");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}

}

bool Features::taip1 = false;
void Features::Taip(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("TAIPAN");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}

}


bool Features::meclosefee = false;
void Features::closedoorsme(bool toggle) {


	Ped playerPed = PLAYER::PLAYER_PED_ID();

	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 1);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 2);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 3);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 4);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 5);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 6);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_USING(playerPed), 7);

	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 0);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 1);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 2);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 3);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 4);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 5);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 6);
	VEHICLE::SET_VEHICLE_DOORS_LOCKED(PED::GET_VEHICLE_PED_IS_IN(playerPed, false), 7);
}

DWORD featureWeaponVehShootLastTime = 0;
bool Features::ShootMini = false;
void Features::ShootMiniGun(bool toggle)
{
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLAYER_BULLET");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();

	}
}
bool Features::ShootBall = false;
void Features::ShootBalls(bool toggle)
{
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_BALL");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();


	}
}
bool Features::delgun = false;
void Features::DelGun(bool toggle) {

	Entity del_entity;
	if (PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &del_entity))

		if (ENTITY::DOES_ENTITY_EXIST(del_entity) && NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(del_entity))
		{
			Vector3 tmp = ENTITY::GET_ENTITY_COORDS(del_entity, 1);
			ENTITY::DETACH_ENTITY(del_entity, 1, 1);
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(del_entity, 0, 0, 0, 0, 0, 0);
			ENTITY::SET_ENTITY_AS_MISSION_ENTITY(del_entity, 0, 1);
			ENTITY::DELETE_ENTITY(&del_entity);
		}
}

bool Features::ShootTankR = false;
void Features::ShootTankRounds(bool toggle)
{
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_TANK");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();

	}
}

const int ElementAmount = 10;
const int ArrSize = ElementAmount * 2 + 2;

bool Features::nearped = false;
void Features::pednar(Player target)
{
	Ped *peds = new Ped[ArrSize];
	peds[0] = ElementAmount;

	int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);

	for (int i = 0; i < PedFound; i++)
	{
		int OffsetID = i * 2 + 2;
		RequestControlOfEnt(peds[OffsetID]);
		if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
		{
			ENTITY::ATTACH_ENTITY_TO_ENTITY(peds[OffsetID], PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), SKEL_L_Hand, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0, 1, 0, 1, 0, 0);
		}
	}

}

bool Features::ShootTplpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::ShootTanksplpl(Player target)
{
	Player player = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREWORK");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();

	}
}


bool Features::ShootT = false;
void Features::ShootTanks(bool toggle)
{
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FIREWORK");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();

	}
}
bool Features::ShootR = false;
void Features::ShootRocket(bool toggle)
{
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_VEHICLE_ROCKET");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 1, weaponAssetRocket, playerPed, 1, 0, -1.0);
		featureWeaponVehShootLastTime = GetTickCount();

	}
}




bool Features::carRPG = false;
void Features::shootRPGCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_VEHICLE_ROCKET");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}

bool Features::llcar = false;
void Features::LLCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_ENEMY_LASER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}


bool Features::polficl = false;
void Features::ficklpol(bool toggle) {
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;
	Ped *peds = new Ped[ArrSize];
	peds[0] = ElementAmount;
	int PedFound = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), peds, -1);
	for (int i = 0; i < PedFound; i++)
	{
		int OffsetID = i * 2 + 2;
		RequestControlOfEnt(peds[OffsetID]);
		if (ENTITY::DOES_ENTITY_EXIST(peds[OffsetID]) && PLAYER::PLAYER_PED_ID() != peds[OffsetID])
		{
			STREAMING::REQUEST_ANIM_DICT("mini@strip_club@pole_dance@pole_dance1");
			if (STREAMING::HAS_ANIM_DICT_LOADED(("mini@strip_club@pole_dance@pole_dance1")))
			{
				AI::TASK_PLAY_ANIM((peds[OffsetID]), "mini@strip_club@pole_dance@pole_dance1", "pd_dance_01", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			}
		}
	}


}



void Features::animatePlayer(Player target, char* dict, char* anim)
{
	Ped targ_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);//seleted player
	STREAMING::REQUEST_ANIM_DICT(dict);
	if (STREAMING::HAS_ANIM_DICT_LOADED(dict))
	{
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(targ_ped, 0.0, 0.0, 0.0);//since get_coord is patched i found this native
		int sceneID = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f);
		NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(targ_ped, sceneID, dict, anim, 8.0f, -8.0f, 120, 0, 100, 0);
		NETWORK::NETWORK_START_SYNCHRONISED_SCENE(sceneID);//will start the animationof
	}
}

bool Features::ggcar = false;
void Features::GGCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLAYER_LASER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}


bool Features::wwcar = false;
void Features::WWCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}

bool Features::cccar = false;
void Features::CCCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_CANNON_BLAZER");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}

bool Features::ttcar = false;
void Features::TTCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_TURRET_BOXVILLE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}


bool Features::soundall1 = false;
void Features::Soundall(bool toggle) {

	for (int x = 0; x < 32; x++)
	{
		if (x != PLAYER::PLAYER_ID() && ENTITY::DOES_ENTITY_EXIST(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(x)))
		{
			DWORD64 args[4] = { 729971264, x, 0, 0 };
			SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 4, 1 << x);
		}
	}

}







bool Features::ttcarflare = false;
void Features::TTCarflare(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_FLARE");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}



bool Features::qqcarxdsa = false;
void Features::QQCarsd(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("WEAPON_MOLOTOV");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}

bool Features::explodenearbytiresbool = false;
void Features::explodenearbytires(bool toggle)
{
	const int ElementAmount = 10;
	const int ArrSize = ElementAmount * 2 + 2;

	Vehicle *vehs = new Vehicle[ArrSize];
	vehs[0] = ElementAmount;
	int VehFound = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), vehs);

	for (int i = 0; i < VehFound; i++)
	{
		int OffsetID = i * 2 + 2;
		if (vehs[OffsetID] != PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false))
		{
			RequestControlOfEnt(vehs[OffsetID]);
			VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(vehs[OffsetID], TRUE);
			for (int i = 8; i--;) {
				VEHICLE::SET_VEHICLE_TYRE_BURST(vehs[OffsetID], i, TRUE, 1000.f);
			}
		}
	}
}


bool Features::qqcar = false;
void Features::QQCar(bool toggle) {
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) return;

	bool bSelect = GetAsyncKeyState(0x6B); // num plus
	if (bSelect && featureWeaponVehShootLastTime + 150 < GetTickCount() &&
		PLAYER::IS_PLAYER_CONTROL_ON(player) && PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);

		Vector3 v0, v1;
		GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(veh), &v0, &v1);

		Hash weaponAssetRocket = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_RUINER_BULLET");
		if (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
		{
			WEAPON::REQUEST_WEAPON_ASSET(weaponAssetRocket, 31, 0);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(weaponAssetRocket))
				WAIT(0);
		}

		Vector3 coords0from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -(v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords1from = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, (v1.x + 0.25f), v1.y + 1.25f, 0.1);
		Vector3 coords0to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, -v1.x, v1.y + 100.0f, 0.1f);
		Vector3 coords1to = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(veh, v1.x, v1.y + 100.0f, 0.1f);

		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords0from.x, coords0from.y, coords0from.z,
			coords0to.x, coords0to.y, coords0to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords1from.x, coords1from.y, coords1from.z,
			coords1to.x, coords1to.y, coords1to.z,
			250, 0, weaponAssetRocket, playerPed, 1, 0, -1.0);

		featureWeaponVehShootLastTime = GetTickCount();


	}
}

#define IsKeyPressed(key) GetAsyncKeyState(key) & 0x8000



bool Features::ShootDump = false;
void Features::ShootDumpTruck(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("DUMP");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}
bool Features::ShootBuz = false;
void Features::ShootBuzzard(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("BUZZARD2");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Drift = false;
void Features::DriftMode(bool toggle)
{
	if (GetAsyncKeyState(0x10)) {

		VEHICLE::SET_VEHICLE_REDUCE_GRIP(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 1);
	}
	else
	{
		VEHICLE::SET_VEHICLE_REDUCE_GRIP(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 0);
	}
}
int r = 255, g = 0, b = 0;
void RGBFade()
{
	if (r > 0 && b == 0) {
		r--;
		g++;
	}
	if (g > 0 && r == 0) {
		g--;
		b++;
	}
	if (b > 0 && g == 0) {
		r++;
		b--;
	}
}
bool Features::Rainb = false;
void Features::Rainbow(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (Rainbow)
	{
		RGBFade();
		Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		DWORD model = ENTITY::GET_ENTITY_MODEL(veh);

		if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
		{
			VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(veh, r, g, b);
		}
	}
}

int Features::stealthDelay4088 = 100;
bool Features::Rneon = false;
void Features::RainbowNeon(bool toggle)
{
	if ((timeGetTime() - Features::TimePD3) > Features::stealthDelay4088)
	{
		Ped playerPed = PLAYER::PLAYER_PED_ID();
		if (RainbowNeon)
		{
			RGBFade();
			Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
			DWORD model = ENTITY::GET_ENTITY_MODEL(veh);

			if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
			{
				if (VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 0) && VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 1) && VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 2) && VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 3))
				{
					VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(veh, r, g, b);
				}
				else
				{
					VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 0, 1);
					VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 1, 1);
					VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 2, 1);
					VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 3, 1);
					VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(veh, r, g, b);
				}
			}
		}
		Features::TimePD5 = timeGetTime();
	}
}


bool Features::Rainbowslow = false;
void Features::rainbowslow(bool toggle)
{
	// RAINBOW LANGSAHM CODE HIER REIN 
}

bool Features::toBank22 = false;
void Features::StealthDropintee22() {
	if ((timeGetTime() - Features::TimePD3) > 800)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = 1;

		if (!toBank22)
			bankVal = 4;

		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, -1586170317, 1445302971, 15000000, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD3 = timeGetTime();
	}
}

bool Features::moneyrain2k = false;
void Features::RainMoney(bool toggle)
{
	STREAMING::REQUEST_MODEL(0x113FD533);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 20.0);
	int offsetX = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-5, 0);
	int offsetyY = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-5, 0);
	int offsetX1 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-6, 6);
	int offsetyY1 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-3, 3);
	int offsetZ = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(-2, 2);
	int CashHash = -1666779307;  // prop_paper_bag_small = -1803909274
	int PickupHash = GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_WALLET");
	STREAMING::REQUEST_MODEL(CashHash);
	while (!STREAMING::HAS_MODEL_LOADED(CashHash)) WAIT(0);

	int AMOUNT = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(20000, 40000);
	Hooking::create_ambient_pickup(PickupHash, &pp, 2500, AMOUNT, CashHash, false, true);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(CashHash);

}

bool Features::savenewdrop44 = false;
void Features::cashdrop44(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();

	int amount = 2500; //i have test it but not working

	if ((timeGetTime() - Features::TimePD1) > 1000) // Time between drops
	{
		GAMEPLAY::GET_HASH_KEY("pickup_cs_dildo_01");
		if (GAMEPLAY::GET_HASH_KEY("pickup_cs_dildo_01")) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerPosition.x, playerPosition.y, playerPosition.z + 0.5f, 0, amount, PROP_MONEY_BAG_02, FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(PROP_MONEY_BAG_02);

			Features::TimePD1 = timeGetTime();
		}
	}
}


bool Features::toBank110 = false;
void Features::StealthDropintee110() {
	if ((timeGetTime() - Features::TimePD3) > 800)
	{
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = 1;

		if (!toBank)
			bankVal = 4;

		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, 5000000, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD3 = timeGetTime();
	}
}
bool Features::RHINO = false;
void Features::RHINOBuzzard(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		int vehmodel = GAMEPLAY::GET_HASH_KEY("RHINO");
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::unlimitedorb = false;
void Features::orbital(bool toggle) {
	if (orbital)
	{
		Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_ORBITAL_CANNON_COOLDOWN"), 0, 0);
		Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP1_ORBITAL_CANNON_COOLDOWN"), 0, 0);
		Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP2_ORBITAL_CANNON_COOLDOWN"), 0, 0);
	}
}

bool Features::resetv = false;
void Features::reset(bool toggle) {
	if (reset)
	{
		Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MPPLY_VEHICLE_SELL_TIME"), 0, true);
		Hooking::stat_set_int(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_SELLING_VEH"), 50000, true);
	}
}

bool Features::trigger = false;
void Features::triggerbot(bool toggle) {
	if (toggle) {
		// 0x796e -> head bone
		Entity _entity;
		if (PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &_entity) && !PLAYER::IS_PLAYER_DEAD(_entity)) {
			if (ENTITY::IS_ENTITY_A_PED(_entity)) {
				PED::SET_PED_SHOOTS_AT_COORD(PLAYER::PLAYER_PED_ID(), PED::GET_PED_BONE_COORDS(_entity, 0x796e, 0.f, 0.f, 0.f).x,
					PED::GET_PED_BONE_COORDS(_entity, 0x796e, 0.f, 0.f, 0.f).y, PED::GET_PED_BONE_COORDS(_entity, 0x796e, 0.f, 0.f, 0.f).z, 1);
			}
		}
	}
}

bool Features::GetWantedTest1 = false;
void Features::GetWantedTest2(bool toggle)
{
	int maxWantedLevel = PLAYER::PLAYER_ID();
	PLAYER::SET_MAX_WANTED_LEVEL(PLAYER::PLAYER_ID());
	PLAYER::SET_MAX_WANTED_LEVEL(maxWantedLevel);
}


bool Features::clown1 = false;
void Features::clown2(bool toggle) {
	if (clown2)
	{
		Features::PTFXCALL("scr_rcbarry2", "scr_rcbarry2", "scr_clown_appears");
	}
}


void PTFXCALL(char *call1, char *call2, char *name)
{
	call1o = call1;
	call2o = call2;
	nameo = name;

	STREAMING::REQUEST_NAMED_PTFX_ASSET(call1);
	GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL(call2);
	GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(name, PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);

}

bool Features::extremejump = false;
void Features::Extremejump(bool toggle) {
	if (Extremejump)
	{
		int Me = PLAYER::PLAYER_PED_ID();
		if (GetAsyncKeyState(VK_SPACE))
		{
			ENTITY::APPLY_FORCE_TO_ENTITY(Me, 1, 0, 0, +3, 0, 0, 0, 1, 1, 1, 1, 0, 1);
		}
	}
}

bool Features::moneyGun = false;
void Features::MoneyGun(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Hash bagHash = GAMEPLAY::GET_HASH_KEY("prop_cs_dildo_01");

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_MODEL(bagHash);
			if (!STREAMING::HAS_MODEL_LOADED(bagHash)) {
				WAIT(0);
			}
			else {

				OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, coords.x, coords.y, coords.z, 0, 2500, bagHash, FALSE, TRUE);

				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(bagHash);
			}
		}

	}
}


bool Features::Mapweck = false;
void Features::mapweck(bool toggle)
{
	if (Mapweck) {
		UI::DISPLAY_RADAR(false);
	}
	else {
		UI::DISPLAY_RADAR(true);
	}
}


bool Features::moneyGun99 = false;
void Features::MoneyGun99(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Hash bagHash = GAMEPLAY::GET_HASH_KEY("prop_dummy_plane");

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_MODEL(bagHash);
			if (!STREAMING::HAS_MODEL_LOADED(bagHash)) {
				WAIT(0);
			}
			else {

				OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, coords.x, coords.y, coords.z, 0, 2000, bagHash, FALSE, TRUE);

				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(bagHash);
			}
		}

	}
}







bool Features::waterGun = false;
void Features::WaterGun(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 13, 10.0f, false, false, false);
		}

	}
}

bool Features::air1 = false;
void Features::air(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			Hash airStrike = GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET");
			WEAPON::REQUEST_WEAPON_ASSET(airStrike, 31, false);
			while (!WEAPON::HAS_WEAPON_ASSET_LOADED(airStrike))
				WAIT(0);
			GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 50.f, coords.x, coords.y, coords.z, 250, 1, airStrike, playerPed, 1, 0, -1.0);
		}
	}
}

int Features::testweh1 = 200;
bool Features::okokoko = false;
void Features::fearureqeq(bool toggle)
{

	Ped playerped = PLAYER::PLAYER_PED_ID();
	Player kek = PLAYER::GET_VEHICLE_MODEL_WIDTH(playerped, 0, 0);
	PLAYER::SET_VEHICLE_MODEL_WIDTH(kek, Features::testweh1);
	Player kek1 = PLAYER::GET_VEHICLE_MODEL_HEIGHT(playerped, 0, 0);
	PLAYER::SET_VEHICLE_MODEL_HEIGHT(kek1, Features::testweh1);



}

bool Features::explodeGun = false;
void Features::ExplodeGun(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 10.0f, false, false, false);
		}

	}
}

bool Features::explodeGun223 = false;
void Features::ExplodeGun223(bool toggle) {

	Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 0, 10.0f, false, false, false);
		}

	}
}

bool Features::GravityGun = false;
bool grav_target_locked = false;
void Features::gravitygun(bool toggle) {

	Entity EntityTarget;
	DWORD equippedWeapon;
	WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &equippedWeapon, 1);
	Player player = PLAYER::PLAYER_ID();
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	Vector3 rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
	Vector3 dir = rot_to_direction(&rot);
	Vector3 camPosition = CAM::GET_GAMEPLAY_CAM_COORD();
	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	float spawnDistance = get_distance(&camPosition, &playerPosition);
	spawnDistance += 6;
	Vector3 spawnPosition = add(&camPosition, &multiply(&dir, spawnDistance));


	Player tempPed = PLAYER::PLAYER_ID();

	if (grav_target_locked) //  FIXED, it is, it's using detected natives ok can you find other native for it? No, because only this one is working for it, you need to find signature for it.
	{
		if (PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &EntityTarget) && GetAsyncKeyState(VK_RBUTTON))
		{
			Vector3 EntityTargetPos = ENTITY::GET_ENTITY_COORDS(EntityTarget, 0);
			PLAYER::DISABLE_PLAYER_FIRING(tempPed, true);
			if (ENTITY::IS_ENTITY_A_PED(EntityTarget) && PED::IS_PED_IN_ANY_VEHICLE(EntityTarget, 1))
			{
				EntityTarget = PED::GET_VEHICLE_PED_IS_IN(EntityTarget, 0);
			}

			RequestNetworkControl(EntityTarget);

			if (ENTITY::IS_ENTITY_A_VEHICLE(EntityTarget))
				ENTITY::SET_ENTITY_HEADING(
					EntityTarget, ENTITY::GET_ENTITY_HEADING(tempPed));

			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(EntityTarget, spawnPosition.x, spawnPosition.y, spawnPosition.z, 0, 0, 0);

			if (GetAsyncKeyState(VK_LBUTTON))
			{
				AUDIO::PLAY_SOUND_FROM_ENTITY(-1, "Foot_Swish", EntityTarget, "docks_heist_finale_2a_sounds", 0, 0);
				ENTITY::SET_ENTITY_HEADING(EntityTarget, ENTITY::GET_ENTITY_HEADING(tempPed));
				ENTITY::APPLY_FORCE_TO_ENTITY(EntityTarget, 1, dir.x * 10000.0f, dir.y * 10000.0f, dir.z * 10000.0f, 0.0f, 0.0f,
					0.0f, 0, 0, 1, 1, 0, 1);
				grav_target_locked = false;
				PLAYER::DISABLE_PLAYER_FIRING(tempPed, false);
			}
		}
	}
	if (!PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(PLAYER::PLAYER_ID(), &EntityTarget))
	{
		grav_target_locked = true;
		PLAYER::DISABLE_PLAYER_FIRING(tempPed, false);
	}


}


bool Features::pedGun = false;
void Features::PedGun(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	//SET_CREATE_RANDOM_COPS
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			PED::CREATE_RANDOM_PED(coords.x, coords.y, coords.z);
		}

	}
}



bool Features::customped = false;
void Features::pedcust(bool toggle) {

	if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
		float Tmp[6];
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), (Vector3*)Tmp);
		if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
		{
			PED::CREATE_PED(Tmp[0], Tmp[2], Tmp[4], Menu::Settings::Explosionfickped, true, true, false, 0);
		}
	}
}












bool Features::fireGun = false;
void Features::FireGun(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 12, 10.0f, false, false, false);
		}

	}

}


bool Features::expAmmo = false;
void Features::expAmmos(bool toggle) {

	Memory::set_value<uint32_t>({ 8, 0x10B8, 0x1F8 }, Memory::get_value<uint32_t>({ 8, 0x10B8, 0x1F8 }) | (1 << 11));

}

bool Features::fiream = false;
void Features::fireammoo(bool toggle) {


	Memory::set_value<uint32_t>({ 8, 0x10B8, 0x1F8 }, Memory::get_value<uint32_t>({ 8, 0x10B8, 0x1F8 }) | (1 << 12));

}

bool Features::meeleexp = false;
void Features::melexp(bool toggle) {

	Memory::set_value<int>({ OFFSET_PLAYER , OFFSET_PLAYER_INFO , 0x1F8 }, eFrameFlagExplosiveMelee);

}



/*bool Features::featureWeaponWhaleGun = false;
void Features::update_weapon_whale(bool toggle) {
	Vector3 rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
	Vector3 dir = rot_to_direction(&rot);
	Vector3 camPosition = CAM::GET_GAMEPLAY_CAM_COORD();
	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	float spawnDistance = get_distance(&camPosition, &playerPosition);
	spawnDistance += 5;
	Vector3 spawnPosition = add(&camPosition, &multiply(&dir, spawnDistance));

	Hash model = GAMEPLAY::GET_HASH_KEY("a_c_killerwhale");

	if (featureWeaponWhaleGun)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
		{
			if (STREAMING::IS_MODEL_VALID(model))
			{
				if (!STREAMING::HAS_MODEL_LOADED(model))
				{
					STREAMING::REQUEST_MODEL(model);
					while (!STREAMING::HAS_MODEL_LOADED(model))
					{
						WAIT(0);
					}
				}

				if (STREAMING::HAS_MODEL_LOADED(model))
				{
					Ped spawnedPed = PED::CREATE_PED(26, model, spawnPosition.x, spawnPosition.y, spawnPosition.z, 1, 1, 1);

					if (ENTITY::DOES_ENTITY_EXIST(spawnedPed))
					{
						ENTITY::SET_ENTITY_RECORDS_COLLISIONS(spawnedPed, true);
						for (float f = 0.0f; f < 75.0f; f++)
						{
							if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(spawnedPed)) break;

							ENTITY::APPLY_FORCE_TO_ENTITY(spawnedPed, 1, dir.x * 10.0f, dir.y * 10.0f, dir.z * 10.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);

							WAIT(0);
						}

						Vector3 coords = ENTITY::GET_ENTITY_COORDS(spawnedPed, 1);
						PED::DELETE_PED(&spawnedPed);
						FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), coords.x, coords.y, coords.z, 9, 25.0f, 1, 0, 0.5f); // it's detected
					}
				}
			}
		}
	}
}*/

bool Features::flybool = false;
void Features::playerflyer(bool toggle) {

	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vector3 pos = ENTITY::GET_ENTITY_COORDS(playerPed, false);
	ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
	if (GetAsyncKeyState(VK_KEY_S) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 268)) {
		float fivef = .5f;
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		float xVec = fivef * sin(degToRad(heading)) * -1.0f;
		float yVec = fivef * cos(degToRad(heading));
		ENTITY::SET_ENTITY_HEADING(playerPed, heading);

		pos.x -= xVec, pos.y -= yVec;
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
	}
	if (GetAsyncKeyState(VK_KEY_W) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 269)) {
		float fivef = .5f;
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		float xVec = fivef * sin(degToRad(heading)) * -1.0f;
		float yVec = fivef * cos(degToRad(heading));
		ENTITY::SET_ENTITY_HEADING(playerPed, heading);

		pos.x += xVec, pos.y += yVec;
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
	}
	if (GetAsyncKeyState(VK_KEY_A) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 266)) {
		float fivef = .5f;
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		ENTITY::SET_ENTITY_HEADING(playerPed, heading + 0.5f);
	}
	if (GetAsyncKeyState(VK_KEY_D) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, 271)) {
		float fivef = .5f;
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		ENTITY::SET_ENTITY_HEADING(playerPed, heading - 0.5f);
	}
	if (GetAsyncKeyState(VK_SHIFT) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, ControlFrontendRb)) {
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		ENTITY::SET_ENTITY_HEADING(playerPed, heading);

		pos.z -= 0.5;
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
	}
	if (GetAsyncKeyState(VK_SPACE) || CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(2, ControlFrontendLb)) {
		float heading = ENTITY::GET_ENTITY_HEADING(playerPed);
		ENTITY::SET_ENTITY_HEADING(playerPed, heading);

		pos.z += 0.5;
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(playerPed, pos.x, pos.y, pos.z, false, false, false);
	}
}

bool Features::moneyGunBag = false;
void Features::MoneyGunBag(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_MODEL(0x9CA6F755);
			if (!STREAMING::HAS_MODEL_LOADED(0x9CA6F755)) {
				WAIT(0);
			}
			else {

				OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, coords.x, coords.y, coords.z, 0, 2500, 0x9CA6F755, FALSE, TRUE);

				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x9CA6F755);
			}
		}

	}
}

bool Features::moneyGunBagfakeplal = false;
void Features::MoneyGunBagfakeplaaa(bool toggle) {

	for (int i = 0; i < 32; i++)
	{
		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{
			Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			if (PED::IS_PED_SHOOTING(playerPed))
			{
				Vector3 pos;
				if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &pos))
				{
					OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"), pos.x, pos.y, pos.z, true, 1, 0);
				}
			}

		}

	}
}

bool Features::cargopall = false;
void Features::cargoPall(bool toggle)
{

	if (toggle)
	{

		for (int i = 0; i < 32; i++)
		{
			int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
			{
				int Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				AI::CLEAR_PED_TASKS_IMMEDIATELY(Handle);
				Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(Handle, 0);
				Vector3 Ocoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0.0, 5.0, 0.0);
				Vehicle zentorno = Features::SpawnVehicle("CARGOPLANE", Ocoords, 0, 0.0f);
				ENTITY::SET_ENTITY_INVINCIBLE(zentorno, 0);

			}

		}
	}

}



bool Features::moneyGunBagfake = false;
void Features::MoneyGunBagfake(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &pos))
		{
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"), pos.x, pos.y, pos.z, true, 1, 0);
		}
	}
}

bool Features::moneyGunBagfakepl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::moneyGunBagfakeplall(Player target) {
	auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (PED::IS_PED_SHOOTING(ped))
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, &pos))
		{
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_money_bag_01"), pos.x, pos.y, pos.z, true, 1, 0);
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"), pos.x, pos.y, pos.z, true, 1, 0);
		}
	}
}





bool Features::rocktest = false;
void Features::RockTest(bool toggle)
{
	if (rocktest)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
		{
			Vector3 Rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
			Vector3 Dir = rot_to_direction(&Rot);
			Vector3 CPosition = CAM::GET_GAMEPLAY_CAM_COORD();
			Vector3 PlayerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
			float spawnDistance = get_distance(&CPosition, &PlayerPosition);
			spawnDistance += 2;
			Vector3 SPosition = add(&CPosition, &multiply(&Dir, spawnDistance));
			DWORD Model = $("prop_rock_1_a");
			Object ObJect = OBJECT::CREATE_OBJECT(Model, SPosition.x, SPosition.y, SPosition.z, 1, 1, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Model);
			if (ENTITY::DOES_ENTITY_EXIST(ObJect))
			{
				ENTITY::SET_ENTITY_RECORDS_COLLISIONS(ObJect, true);
				for (float f = 0.0f; f < 75.0f; f++) {
					if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(ObJect))break;
					ENTITY::APPLY_FORCE_TO_ENTITY(ObJect, 1, Dir.x*10.0f, Dir.y*10.0f, Dir.z*10.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);
					WAIT(0);
				}
				Vector3 Coordinates = ENTITY::GET_ENTITY_COORDS(ObJect, 1);
				FIRE::ADD_EXPLOSION(Coordinates.x, Coordinates.y, Coordinates.z, 9, 25.0f, 1, 1, 0.5f);
			}
		}
	}
}

bool Features::dropme2 = false;
void Features::cashdrop2(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();
	if ((timeGetTime() - Features::TimePD1) > 150)
	{
		STREAMING::REQUEST_MODEL(-1666779307);
		if (!STREAMING::HAS_MODEL_LOADED(-1666779307)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_MONEY_PICKUPS(playerPosition.x, playerPosition.y, playerPosition.z, 2500, 1, -1666779307);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(-1666779307);

			Features::TimePD1 = timeGetTime();

		}
	}//done wait
}



bool Features::cyrclenew = false;
void Features::CyrcleNew(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();
	if ((timeGetTime() - Features::TimePD1) > Features::DropDelay)
	{
		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_MONEY_PICKUPS(playerPosition.x, playerPosition.y, playerPosition.z, Features::DropAmount2, 1, Features::bagHash);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);

			Features::TimePD1 = timeGetTime();

		}
	}//done wait
}

bool Features::savenewdrop2444[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::cashdrop2444(Player target) // now i need try it? yes
{

	if ((timeGetTime() - Features::TimePD2) > Features::DropDelay)
	{

		Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);

		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			playerPosition.z = playerPosition.z + Features::DropHeight;
			for (int i = 0; i < Features::Bags; i++)
			{
				Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, Features::DropAmount1, Features::bagHash, FALSE, TRUE);
			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
		}

		Features::TimePD2 = timeGetTime();

	}
}



bool Features::cyrcleon[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::Cyrclelon(Player target)
{
	Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	if ((timeGetTime() - Features::TimePD1) > Features::DropDelay)
	{
		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			OBJECT::CREATE_MONEY_PICKUPS(playerPosition.x, playerPosition.y, playerPosition.z, Features::DropAmount1, 1, Features::bagHash);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);



		}

		Features::TimePD1 = timeGetTime();
	}//done wait
}

bool Features::cyrclall = false;
void Features::Cyrclelonall(bool toggle)
{
	if (cyrclall)
	{

		if ((timeGetTime() - Features::TimePD2) > Features::DropDelay)
		{
			for (int i = 0; i < 32; i++)
			{
				int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
				{

					Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					STREAMING::REQUEST_MODEL(Features::bagHash);
					if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
						WAIT(0);
					}
					else {
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						OBJECT::CREATE_MONEY_PICKUPS(playerPosition.x, playerPosition.y, playerPosition.z, Features::DropAmount1, 1, Features::bagHash);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);



					}
					Features::TimePD2 = timeGetTime();

				}
			}

		}
	}//done wait
}

bool Features::isPlayerFriend(Player player, bool & result)
{
	int NETWORK_HANDLE[76];
	NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &NETWORK_HANDLE[0], 13);
	if (NETWORK::NETWORK_IS_HANDLE_VALID(&NETWORK_HANDLE[0], 13))
	{
		result = NETWORK::NETWORK_IS_FRIEND(&NETWORK_HANDLE[0]);
		return true;
	}
	return false;
}


int Features::Bags = 2;
int Features::Bagslol = 1;
bool Features::alldrop = false;
void Features::AllDrop(bool toggle)
{ // all player 2k
	if (alldrop)
	{

		if ((timeGetTime() - Features::TimePD2) > Features::DropDelay)
		{
			for (int i = 0; i < 32; i++)
			{
				int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
				{
					Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					STREAMING::REQUEST_MODEL(Features::bagHash);
					if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
						WAIT(0);
					}
					else {
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						playerPosition.z = playerPosition.z + Features::DropHeight;
						for (int i = 0; i < Features::Bags; i++)
						{
							Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, Features::DropAmount, Features::bagHash, FALSE, TRUE);

						}
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
					}
					Features::TimePD2 = timeGetTime();
				}
			}

		}
	}
}

bool  Features::rpstealth = false;
void  Features::StealthRP(Player player)
{
	DWORD64 args[3] = { 0x3882114BDE571AD4, Features::Online::selectedPlayer, 1 };
	SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, 3, Features::Online::selectedPlayer);
}



bool Features::lookall = false;
void Features::kallall(bool toggle)
{ // all player 2k
	if (alldrop)
	{

		if ((timeGetTime() - Features::TimePD2) > Features::DropDelay)
		{
			for (int i = 0; i < 32; i++)
			{
				int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
				if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
				{
					Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					STREAMING::REQUEST_MODEL(Features::bagHash);
					if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
						WAIT(0);
					}
					else {
						int ammount = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2500);// fertig :D
						Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
						playerPosition.z = playerPosition.z + Features::DropHeight;
						for (int i = 0; i < Features::Bags; i++)
						{
							Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, ammount, Features::bagHash, FALSE, TRUE);

						}
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
					}
					Features::TimePD2 = timeGetTime();
				}
			}

		}
	}
}

bool Features::shootcontainier = false;
void Features::shootContainer(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &pos))
		{
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_container_01a"), pos.x, pos.y, pos.z, true, 1, 0);
		}
	}
}

bool Features::shootramp = false; // prop_toilet_01
void Features::shootRamp(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &pos))
		{
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_mp_ramp_03"), pos.x, pos.y, pos.z, true, 1, 0);
		}
	}
}

bool Features::shoottoilt = false; // prop_toilet_01
void Features::shootToilt(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 pos;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &pos))
		{
			OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY("prop_toilet_01"), pos.x, pos.y, pos.z, true, 1, 0);
		}
	}
}


bool Features::rainbowmenu = false;
void Features::Rainbowmenu(bool toggle)
{
	if ((timeGetTime() - Features::TimePD2) > 400)
	{
		if (Menu::Settings::titleRect.r > 0 && Menu::Settings::titleRect.b == 0, Menu::Settings::line.r > 0 && Menu::Settings::line.b == 0)
		{
			Menu::Settings::titleRect.r--;
			Menu::Settings::titleRect.g++;
			Menu::Settings::line.r--;
			Menu::Settings::line.g++;
		}
		if (Menu::Settings::titleRect.g > 0 && Menu::Settings::titleRect.r == 0, Menu::Settings::line.g > 0 && Menu::Settings::line.r == 0)
		{
			Menu::Settings::titleRect.g--;
			Menu::Settings::titleRect.b++;
			Menu::Settings::line.g--;
			Menu::Settings::line.b++;
		}
		if (Menu::Settings::titleRect.b > 0 && Menu::Settings::titleRect.g == 0, Menu::Settings::line.b > 0 && Menu::Settings::line.g == 0)
		{
			Menu::Settings::titleRect.r++;
			Menu::Settings::titleRect.b--;
			Menu::Settings::line.r++;
			Menu::Settings::line.b--;
		}
		if (Menu::Settings::titleRect.r > 0 && Menu::Settings::titleRect.b == 0, Menu::Settings::scroller.r > 0 && Menu::Settings::scroller.b == 0)
		{
			Menu::Settings::titleRect.r--;
			Menu::Settings::titleRect.g++;
			Menu::Settings::scroller.r--;
			Menu::Settings::scroller.g++;
		}
		if (Menu::Settings::titleRect.g > 0 && Menu::Settings::titleRect.r == 0, Menu::Settings::scroller.g > 0 && Menu::Settings::scroller.r == 0)
		{
			Menu::Settings::titleRect.g--;
			Menu::Settings::titleRect.b++;
			Menu::Settings::scroller.g--;
			Menu::Settings::scroller.r++;
		}
		if (Menu::Settings::titleRect.b > 0 && Menu::Settings::titleRect.g == 0, Menu::Settings::scroller.b > 0 && Menu::Settings::scroller.g == 0)
		{
			Menu::Settings::titleRect.r++;
			Menu::Settings::titleRect.b--;
			Menu::Settings::scroller.r++;
			Menu::Settings::scroller.b--;
		}
		(Menu::Settings::titleRect.r, Menu::Settings::titleRect.g, Menu::Settings::titleRect.b);
		(Menu::Settings::scroller.r, Menu::Settings::scroller.g, Menu::Settings::scroller.b);
		(Menu::Settings::line.r, Menu::Settings::line.g, Menu::Settings::line.b);
	}
	Features::TimePD2 = timeGetTime();
}

bool Features::Vehgun = false;
void Features::vehgun(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0xB779A091,
			0x00ABB0C0,
			0xD756460C,
			0xEDD516C6,
			0x2BEC3CBE,
			0x7074F39D,
			0x9AE6DDA1,
			0xAFBB2CA4,
			0xC9E8FF76,
			0x98171BD3,
			0x353B561D,
			0x437CF2A0,
			0x53174EEF,
			0xD577C962,
			0x2F03547B,
			0x2C75F0DD,
			0x44623884,
			0xDFF0594C,
			0x6FD95F68,
			0x067BC037,
			0x00ABB0C0,
			0x15F27762,
			0xC3FBA120,
			0xCB44B1CA,
			0x3D6AAA9B,
			0x0AFD22A6,
			0x810369E2,
			0x04CE68AC };
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 28);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgun144 = false;
void Features::vehgun144(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0xEDA4ED97,
			0xFCC2F483,
			0x79DD18AE,
			0x73F4110E,
			0x7B54A9D3,
			0xE6E967F8,
			0x149BD32A,
			0x6290F15B,
			0xD9F0503D,
			0x0D17099D,
			0x1324E960,
			0x64DE07A1,
			0x1DD4C0FF,
			0x897AFC65

		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 14);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgun145 = false;
void Features::vehgun145(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0x4ABEBF23,
			0xC514AAE0,
			0xC52C6B93,
			0xB472D2B5,
			0x8198AEDC,
			0x6068AD86,
			0xB4F32118,
			0x71CBEA98,
			0x42836BE5,
			0x378236E1,
			0xF330CB6A,
			0x3E5BD8D9,
			0xD4AE63D9,
			0xBC5DC07E,
			0x3D7C6410,
			0xE99011C2

		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 16);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgun146 = false;
void Features::vehgun146(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0xED552C74,
			0x81BD2ED0,
			0xF34DFB25,
			0xD6BC7523,
			0x5D1903F9,
			0x276D98A3,
			0x586765FB,
			0x8408F33A,
			0x00E83C17,
			0x23CA25F2,
			0xF8C2E0E7,
			0xAA6F980A,
			0x91CA96EE,
			0x33B98FE2,
			0xA4D99B7D,
			0xE78CC3D9,
			0xA4A4E453,
			0x9B16A3B4,
			0x35DED0DD,
			0x5097F589,
			0x41D149AA,
			0x67D2B389,
			0x34DBA661,
			0x58CDAF30,
			0xE8A8BA94,
			0x1AAD0DED,
			0x6F946279,
			0x3201DD49

		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 28);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgun148 = false;
void Features::vehgun148(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0x26C8773C,
			0x30D9130F,
			0xCF8E8119,
			0xD4DAEB1D,
			0x95354607,
			0x7420D7B1,
			0x305400AC,
			0x18C24ED9,
			0x2C99914F,
			0xC1BC0BFF,
			0xD6FC69AB,
			0x29B99C50,
			0xA9A767EB,
			0xBCE4786A,
			0x847BD2E4,
			0xE7C0D42E,
			0xE43963D1,
			0x514D7D75,
			0x4EC386EC


		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 19);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}

bool Features::Vehgun147 = false;
void Features::vehgun147(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed))
	{
		float offset;
		const int Veh[] = { 0x89BA59F5,
			0x7A2EF5E4,
			0x6DBD6C0A,
			0xB5EF4C33,
			0xC4810400,
			0x52FF9437,
			0x300236A3,
			0x8BCCBD81,
			0x3892C3C9,
			0x9206FC34,
			0xB132FD5A,
			0xC688BDFD,
			0xE822E73E,
			0x0B1E1963,
			0xC0C4EF2F,
			0x0F5BF01A,
			0x4D6EC574,
			0x518D95AB,
			0x986D34C0


		};
		int vehicle;
		int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 19);
		int Player = PLAYER::PLAYER_PED_ID();
		Hash vehmodel = Veh[random];
		STREAMING::REQUEST_MODEL(vehmodel);

		while (!STREAMING::HAS_MODEL_LOADED(vehmodel)) WAIT(0);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 5.0, 0.0);

		if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
		{
			Vector3 dim1, dim2;
			GAMEPLAY::GET_MODEL_DIMENSIONS(vehmodel, &dim1, &dim2);

			offset = dim2.y * 1.6;
		}

		Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(playerPed);
		Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 1);
		float rot = (ENTITY::GET_ENTITY_ROTATION(playerPed, 0)).z;
		Vector3 gameplayCam = CAM::_GET_GAMEPLAY_CAM_COORDS();
		Vector3 gameplayCamRot = CAM::GET_GAMEPLAY_CAM_ROT(0);
		Vector3 gameplayCamDirection = RotationToDirection(gameplayCamRot);
		Vector3 startCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 10)));
		Vector3 endCoords = addVector(gameplayCam, (multiplyVector(gameplayCamDirection, 500.0f)));

		Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), startCoords.z, rot, 1, 1);
		ENTITY::SET_ENTITY_VISIBLE(veh, false, true);

		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0.0f, 500.0f, 2.0f + endCoords.z, 0.0f, 0.0f, 0.0f, 0, 1, 1, 1, 0, 1);
		ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&veh);
	}
}


bool Features::undrivablecar[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::undrivablecar2(Player target)
{
	Ped playerPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0), 1);
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0), 100.0f);
			AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0), 0);
			notifyMap("~b~Undrivable!");
			undrivablecar[35] = false;
		}
	}
	else
	{
		notifyMap("~r~Player Is Not In A Vehicle");
		undrivablecar[35] = false;
	}
}


void Features::SetMultipliers() {

	if (accelerationmultiplier != 0) {
		Vehicle pedVeh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());

		if (ENTITY::DOES_ENTITY_EXIST(pedVeh)) {
			if (GetAsyncKeyState('W') || CONTROLS::IS_CONTROL_PRESSED(2, INPUT_FRONTEND_RT)) {
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(pedVeh))
					ENTITY::APPLY_FORCE_TO_ENTITY(pedVeh, true, 0, accelerationmultiplier / 10, 0, 0, 0, 0, true, true, true, true, false, true);
			}
		}
	}
	if (brakesmultiplier != 0) {

		Vehicle pedVeh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());

		if (ENTITY::DOES_ENTITY_EXIST(pedVeh)) {
			if (GetAsyncKeyState('S') || CONTROLS::IS_CONTROL_PRESSED(2, INPUT_FRONTEND_LT)) {
				if (VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(pedVeh))
					ENTITY::APPLY_FORCE_TO_ENTITY(pedVeh, true, 0, ((brakesmultiplier / 10)* -1), 0, 0, 0, 0, true, true, true, true, false, true);
			}
		}

	}

	if (suspensionseight != 0) {

		Vehicle pedVeh = PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID());
		if (ENTITY::DOES_ENTITY_EXIST(pedVeh)) {
			ENTITY::APPLY_FORCE_TO_ENTITY(pedVeh, true, 0, 0, -suspensionseight / 10, 0, 0, 0, true, true, true, true, false, true);
		}
	}
}


bool Features::Objectgun = false;
void Features::objectgun(bool toggle)// this works
{
	if (Objectgun)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID()))
		{
			Vector3 Rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
			Vector3 Dir = rot_to_direction(&Rot);
			Vector3 CPosition = CAM::GET_GAMEPLAY_CAM_COORD();
			Vector3 PlayerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
			float spawnDistance = get_distance(&CPosition, &PlayerPosition);
			spawnDistance += 2;
			Vector3 SPosition = add(&CPosition, &multiply(&Dir, spawnDistance));
			int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2585);
			const int Obj[] = { 0x0042ea9f,
				0x00460fc5,
				0x0046397e,
				0x00633ddf,
				0x00a86f78,
				0x00b28bf8,
				0x00d2c275,
				0x00d7552a,
				0x00d7e7fa,
				0x0104614e,
				0x0105ce40,
				0x011193e0,
				0x0119735d,
				0x011d675e,
				0x0147ebe4,
				0x016e3f3d,
				0x017d003b,
				0x0185b135,
				0x01c0a3b6,
				0x01d58149,
				0x01e2fab2,
				0x0208e142,
				0x02475888,
				0x026be58c,
				0x02ac105d,
				0x0301d335,
				0x03154ddc,
				0x032019c0,
				0x0340f31f,
				0x0361f579,
				0x037153d6,
				0x038f86bf,
				0x03a41e1a,
				0x03aa904e,
				0x03c4ecdb,
				0x03cbf802,
				0x03d4f2a2,
				0x03fc0a5a,
				0x040c3a75,
				0x0426f46e,
				0x0429083b,
				0x0429e2c6,
				0x043a4b8e,
				0x045e91ee,
				0x04653780,
				0x046a474e,
				0x04891312,
				0x04917901,
				0x04a3c376,
				0x04ae6d62,
				0x04de7f33,
				0x0503e1c0,
				0x050c39c7,
				0x054258e1,
				0x055c8249,
				0x055f493b,
				0x05648b8b,
				0x05699673,
				0x05752b59,
				0x05985d75,
				0x05c617d3,
				0x05ccacf6,
				0x05ede99e,
				0x0623f9a3,
				0x06268470,
				0x063ba2ca,
				0x064a6680,
				0x0658a835,
				0x0674c35e,
				0x06833ef1,
				0x06aa3dec,
				0x06b21d02,
				0x06e51f7e,
				0x07144763,
				0x0724658f,
				0x0732d722,
				0x074a3557,
				0x074cba11,
				0x0752f68a,
				0x0757c28d,
				0x07601f29,
				0x0766f7ce,
				0x079324a2,
				0x07b9aa54,
				0x07ccb5e1,
				0x07ce549d,
				0x07d35238,
				0x07e253d2,
				0x07f8097e,
				0x0808cdb3,
				0x080b7b49,
				0x081ece1f,
				0x08250b39,
				0x08333c3c,
				0x084592ed,
				0x0869b691,
				0x086ec175,
				0x087f62f9,
				0x08f8085e,
				0x091cd3b2,
				0x09472c02,
				0x09816485,
				0x0999cf94,
				0x09a1dd77,
				0x09dda7e0,
				0x09fcbaed,
				0x0a22cea2,
				0x0a2ce7d2,
				0x0a5654f6,
				0x0a7a4a10,
				0x0ab0265f,
				0x0ad31c42,
				0x0af11755,
				0x0af617e0,
				0x0b24b944,
				0x0b26bab3,
				0x0b3c6b5c,
				0x0b4e2dc0,
				0x0b5daaec,
				0x0b8e8976,
				0x0bb143a8,
				0x0bfbdc9d,
				0x0c0522a1,
				0x0c0ba54b,
				0x0c452454,
				0x0c4f7e8e,
				0x0c59a0e3,
				0x0c72d355,
				0x0c853ce3,
				0x0c96ddeb,
				0x0c9b0a8a,
				0x0c9fcd09,
				0x0ca0e7c2,
				0x0cc73e90,
				0x0cf39a5f,
				0x0d06c604,
				0x0d8809a3,
				0x0dd52f22,
				0x0dd75614,
				0x0de5faae,
				0x0e1d31e7,
				0x0e336128,
				0x0e465c10,
				0x0e5fec54,
				0x0e805916,
				0x0eb31c78,
				0x0ec688eb,
				0x0ed57ec6,
				0x0ef82139,
				0x0f0048b0,
				0x0f287397,
				0x0f29dea9,
				0x0f4345e9,
				0x0f87eef6,
				0x0f89432b,
				0x0fa24c32,
				0x0fa4d707,
				0x0fbccda3,
				0x0fd6964f,
				0x0fe7673c,
				0x0ff3fcb5,
				0x0ff883c5,
				0x101ce8f5,
				0x103986f0,
				0x103c434e,
				0x104484c6,
				0x1055925d,
				0x10856e55,
				0x10869547,
				0x10a8dbbb,
				0x10ab8d56,
				0x10cb9eb4,
				0x110ac104,
				0x11266252,
				0x113fd533,
				0x11528878,
				0x1152f032,
				0x115d9ea5,
				0x118b6630,
				0x1207ca57,
				0x124608a4,
				0x1255fdfb,
				0x126ca09d,
				0x126f08f2,
				0x127150b8,
				0x12969ba3,
				0x12aebf2c,
				0x12bdebf2,
				0x12eec7a9,
				0x130d959f,
				0x13351f02,
				0x13357d9b,
				0x133d60a9,
				0x139d311f,
				0x13a5b821,
				0x13a6747a,
				0x13cebd36,
				0x13dd1f83,
				0x13edbd11,
				0x1405669b,
				0x140f36da,
				0x1428d590,
				0x1448713a,
				0x14697bb3,
				0x148b20a6,
				0x149e2243,
				0x14a30c7b,
				0x14e3d6eb,
				0x14f6bd6d,
				0x14ff3f1d,
				0x151c77af,
				0x15242f41,
				0x15582ecd,
				0x158c9081,
				0x158ebd66,
				0x15ab6bab,
				0x15adf001,
				0x15b9011a,
				0x15f22759,
				0x15ff352f,
				0x161fb75b,
				0x1651de5c,
				0x16581c8a,
				0x1661757f,
				0x1668a50b,
				0x169fa3da,
				0x16a39a90,
				0x16a7695b,
				0x16ae5135,
				0x16b2ee75,
				0x16dbace8,
				0x16ecec56,
				0x16f93072,
				0x17236aa7,
				0x17548d8d,
				0x1762b038,
				0x17713b39,
				0x177a4261,
				0x177b60ee,
				0x17dcc339,
				0x17e65d20,
				0x180a2a8a,
				0x18156c63,
				0x1880ce91,
				0x18a2a46e,
				0x18c49531,
				0x18fcd344,
				0x192567be,
				0x1951f087,
				0x1959bdf3,
				0x1960d682,
				0x1965cf4f,
				0x19aaadc3,
				0x19c11b82,
				0x19cb150e,
				0x1a0bc25b,
				0x1a0c3d41,
				0x1a0e2225,
				0x1a37e98b,
				0x1a688b13,
				0x1a92716c,
				0x1ab39621,
				0x1ad53ecf,
				0x1ae4039a,
				0x1b0e6b19,
				0x1b180974,
				0x1b276762,
				0x1b381a32,
				0x1b509699,
				0x1b6ed610,
				0x1b7c1d1e,
				0x1b803513,
				0x1b9a2388,
				0x1bb934e9,
				0x1bccd39c,
				0x1bcd37c6,
				0x1bd48138,
				0x1c407029,
				0x1c587fa6,
				0x1c8b91d9,
				0x1cb21205,
				0x1cd55ba0,
				0x1cd6d6ac,
				0x1cebcf06,
				0x1cf2ca01,
				0x1cf9d6d2,
				0x1d64808b,
				0x1d6f7b34,
				0x1d87f925,
				0x1d8a4162,
				0x1d8c18cd,
				0x1da17dd4,
				0x1db34f2a,
				0x1dc247fa,
				0x1de9372b,
				0x1df507eb,
				0x1e04df09,
				0x1e26f85a,
				0x1e2e4a36,
				0x1e34b5c2,
				0x1e63bcb4,
				0x1e6e69dc,
				0x1e6f920c,
				0x1e75866e,
				0x1e839152,
				0x1e9e215f,
				0x1e9ea015,
				0x1ed29497,
				0x1ee9cd57,
				0x1eea1590,
				0x1ef861ce,
				0x1efb7b6c,
				0x1f550c17,
				0x1f570a54,
				0x1f5a3957,
				0x1f811ce1,
				0x1fad22fb,
				0x1fbd6146,
				0x1fca2a6a,
				0x1fcbd2f1,
				0x1fd4cce1,
				0x1fda072d,
				0x1ff3cc2e,
				0x2015b51d,
				0x204ee4b6,
				0x2052b780,
				0x205d4274,
				0x2062352d,
				0x207a3ca8,
				0x207cec12,
				0x208f25b3,
				0x20911405,
				0x2097eea6,
				0x20cffdb5,
				0x20da9342,
				0x210974d7,
				0x211a00b0,
				0x217c2330,
				0x2185065a,
				0x21c545ea,
				0x21d743c3,
				0x21df89bf,
				0x21f6f9f5,
				0x221ee0fd,
				0x222846cb,
				0x2231808b,
				0x223c581b,
				0x224e7f06,
				0x2250309f,
				0x22606b68,
				0x227580ee,
				0x22b1476e,
				0x2346c249,
				0x2347ed83,
				0x2351f1b1,
				0x237e9a78,
				0x23e3b0ba,
				0x23fbac0f,
				0x240d3e4b,
				0x2413cee0,
				0x2418bd30,
				0x24786f38,
				0x24d07e95,
				0x24deb3e1,
				0x25286eb9,
				0x2537db7a,
				0x2571cda2,
				0x2575d371,
				0x2577a7bc,
				0x257bedda,
				0x25cbf0e5,
				0x26134929,
				0x263e279e,
				0x265d5856,
				0x26b91a25,
				0x26c432e8,
				0x26cf04db,
				0x26e7fcb1,
				0x2709fcea,
				0x2716b4ca,
				0x2726cc47,
				0x27483fc0,
				0x274ba905,
				0x27a12c72,
				0x27a173a8,
				0x27bc4f61,
				0x27bc58a9,
				0x27c33a11,
				0x27c67b62,
				0x27d1811a,
				0x27d8000e,
				0x27e363f7,
				0x27e54463,
				0x27fe17fd,
				0x2829c88d,
				0x282d6851,
				0x2834c4a3,
				0x28781518,
				0x2886deab,
				0x28885c83,
				0x288dc72a,
				0x28947d6c,
				0x28b2940f,
				0x28be7556,
				0x28c8a784,
				0x28cdf74c,
				0x28cf5961,
				0x28e797a3,
				0x28ead0e7,
				0x2904e007,
				0x2927a8c3,
				0x292f4238,
				0x295b365e,
				0x296a6654,
				0x2990c112,
				0x29970fab,
				0x29ca5f04,
				0x29cb0f3c,
				0x29db5e17,
				0x29e362ff,
				0x29f3f9d1,
				0x2a140363,
				0x2a41a51e,
				0x2a461cf4,
				0x2a48dbc9,
				0x2a6ebfef,
				0x2a77f8b0,
				0x2aa9be6a,
				0x2ab637df,
				0x2acf481a,
				0x2ae13dfa,
				0x2af4e9fb,
				0x2b1fc7b2,
				0x2b2d8c1d,
				0x2b3485db,
				0x2b3a93e1,
				0x2b3ad141,
				0x2b5bd8ba,
				0x2b8c0657,
				0x2b96d271,
				0x2b9c94da,
				0x2baf34d6,
				0x2bb25046,
				0x2bb8f7e0,
				0x2bc3f8b8,
				0x2bd57a5a,
				0x2be688e0,
				0x2c0683c7,
				0x2c0b2ffe,
				0x2c21abf9,
				0x2c2f9065,
				0x2c57eff1,
				0x2c7c3016,
				0x2c98b0ed,
				0x2cbe2fbe,
				0x2ce2804a,
				0x2ce556c0,
				0x2cf975f5,
				0x2cfee5fd,
				0x2d17574b,
				0x2d291c86,
				0x2d33a7e3,
				0x2d5af569,
				0x2d66be8f,
				0x2d72103d,
				0x2d80bd93,
				0x2d930b3b,
				0x2d96a89a,
				0x2d9a5028,
				0x2de9f1e4,
				0x2df8cf62,
				0x2e042597,
				0x2e0d79e8,
				0x2e43a2ff,
				0x2e7c9a23,
				0x2eb9fce9,
				0x2ef4cef2,
				0x2efbb698,
				0x2f3a5b38,
				0x2f84f70e,
				0x2f9b3eec,
				0x2f9f084d,
				0x2fa3ddbb,
				0x2fea25bf,
				0x30053b7a,
				0x300c41ef,
				0x30318fab,
				0x30371d34,
				0x304afda1,
				0x304dc78b,
				0x30597515,
				0x306e29b4,
				0x30b5a669,
				0x30b77f21,
				0x312f3a92,
				0x313c1fcc,
				0x3159696b,
				0x31627d68,
				0x31be5f40,
				0x31dcb7d1,
				0x31fd5263,
				0x323f3f40,
				0x3250a31d,
				0x326d3db1,
				0x3287a564,
				0x328d164d,
				0x32a956a6,
				0x32ece3bc,
				0x32ed2e9a,
				0x33158c22,
				0x332d24be,
				0x334049a3,
				0x336b391e,
				0x336fbbcf,
				0x33bee4be,
				0x33e70464,
				0x341d729b,
				0x3423f946,
				0x346968f4,
				0x346a8d93,
				0x347cd13a,
				0x347d8659,
				0x3482b62e,
				0x3489dcd8,
				0x34950018,
				0x34b41415,
				0x34c993be,
				0x34cb93ec,
				0x34d1e91a,
				0x34d5d3fd,
				0x34d7a451,
				0x34feb64d,
				0x35098d26,
				0x355241b6,
				0x357cba6d,
				0x35ae1f39,
				0x35b17206,
				0x35c9a934,
				0x35f7654e,
				0x3605424c,
				0x36393ea8,
				0x363ca3b6,
				0x366edcc0,
				0x367912e7,
				0x3680ec2f,
				0x368391cb,
				0x369d8410,
				0x36d89c82,
				0x36dac2c6,
				0x36e9ab93,
				0x36eb76de,
				0x37067ffb,
				0x370b4e30,
				0x371f753d,
				0x372987ad,
				0x374d00af,
				0x376024bc,
				0x376adae3,
				0x376c99f9,
				0x376cb307,
				0x37926aa6,
				0x37a41695,
				0x37aff890,
				0x37d80b0e,
				0x37fdc243,
				0x3852efd6,
				0x3860f7f9,
				0x3882907a,
				0x38b45feb,
				0x38c419eb,
				0x38d8d4d4,
				0x390a0159,
				0x3924b266,
				0x392d62aa,
				0x3ac1ea,
				0x393cea76,
				0x3961c88,
				0x39885bb5,
				0x399bae1e,
				0x39d0eaef,
				0x3a015e1b,
				0x3a12a4ba,
				0x3a1b896a,
				0x3a358535,
				0x3a3653b1,
				0x3a3f63bf,
				0x3a403cc9,
				0x3a6168f2,
				0x3a9245cd,
				0x3ab773db,
				0x3ad2a96e,
				0x3add57f6,
				0x3b14f8fc,
				0x3b2a8c05,
				0x3b5f7e01,
				0x3b613254,
				0x3b6561bf,
				0x3b829c8b,
				0x3bd8e67a,
				0x3be5240f,
				0x3be9850a,
				0x3bf5b2ef,
				0x3bfd37a7,
				0x3c1b83ba,
				0x3c3b89f0,
				0x3c3c6190,
				0x3c4673a4,
				0x3c4bc4e2,
				0x3c4dac35,
				0x3c662ff7,
				0x3ca58296,
				0x3cd5661d,
				0x3cef76a2,
				0x3cf34f26,
				0x3cf90808,
				0x3d0e127f,
				0x3d3ec7ae,
				0x3d41885,
				0x3d4a034f,
				0x3d724e0e,
				0x3d8b524a,
				0x3dd687f3,
				0x3df36023,
				0x3e25d399,
				0x3e2a1909,
				0x3e591630,
				0x3e611d30,
				0x3e90e8ca,
				0x3e94b9ef,
				0x3eb58c09,
				0x3ed6c49c,
				0x3ef6bb41,
				0x3efd32f2,
				0x3efd9223,
				0x3efe4664,
				0x3f2ec2b6,
				0x3f581495,
				0x3f58aa28,
				0x3f6c62cb,
				0x3f78bc5d,
				0x3fa676de,
				0x3fb16a90,
				0x3fbdad7c,
				0x3fca4571,
				0x3fd0afb6,
				0x3fd7c4d3,
				0x3fe27bae,
				0x401bad75,
				0x4056cc7d,
				0x4057c671,
				0x40695416,
				0x4087e762,
				0x408a2f40,
				0x40be41d1,
				0x40d23ece,
				0x40fd9557,
				0x410bfe7e,
				0x412ce32c,
				0x41478ee4,
				0x417e8ab8,
				0x417f7b18,
				0x41835dc0,
				0x41c9b744,
				0x41d5aa30,
				0x4200d129,
				0x420a3c0f,
				0x42104ce9,
				0x421ed535,
				0x4233ed5a,
				0x42348da0,
				0x423b306c,
				0x423fc8ad,
				0x428a7157,
				0x42b3fc09,
				0x42c280e4,
				0x433abc6d,
				0x435d7f24,
				0x43bd08f2,
				0x43d4d056,
				0x43ff8af8,
				0x44083a8f,
				0x441c79c2,
				0x441f12db,
				0x443a32d0,
				0x4495a765,
				0x44a06d53,
				0x44b1e844,
				0x44ca86a9,
				0x44d70dbb,
				0x451054d8,
				0x452414ad,
				0x4527e509,
				0x453dcf20,
				0x456aa864,
				0x4574a099,
				0x45af1650,
				0x45c35f6a,
				0x45f740d1,
				0x46174983,
				0x4685edaa,
				0x4694227e,
				0x46a578b5,
				0x46a97bb7,
				0x46ac8b8c,
				0x46bbf1a4,
				0x46bf8463,
				0x47031c9d,
				0x47460af4,
				0x47489549,
				0x47595e26,
				0x4759ff64,
				0x478a8882,
				0x479adf3f,
				0x47b98bd9,
				0x47fde645,
				0x484e7ea5,
				0x484fe6e1,
				0x486670a6,
				0x4867b323,
				0x48ac6542,
				0x48ce84e9,
				0x48d4f3e5,
				0x48f3da4c,
				0x49120bb3,
				0x4956de6e,
				0x49811c36,
				0x49816593,
				0x49829021,
				0x49996225,
				0x499d2f3c,
				0x49bf3df8,
				0x49c29ffa,
				0x49ee092b,
				0x4a41e13b,
				0x4a4266cc,
				0x4a72773d,
				0x4ab36b32,
				0x4adfc0c9,
				0x4af2ccb6,
				0x4af9d1d9,
				0x4b22c971,
				0x4b444dbc,
				0x4b6e534b,
				0x4b7b063a,
				0x4b9b237c,
				0x4bac0dd7,
				0x4c272c11,
				0x4c53dd18,
				0x4c61d617,
				0x4c6e3901,
				0x4c73b157,
				0x4c8e0520,
				0x4c9de316,
				0x4c9e2da4,
				0x4cacca75,
				0x4caef9fe,
				0x4cdd7ddd,
				0x4d0053c9,
				0x4d172765,
				0x4d1f76c4,
				0x4d33c98f,
				0x4d47e3ff,
				0x4d6410f7,
				0x4d7bec84,
				0x4d91e3b2,
				0x4d9413ef,
				0x4da19524,
				0x4db7e514,
				0x4dc3b39c,
				0x4de6a409,
				0x4de82456,
				0x4e022f83,
				0x4e0465de,
				0x4e28271b,
				0x4e46c5f7,
				0x4e7317f3,
				0x4e7a7476,
				0x4e7fc200,
				0x4e8f1075,
				0x4ebfc2e6,
				0x4ec0e5e9,
				0x4ee72833,
				0x4ef0966b,
				0x4efa1782,
				0x4f2b278a,
				0x4f3e643e,
				0x4f916559,
				0x4f9b8c0a,
				0x4fab9280,
				0x4fc63f36,
				0x4fcb0029,
				0x4ff8d110,
				0x500460b0,
				0x501707c8,
				0x503cdc7c,
				0x5063a4e8,
				0x5067eaaa,
				0x50a607d0,
				0x50c22184,
				0x50d213f4,
				0x50d60cee,
				0x511f0509,
				0x512e9a7f,
				0x513e1a3a,
				0x5144d666,
				0x51709adc,
				0x5193c198,
				0x51b3107e,
				0x51d9c9c0,
				0x51db4c7c,
				0x51dc477a,
				0x51eb4053,
				0x51ed3b8f,
				0x5206d422,
				0x522ce28e,
				0x524bae5e,
				0x52660dbb,
				0x5278a41d,
				0x52c18a5a,
				0x52ab4390,
				0x52db7cc8,
				0x532b1dd1,
				0x5337688f,
				0x536024e5,
				0x53bf42df,
				0x53c39067,
				0x53dd7075,
				0x53e0224d,
				0x54070aef,
				0x540c770f,
				0x5411322e,
				0x5420a5b9,
				0x5423f679,
				0x542ca274,
				0x54310d3e,
				0x54348167,
				0x543b872b,
				0x54776a53,
				0x54cda69d,
				0x54dd1196,
				0x54e961ab,
				0x54fc7cb6,
				0x550730c6,
				0x5518db12,
				0x552846a4,
				0x55343fa3,
				0x55425553,
				0x5571173d,
				0x558e77da,
				0x55a8cf2a,
				0x55afa712,
				0x55c32205,
				0x560c4f15,
				0x563313b7,
				0x5644e588,
				0x5652c758,
				0x5687d081,
				0x568950ee,
				0x569dbe05,
				0x56d3d7e9,
				0x5707dd4e,
				0x5732edcc,
				0x574d1999,
				0x575ece33,
				0x577bec3f,
				0x579774c0,
				0x57ca6238,
				0x57e01dcc,
				0x57e4975b,
				0x57e904e9,
				0x584071f3,
				0x5855ca79,
				0x585f2581,
				0x5869a8f8,
				0x588fc547,
				0x58a52f49,
				0x58a81454,
				0x58a9746b,
				0x58a98a1d,
				0x58d3b4ea,
				0x58e280a2,
				0x592f288a,
				0x593a9667,
				0x59764c58,
				0x59916c77,
				0x59aa6da9,
				0x59c5a033,
				0x59caecc7,
				0x59dcf9e1,
				0x59df96b5,
				0x5a101e71,
				0x5a19d69f,
				0x5a1a1bd9,
				0x5a1d76e4,
				0x5a3f5f93,
				0x5a509326,
				0x5a6df96a,
				0x5a743f85,
				0x5a7d355f,
				0x5a8f8cd2,
				0x5a9789a0,
				0x5acf37c5,
				0x5ae2fc35,
				0x5ae87f53,
				0x5af373e8,
				0x5afd248c,
				0x5b3dc1c0,
				0x5b5c4263,
				0x5b76d222,
				0x5b850339,
				0x5b97b7ac,
				0x5bb42c0b,
				0x5bbd60e4,
				0x5bc934ae,
				0x5bda1bf9,
				0x5be9b160,
				0x5c06866b,
				0x5c0cec9f,
				0x5c1d75a6,
				0x5c762663,
				0x5c7a3561,
				0x5c8957b5,
				0x5cb5a8fb,
				0x5ce284f6,
				0x5cfbce2b,
				0x5d20643d,
				0x5d21b20d,
				0x5d2cd6d1,
				0x5d2e8770,
				0x5d3742e1,
				0x5d3ff1e6,
				0x5dec10b0,
				0x5e2d1d2c,
				0x5e3f31ae,
				0x5e7d2624,
				0x5f254071,
				0x5f281414,
				0x5f37c0ff,
				0x5f455678,
				0x5f47dd93,
				0x5f5e76c9,
				0x5f74c0aa,
				0x5f8b572b,
				0x5f8f8668,
				0x5f989485,
				0x5f9a1284,
				0x5fb619d7,
				0x5fb9ad83,
				0x5fef4bd7,
				0x5ff0d1e7,
				0x5ff8d96f,
				0x600a8bd2,
				0x6023fd9b,
				0x605a3da9,
				0x608c65ed,
				0x6096a1e8,
				0x60f90ad4,
				0x60fea6d4,
				0x611ec062,
				0x614c63bd,
				0x615b4577,
				0x61704dd2,
				0x61721925,
				0x618ce28f,
				0x61bd02c9,
				0x61d7f0a0,
				0x6241dcf3,
				0x62481982,
				0x62874e42,
				0x6288a7bb,
				0x628d2ad4,
				0x6298590b,
				0x62b71cbf,
				0x62f3f6c8,
				0x62fc35b1,
				0x62fc37e5,
				0x63588fb6,
				0x6366ad70,
				0x636e3de1,
				0x638e89fa,
				0x63923871,
				0x63988e7c,
				0x639ab390,
				0x63a56f29,
				0x63ab426e,
				0x63adbebc,
				0x640abb61,
				0x640f2ea2,
				0x6430962d,
				0x643bc43a,
				0x644b9585,
				0x64a7339f,
				0x64d085ec,
				0x64e33712,
				0x6516fb2e,
				0x654179c1,
				0x65454e61,
				0x65474ead,
				0x6558b586,
				0x6560ec50,
				0x656a1380,
				0x659b9569,
				0x65a9198c,
				0x65c1b98f,
				0x65eaf4b2,
				0x661c9aa9,
				0x66254fb8,
				0x66544a00,
				0x66751ff2,
				0x6680cfdb,
				0x669e12f6,
				0x66a5801d,
				0x66cee88b,
				0x66e8c450,
				0x66f2b0e9,
				0x66f9eb27,
				0x671c5c38,
				0x67301e46,
				0x6738be12,
				0x676c1332,
				0x67858406,
				0x6789f4af,
				0x67a13c1c,
				0x67a9ad73,
				0x67c9e641,
				0x67da877f,
				0x67dbe3a8,
				0x67e1c4de,
				0x67f35f69,
				0x683475ee,
				0x683bcd93,
				0x684a97ae,
				0x685632fc,
				0x688060c6,
				0x688fd184,
				0x68905e57,
				0x68b491bd,
				0x68c5f335,
				0x68c79f57,
				0x69263442,
				0x692eb8a1,
				0x6952f148,
				0x69661c40,
				0x697c9014,
				0x699c8fc0,
				0x69a4607f,
				0x69a551a6,
				0x69ad49fb,
				0x69c09379,
				0x69ca00dd,
				0x69e9413e,
				0x69ee65e0,
				0x69ef0318,
				0x6a10dbb7,
				0x6a230b97,
				0x6a2d770f,
				0x6a2e74bc,
				0x6a5de110,
				0x6a62cee0,
				0x6a730537,
				0x6a7fac2a,
				0x6a8cb8ec,
				0x6adefee3,
				0x6b15d96e,
				0x6b23aff8,
				0x6b2d2e0d,
				0x6b4f81d3,
				0x6b5441d0,
				0x6b5ffa1d,
				0x6b6fde1a,
				0x6b73bb05,
				0x6b795ebc,
				0x6b867a1b,
				0x6b952fe2,
				0x6ba6419b,
				0x6bbf0da7,
				0x6c27933e,
				0x6c38910f,
				0x6c4d5af4,
				0x6c78c1f7,
				0x6ca22dda,
				0x6d0a0eba,
				0x6d39c37d,
				0x6d4996f6,
				0x6d51eecb,
				0x6d74805f,
				0x6da666cf,
				0x6db9599a,
				0x6dc2bf77,
				0x6dd6a2bc,
				0x6de3fc35,
				0x6de6824f,
				0x6e081207,
				0x6e201d39,
				0x6e2555d7,
				0x6e2f1928,
				0x6e3ba3c2,
				0x6e8d1996,
				0x6ea0e311,
				0x6ed4aabc,
				0x6eda7dc3,
				0x6efb7a99,
				0x6f028a4d,
				0x6f4bb7f9,
				0x6f5592c2,
				0x6f670837,
				0x6f74f2f3,
				0x6f815a80,
				0x6f8df2d9,
				0x6f9939c7,
				0x6fc0587b,
				0x6fde1cb0,
				0x6fe279b4,
				0x6fee58b0,
				0x6ff5c65c,
				0x70797471,
				0x708f4782,
				0x7091d310,
				0x70993fcb,
				0x70ba7af2,
				0x70cf23cb,
				0x710841e5,
				0x7118137d,
				0x7124eb9e,
				0x71b1d845,
				0x71b37307,
				0x71d1ca27,
				0x71ebe2ef,
				0x7203ba48,
				0x720736e5,
				0x72178dba,
				0x723d3168,
				0x723f9a34,
				0x72509c77,
				0x727e0df8,
				0x72b8156b,
				0x72c3cec1,
				0x72c8a3fb,
				0x72ec6797,
				0x72f54e90,
				0x7301570e,
				0x7305e0f3,
				0x7316eed7,
				0x731f4403,
				0x732a44b6,
				0x732cc3e0,
				0x7340f8cd,
				0x734f7683,
				0x7382b5ec,
				0x7384f37e,
				0x73abc218,
				0x73cb9e00,
				0x73e498db,
				0x73e568ed,
				0x73f55396,
				0x74019666,
				0x74072616,
				0x744387fc,
				0x744babe6,
				0x7462e0e7,
				0x74944d1a,
				0x7498c3ff,
				0x74cc685b,
				0x74cda413,
				0x74d34d79,
				0x74e05608,
				0x74e9f5bb,
				0x74fbd1ca,
				0x75447865,
				0x755ec29c,
				0x75686f53,
				0x756e9af5,
				0x75933c0b,
				0x75a38363,
				0x75ca7328,
				0x75cc8da1,
				0x75e0f65e,
				0x75ea88f0,
				0x7610d393,
				0x7621baaf,
				0x7631fbe6,
				0x7650219b,
				0x7650e782,
				0x76b3cc32,
				0x76d281de,
				0x76fdb175,
				0x771ef3d3,
				0x772114c9,
				0x776a7e45,
				0x7773ca4a,
				0x7774c705,
				0x77d1efd2,
				0x77ef6a33,
				0x78053c0e,
				0x7815b5e5,
				0x783a4be3,
				0x783d7451,
				0x7850409a,
				0x78879d04,
				0x78a1fb03,
				0x78a38920,
				0x78aa6b6f,
				0x78bf81c2,
				0x78c37971,
				0x78cde107,
				0x78df72d2,
				0x7955d3fc,
				0x7977b051,
				0x799f2b4b,
				0x79c14bf9,
				0x79d79665,
				0x79db7af1,
				0x79de70b4,
				0x79f87181,
				0x79facba8,
				0x7a0f96e9,
				0x7a3400ad,
				0x7a4789ee,
				0x7a56dc89,
				0x7a6450f5,
				0x7a7bcf73,
				0x7a8d1fa9,
				0x7a9b6ba1,
				0x7add3eeb,
				0x7af6808d,
				0x7b059043,
				0x7b0f49e6,
				0x7b11ed07,
				0x7b37c437,
				0x7b80c9d8,
				0x7bb34738,
				0x7bf5bcb1,
				0x7bfdaf4c,
				0x7c1aabec,
				0x7c1d6f5b,
				0x7c24c0b8,
				0x7c3d7cc4,
				0x7c445664,
				0x7c95fa6e,
				0x7ca40728,
				0x7cb5510c,
				0x7ce184ec,
				0x7cf536b4,
				0x7cfd8781,
				0x7d02b479,
				0x7d10b85c,
				0x7d4fdda3,
				0x7d770186,
				0x7d96d65f,
				0x7da33acb,
				0x7dbdb93c,
				0x7de28ae3,
				0x7e0fbc73,
				0x7e269d57,
				0x7e5e9fcf,
				0x7e6afba7,
				0x7ef9ef6c,
				0x7f0e43ad,
				0x7f23c467,
				0x7f2b2371,
				0x7f6095ae,
				0x7f79e1be,
				0x7f845900,
				0x7f8a47dd,
				0x7f98c8b3,
				0x7facfa03,
				0x7fb36cd2,
				0x7fc193ea,
				0x7fdfeffb,
				0x7ffbc1e2,
				0x800bbae7,
				0x80214ac1,
				0x8026e592,
				0x8062943c,
				0x8088304a,
				0x809e20d8,
				0x80db6725,
				0x80e69ae2,
				0x80eaa0c0,
				0x812d66f8,
				0x812eaa44,
				0x814b3f78,
				0x81509c7b,
				0x8181f746,
				0x81912047,
				0x819a69b8,
				0x81af56c4,
				0x81bfdf16,
				0x81d5c075,
				0x8205f110,
				0x82185f9f,
				0x821912e8,
				0x8225145b,
				0x82366265,
				0x82826cd2,
				0x82bac591,
				0x82d6907b,
				0x830f9716,
				0x830fade4,
				0x831c9112,
				0x83475c8d,
				0x837683f7,
				0x8383a09e,
				0x83c416e8,
				0x848b8aba,
				0x84b48684,
				0x850acf20,
				0x8538a366,
				0x85487de7,
				0x856832d3,
				0x857bc3bd,
				0x858bb1d0,
				0x85ab6bcc,
				0x85bbc2c8,
				0x85dd2666,
				0x8606f35d,
				0x86171275,
				0x864d4216,
				0x864e5bf0,
				0x867f49eb,
				0x86a16c34,
				0x86a83d68,
				0x86c8e4c3,
				0x86d9ceb3,
				0x87024c72,
				0x874b5974,
				0x874f7064,
				0x877772e0,
				0x87796afa,
				0x8781b51f,
				0x87915c35,
				0x87c1909d,
				0x87de68d5,
				0x87f79f2a,
				0x880ef5e8,
				0x88157112,
				0x8839fac4,
				0x88476b1f,
				0x884f2024,
				0x8860882b,
				0x889451fd,
				0x889a33ea,
				0x88d2bc34,
				0x88e1fd6b,
				0x88e225fd,
				0x88ffcce5,
				0x89003171,
				0x8909e2d4,
				0x8937d8c4,
				0x893ba3a0,
				0x894651c4,
				0x894e3b16,
				0x895e7218,
				0x8995960f,
				0x8a05053b,
				0x8a154872,
				0x8a3df14e,
				0x8a451c5c,
				0x8a5f0dc7,
				0x8a9c2061,
				0x8aac626b,
				0x8ac5cfc9,
				0x8ae084d2,
				0x8ae73fd0,
				0x8ae99900,
				0x8aeba3b7,
				0x8af58425,
				0x8afc333b,
				0x8b15792e,
				0x8b5220a5,
				0x8ba8a66f,
				0x8bbfb426,
				0x8bc159a9,
				0x8bd5c4f7,
				0x8bd7d5ea,
				0x8c195886,
				0x8c48ec59,
				0x8c5adea1,
				0x8c76b862,
				0x8c820201,
				0x8c97bf73,
				0x8cabc97f,
				0x8cb22929,
				0x8cb6d83c,
				0x8cffe91f,
				0x8d088ebc,
				0x8d202bf2,
				0x8d20b51f,
				0x8d85c9fd,
				0x8d998e21,
				0x8da65022,
				0x8dc65046,
				0x8dcb8036,
				0x8de4f79e,
				0x8deb748e,
				0x8dfd01e3,
				0x8e146bff,
				0x8e1e7ccf,
				0x8e220f73,
				0x8e8c7a5b,
				0x8e995498,
				0x8ea015a2,
				0x8ea2348c,
				0x8ea3c5e6,
				0x8ee87647,
				0x8ef8c09d,
				0x8f1b34fb,
				0x8f4a5914,
				0x8f4c4f62,
				0x8f87a849,
				0x8fa6f425,
				0x8fa7758f,
				0x8fa9b49b,
				0x8fb3826a,
				0x8fc476d9,
				0x8fd48cb3,
				0x8fe5b03d,
				0x9008eb42,
				0x9012d675,
				0x902961bc,
				0x902d2c9f,
				0x904bdecf,
				0x90aa8c4f,
				0x90b43798,
				0x90d292d7,
				0x9116fa25,
				0x911cc675,
				0x911dee4c,
				0x914b6c18,
				0x9159ad53,
				0x916c62fe,
				0x91b1ba50,
				0x91cc6389,
				0x91d4219d,
				0x91f17967,
				0x92258fae,
				0x9271a41a,
				0x927a5723,
				0x927f2484,
				0x92a01e24,
				0x92b1e4a4,
				0x92c6b793,
				0x92cc5296,
				0x92d2c561,
				0x92d9b756,
				0x92db8389,
				0x92e05029,
				0x92f001a2,
				0x92f6f2fd,
				0x9303e1a6,
				0x93206b10,
				0x93282ce8,
				0x9330c917,
				0x9344ecec,
				0x936cd0e4,
				0x93948e5e,
				0x93d669c6,
				0x93f175ae,
				0x94110818,
				0x9419253c,
				0x944aab6e,
				0x944d0adf,
				0x947a8766,
				0x94971e80,
				0x94b00453,
				0x94dd7cf9,
				0x94ffcae4,
				0x950434d6,
				0x951654db,
				0x9539c6a4,
				0x954c0ee1,
				0x95583589,
				0x955f607f,
				0x9572598e,
				0x957b7e46,
				0x95c5a22b,
				0x95c95659,
				0x95f357db,
				0x95f6a908,
				0x960fdf10,
				0x961ccc04,
				0x96218fb4,
				0x96283771,
				0x963025ed,
				0x96353472,
				0x964945d9,
				0x966522a9,
				0x968a47d1,
				0x96985633,
				0x96cf6d35,
				0x96d59d8b,
				0x96de904f,
				0x97255a03,
				0x97303d16,
				0x976850d8,
				0x976fbb46,
				0x978dabe5,
				0x97936677,
				0x97a58869,
				0x97ae51ca,
				0x97b477d0,
				0x97c3281b,
				0x97cd38c1,
				0x97dd124c,
				0x97ffa41f,
				0x9817aaaa,
				0x98477c5e,
				0x985e6de3,
				0x9866a5db,
				0x98752042,
				0x987b800e,
				0x988a98a8,
				0x98a41590,
				0x98a45cf6,
				0x98b1c712,
				0x98d449c4,
				0x98e54293,
				0x98ee1acd,
				0x9916784f,
				0x991b6c74,
				0x9969f1ed,
				0x997021a9,
				0x9970602c,
				0x9970981e,
				0x99877535,
				0x998e5402,
				0x99acc034,
				0x99b03830,
				0x99c95119,
				0x99d863c8,
				0x99e3b9c7,
				0x99eae44b,
				0x99fe0df3,
				0x9a1b0cec,
				0x9a1dc7f0,
				0x9a4be536,
				0x9a74201c,
				0x9a753742,
				0x9a7dc49f,
				0x9ae4d12b,
				0x9b064735,
				0x9b1aae33,
				0x9b25e98e,
				0x9b317c53,
				0x9b44f767,
				0x9b7140ef,
				0x9b7d0eb4,
				0x9b862e76,
				0x9b8b9be6,
				0x9b9fc8e2,
				0x9bab2887,
				0x9bb59df3,
				0x9bc6b6c6,
				0x9be6b714,
				0x9be9742e,
				0x9bfef7ce,
				0x9c034ede,
				0x9c2f238e,
				0x9c3ef8ab,
				0x9c5394a2,
				0x9c5d94d2,
				0x9c610e9f,
				0x9c762726,
				0x9c800a2b,
				0x9c8d09c9,
				0x9caf9ab7,
				0x9cdfb1e0,
				0x9ce03108,
				0x9d231778,
				0x9d35663f,
				0x9d5f6034,
				0x9d6c5792,
				0x9d7acaba,
				0x9d7bf225,
				0x9da73454,
				0x9df04bfa,
				0x9dfa9675,
				0x9e5fffcb,
				0x9e830ac7,
				0x9ec80810,
				0x9ec9a37c,
				0x9edc4d3e,
				0x9f408938,
				0x9f4438a1,
				0x9f652194,
				0x9f658eb1,
				0x9f77a13c,
				0x9f77c57f,
				0x9f7f98f0,
				0x9fb5f562,
				0x9fbc1b97,
				0x9fdb74e1,
				0xa0037ea2,
				0xa01d4764,
				0xa05821c3,
				0xa0591be3,
				0xa0680239,
				0xa0743a7a,
				0xa0768594,
				0xa09b3816,
				0xa0a2e767,
				0xa0ee190e,
				0xa10cb4e7,
				0xa1277190,
				0xa138ec7c,
				0xa13d3f8d,
				0xa175f894,
				0xa17e68a8,
				0xa18345de,
				0xa1c9127d,
				0xa1d04cda,
				0xa1e58f89,
				0xa1f54321,
				0xa258a1e7,
				0xa2632fc0,
				0xa276fa49,
				0xa27b3628,
				0xa284d099,
				0xa2937234,
				0xa2942448,
				0xa2995f30,
				0xa2ad7fce,
				0xa2af27fc,
				0xa2bef1d4,
				0xa2cc2989,
				0xa2e165e4,
				0xa32b067b,
				0xa34519ef,
				0xa345b107,
				0xa346ca47,
				0xa3791328,
				0xa38171bc,
				0xa396e074,
				0xa3e0ce51,
				0xa4045ef5,
				0xa46fdbe2,
				0xa47022ac,
				0xa4850630,
				0xa4a3757a,
				0xa4b0d6d0,
				0xa4b340ca,
				0xa4d4093e,
				0xa4de13e3,
				0xa4e7e0a7,
				0xa4f7b696,
				0xa50dddd0,
				0xa515d692,
				0xa529b342,
				0xa53de4d1,
				0xa5c3f740,
				0xa5f2f692,
				0xa6066e14,
				0xa60891f8,
				0xa60f936d,
				0xa61d8f53,
				0xa62143ac,
				0xa625557d,
				0xa640624d,
				0xa640636d,
				0xa6488382,
				0xa665334d,
				0xa67c935f,
				0xa692bac0,
				0xa6b0f2b1,
				0xa6b97967,
				0xa6cf67a8,
				0xa6db990b,
				0xa72060f8,
				0xa7303751,
				0xa73dfef6,
				0xa76eddfb,
				0xa77d3afc,
				0xa7904cef,
				0xa79405a5,
				0xa79cc3df,
				0xa7bfc4c9,
				0xa7ceb3d0,
				0xa7cf17c4,
				0xa7d055f0,
				0xa7de87a3,
				0xa81e7ca7,
				0xa8268e87,
				0xa8476032,
				0xa8514892,
				0xa879bc02,
				0xa8933da1,
				0xa8c10a3d,
				0xa8c85c30,
				0xa8fb693e,
				0xa91dbb39,
				0xa9319e55,
				0xa94a1f3e,
				0xa94dc27b,
				0xa95a8d8f,
				0xa9b04f7d,
				0xa9b621e9,
				0xa9bd0d16,
				0xa9e72ccb,
				0xa9e806b3,
				0xaa00e4cf,
				0xaa05e30f,
				0xaa435f77,
				0xaa4bd054,
				0xaa6f3ffd,
				0xaa9a17aa,
				0xaacc84b0,
				0xaad8f4d1,
				0xaae2760c,
				0xab0f542f,
				0xab2b066d,
				0xab57a27d,
				0xab787ab6,
				0xabb0b493,
				0xabb2ec9a,
				0xac174334,
				0xac3efb24,
				0xac3fd17d,
				0xac4a6a8d,
				0xac57b1a5,
				0xacb1c4f1,
				0xacb46408,
				0xacd6d1ab,
				0xace19e92,
				0xad3ae9fb,
				0xad4a3182,
				0xad533ecc,
				0xad62c8eb,
				0xad66545a,
				0xad679682,
				0xad85358a,
				0xad903651,
				0xad95334c,
				0xadb90f84,
				0xadbc8ae3,
				0xadc2588e,
				0xadca3fdc,
				0xadd86d53,
				0xadfa98da,
				0xae0ead76,
				0xae1411a3,
				0xae361b07,
				0xae575af5,
				0xae588c5f,
				0xae6808fc,
				0xae70bfe4,
				0xaea85e48,
				0xaeb63c4b,
				0xaeb74c05,
				0xaef842bf,
				0xaf0abbf0,
				0xaf0dd721,
				0xaf0e3f9f,
				0xaf23cb13,
				0xaf650a95,
				0xaf7f41f3,
				0xaf8e6723,
				0xaf9e03cd,
				0xafa0536a,
				0xafa09287,
				0xafcaa853,
				0xaffe1f5a,
				0xb0038764,
				0xb01315b4,
				0xb02174a9,
				0xb0b51271,
				0xb0e2f500,
				0xb0effbdd,
				0xb0f63288,
				0xb0f81a16,
				0xb10be2e6,
				0xb114d77b,
				0xb11eb1ed,
				0xb12ad7ef,
				0xb155b61d,
				0xb155fd87,
				0xb157c9e4,
				0xb172109b,
				0xb17cce7e,
				0xb18ddcad,
				0xb197b514,
				0xb1a02702,
				0xb1a9c764,
				0xb1b2b66b,
				0xb1e5edc9,
				0xb21c3926,
				0xb21fa9e0,
				0xb2266adc,
				0xb226e336,
				0xb2274905,
				0xb243e8a2,
				0xb28bb04b,
				0xb2a7a56c,
				0xb2b4cbc8,
				0xb2b71d87,
				0xb321dd82,
				0xb32adca8,
				0xb33f989e,
				0xb34d3ead,
				0xb36e2577,
				0xb388538b,
				0xb38e647c,
				0xb38fb370,
				0xb39b99e2,
				0xb3a1fbb6,
				0xb3b7b784,
				0xb3e59a0e,
				0xb3ef1c92,
				0xb3fab6e0,
				0xb45678b5,
				0xb4670015,
				0xb46b2bee,
				0xb4861eb7,
				0xb48ebc82,
				0xb4978950,
				0xb498df06,
				0xb4a37c24,
				0xb4cda44c,
				0xb4e9561a,
				0xb4fcc9e0,
				0xb519fa90,
				0xb52c7976,
				0xb56c3fb8,
				0xb5730901,
				0xb58259bd,
				0xb584bdf6,
				0xb5856054,
				0xb58be281,
				0xb5978b89,
				0xb5dd1656,
				0xb5e60c50,
				0xb63f6584,
				0xb666fc1a,
				0xb685e324,
				0xb69ac468,
				0xb6d12f0b,
				0xb7063b22,
				0xb716e023,
				0xb7458049,
				0xb7580398,
				0xb7631b41,
				0xb76c1605,
				0xb773c2e1,
				0xb78a2c75,
				0xb78eccb8,
				0xb7be26a9,
				0xb7bfe6ea,
				0xb7d52e66,
				0xb7e6afd4,
				0xb7ffff45,
				0xb82369d4,
				0xb8300543,
				0xb8389439,
				0xb8465008,
				0xb856d4ce,
				0xb861775a,
				0xb870d344,
				0xb8771db6,
				0xb87acfd1,
				0xb87e6de1,
				0xb8a61533,
				0xb8adc43d,
				0xb8cb3475,
				0xb8cfe3e3,
				0xb9127abd,
				0xb92678a6,
				0xb92b06e4,
				0xb936ff48,
				0xb93c9aec,
				0xb94b6276,
				0xb9551550,
				0xb9579ffa,
				0xb9b1c2ed,
				0xb9c4dfdf,
				0xb9d7756c,
				0xb9e09d51,
				0xb9f9d770,
				0xba07360d,
				0xba4270a1,
				0xba49a863,
				0xba869185,
				0xbab56423,
				0xbaea49d0,
				0xbaffedef,
				0xbb188579,
				0xbb2b5cd9,
				0xbb314853,
				0xbb3bf7f2,
				0xbb427a69,
				0xbb42ee78,
				0xbb453063,
				0xbb492bc0,
				0xbb97e555,
				0xbb9b1f5d,
				0xbbac2ce9,
				0xbbbd0cd0,
				0xbbfb2ad9,
				0xbc0f60d5,
				0xbc4649e5,
				0xbcb893c3,
				0xbcc5654d,
				0xbcc7f321,
				0xbcd19c9a,
				0xbcdefab5,
				0xbcf7c688,
				0xbd564507,
				0xbd65a104,
				0xbd7d6804,
				0xbda2fa15,
				0xbda702af,
				0xbdb71f30,
				0xbdc1dc1d,
				0xbddfe09a,
				0xbde0ccd4,
				0xbde777b6,
				0xbe053b7f,
				0xbe643e32,
				0xbe7c85d8,
				0xbe862050,
				0xbeac7c8f,
				0xbec44b8f,
				0xbee0b82c,
				0xbef068da,
				0xbf085fa5,
				0xbf7ce0ee,
				0xbf8909fa,
				0xbf8918de,
				0xbfb7cb54,
				0xbfe4c3dc,
				0xc03976a4,
				0xc06e378e,
				0xc0738078,
				0xc079b265,
				0xc0894af7,
				0xc09bfe41,
				0xc0af9e66,
				0xc0b01adf,
				0xc0d0c304,
				0xc0d710bf,
				0xc104fdc6,
				0xc114a65a,
				0xc135e006,
				0xc13a16f0,
				0xc16217aa,
				0xc162360a,
				0xc174e89a,
				0xc17c1428,
				0xc184dfd2,
				0xc19bc1d2,
				0xc1d16f23,
				0xc1f93e69,
				0xc200c0f1,
				0xc2033e67,
				0xc20633f4,
				0xc2161726,
				0xc2339364,
				0xc243827f,
				0xc297ff25,
				0xc29e736c,
				0xc2e3ab32,
				0xc2e3e902,
				0xc2ff6d4f,
				0xc303b70e,
				0xc3262c87,
				0xc32d74c9,
				0xc3674b40,
				0xc36c9e08,
				0xc375166f,
				0xc381b3e6,
				0xc3e04817,
				0xc3f13fcc,
				0xc40bbb0b,
				0xc41f32bf,
				0xc42c019a,
				0xc4495033,
				0xc44eca22,
				0xc450bd65,
				0xc486b3a9,
				0xc496788b,
				0xc4a5671c,
				0xc4b5775d,
				0xc4c2d702,
				0xc4cd1a66,
				0xc4d260d7,
				0xc4d413b8,
				0xc504912c,
				0xc512cb8e,
				0xc54c0cd2,
				0xc5553c15,
				0xc569d6a1,
				0xc56fc20c,
				0xc577ae9c,
				0xc5891bd6,
				0xc593081d,
				0xc5ac6a0a,
				0xc5b62161,
				0xc5dc419e,
				0xc5de8740,
				0xc5f996e4,
				0xc622d83c,
				0xc660c7aa,
				0xc67f8fca,
				0xc689b79b,
				0xc6922870,
				0xc692fd71,
				0xc6b254ae,
				0xc6e1f6a2,
				0xc6fd3b45,
				0xc6fed6dc,
				0xc71f2e9c,
				0xc732d5b3,
				0x7720344,
				0xc7911492,
				0xc79a987e,
				0xc7c649ff,
				0xc80116bc,
				0xc80467c6,
				0xc82334a0,
				0xc8264238,
				0xc82aa437,
				0xc83b7ca7,
				0xc84984b9,
				0xc84e4eb4,
				0xc89630b8,
				0xc8d5d232,
				0xc91dc9e5,
				0xc93d6143,
				0xc93e7ef7,
				0xc94c4b4c,
				0xc95d4c83,
				0xc9689c03,
				0xc974cdee,
				0xc9a01049,
				0xc9a375d8,
				0xc9ab355d,
				0xc9b3d1a2,
				0xc9da7eba,
				0xc9eb9378,
				0xc9f9fa76,
				0xca167027,
				0xca18c189,
				0xca213512,
				0xca43dfbb,
				0xca5f3c8c,
				0xca655896,
				0xca6d8185,
				0xca8dae8c,
				0xcac428f6,
				0xcad74d94,
				0xcae292d4,
				0xcb0099d4,
				0xcb290ee2,
				0xcb2bf389,
				0xcb2c3311,
				0xcb31aa82,
				0xcb3349a8,
				0xcb74fe41,
				0xcba3b7cb,
				0xcbab0735,
				0xcbc4558e,
				0xcbd626f4,
				0xcbd76893,
				0xcc4b16af,
				0xcc691808,
				0xcc853bb5,
				0xccab2ce8,
				0xccdc8715,
				0xcce52baa,
				0xccf19015,
				0xcd1311a4,
				0xcd1a7f03,
				0xcd4fd8a1,
				0xcd97e151,
				0xcdd8fe00,
				0xcdd9a9e6,
				0xcdeb2be6,
				0xcdf88e2d,
				0xcdff8619,
				0xce1f129d,
				0xce23960a,
				0xce67db4d,
				0xce7e374e,
				0xcea8daab,
				0xceb77eb2,
				0xcec5eb59,
				0xced642c5,
				0xcee6ecac,
				0xcf1e5a76,
				0xcf2f0e21,
				0xcfeca85c,
				0xcff38f71,
				0xd00e75f9,
				0xd02abbb2,
				0xd0357169,
				0xd0df4625,
				0xd0e57090,
				0xd0f2eb57,
				0xd1191a56,
				0xd15dd223,
				0xd186b292,
				0xd1b3e291,
				0xd1c3134d,
				0xd1cca233,
				0xd1cfa7e0,
				0xd1db5101,
				0xd1f5e145,
				0xd219e846,
				0xd2251200,
				0xd22a70cb,
				0xd22d5ad7,
				0xd22e15b8,
				0xd23519d2,
				0xd256393a,
				0xd258b1e2,
				0xd26366ec,
				0xd2786f70,
				0xd2b52967,
				0xd2d24770,
				0xd2e57652,
				0xd2e94182,
				0xd2fd26b7,
				0xd322a87f,
				0xd325cbe5,
				0xd32f8f53,
				0xd334fe8b,
				0xd37a5f68,
				0xd3873805,
				0xd3bef497,
				0xd41b42e1,
				0xd42523cd,
				0xd427b91b,
				0xd4405e08,
				0xd4484c93,
				0xd47c7bb9,
				0xd482b34e,
				0xd4936053,
				0xd4ae5a26,
				0xd4c514bd,
				0xd5094d6d,
				0xd519d463,
				0xd52631f1,
				0xd529e4be,
				0xd5362763,
				0xd588f0a5,
				0xd591aab4,
				0xd593f420,
				0xd59d6b1a,
				0xd5c0bc07,
				0xd5c12a95,
				0xd5f70bea,
				0xd600b572,
				0xd61aecba,
				0xd63183a8,
				0xd64fa0d6,
				0xd67b19e7,
				0xd68a9cdf,
				0xd6aa6804,
				0xd6b12b86,
				0xd6b8ec0c,
				0xd6bf7dbb,
				0xd714ee7c,
				0xd718ad9e,
				0xd71ec202,
				0xd722efa8,
				0xd7695070,
				0xd7744cb7,
				0xd790fc9e,
				0xd7c0143f,
				0xd7ca8d26,
				0xd7ec0edd,
				0xd82eba61,
				0xd84ae7c2,
				0xd8a5878d,
				0xd8bf9a2c,
				0xd8ee57f7,
				0xd8f28047,
				0xd8f7692d,
				0xd8fef003,
				0xd934d62b,
				0xd95a6f7d,
				0xd9601f1f,
				0xd9b2911f,
				0xda17460e,
				0xda5e8452,
				0xda76fe6e,
				0xda94526b,
				0xda9df33d,
				0xdacb82c1,
				0xdafa2489,
				0xdb00b30a,
				0xdb19ec33,
				0xdb24e373,
				0xdb60ad20,
				0xdb86cb89,
				0xdb8b3fc0,
				0xdb8f1a1a,
				0xdbf285f4,
				0xdc280c4e,
				0xdc551884,
				0xdc638ff8,
				0xdc6b48ca,
				0xdc6b5d07,
				0xdc6eae80,
				0xdc8f32e1,
				0xdca9a809,
				0xdcb0a8c7,
				0xdcc78b83,
				0xdce32fba,
				0xdcf1ed25,
				0xdcff71e4,
				0xdd12d554,
				0xdd433942,
				0xdd4b2236,
				0xdd8abbcf,
				0xdd9a1802,
				0xdd9ea431,
				0xdda42ad2,
				0xddb23012,
				0xdded2bb9,
				0xde0192e4,
				0xde08a82e,
				0xde4cbc3a,
				0xde6c3ffe,
				0xde83a424,
				0xde91e699,
				0xde962965,
				0xde9950af,
				0xdea4ebf4,
				0xdee74aff,
				0xdeeab297,
				0xdef387de,
				0xdef682af,
				0xdf217cdc,
				0xdf31c32b,
				0xdf325e57,
				0xdf59ff80,
				0xdf5f9f7f,
				0xdf6e8ace,
				0xdf9841d7,
				0xdfb0893d,
				0xdfd03ff2,
				0xdfd5aaa1,
				0xdfdb51b8,
				0xdff68a19,
				0xdffe95c6,
				0xe013a8b3,
				0xe0264f5d,
				0xe0311180,
				0xe0415048,
				0xe05d9217,
				0xe08ef8f2,
				0xe0b17fe0,
				0xe0c3d6ce,
				0xe0ed938f,
				0xe1497820,
				0xe1583df5,
				0xe15ca04a,
				0xe16f99fb,
				0xe188fb85,
				0xe1a1f963,
				0xe1a367ad,
				0xe1af1b43,
				0xe1b6fe0c,
				0xe1b9ffad,
				0xe1c17f6f,
				0xe1c21b3d,
				0xe1e4c1ca,
				0xe1e50f97,
				0xe2100c79,
				0xe211190e,
				0xe22a202a,
				0xe22b4cd9,
				0xe22f390b,
				0xe231f917,
				0xe258d3ce,
				0xe2ba016f,
				0xe2cf7922,
				0xe2d26e9f,
				0xe2eb322b,
				0xe2ee52b7,
				0xe2fba8d8,
				0xe32c6055,
				0xe33dcac4,
				0xe35b8830,
				0xe37a5f0f,
				0xe393768e,
				0xe39b04ac,
				0xe3ce09e2,
				0xe3d693e9,
				0xe3d71673,
				0xe40a0f8e,
				0xe4212e8d,
				0xe43d331b,
				0xe44d5cec,
				0xe4774712,
				0xe49edebd,
				0xe4a13b99,
				0xe4afb8d2,
				0xe4b0ae85,
				0xe4d12678,
				0xe4df846a,
				0xe508f544,
				0xe513c086,
				0xe51f88d9,
				0xe539c011,
				0xe54fb6c7,
				0xe55a7962,
				0xe567d04b,
				0xe573997b,
				0xe5ba1f6d,
				0xe5c038ba,
				0xe60d45ab,
				0xe62944fb,
				0xe63654e3,
				0xe661157e,
				0xe6bb31ab,
				0xe6c76e5e,
				0xe6cb661e,
				0xe6eae263,
				0xe6fa7770,
				0xe6fc3f54,
				0xe7088147,
				0xe70ed8f9,
				0xe786d826,
				0xe7925523,
				0xe79e68e7,
				0xe7b10066,
				0xe7c5df10,
				0xe7cb7050,
				0xe7d14cab,
				0xe7d3f252,
				0xe7d9dc8e,
				0xe7daa6e6,
				0xe7df9d40,
				0xe7f419bf,
				0xe8147d73,
				0xe817f25b,
				0xe81bda47,
				0xe8617484,
				0xe8842e39,
				0xe8ac7f0f,
				0xe8dad32f,
				0xe8e8aada,
				0xe9010c78,
				0xe918fefb,
				0xe92bfed2,
				0xe92e717e,
				0xe9501c24,
				0xe979d6cd,
				0xe9ddefbf,
				0xe9e2ec92,
				0xe9f7398f,
				0xe9f788ec,
				0xea01a75c,
				0xea52c1db,
				0xea5f89bc,
				0xea85b372,
				0xea892147,
				0xea909ab4,
				0xea98ac78,
				0xea9dab4c,
				0xeacd3c4b,
				0xeaf6c20a,
				0xeafbfa28,
				0xeb133ed3,
				0xeb25e6fc,
				0xeb278b23,
				0xeb2e00e0,
				0xeb4eb54e,
				0xeb59f0c3,
				0xeb7d0265,
				0xeb97ff8a,
				0xeb9f2052,
				0xeba60087,
				0xebcaa414,
				0xebe30bbb,
				0xec013325,
				0xec04c9b8,
				0xec06e146,
				0xec087846,
				0xec1cb97c,
				0xec2d6c2c,
				0xec42b38e,
				0xec48c402,
				0xec5d832a,
				0xec6f1f55,
				0xec9758cf,
				0xece03f63,
				0xecf7e8a8,
				0xed0a985e,
				0xed1357f5,
				0xed1840d2,
				0xed25f13b,
				0xed2e79f0,
				0xed3f3ad6,
				0xed4dfca2,
				0xed82c057,
				0xed92db77,
				0xeda770f8,
				0xeda96f47,
				0xedcdbe97,
				0xedd7c0d3,
				0xede36dc8,
				0xedeb881e,
				0xedf175e9,
				0xedf5cd3c,
				0xee01991c,
				0xee04e7a6,
				0xee0bf0c2,
				0xee1b2337,
				0xee36a8c9,
				0xee5616df,
				0xee57994a,
				0xee5b4c1c,
				0xee5ebc97,
				0xee5f8e23,
				0xee6d0843,
				0xee85163e,
				0xee8a4608,
				0xee8c528f,
				0xeea954bb,
				0xeefa0f14,
				0xef366503,
				0xef4b5cd0,
				0xef4fcfb5,
				0xef6d0839,
				0xef6e4362,
				0xef97ec60,
				0xefa64001,
				0xefaae110,
				0xefb5364b,
				0xefc4165a,
				0xf013c580,
				0xf017500d,
				0xf03beb5f,
				0xf03c985c,
				0xf042f402,
				0xf046ea37,
				0xf0481cc3,
				0xf0a61994,
				0xf0ae274e,
				0xf10c7160,
				0xf123e9f6,
				0xf12d5114,
				0xf14fa119,
				0xf15f72b2,
				0xf15fb3dd,
				0xf16de1ee,
				0xf1844d22,
				0xf1858017,
				0xf1c3c4ca,
				0xf1cc086e,
				0xf22a4ce0,
				0xf23d6019,
				0xf2775005,
				0xf27c4b96,
				0xf2b2e482,
				0xf2bd35bb,
				0xf2bde7de,
				0xf2be7d80,
				0xf3004a06,
				0xf32a6f24,
				0xf3445f43,
				0xf3565180,
				0xf3584679,
				0xf360f3d8,
				0xf394a932,
				0xf3aa2136,
				0xf3ae2877,
				0xf3bf3eb6,
				0xf3c33285,
				0xf3ca5bcb,
				0xf3d8a3c7,
				0xf4053ec1,
				0xf4092dd5,
				0xf4385d0d,
				0xf43fc5e6,
				0xf48428cd,
				0xf4a0ea8f,
				0xf4f1511e,
				0xf53a45fd,
				0xf561110a,
				0xf5676424,
				0xf57433a5,
				0xf578c00d,
				0xf5919088,
				0xf5994263,
				0xf5a7a176,
				0xf5af9d4a,
				0xf5c39f51,
				0xf5d66055,
				0xf62881d0,
				0xf62bc268,
				0xf6361ab7,
				0xf65181cf,
				0xf66f582f,
				0xf68387e8,
				0xf69bf55a,
				0xf6b49cae,
				0xf6ef38b3,
				0xf6ff3f3d,
				0xf71e3328,
				0xf724026d,
				0xf72be7e8,
				0xf73506d3,
				0xf7bab7db,
				0xf7f3479f,
				0xf7fcf988,
				0xf80e2102,
				0xf8275b68,
				0xf8357b46,
				0xf85dd961,
				0xf8bd70b3,
				0xf9132f55,
				0xf91d716c,
				0xf92bdd8a,
				0xf9372cc5,
				0xf9627c39,
				0xf9980bc3,
				0xf9b8b7a0,
				0xfa11bea2,
				0xfa3d47fa,
				0xfa4d7a73,
				0xfa546702,
				0xfa686c0e,
				0xfa7bcf6a,
				0xfae5c85d,
				0xfaeab60d,
				0xfaf5aa0c,
				0xfaf7a1ba,
				0xfb454066,
				0xfb4b9bb7,
				0xfb50d934,
				0xfb631122,
				0xfb6b8a4f,
				0xfb74d039,
				0xfb964e73,
				0xfba10656,
				0xfba21596,
				0xfbdd1813,
				0xfc022e61,
				0xfc0243f5,
				0xfc1c3dcb,
				0xfc27b091,
				0xfc2a1c15,
				0xfc43b487,
				0xfc612f85,
				0xfc818f56,
				0xfcb60416,
				0xfce1e2b7,
				0xfcef5842,
				0xfd17bd49,
				0xfd21dcef,
				0xfd26b232,
				0xfd3a6691,
				0xfd531f0c,
				0xfd595b36,
				0xfd6166a5,
				0xfd693ffe,
				0xfd6c9f0f,
				0xfd710be1,
				0xfd7a813a,
				0xfd8a3806,
				0xfd8dc6e8,
				0xfdbea6e8,
				0xfdbeb5b0,
				0xfdcc6b19,
				0xfdeb82cf,
				0xfe401883,
				0xfe64a913,
				0xfe692197,
				0xfe6e928a,
				0xfe9fd22c,
				0xfeb8b69b,
				0xfefa2a3a,
				0xff084195,
				0xff1f92a2,
				0xff2ea296,
				0xff374a2b,
				0xff426713,
				0xff7d7d88,
				0xff93aa35,
				0xffa54e54,
				0xffac631b,
				0xffdc3b30,
				0xfffca75c };
			DWORD Model = Obj[random];
			Object ObJect = OBJECT::CREATE_OBJECT(Model, SPosition.x, SPosition.y, SPosition.z, 1, 1, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Model);
			if (ENTITY::DOES_ENTITY_EXIST(ObJect))
			{
				ENTITY::SET_ENTITY_RECORDS_COLLISIONS(ObJect, true);
				for (float f = 0.0f; f < 75.0f; f++) {
					if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(ObJect))
						ENTITY::APPLY_FORCE_TO_ENTITY(ObJect, 1, Dir.x*10.0f, Dir.y*20.0f, Dir.z*10.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);
					WAIT(0);
				}
			}
		}
	}
}


void Features::animateallPlayer(char* dict, char* anim) {
	for (int i = 0; i < 32; i++)
	{
		if (PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i) == PLAYER::PLAYER_PED_ID()) continue;
		{
			Ped targ_ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(targ_ped, 1);
			int sceneID = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f);
			STREAMING::REQUEST_ANIM_DICT(dict);
			if (STREAMING::HAS_ANIM_DICT_LOADED(dict))
			{
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(targ_ped, 1);
				int sceneID = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f);
				NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(targ_ped, sceneID, dict, anim, 8.0f, -8.0f, 269, 0, 100.0f, 0);
				NETWORK::NETWORK_START_SYNCHRONISED_SCENE(sceneID);
			}
		}
	}
}

bool Features::namesesp = false;
void Features::NameSP(bool toggle) {
	if (namesesp)
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		for (int i = 0; i < 32; i++)
		{
			Player playerHandle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
			Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
			Vector3 playerCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
			char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

			if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
			{
				float x1;
				float y1;

				BOOL screenCoords = GRAPHICS::_WORLD3D_TO_SCREEN2D(handleCoords.x, handleCoords.y, handleCoords.z, &x1, &y1);

				std::string playerName = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

				std::string nameSetupRed = "~HUD_COLOUR_RED~" + playerName;
				std::string nameSetupGreen = "~HUD_COLOUR_GREEN~" + playerName;

				char* playerInfoRed = new char[nameSetupRed.length() + 1];
				char* playerInfoGreen = new char[nameSetupGreen.length() + 1];

				std::strcpy(playerInfoRed, nameSetupRed.c_str());
				std::strcpy(playerInfoGreen, nameSetupGreen.c_str());

				UI::SET_TEXT_FONT(7);
				UI::SET_TEXT_SCALE(0.0, 0.40);
				UI::SET_TEXT_COLOUR(0, 255, 0, 255);
				UI::SET_TEXT_CENTRE(0);
				UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
				UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
				UI::_SET_TEXT_ENTRY("STRING");
				if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(playerPed, playerHandle, 17))
				{
					UI::_ADD_TEXT_COMPONENT_STRING(playerInfoGreen);
				}
				else
				{
					UI::_ADD_TEXT_COMPONENT_STRING(playerInfoRed);
				}
				UI::_DRAW_TEXT(x1, y1);
				UI::SET_TEXT_OUTLINE();
				UI::SET_TEXT_DROPSHADOW(5, 0, 78, 255, 255);
			}
		}
	}
}

bool Features::Explodegunpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::explodegunl(Player target)
{
	if (Explodegunpl)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer))) {
			float Tmp[6];
			WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), (Vector3*)Tmp);
			if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
			{
				FIRE::ADD_EXPLOSION(Tmp[0], Tmp[2], Tmp[4], Menu::Settings::Explosionfick, Menu::Settings::ficksize, true, false, 0);
			}
		}
	}
}

bool Features::Explodegun = false;
void Features::explodegun(bool toggle)
{
	if (Explodegun)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
			float Tmp[6];
			WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), (Vector3*)Tmp);
			if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
			{
				FIRE::ADD_EXPLOSION(Tmp[0], Tmp[2], Tmp[4], Menu::Settings::Explosionfick, Menu::Settings::ficksize, true, false, 0);
			}
		}
	}
}

bool Features::fixfire = false;
void Features::firefix(bool toggle)
{
	if (fixfire)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
			float Tmp[6];
			WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), (Vector3*)Tmp);
			if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
			{
				FIRE::ADD_EXPLOSION(Tmp[0], Tmp[2], Tmp[4], 3, 0, true, false, 0);
			}
		}
	}
}



bool Features::editmoney = false;
void Features::MoneyEdit(bool toggle) {

	int towallet;
	int tobank;
	int iVar2 = INT_MAX;

	if (globalHandle(2599118).As<int>() == -1) {
		globalHandle(2599118) = NETWORKCASH::NETWORK_GET_VC_BANK_BALANCE();
	}
	if (globalHandle(2599119).As<int>() == -1) {
		globalHandle(2599119) = NETWORKCASH::NETWORK_GET_VC_WALLET_BALANCE(-1);
	}
	towallet = 0;
	tobank = 0;
	if (globalHandle(2599118).Get<int>() > 0) {
		if (globalHandle(2599118).Get<int>() >= &iVar2) {
			tobank = iVar2;
		}
		else {
			tobank = iVar2 - (iVar2 - globalHandle(2599118).As<int>());
		}
		iVar2 -= tobank;
	}
	if (iVar2 > 0) {
		if (globalHandle(2599119).Get<int>() > 0) {
			if (globalHandle(2599119).Get<int>() >= &iVar2) {
				towallet = iVar2;
			}
			else {
				towallet = iVar2 - (iVar2 - globalHandle(2599119).As<int>());
			}
			iVar2 -= towallet;
		}
	}
	invoke<Void>(536737010038877744, towallet, tobank);
	globalHandle(2599118) = towallet;
	globalHandle(2599119) = tobank;


	if (Menu::Option("~w~Banknotes"))Features::PTFXCALL("scr_ornate_heist", "scr_ornate_heist", "scr_heist_ornate_banknotes");


}

bool Features::fixfire2[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::firefix2(Player target)
{
	if (fixfire2)
	{
		auto ped = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		if (PED::IS_PED_SHOOTING(ped)) {
			float Tmp[6];
			WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(ped, (Vector3*)Tmp);
			if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0)
			{
				FIRE::ADD_EXPLOSION(Tmp[0], Tmp[2], Tmp[4], 3, 0, true, false, 0);
			}
		}
	}
}

bool Features::loopfick[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::fickloop(Player target) {

	if (loopfick)
	{

		PED::CLONE_PED(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1, 1, 1);
	}

}

bool Features::particle1 = false;
void Features::ParticlE1(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_rcbarry2");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_clown_appears", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle2 = false;
void Features::ParticlE2(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_indep_fireworks");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_indep_firework_trailburst", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle3 = false;
void Features::ParticlE3(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("proj_xmas_firework");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_firework_xmas_burst_rgw", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle4 = false;
void Features::ParticlE4(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("proj_xmas_firework");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_firework_xmas_spiral_burst_rgw", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle5 = false;
void Features::ParticlE5(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_ornate_heist");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_heist_ornate_banknotes", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle6 = false;
void Features::ParticlE6(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_fbi4");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_fbi4");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_fbi4_trucks_crash", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle7 = false;
void Features::ParticlE7(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry1");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_rcbarry1");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_alien_disintegrate", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle8 = false;
void Features::ParticlE8(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry1");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_rcbarry1");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_alien_teleport", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle9 = false;
void Features::ParticlE9(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_agencyheistb");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_agencyheistb");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_agency3b_elec_box", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle10 = false;
void Features::ParticlE10(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_fbi5a");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_fbi5a");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_fbi5_ped_water_splash", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle11 = false;
void Features::ParticlE11(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_fbi5a");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_fbi5a");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("water_splash_ped_bubbles", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle12 = false;
void Features::ParticlE12(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_finalec2");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_finalec2");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_finale2_blood_entry", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle13 = false;
void Features::ParticlE13(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_martin1");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_martin1");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_sol1_sniper_impact", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle14 = false;
void Features::ParticlE14(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("core_snow");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("cs_mich1_spade_dirt_throw", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle15 = false;
void Features::ParticlE15(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_michael2");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_michael2");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_mich2_blood_stab", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle16 = false;
void Features::ParticlE16(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_michael2");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_michael2");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_abattoir_ped_sliced", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle17 = false;
void Features::ParticlE17(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcpaparazzo1");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_rcpaparazzo1");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_rcpap1_camera", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle18 = false;
void Features::ParticlE18(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_familyscenem");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_familyscenem");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_meth_pipe_smoke", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}

bool Features::particle19 = false;
void Features::ParticlE19(bool toggle)
{
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_SHOOTING(playerPed)) {
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_reburials");
			GRAPHICS::_USE_PARTICLE_FX_ASSET_NEXT_CALL("scr_reburials");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_burial_dirt", coords.x, coords.y, coords.z, 0.f, 0.f, 0.f, 1.f, 0, 0, 0);
		}
	}
}



decltype(Features::player_alpha) Features::player_alpha = 255;

bool Features::moneyrain001 = false;
void Features::MoneyRain001(bool toggle)
{
	if ((timeGetTime() - Features::TimePD1) > Features::DropDelay)
		STREAMING::REQUEST_MODEL(Features::bagHash);
	Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 0.0, 10.0);
	int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
	int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


	STREAMING::REQUEST_MODEL(Features::bagHash);
	while (!STREAMING::HAS_MODEL_LOADED(Features::bagHash))
		WAIT(0);
	if (STREAMING::HAS_MODEL_LOADED(Features::bagHash))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pp.x + offset1, pp.y + offset2, pp.z, 0, Features::DropAmount1, Features::bagHash, false, true);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
	}
	Features::TimePD1 = timeGetTime();
}

bool Features::moneyrain001all = false;
void Features::MoneyRain001all(bool toggle)
{

	for (int i = 0; i < 32; i++)
	{

		int excludeMe = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		if (excludeMe > 0 && excludeMe != PLAYER::PLAYER_PED_ID())
		{

			STREAMING::REQUEST_MODEL(Features::bagHash);
			Vector3 pp = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), 0.0, 0.0, 10.0);
			int offset1 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);
			int offset2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 15);


			STREAMING::REQUEST_MODEL(Features::bagHash);
			while (!STREAMING::HAS_MODEL_LOADED(Features::bagHash))
				WAIT(0);
			if (STREAMING::HAS_MODEL_LOADED(Features::bagHash))
			{
				Hooking::create_ambient_pickup(0xDE78F17E, &pp, 0, Features::DropAmount1, Features::bagHash, false, true);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
			}

		}
	}

}








bool Features::CarClownLoop;
bool Features::Carfireworkloop;
bool Features::Caralien1;
bool Features::Caralien2;
bool Features::Carelectric;
bool Features::CarLightning;
bool Features::moneyeffect15;
bool Features::ghooosoot;
float Features::carPTFXsize = 0.4;



bool Features::ClownLoop = false;
bool Features::fireworkloop = false;
bool Features::alien1 = false;
bool Features::alien2 = false;
bool Features::electric = false;
bool Features::watereffect = false;
bool Features::electricberox = false;
bool Features::smokeeffect = false;
bool Features::ghosttif = false;

bool Features::bloodeffect = false;
bool Features::moneyeffect = false;

bool Features::ClownLoop1 = false;
bool Features::fireworkloop2 = false;
bool Features::alien13 = false;
bool Features::alien24 = false;
bool Features::electric5 = false;
bool Features::watereffect6 = false;
bool Features::smokeeffect7 = false;
bool Features::bloodeffect8 = false;
bool Features::moneyeffect9 = false;
bool Features::moneyeffect10 = false;

bool Features::mgun = false;
void Features::Mcgun(bool toggle) // Für Kopf
{
	float Tmp[6];
	WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), (Vector3*)Tmp);
	if (Tmp[0] != 0 || Tmp[2] != 0 || Tmp[4] != 0) {
		ENTITY::FREEZE_ENTITY_POSITION(OBJECT::CREATE_OBJECT(4146332269, Tmp[0], Tmp[2], Tmp[4], 1, 0, 0), 1);
	}
}


bool Features::ghostrider = false;
void Features::firerider(bool toggle)
{
	if (toggle == true)
	{
		WheelPTFX("scr_agencyheist", "scr_fbi_dd_breach_smoke");
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0x796e);
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0x8cbd);
		PTFXCALLBoneless("scr_agencyheist", "scr_agencyheist", "scr_fbi_dd_breach_smoke", 0xdead);

	}
	else
	{
		Vehicle Vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Vehicle);
		ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Vehicle, 0, 1);
		VEHICLE::DELETE_VEHICLE(&Vehicle);
	}
}

bool Features::moneyGundel = false;
void Features::MoneyGunDel(bool toggle) {
	Ped playerPed = PLAYER::PLAYER_PED_ID();

	if (PED::IS_PED_SHOOTING(playerPed))
	{
		Vector3 coords;
		if (WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(playerPed, &coords))
		{
			STREAMING::REQUEST_MODEL(Features::bagHash);
			if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
				WAIT(0);
			}
			else {

				Hooking::create_ambient_pickup(0x1E9A99F8, &coords, 0, Features::DropAmount3, Features::bagHash, FALSE, TRUE);

				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
			}
		}

	}
}
bool Features::LASERSIGHT;
void Features::lasersight(bool toggle)
{
	auto camrot = CAM::GET_GAMEPLAY_CAM_ROT(0);
	auto camdir = rot_to_direction(&camrot);
	auto start = ENTITY::GET_ENTITY_COORDS(WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID()), 1);

	auto end = add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&camdir, 10.f));
	if (ENTITY::DOES_ENTITY_EXIST(WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID())) && CONTROLS::IS_CONTROL_PRESSED(2, INPUT_AIM))
		GRAPHICS::DRAW_LINE(start.x, start.y, start.z, end.x, end.y, end.z, 255, 0, 0, 255);
}

bool Features::cashself1 = false;
void Features::CashSelf1(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();
	if ((timeGetTime() - Features::TimePD1) > Features::DropDelay)
	{

		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			playerPosition.z = playerPosition.z + Features::DropHeight;
			//Vector3 pos = { playerPosition.x, playerPosition.y, playerPosition.z + 0.5 / 10 }; // i cant use custom method when i tri
			for (int i = 0; i < Features::Bags; i++)
			{ // you tried this in game? no this is the right kurwa, look, you can't use pos.x because you not using floats declarations, now looks good, ( but drophight is 
				Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, 0, Features::DropAmount1, Features::bagHash, FALSE, TRUE);
				// hmm, try that please
			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
		}

		Features::TimePD1 = timeGetTime();

	}
}



bool Features::cashrandhgg = false;
void Features::cashrandhggh(bool toggle)
{
	Ped iPed = PLAYER::PLAYER_PED_ID();
	if ((timeGetTime() - Features::TimePD1) > Features::DropDelay)
	{

		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			for (int i = 0; i < Features::Bags; i++)
			{
				int ammount = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2500);// fertig :D
				Hooking::create_ambient_pickup(0xDE78F17E, &playerPosition, Features::DropDelay, ammount, Features::bagHash, FALSE, TRUE);


			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
		}

		Features::TimePD1 = timeGetTime();

	}
}

bool Features::delop = false;
void Features::lolop(bool toggle)
{

	if ((timeGetTime() - Features::TimePD1) > 1000)
	{

		Ped iPed = PLAYER::PLAYER_PED_ID();

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		if (!STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"))) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE); // which method? moneybag prop on object spawn
			OBJECT::CREATE_AMBIENT_PICKUP(0xDE78F17E, pos.x, pos.y, pos.z + 20.0f / 10, 0, 0, GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"), FALSE, TRUE);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("prop_alien_egg_01"));
		}

		Features::TimePD1 = timeGetTime();

	}

	if ((timeGetTime() - Features::TimePD5) > 1000) { // Delay
		Any var0 = 0ul;
		int var3 = 312105838;
		int bankVal = false ? 4 : 1;
		UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&var0, 1474183246, var3, 1445302971, 10000, bankVal);
		UNK3::_NETWORK_SHOP_CHECKOUT_START(var0);

		Features::TimePD5 = timeGetTime();

		int iVar0;
		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MP0_MONEY_EARN_JOBS"), &iVar0, -1);
		Hooking::stat_set_int($("MP0_MONEY_EARN_JOBS"), iVar0 + Features::amount405, 1);


	}


}

bool Features::geotit[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::titgeo(Player target)
{
	Ped iPed = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(target);
	if ((timeGetTime() - Features::TimePD2) > Features::DropDelay)
	{

		STREAMING::REQUEST_MODEL(Features::bagHash);
		if (!STREAMING::HAS_MODEL_LOADED(Features::bagHash)) {
			WAIT(0);
		}
		else {
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
			pos.z = pos.z + Features::DropHeight;
			for (int i = 0; i < Features::Bags; i++)
			{
				int ammount = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2500);// fertig :D
				Hooking::create_ambient_pickup(0xDE78F17E, &pos, Features::DropDelay, ammount, Features::bagHash, FALSE, TRUE);

			}
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Features::bagHash);
		}

		Features::TimePD2 = timeGetTime();

	}
}







bool Features::phonedisable = false;
void Features::disablephone() {
	CONTROLS::DISABLE_CONTROL_ACTION(2, INPUT_PHONE, true);
	MOBILE::DESTROY_MOBILE_PHONE();
}

void setupdraw()
{
	UI::SET_TEXT_FONT(0);
	UI::SET_TEXT_SCALE(0.4f, 0.4f);
	UI::SET_TEXT_COLOUR(255, 255, 255, 255);
	UI::SET_TEXT_WRAP(0.0f, 1.0f);
	UI::SET_TEXT_CENTRE(0);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
}
void drawstring(char* text, float X, float Y)
{
	UI::_SET_TEXT_ENTRY("STRING");
	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
	UI::_DRAW_TEXT(X, Y);
}
bool Features::DisplayFPS = false;
void Features::featureDisplayFPS(bool toggle)
{
	float LastFrameTime = GAMEPLAY::GET_FRAME_TIME();
	int getFPS = (1.0f / LastFrameTime);
	char FPStext[60];
	snprintf(FPStext, sizeof(FPStext), "FPS: ~r~ %d", getFPS);
	setupdraw();
	UI::SET_TEXT_FONT(6);
	UI::SET_TEXT_SCALE(0.5f, 0.5f);
	UI::SET_TEXT_COLOUR(255, 255, 255, 255);
	UI::SET_TEXT_CENTRE(0);
	drawstring(FPStext, 0.020f, 0.010f);
}


void Features::patchEvent(eRockstarEvent e, bool toggle) {
	if (EventPtr.size() == 0) return;
	static const BYTE ret = 0xC3;
	BYTE* ptr = (BYTE*)EventPtr[e];
	if (b) {
		if (EventRestore[e] == 0) EventRestore[e] = ptr[0];
		*ptr = ret;
	}
	else if (EventRestore[e] != 0) *ptr = EventRestore[e];
}
//void Features::defuseEvent(eRockstarEvent e, bool toggle)
//{
//	static const unsigned char retn = 0xC3;
//	char* p = (char*)EventPtr[e];
//	if (toggle)
//	{
//		if (EventRestore[e] == 0)
//			EventRestore[e] = p[0];
//		*p = retn;
//	}
//	else
//	{
//		if (EventRestore[e] != 0)
//			*p = EventRestore[e];
//	}
//}



bool Features::bypass = false;
void Features::moneyBypass()
{
	Features::patchEvent(REVENT_REQUEST_PICKUP_EVENT, true);
}

bool Features::explosion = false;
void Features::antiexplosion()
{
	Features::patchEvent(REVENT_EXPLOSION_EVENT, true);
}
bool Features::profire = false;
void Features::antifire()
{
	Features::patchEvent(REVENT_FIRE_EVENT, true);
}
bool Features::revweapons = false;
void Features::remoweapons()
{
	Features::patchEvent(REVENT_REMOVE_ALL_WEAPONS_EVENT, true);
}
bool Features::remote = false;
void Features::inforemote()
{
	Features::patchEvent(REVENT_REMOTE_SCRIPT_INFO_EVENT, true);
}
bool Features::report = false;
void Features::reattacks()
{
	Features::patchEvent(REVENT_REPORT_MYSELF_EVENT, true);
}
bool Features::votes = false;
void Features::kickvotes()
{
	Features::patchEvent(REVENT_KICK_VOTES_EVENT, true);
}
bool Features::att = false;
void Features::antiattacks()
{
	Features::patchEvent(REVENT_KICK_VOTES_EVENT, true);
}
bool Features::WEATHER = false;
void Features::WEATHERtacks()
{
	Features::patchEvent(REVENT_GAME_WEATHER_EVENT, true);
}
bool Features::WANTED = false;
void Features::WANTEDLEVEL()
{
	Features::patchEvent(REVENT_ALTER_WANTED_LEVEL_EVENT, true);
}

bool Features::WANTED_LEVEL = false;
void Features::WANTEDLEVELL()
{
	Features::patchEvent(REVENT_ALTER_WANTED_LEVEL_EVENT, true);
}

bool Features::RAGDOLL = false;
void Features::REQUESTEVENT()
{
	Features::patchEvent(REVENT_RAGDOLL_REQUEST_EVENT, true);
}

bool Features::TAUNT = false;
void Features::PLAYERTAUNT()
{
	Features::patchEvent(REVENT_PLAYER_TAUNT_EVENT, true);
}

bool Features::NETWORK = false;
void Features::INCREMENT()
{
	Features::patchEvent(REVENT_NETWORK_INCREMENT_STAT_EVENT, true);
}

bool Features::NETWORKCRC = false;
void Features::NETWORK_CRC()
{
	Features::patchEvent(REVENT_NETWORK_CRC_HASH_CHECK_EVENT, true);
}


bool Features::featurePlayermoneyDrop1 = false;
void Features::bPlayerExists(bool toogle) {
	if (featurePlayermoneyDrop1)
	{
		for (int i = 0; i < 3; i++)
			if (bPlayerExists)
			{
				char statNameFull[32];
				sprintf_s(statNameFull, "SP%d_TOTAL_CASH", i);
				Hash hash = GAMEPLAY::GET_HASH_KEY(statNameFull);
				int val;
				STATS::STAT_GET_INT(hash, &val, -1);
				val += 5000;
				Hooking::stat_set_int(hash, val, 1);
				Vector3 ENTPOS = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
				Hooking::create_ambient_pickup(GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_VARIABLE"), &ENTPOS, 0, 500000, 1, false, true);
			}
	}
}

bool Features::playermon[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::monplayer(Player target) {
	if (playermon)
	{

		if (monplayer)
		{
			char statNameFull[32];
			sprintf_s(statNameFull, "SP%d_TOTAL_CASH", PLAYER::GET_PLAYER_PED_SCRIPT_INDEX);
			Hash hash = GAMEPLAY::GET_HASH_KEY(statNameFull);
			int val;
			STATS::STAT_GET_INT(hash, &val, -1);
			val += 5000;
			Hooking::stat_set_int(hash, val, 1);
			Vector3 ENTPOS = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 0);
			OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_VARIABLE"), ENTPOS.x, ENTPOS.y, ENTPOS.z, 0, 500000, 1, false, true);
		}
	}
}

int TimePD8;
bool Features::moneydropp = false;
void Features::dildomoneylocal(bool toogle) {
	Ped iPed = PLAYER::PLAYER_PED_ID();
	{

		if ((timeGetTime() - TimePD8 > 1)) // Time between drops
		{
			void CashDrop(int pedHandle, char* CashModel, int Value);

			{

				Vector3 coords = ENTITY::GET_ENTITY_COORDS(iPed, FALSE);
				//int CashHash = -422877666; // prop_cs_dildo
				//int CashHash = -1803909274;  // prop_paper_bag_small = -1803909274
				int CashHash = -1666779307;  // prop_paper_bag_small = -1803909274
				int PickupHash = GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_WALLET");
				STREAMING::REQUEST_MODEL(CashHash);
				while (!STREAMING::HAS_MODEL_LOADED(CashHash)) WAIT(0);
				OBJECT::CREATE_AMBIENT_PICKUP(PickupHash, coords.x, coords.y, coords.z, 0, 2500, CashHash, false, true);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(CashHash);
			}
			Features::TimePD8 = timeGetTime();
		}
	}
}

/*bool Features::Bossmode = false;
void Features::BoosMode(bool toggle)
//void BoosMode()//lol boss mode
{
	bool exploded = false;
	int LocalID = PLAYER::PLAYER_ID();
	int LocalPED = PLAYER::PLAYER_PED_ID();
	for (int i = 0; i < 18; i++)
	{
		if (PLAYER::IS_PLAYER_TARGETTING_ENTITY(i, LocalPED) && !exploded)
		{
			Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), true);
			//FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 27, 5.0, 1, 0, 0, false); //here
			FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 0, 1000.f, true, false, 0.f);
			exploded = true;
		}
	}
}*/

/*bool Features::forcedefense;
void Features::ForceDefense(bool toggle)
{
	bool exploded = false;
	int LocalID = PLAYER::PLAYER_ID();
	int LocalPED = PLAYER::PLAYER_PED_ID();
	for (int i = 0; i < 30; i++)
	{
		if (PLAYER::IS_PLAYER_TARGETTING_ENTITY(i, LocalPED) && !exploded)
		{
			Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i), true);
			FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 1, 5.0, 0, 1, 0); //Add explosion might not explode as your using different / old way
			exploded = true;
		}
	}
}*/

bool Features::Objectgunpl[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::objectgunpl(Player target)// this works
{
	if (Objectgunpl)
	{
		if (PED::IS_PED_SHOOTING(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer)))
		{
			Vector3 Rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
			Vector3 Dir = rot_to_direction(&Rot);
			Vector3 CPosition = CAM::GET_GAMEPLAY_CAM_COORD();
			Vector3 PlayerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer), 1);
			float spawnDistance = get_distance(&CPosition, &PlayerPosition);
			spawnDistance += 2;
			Vector3 SPosition = add(&CPosition, &multiply(&Dir, spawnDistance));
			int random = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2585);
			const int Obj[] = { 0x0042ea9f,
				0x00460fc5,
				0x0046397e,
				0x00633ddf,
				0x00a86f78,
				0x00b28bf8,
				0x00d2c275,
				0x00d7552a,
				0x00d7e7fa,
				0x0104614e,
				0x0105ce40,
				0x011193e0,
				0x0119735d,
				0x011d675e,
				0x0147ebe4,
				0x016e3f3d,
				0x017d003b,
				0x0185b135,
				0x01c0a3b6,
				0x01d58149,
				0x01e2fab2,
				0x0208e142,
				0x02475888,
				0x026be58c,
				0x02ac105d,
				0x0301d335,
				0x03154ddc,
				0x032019c0,
				0x0340f31f,
				0x0361f579,
				0x037153d6,
				0x038f86bf,
				0x03a41e1a,
				0x03aa904e,
				0x03c4ecdb,
				0x03cbf802,
				0x03d4f2a2,
				0x03fc0a5a,
				0x040c3a75,
				0x0426f46e,
				0x0429083b,
				0x0429e2c6,
				0x043a4b8e,
				0x045e91ee,
				0x04653780,
				0x046a474e,
				0x04891312,
				0x04917901,
				0x04a3c376,
				0x04ae6d62,
				0x04de7f33,
				0x0503e1c0,
				0x050c39c7,
				0x054258e1,
				0x055c8249,
				0x055f493b,
				0x05648b8b,
				0x05699673,
				0x05752b59,
				0x05985d75,
				0x05c617d3,
				0x05ccacf6,
				0x05ede99e,
				0x0623f9a3,
				0x06268470,
				0x063ba2ca,
				0x064a6680,
				0x0658a835,
				0x0674c35e,
				0x06833ef1,
				0x06aa3dec,
				0x06b21d02,
				0x06e51f7e,
				0x07144763,
				0x0724658f,
				0x0732d722,
				0x074a3557,
				0x074cba11,
				0x0752f68a,
				0x0757c28d,
				0x07601f29,
				0x0766f7ce,
				0x079324a2,
				0x07b9aa54,
				0x07ccb5e1,
				0x07ce549d,
				0x07d35238,
				0x07e253d2,
				0x07f8097e,
				0x0808cdb3,
				0x080b7b49,
				0x081ece1f,
				0x08250b39,
				0x08333c3c,
				0x084592ed,
				0x0869b691,
				0x086ec175,
				0x087f62f9,
				0x08f8085e,
				0x091cd3b2,
				0x09472c02,
				0x09816485,
				0x0999cf94,
				0x09a1dd77,
				0x09dda7e0,
				0x09fcbaed,
				0x0a22cea2,
				0x0a2ce7d2,
				0x0a5654f6,
				0x0a7a4a10,
				0x0ab0265f,
				0x0ad31c42,
				0x0af11755,
				0x0af617e0,
				0x0b24b944,
				0x0b26bab3,
				0x0b3c6b5c,
				0x0b4e2dc0,
				0x0b5daaec,
				0x0b8e8976,
				0x0bb143a8,
				0x0bfbdc9d,
				0x0c0522a1,
				0x0c0ba54b,
				0x0c452454,
				0x0c4f7e8e,
				0x0c59a0e3,
				0x0c72d355,
				0x0c853ce3,
				0x0c96ddeb,
				0x0c9b0a8a,
				0x0c9fcd09,
				0x0ca0e7c2,
				0x0cc73e90,
				0x0cf39a5f,
				0x0d06c604,
				0x0d8809a3,
				0x0dd52f22,
				0x0dd75614,
				0x0de5faae,
				0x0e1d31e7,
				0x0e336128,
				0x0e465c10,
				0x0e5fec54,
				0x0e805916,
				0x0eb31c78,
				0x0ec688eb,
				0x0ed57ec6,
				0x0ef82139,
				0x0f0048b0,
				0x0f287397,
				0x0f29dea9,
				0x0f4345e9,
				0x0f87eef6,
				0x0f89432b,
				0x0fa24c32,
				0x0fa4d707,
				0x0fbccda3,
				0x0fd6964f,
				0x0fe7673c,
				0x0ff3fcb5,
				0x0ff883c5,
				0x101ce8f5,
				0x103986f0,
				0x103c434e,
				0x104484c6,
				0x1055925d,
				0x10856e55,
				0x10869547,
				0x10a8dbbb,
				0x10ab8d56,
				0x10cb9eb4,
				0x110ac104,
				0x11266252,
				0x113fd533,
				0x11528878,
				0x1152f032,
				0x115d9ea5,
				0x118b6630,
				0x1207ca57,
				0x124608a4,
				0x1255fdfb,
				0x126ca09d,
				0x126f08f2,
				0x127150b8,
				0x12969ba3,
				0x12aebf2c,
				0x12bdebf2,
				0x12eec7a9,
				0x130d959f,
				0x13351f02,
				0x13357d9b,
				0x133d60a9,
				0x139d311f,
				0x13a5b821,
				0x13a6747a,
				0x13cebd36,
				0x13dd1f83,
				0x13edbd11,
				0x1405669b,
				0x140f36da,
				0x1428d590,
				0x1448713a,
				0x14697bb3,
				0x148b20a6,
				0x149e2243,
				0x14a30c7b,
				0x14e3d6eb,
				0x14f6bd6d,
				0x14ff3f1d,
				0x151c77af,
				0x15242f41,
				0x15582ecd,
				0x158c9081,
				0x158ebd66,
				0x15ab6bab,
				0x15adf001,
				0x15b9011a,
				0x15f22759,
				0x15ff352f,
				0x161fb75b,
				0x1651de5c,
				0x16581c8a,
				0x1661757f,
				0x1668a50b,
				0x169fa3da,
				0x16a39a90,
				0x16a7695b,
				0x16ae5135,
				0x16b2ee75,
				0x16dbace8,
				0x16ecec56,
				0x16f93072,
				0x17236aa7,
				0x17548d8d,
				0x1762b038,
				0x17713b39,
				0x177a4261,
				0x177b60ee,
				0x17dcc339,
				0x17e65d20,
				0x180a2a8a,
				0x18156c63,
				0x1880ce91,
				0x18a2a46e,
				0x18c49531,
				0x18fcd344,
				0x192567be,
				0x1951f087,
				0x1959bdf3,
				0x1960d682,
				0x1965cf4f,
				0x19aaadc3,
				0x19c11b82,
				0x19cb150e,
				0x1a0bc25b,
				0x1a0c3d41,
				0x1a0e2225,
				0x1a37e98b,
				0x1a688b13,
				0x1a92716c,
				0x1ab39621,
				0x1ad53ecf,
				0x1ae4039a,
				0x1b0e6b19,
				0x1b180974,
				0x1b276762,
				0x1b381a32,
				0x1b509699,
				0x1b6ed610,
				0x1b7c1d1e,
				0x1b803513,
				0x1b9a2388,
				0x1bb934e9,
				0x1bccd39c,
				0x1bcd37c6,
				0x1bd48138,
				0x1c407029,
				0x1c587fa6,
				0x1c8b91d9,
				0x1cb21205,
				0x1cd55ba0,
				0x1cd6d6ac,
				0x1cebcf06,
				0x1cf2ca01,
				0x1cf9d6d2,
				0x1d64808b,
				0x1d6f7b34,
				0x1d87f925,
				0x1d8a4162,
				0x1d8c18cd,
				0x1da17dd4,
				0x1db34f2a,
				0x1dc247fa,
				0x1de9372b,
				0x1df507eb,
				0x1e04df09,
				0x1e26f85a,
				0x1e2e4a36,
				0x1e34b5c2,
				0x1e63bcb4,
				0x1e6e69dc,
				0x1e6f920c,
				0x1e75866e,
				0x1e839152,
				0x1e9e215f,
				0x1e9ea015,
				0x1ed29497,
				0x1ee9cd57,
				0x1eea1590,
				0x1ef861ce,
				0x1efb7b6c,
				0x1f550c17,
				0x1f570a54,
				0x1f5a3957,
				0x1f811ce1,
				0x1fad22fb,
				0x1fbd6146,
				0x1fca2a6a,
				0x1fcbd2f1,
				0x1fd4cce1,
				0x1fda072d,
				0x1ff3cc2e,
				0x2015b51d,
				0x204ee4b6,
				0x2052b780,
				0x205d4274,
				0x2062352d,
				0x207a3ca8,
				0x207cec12,
				0x208f25b3,
				0x20911405,
				0x2097eea6,
				0x20cffdb5,
				0x20da9342,
				0x210974d7,
				0x211a00b0,
				0x217c2330,
				0x2185065a,
				0x21c545ea,
				0x21d743c3,
				0x21df89bf,
				0x21f6f9f5,
				0x221ee0fd,
				0x222846cb,
				0x2231808b,
				0x223c581b,
				0x224e7f06,
				0x2250309f,
				0x22606b68,
				0x227580ee,
				0x22b1476e,
				0x2346c249,
				0x2347ed83,
				0x2351f1b1,
				0x237e9a78,
				0x23e3b0ba,
				0x23fbac0f,
				0x240d3e4b,
				0x2413cee0,
				0x2418bd30,
				0x24786f38,
				0x24d07e95,
				0x24deb3e1,
				0x25286eb9,
				0x2537db7a,
				0x2571cda2,
				0x2575d371,
				0x2577a7bc,
				0x257bedda,
				0x25cbf0e5,
				0x26134929,
				0x263e279e,
				0x265d5856,
				0x26b91a25,
				0x26c432e8,
				0x26cf04db,
				0x26e7fcb1,
				0x2709fcea,
				0x2716b4ca,
				0x2726cc47,
				0x27483fc0,
				0x274ba905,
				0x27a12c72,
				0x27a173a8,
				0x27bc4f61,
				0x27bc58a9,
				0x27c33a11,
				0x27c67b62,
				0x27d1811a,
				0x27d8000e,
				0x27e363f7,
				0x27e54463,
				0x27fe17fd,
				0x2829c88d,
				0x282d6851,
				0x2834c4a3,
				0x28781518,
				0x2886deab,
				0x28885c83,
				0x288dc72a,
				0x28947d6c,
				0x28b2940f,
				0x28be7556,
				0x28c8a784,
				0x28cdf74c,
				0x28cf5961,
				0x28e797a3,
				0x28ead0e7,
				0x2904e007,
				0x2927a8c3,
				0x292f4238,
				0x295b365e,
				0x296a6654,
				0x2990c112,
				0x29970fab,
				0x29ca5f04,
				0x29cb0f3c,
				0x29db5e17,
				0x29e362ff,
				0x29f3f9d1,
				0x2a140363,
				0x2a41a51e,
				0x2a461cf4,
				0x2a48dbc9,
				0x2a6ebfef,
				0x2a77f8b0,
				0x2aa9be6a,
				0x2ab637df,
				0x2acf481a,
				0x2ae13dfa,
				0x2af4e9fb,
				0x2b1fc7b2,
				0x2b2d8c1d,
				0x2b3485db,
				0x2b3a93e1,
				0x2b3ad141,
				0x2b5bd8ba,
				0x2b8c0657,
				0x2b96d271,
				0x2b9c94da,
				0x2baf34d6,
				0x2bb25046,
				0x2bb8f7e0,
				0x2bc3f8b8,
				0x2bd57a5a,
				0x2be688e0,
				0x2c0683c7,
				0x2c0b2ffe,
				0x2c21abf9,
				0x2c2f9065,
				0x2c57eff1,
				0x2c7c3016,
				0x2c98b0ed,
				0x2cbe2fbe,
				0x2ce2804a,
				0x2ce556c0,
				0x2cf975f5,
				0x2cfee5fd,
				0x2d17574b,
				0x2d291c86,
				0x2d33a7e3,
				0x2d5af569,
				0x2d66be8f,
				0x2d72103d,
				0x2d80bd93,
				0x2d930b3b,
				0x2d96a89a,
				0x2d9a5028,
				0x2de9f1e4,
				0x2df8cf62,
				0x2e042597,
				0x2e0d79e8,
				0x2e43a2ff,
				0x2e7c9a23,
				0x2eb9fce9,
				0x2ef4cef2,
				0x2efbb698,
				0x2f3a5b38,
				0x2f84f70e,
				0x2f9b3eec,
				0x2f9f084d,
				0x2fa3ddbb,
				0x2fea25bf,
				0x30053b7a,
				0x300c41ef,
				0x30318fab,
				0x30371d34,
				0x304afda1,
				0x304dc78b,
				0x30597515,
				0x306e29b4,
				0x30b5a669,
				0x30b77f21,
				0x312f3a92,
				0x313c1fcc,
				0x3159696b,
				0x31627d68,
				0x31be5f40,
				0x31dcb7d1,
				0x31fd5263,
				0x323f3f40,
				0x3250a31d,
				0x326d3db1,
				0x3287a564,
				0x328d164d,
				0x32a956a6,
				0x32ece3bc,
				0x32ed2e9a,
				0x33158c22,
				0x332d24be,
				0x334049a3,
				0x336b391e,
				0x336fbbcf,
				0x33bee4be,
				0x33e70464,
				0x341d729b,
				0x3423f946,
				0x346968f4,
				0x346a8d93,
				0x347cd13a,
				0x347d8659,
				0x3482b62e,
				0x3489dcd8,
				0x34950018,
				0x34b41415,
				0x34c993be,
				0x34cb93ec,
				0x34d1e91a,
				0x34d5d3fd,
				0x34d7a451,
				0x34feb64d,
				0x35098d26,
				0x355241b6,
				0x357cba6d,
				0x35ae1f39,
				0x35b17206,
				0x35c9a934,
				0x35f7654e,
				0x3605424c,
				0x36393ea8,
				0x363ca3b6,
				0x366edcc0,
				0x367912e7,
				0x3680ec2f,
				0x368391cb,
				0x369d8410,
				0x36d89c82,
				0x36dac2c6,
				0x36e9ab93,
				0x36eb76de,
				0x37067ffb,
				0x370b4e30,
				0x371f753d,
				0x372987ad,
				0x374d00af,
				0x376024bc,
				0x376adae3,
				0x376c99f9,
				0x376cb307,
				0x37926aa6,
				0x37a41695,
				0x37aff890,
				0x37d80b0e,
				0x37fdc243,
				0x3852efd6,
				0x3860f7f9,
				0x3882907a,
				0x38b45feb,
				0x38c419eb,
				0x38d8d4d4,
				0x390a0159,
				0x3924b266,
				0x392d62aa,
				0x3ac1ea,
				0x393cea76,
				0x3961c88,
				0x39885bb5,
				0x399bae1e,
				0x39d0eaef,
				0x3a015e1b,
				0x3a12a4ba,
				0x3a1b896a,
				0x3a358535,
				0x3a3653b1,
				0x3a3f63bf,
				0x3a403cc9,
				0x3a6168f2,
				0x3a9245cd,
				0x3ab773db,
				0x3ad2a96e,
				0x3add57f6,
				0x3b14f8fc,
				0x3b2a8c05,
				0x3b5f7e01,
				0x3b613254,
				0x3b6561bf,
				0x3b829c8b,
				0x3bd8e67a,
				0x3be5240f,
				0x3be9850a,
				0x3bf5b2ef,
				0x3bfd37a7,
				0x3c1b83ba,
				0x3c3b89f0,
				0x3c3c6190,
				0x3c4673a4,
				0x3c4bc4e2,
				0x3c4dac35,
				0x3c662ff7,
				0x3ca58296,
				0x3cd5661d,
				0x3cef76a2,
				0x3cf34f26,
				0x3cf90808,
				0x3d0e127f,
				0x3d3ec7ae,
				0x3d41885,
				0x3d4a034f,
				0x3d724e0e,
				0x3d8b524a,
				0x3dd687f3,
				0x3df36023,
				0x3e25d399,
				0x3e2a1909,
				0x3e591630,
				0x3e611d30,
				0x3e90e8ca,
				0x3e94b9ef,
				0x3eb58c09,
				0x3ed6c49c,
				0x3ef6bb41,
				0x3efd32f2,
				0x3efd9223,
				0x3efe4664,
				0x3f2ec2b6,
				0x3f581495,
				0x3f58aa28,
				0x3f6c62cb,
				0x3f78bc5d,
				0x3fa676de,
				0x3fb16a90,
				0x3fbdad7c,
				0x3fca4571,
				0x3fd0afb6,
				0x3fd7c4d3,
				0x3fe27bae,
				0x401bad75,
				0x4056cc7d,
				0x4057c671,
				0x40695416,
				0x4087e762,
				0x408a2f40,
				0x40be41d1,
				0x40d23ece,
				0x40fd9557,
				0x410bfe7e,
				0x412ce32c,
				0x41478ee4,
				0x417e8ab8,
				0x417f7b18,
				0x41835dc0,
				0x41c9b744,
				0x41d5aa30,
				0x4200d129,
				0x420a3c0f,
				0x42104ce9,
				0x421ed535,
				0x4233ed5a,
				0x42348da0,
				0x423b306c,
				0x423fc8ad,
				0x428a7157,
				0x42b3fc09,
				0x42c280e4,
				0x433abc6d,
				0x435d7f24,
				0x43bd08f2,
				0x43d4d056,
				0x43ff8af8,
				0x44083a8f,
				0x441c79c2,
				0x441f12db,
				0x443a32d0,
				0x4495a765,
				0x44a06d53,
				0x44b1e844,
				0x44ca86a9,
				0x44d70dbb,
				0x451054d8,
				0x452414ad,
				0x4527e509,
				0x453dcf20,
				0x456aa864,
				0x4574a099,
				0x45af1650,
				0x45c35f6a,
				0x45f740d1,
				0x46174983,
				0x4685edaa,
				0x4694227e,
				0x46a578b5,
				0x46a97bb7,
				0x46ac8b8c,
				0x46bbf1a4,
				0x46bf8463,
				0x47031c9d,
				0x47460af4,
				0x47489549,
				0x47595e26,
				0x4759ff64,
				0x478a8882,
				0x479adf3f,
				0x47b98bd9,
				0x47fde645,
				0x484e7ea5,
				0x484fe6e1,
				0x486670a6,
				0x4867b323,
				0x48ac6542,
				0x48ce84e9,
				0x48d4f3e5,
				0x48f3da4c,
				0x49120bb3,
				0x4956de6e,
				0x49811c36,
				0x49816593,
				0x49829021,
				0x49996225,
				0x499d2f3c,
				0x49bf3df8,
				0x49c29ffa,
				0x49ee092b,
				0x4a41e13b,
				0x4a4266cc,
				0x4a72773d,
				0x4ab36b32,
				0x4adfc0c9,
				0x4af2ccb6,
				0x4af9d1d9,
				0x4b22c971,
				0x4b444dbc,
				0x4b6e534b,
				0x4b7b063a,
				0x4b9b237c,
				0x4bac0dd7,
				0x4c272c11,
				0x4c53dd18,
				0x4c61d617,
				0x4c6e3901,
				0x4c73b157,
				0x4c8e0520,
				0x4c9de316,
				0x4c9e2da4,
				0x4cacca75,
				0x4caef9fe,
				0x4cdd7ddd,
				0x4d0053c9,
				0x4d172765,
				0x4d1f76c4,
				0x4d33c98f,
				0x4d47e3ff,
				0x4d6410f7,
				0x4d7bec84,
				0x4d91e3b2,
				0x4d9413ef,
				0x4da19524,
				0x4db7e514,
				0x4dc3b39c,
				0x4de6a409,
				0x4de82456,
				0x4e022f83,
				0x4e0465de,
				0x4e28271b,
				0x4e46c5f7,
				0x4e7317f3,
				0x4e7a7476,
				0x4e7fc200,
				0x4e8f1075,
				0x4ebfc2e6,
				0x4ec0e5e9,
				0x4ee72833,
				0x4ef0966b,
				0x4efa1782,
				0x4f2b278a,
				0x4f3e643e,
				0x4f916559,
				0x4f9b8c0a,
				0x4fab9280,
				0x4fc63f36,
				0x4fcb0029,
				0x4ff8d110,
				0x500460b0,
				0x501707c8,
				0x503cdc7c,
				0x5063a4e8,
				0x5067eaaa,
				0x50a607d0,
				0x50c22184,
				0x50d213f4,
				0x50d60cee,
				0x511f0509,
				0x512e9a7f,
				0x513e1a3a,
				0x5144d666,
				0x51709adc,
				0x5193c198,
				0x51b3107e,
				0x51d9c9c0,
				0x51db4c7c,
				0x51dc477a,
				0x51eb4053,
				0x51ed3b8f,
				0x5206d422,
				0x522ce28e,
				0x524bae5e,
				0x52660dbb,
				0x5278a41d,
				0x52c18a5a,
				0x52ab4390,
				0x52db7cc8,
				0x532b1dd1,
				0x5337688f,
				0x536024e5,
				0x53bf42df,
				0x53c39067,
				0x53dd7075,
				0x53e0224d,
				0x54070aef,
				0x540c770f,
				0x5411322e,
				0x5420a5b9,
				0x5423f679,
				0x542ca274,
				0x54310d3e,
				0x54348167,
				0x543b872b,
				0x54776a53,
				0x54cda69d,
				0x54dd1196,
				0x54e961ab,
				0x54fc7cb6,
				0x550730c6,
				0x5518db12,
				0x552846a4,
				0x55343fa3,
				0x55425553,
				0x5571173d,
				0x558e77da,
				0x55a8cf2a,
				0x55afa712,
				0x55c32205,
				0x560c4f15,
				0x563313b7,
				0x5644e588,
				0x5652c758,
				0x5687d081,
				0x568950ee,
				0x569dbe05,
				0x56d3d7e9,
				0x5707dd4e,
				0x5732edcc,
				0x574d1999,
				0x575ece33,
				0x577bec3f,
				0x579774c0,
				0x57ca6238,
				0x57e01dcc,
				0x57e4975b,
				0x57e904e9,
				0x584071f3,
				0x5855ca79,
				0x585f2581,
				0x5869a8f8,
				0x588fc547,
				0x58a52f49,
				0x58a81454,
				0x58a9746b,
				0x58a98a1d,
				0x58d3b4ea,
				0x58e280a2,
				0x592f288a,
				0x593a9667,
				0x59764c58,
				0x59916c77,
				0x59aa6da9,
				0x59c5a033,
				0x59caecc7,
				0x59dcf9e1,
				0x59df96b5,
				0x5a101e71,
				0x5a19d69f,
				0x5a1a1bd9,
				0x5a1d76e4,
				0x5a3f5f93,
				0x5a509326,
				0x5a6df96a,
				0x5a743f85,
				0x5a7d355f,
				0x5a8f8cd2,
				0x5a9789a0,
				0x5acf37c5,
				0x5ae2fc35,
				0x5ae87f53,
				0x5af373e8,
				0x5afd248c,
				0x5b3dc1c0,
				0x5b5c4263,
				0x5b76d222,
				0x5b850339,
				0x5b97b7ac,
				0x5bb42c0b,
				0x5bbd60e4,
				0x5bc934ae,
				0x5bda1bf9,
				0x5be9b160,
				0x5c06866b,
				0x5c0cec9f,
				0x5c1d75a6,
				0x5c762663,
				0x5c7a3561,
				0x5c8957b5,
				0x5cb5a8fb,
				0x5ce284f6,
				0x5cfbce2b,
				0x5d20643d,
				0x5d21b20d,
				0x5d2cd6d1,
				0x5d2e8770,
				0x5d3742e1,
				0x5d3ff1e6,
				0x5dec10b0,
				0x5e2d1d2c,
				0x5e3f31ae,
				0x5e7d2624,
				0x5f254071,
				0x5f281414,
				0x5f37c0ff,
				0x5f455678,
				0x5f47dd93,
				0x5f5e76c9,
				0x5f74c0aa,
				0x5f8b572b,
				0x5f8f8668,
				0x5f989485,
				0x5f9a1284,
				0x5fb619d7,
				0x5fb9ad83,
				0x5fef4bd7,
				0x5ff0d1e7,
				0x5ff8d96f,
				0x600a8bd2,
				0x6023fd9b,
				0x605a3da9,
				0x608c65ed,
				0x6096a1e8,
				0x60f90ad4,
				0x60fea6d4,
				0x611ec062,
				0x614c63bd,
				0x615b4577,
				0x61704dd2,
				0x61721925,
				0x618ce28f,
				0x61bd02c9,
				0x61d7f0a0,
				0x6241dcf3,
				0x62481982,
				0x62874e42,
				0x6288a7bb,
				0x628d2ad4,
				0x6298590b,
				0x62b71cbf,
				0x62f3f6c8,
				0x62fc35b1,
				0x62fc37e5,
				0x63588fb6,
				0x6366ad70,
				0x636e3de1,
				0x638e89fa,
				0x63923871,
				0x63988e7c,
				0x639ab390,
				0x63a56f29,
				0x63ab426e,
				0x63adbebc,
				0x640abb61,
				0x640f2ea2,
				0x6430962d,
				0x643bc43a,
				0x644b9585,
				0x64a7339f,
				0x64d085ec,
				0x64e33712,
				0x6516fb2e,
				0x654179c1,
				0x65454e61,
				0x65474ead,
				0x6558b586,
				0x6560ec50,
				0x656a1380,
				0x659b9569,
				0x65a9198c,
				0x65c1b98f,
				0x65eaf4b2,
				0x661c9aa9,
				0x66254fb8,
				0x66544a00,
				0x66751ff2,
				0x6680cfdb,
				0x669e12f6,
				0x66a5801d,
				0x66cee88b,
				0x66e8c450,
				0x66f2b0e9,
				0x66f9eb27,
				0x671c5c38,
				0x67301e46,
				0x6738be12,
				0x676c1332,
				0x67858406,
				0x6789f4af,
				0x67a13c1c,
				0x67a9ad73,
				0x67c9e641,
				0x67da877f,
				0x67dbe3a8,
				0x67e1c4de,
				0x67f35f69,
				0x683475ee,
				0x683bcd93,
				0x684a97ae,
				0x685632fc,
				0x688060c6,
				0x688fd184,
				0x68905e57,
				0x68b491bd,
				0x68c5f335,
				0x68c79f57,
				0x69263442,
				0x692eb8a1,
				0x6952f148,
				0x69661c40,
				0x697c9014,
				0x699c8fc0,
				0x69a4607f,
				0x69a551a6,
				0x69ad49fb,
				0x69c09379,
				0x69ca00dd,
				0x69e9413e,
				0x69ee65e0,
				0x69ef0318,
				0x6a10dbb7,
				0x6a230b97,
				0x6a2d770f,
				0x6a2e74bc,
				0x6a5de110,
				0x6a62cee0,
				0x6a730537,
				0x6a7fac2a,
				0x6a8cb8ec,
				0x6adefee3,
				0x6b15d96e,
				0x6b23aff8,
				0x6b2d2e0d,
				0x6b4f81d3,
				0x6b5441d0,
				0x6b5ffa1d,
				0x6b6fde1a,
				0x6b73bb05,
				0x6b795ebc,
				0x6b867a1b,
				0x6b952fe2,
				0x6ba6419b,
				0x6bbf0da7,
				0x6c27933e,
				0x6c38910f,
				0x6c4d5af4,
				0x6c78c1f7,
				0x6ca22dda,
				0x6d0a0eba,
				0x6d39c37d,
				0x6d4996f6,
				0x6d51eecb,
				0x6d74805f,
				0x6da666cf,
				0x6db9599a,
				0x6dc2bf77,
				0x6dd6a2bc,
				0x6de3fc35,
				0x6de6824f,
				0x6e081207,
				0x6e201d39,
				0x6e2555d7,
				0x6e2f1928,
				0x6e3ba3c2,
				0x6e8d1996,
				0x6ea0e311,
				0x6ed4aabc,
				0x6eda7dc3,
				0x6efb7a99,
				0x6f028a4d,
				0x6f4bb7f9,
				0x6f5592c2,
				0x6f670837,
				0x6f74f2f3,
				0x6f815a80,
				0x6f8df2d9,
				0x6f9939c7,
				0x6fc0587b,
				0x6fde1cb0,
				0x6fe279b4,
				0x6fee58b0,
				0x6ff5c65c,
				0x70797471,
				0x708f4782,
				0x7091d310,
				0x70993fcb,
				0x70ba7af2,
				0x70cf23cb,
				0x710841e5,
				0x7118137d,
				0x7124eb9e,
				0x71b1d845,
				0x71b37307,
				0x71d1ca27,
				0x71ebe2ef,
				0x7203ba48,
				0x720736e5,
				0x72178dba,
				0x723d3168,
				0x723f9a34,
				0x72509c77,
				0x727e0df8,
				0x72b8156b,
				0x72c3cec1,
				0x72c8a3fb,
				0x72ec6797,
				0x72f54e90,
				0x7301570e,
				0x7305e0f3,
				0x7316eed7,
				0x731f4403,
				0x732a44b6,
				0x732cc3e0,
				0x7340f8cd,
				0x734f7683,
				0x7382b5ec,
				0x7384f37e,
				0x73abc218,
				0x73cb9e00,
				0x73e498db,
				0x73e568ed,
				0x73f55396,
				0x74019666,
				0x74072616,
				0x744387fc,
				0x744babe6,
				0x7462e0e7,
				0x74944d1a,
				0x7498c3ff,
				0x74cc685b,
				0x74cda413,
				0x74d34d79,
				0x74e05608,
				0x74e9f5bb,
				0x74fbd1ca,
				0x75447865,
				0x755ec29c,
				0x75686f53,
				0x756e9af5,
				0x75933c0b,
				0x75a38363,
				0x75ca7328,
				0x75cc8da1,
				0x75e0f65e,
				0x75ea88f0,
				0x7610d393,
				0x7621baaf,
				0x7631fbe6,
				0x7650219b,
				0x7650e782,
				0x76b3cc32,
				0x76d281de,
				0x76fdb175,
				0x771ef3d3,
				0x772114c9,
				0x776a7e45,
				0x7773ca4a,
				0x7774c705,
				0x77d1efd2,
				0x77ef6a33,
				0x78053c0e,
				0x7815b5e5,
				0x783a4be3,
				0x783d7451,
				0x7850409a,
				0x78879d04,
				0x78a1fb03,
				0x78a38920,
				0x78aa6b6f,
				0x78bf81c2,
				0x78c37971,
				0x78cde107,
				0x78df72d2,
				0x7955d3fc,
				0x7977b051,
				0x799f2b4b,
				0x79c14bf9,
				0x79d79665,
				0x79db7af1,
				0x79de70b4,
				0x79f87181,
				0x79facba8,
				0x7a0f96e9,
				0x7a3400ad,
				0x7a4789ee,
				0x7a56dc89,
				0x7a6450f5,
				0x7a7bcf73,
				0x7a8d1fa9,
				0x7a9b6ba1,
				0x7add3eeb,
				0x7af6808d,
				0x7b059043,
				0x7b0f49e6,
				0x7b11ed07,
				0x7b37c437,
				0x7b80c9d8,
				0x7bb34738,
				0x7bf5bcb1,
				0x7bfdaf4c,
				0x7c1aabec,
				0x7c1d6f5b,
				0x7c24c0b8,
				0x7c3d7cc4,
				0x7c445664,
				0x7c95fa6e,
				0x7ca40728,
				0x7cb5510c,
				0x7ce184ec,
				0x7cf536b4,
				0x7cfd8781,
				0x7d02b479,
				0x7d10b85c,
				0x7d4fdda3,
				0x7d770186,
				0x7d96d65f,
				0x7da33acb,
				0x7dbdb93c,
				0x7de28ae3,
				0x7e0fbc73,
				0x7e269d57,
				0x7e5e9fcf,
				0x7e6afba7,
				0x7ef9ef6c,
				0x7f0e43ad,
				0x7f23c467,
				0x7f2b2371,
				0x7f6095ae,
				0x7f79e1be,
				0x7f845900,
				0x7f8a47dd,
				0x7f98c8b3,
				0x7facfa03,
				0x7fb36cd2,
				0x7fc193ea,
				0x7fdfeffb,
				0x7ffbc1e2,
				0x800bbae7,
				0x80214ac1,
				0x8026e592,
				0x8062943c,
				0x8088304a,
				0x809e20d8,
				0x80db6725,
				0x80e69ae2,
				0x80eaa0c0,
				0x812d66f8,
				0x812eaa44,
				0x814b3f78,
				0x81509c7b,
				0x8181f746,
				0x81912047,
				0x819a69b8,
				0x81af56c4,
				0x81bfdf16,
				0x81d5c075,
				0x8205f110,
				0x82185f9f,
				0x821912e8,
				0x8225145b,
				0x82366265,
				0x82826cd2,
				0x82bac591,
				0x82d6907b,
				0x830f9716,
				0x830fade4,
				0x831c9112,
				0x83475c8d,
				0x837683f7,
				0x8383a09e,
				0x83c416e8,
				0x848b8aba,
				0x84b48684,
				0x850acf20,
				0x8538a366,
				0x85487de7,
				0x856832d3,
				0x857bc3bd,
				0x858bb1d0,
				0x85ab6bcc,
				0x85bbc2c8,
				0x85dd2666,
				0x8606f35d,
				0x86171275,
				0x864d4216,
				0x864e5bf0,
				0x867f49eb,
				0x86a16c34,
				0x86a83d68,
				0x86c8e4c3,
				0x86d9ceb3,
				0x87024c72,
				0x874b5974,
				0x874f7064,
				0x877772e0,
				0x87796afa,
				0x8781b51f,
				0x87915c35,
				0x87c1909d,
				0x87de68d5,
				0x87f79f2a,
				0x880ef5e8,
				0x88157112,
				0x8839fac4,
				0x88476b1f,
				0x884f2024,
				0x8860882b,
				0x889451fd,
				0x889a33ea,
				0x88d2bc34,
				0x88e1fd6b,
				0x88e225fd,
				0x88ffcce5,
				0x89003171,
				0x8909e2d4,
				0x8937d8c4,
				0x893ba3a0,
				0x894651c4,
				0x894e3b16,
				0x895e7218,
				0x8995960f,
				0x8a05053b,
				0x8a154872,
				0x8a3df14e,
				0x8a451c5c,
				0x8a5f0dc7,
				0x8a9c2061,
				0x8aac626b,
				0x8ac5cfc9,
				0x8ae084d2,
				0x8ae73fd0,
				0x8ae99900,
				0x8aeba3b7,
				0x8af58425,
				0x8afc333b,
				0x8b15792e,
				0x8b5220a5,
				0x8ba8a66f,
				0x8bbfb426,
				0x8bc159a9,
				0x8bd5c4f7,
				0x8bd7d5ea,
				0x8c195886,
				0x8c48ec59,
				0x8c5adea1,
				0x8c76b862,
				0x8c820201,
				0x8c97bf73,
				0x8cabc97f,
				0x8cb22929,
				0x8cb6d83c,
				0x8cffe91f,
				0x8d088ebc,
				0x8d202bf2,
				0x8d20b51f,
				0x8d85c9fd,
				0x8d998e21,
				0x8da65022,
				0x8dc65046,
				0x8dcb8036,
				0x8de4f79e,
				0x8deb748e,
				0x8dfd01e3,
				0x8e146bff,
				0x8e1e7ccf,
				0x8e220f73,
				0x8e8c7a5b,
				0x8e995498,
				0x8ea015a2,
				0x8ea2348c,
				0x8ea3c5e6,
				0x8ee87647,
				0x8ef8c09d,
				0x8f1b34fb,
				0x8f4a5914,
				0x8f4c4f62,
				0x8f87a849,
				0x8fa6f425,
				0x8fa7758f,
				0x8fa9b49b,
				0x8fb3826a,
				0x8fc476d9,
				0x8fd48cb3,
				0x8fe5b03d,
				0x9008eb42,
				0x9012d675,
				0x902961bc,
				0x902d2c9f,
				0x904bdecf,
				0x90aa8c4f,
				0x90b43798,
				0x90d292d7,
				0x9116fa25,
				0x911cc675,
				0x911dee4c,
				0x914b6c18,
				0x9159ad53,
				0x916c62fe,
				0x91b1ba50,
				0x91cc6389,
				0x91d4219d,
				0x91f17967,
				0x92258fae,
				0x9271a41a,
				0x927a5723,
				0x927f2484,
				0x92a01e24,
				0x92b1e4a4,
				0x92c6b793,
				0x92cc5296,
				0x92d2c561,
				0x92d9b756,
				0x92db8389,
				0x92e05029,
				0x92f001a2,
				0x92f6f2fd,
				0x9303e1a6,
				0x93206b10,
				0x93282ce8,
				0x9330c917,
				0x9344ecec,
				0x936cd0e4,
				0x93948e5e,
				0x93d669c6,
				0x93f175ae,
				0x94110818,
				0x9419253c,
				0x944aab6e,
				0x944d0adf,
				0x947a8766,
				0x94971e80,
				0x94b00453,
				0x94dd7cf9,
				0x94ffcae4,
				0x950434d6,
				0x951654db,
				0x9539c6a4,
				0x954c0ee1,
				0x95583589,
				0x955f607f,
				0x9572598e,
				0x957b7e46,
				0x95c5a22b,
				0x95c95659,
				0x95f357db,
				0x95f6a908,
				0x960fdf10,
				0x961ccc04,
				0x96218fb4,
				0x96283771,
				0x963025ed,
				0x96353472,
				0x964945d9,
				0x966522a9,
				0x968a47d1,
				0x96985633,
				0x96cf6d35,
				0x96d59d8b,
				0x96de904f,
				0x97255a03,
				0x97303d16,
				0x976850d8,
				0x976fbb46,
				0x978dabe5,
				0x97936677,
				0x97a58869,
				0x97ae51ca,
				0x97b477d0,
				0x97c3281b,
				0x97cd38c1,
				0x97dd124c,
				0x97ffa41f,
				0x9817aaaa,
				0x98477c5e,
				0x985e6de3,
				0x9866a5db,
				0x98752042,
				0x987b800e,
				0x988a98a8,
				0x98a41590,
				0x98a45cf6,
				0x98b1c712,
				0x98d449c4,
				0x98e54293,
				0x98ee1acd,
				0x9916784f,
				0x991b6c74,
				0x9969f1ed,
				0x997021a9,
				0x9970602c,
				0x9970981e,
				0x99877535,
				0x998e5402,
				0x99acc034,
				0x99b03830,
				0x99c95119,
				0x99d863c8,
				0x99e3b9c7,
				0x99eae44b,
				0x99fe0df3,
				0x9a1b0cec,
				0x9a1dc7f0,
				0x9a4be536,
				0x9a74201c,
				0x9a753742,
				0x9a7dc49f,
				0x9ae4d12b,
				0x9b064735,
				0x9b1aae33,
				0x9b25e98e,
				0x9b317c53,
				0x9b44f767,
				0x9b7140ef,
				0x9b7d0eb4,
				0x9b862e76,
				0x9b8b9be6,
				0x9b9fc8e2,
				0x9bab2887,
				0x9bb59df3,
				0x9bc6b6c6,
				0x9be6b714,
				0x9be9742e,
				0x9bfef7ce,
				0x9c034ede,
				0x9c2f238e,
				0x9c3ef8ab,
				0x9c5394a2,
				0x9c5d94d2,
				0x9c610e9f,
				0x9c762726,
				0x9c800a2b,
				0x9c8d09c9,
				0x9caf9ab7,
				0x9cdfb1e0,
				0x9ce03108,
				0x9d231778,
				0x9d35663f,
				0x9d5f6034,
				0x9d6c5792,
				0x9d7acaba,
				0x9d7bf225,
				0x9da73454,
				0x9df04bfa,
				0x9dfa9675,
				0x9e5fffcb,
				0x9e830ac7,
				0x9ec80810,
				0x9ec9a37c,
				0x9edc4d3e,
				0x9f408938,
				0x9f4438a1,
				0x9f652194,
				0x9f658eb1,
				0x9f77a13c,
				0x9f77c57f,
				0x9f7f98f0,
				0x9fb5f562,
				0x9fbc1b97,
				0x9fdb74e1,
				0xa0037ea2,
				0xa01d4764,
				0xa05821c3,
				0xa0591be3,
				0xa0680239,
				0xa0743a7a,
				0xa0768594,
				0xa09b3816,
				0xa0a2e767,
				0xa0ee190e,
				0xa10cb4e7,
				0xa1277190,
				0xa138ec7c,
				0xa13d3f8d,
				0xa175f894,
				0xa17e68a8,
				0xa18345de,
				0xa1c9127d,
				0xa1d04cda,
				0xa1e58f89,
				0xa1f54321,
				0xa258a1e7,
				0xa2632fc0,
				0xa276fa49,
				0xa27b3628,
				0xa284d099,
				0xa2937234,
				0xa2942448,
				0xa2995f30,
				0xa2ad7fce,
				0xa2af27fc,
				0xa2bef1d4,
				0xa2cc2989,
				0xa2e165e4,
				0xa32b067b,
				0xa34519ef,
				0xa345b107,
				0xa346ca47,
				0xa3791328,
				0xa38171bc,
				0xa396e074,
				0xa3e0ce51,
				0xa4045ef5,
				0xa46fdbe2,
				0xa47022ac,
				0xa4850630,
				0xa4a3757a,
				0xa4b0d6d0,
				0xa4b340ca,
				0xa4d4093e,
				0xa4de13e3,
				0xa4e7e0a7,
				0xa4f7b696,
				0xa50dddd0,
				0xa515d692,
				0xa529b342,
				0xa53de4d1,
				0xa5c3f740,
				0xa5f2f692,
				0xa6066e14,
				0xa60891f8,
				0xa60f936d,
				0xa61d8f53,
				0xa62143ac,
				0xa625557d,
				0xa640624d,
				0xa640636d,
				0xa6488382,
				0xa665334d,
				0xa67c935f,
				0xa692bac0,
				0xa6b0f2b1,
				0xa6b97967,
				0xa6cf67a8,
				0xa6db990b,
				0xa72060f8,
				0xa7303751,
				0xa73dfef6,
				0xa76eddfb,
				0xa77d3afc,
				0xa7904cef,
				0xa79405a5,
				0xa79cc3df,
				0xa7bfc4c9,
				0xa7ceb3d0,
				0xa7cf17c4,
				0xa7d055f0,
				0xa7de87a3,
				0xa81e7ca7,
				0xa8268e87,
				0xa8476032,
				0xa8514892,
				0xa879bc02,
				0xa8933da1,
				0xa8c10a3d,
				0xa8c85c30,
				0xa8fb693e,
				0xa91dbb39,
				0xa9319e55,
				0xa94a1f3e,
				0xa94dc27b,
				0xa95a8d8f,
				0xa9b04f7d,
				0xa9b621e9,
				0xa9bd0d16,
				0xa9e72ccb,
				0xa9e806b3,
				0xaa00e4cf,
				0xaa05e30f,
				0xaa435f77,
				0xaa4bd054,
				0xaa6f3ffd,
				0xaa9a17aa,
				0xaacc84b0,
				0xaad8f4d1,
				0xaae2760c,
				0xab0f542f,
				0xab2b066d,
				0xab57a27d,
				0xab787ab6,
				0xabb0b493,
				0xabb2ec9a,
				0xac174334,
				0xac3efb24,
				0xac3fd17d,
				0xac4a6a8d,
				0xac57b1a5,
				0xacb1c4f1,
				0xacb46408,
				0xacd6d1ab,
				0xace19e92,
				0xad3ae9fb,
				0xad4a3182,
				0xad533ecc,
				0xad62c8eb,
				0xad66545a,
				0xad679682,
				0xad85358a,
				0xad903651,
				0xad95334c,
				0xadb90f84,
				0xadbc8ae3,
				0xadc2588e,
				0xadca3fdc,
				0xadd86d53,
				0xadfa98da,
				0xae0ead76,
				0xae1411a3,
				0xae361b07,
				0xae575af5,
				0xae588c5f,
				0xae6808fc,
				0xae70bfe4,
				0xaea85e48,
				0xaeb63c4b,
				0xaeb74c05,
				0xaef842bf,
				0xaf0abbf0,
				0xaf0dd721,
				0xaf0e3f9f,
				0xaf23cb13,
				0xaf650a95,
				0xaf7f41f3,
				0xaf8e6723,
				0xaf9e03cd,
				0xafa0536a,
				0xafa09287,
				0xafcaa853,
				0xaffe1f5a,
				0xb0038764,
				0xb01315b4,
				0xb02174a9,
				0xb0b51271,
				0xb0e2f500,
				0xb0effbdd,
				0xb0f63288,
				0xb0f81a16,
				0xb10be2e6,
				0xb114d77b,
				0xb11eb1ed,
				0xb12ad7ef,
				0xb155b61d,
				0xb155fd87,
				0xb157c9e4,
				0xb172109b,
				0xb17cce7e,
				0xb18ddcad,
				0xb197b514,
				0xb1a02702,
				0xb1a9c764,
				0xb1b2b66b,
				0xb1e5edc9,
				0xb21c3926,
				0xb21fa9e0,
				0xb2266adc,
				0xb226e336,
				0xb2274905,
				0xb243e8a2,
				0xb28bb04b,
				0xb2a7a56c,
				0xb2b4cbc8,
				0xb2b71d87,
				0xb321dd82,
				0xb32adca8,
				0xb33f989e,
				0xb34d3ead,
				0xb36e2577,
				0xb388538b,
				0xb38e647c,
				0xb38fb370,
				0xb39b99e2,
				0xb3a1fbb6,
				0xb3b7b784,
				0xb3e59a0e,
				0xb3ef1c92,
				0xb3fab6e0,
				0xb45678b5,
				0xb4670015,
				0xb46b2bee,
				0xb4861eb7,
				0xb48ebc82,
				0xb4978950,
				0xb498df06,
				0xb4a37c24,
				0xb4cda44c,
				0xb4e9561a,
				0xb4fcc9e0,
				0xb519fa90,
				0xb52c7976,
				0xb56c3fb8,
				0xb5730901,
				0xb58259bd,
				0xb584bdf6,
				0xb5856054,
				0xb58be281,
				0xb5978b89,
				0xb5dd1656,
				0xb5e60c50,
				0xb63f6584,
				0xb666fc1a,
				0xb685e324,
				0xb69ac468,
				0xb6d12f0b,
				0xb7063b22,
				0xb716e023,
				0xb7458049,
				0xb7580398,
				0xb7631b41,
				0xb76c1605,
				0xb773c2e1,
				0xb78a2c75,
				0xb78eccb8,
				0xb7be26a9,
				0xb7bfe6ea,
				0xb7d52e66,
				0xb7e6afd4,
				0xb7ffff45,
				0xb82369d4,
				0xb8300543,
				0xb8389439,
				0xb8465008,
				0xb856d4ce,
				0xb861775a,
				0xb870d344,
				0xb8771db6,
				0xb87acfd1,
				0xb87e6de1,
				0xb8a61533,
				0xb8adc43d,
				0xb8cb3475,
				0xb8cfe3e3,
				0xb9127abd,
				0xb92678a6,
				0xb92b06e4,
				0xb936ff48,
				0xb93c9aec,
				0xb94b6276,
				0xb9551550,
				0xb9579ffa,
				0xb9b1c2ed,
				0xb9c4dfdf,
				0xb9d7756c,
				0xb9e09d51,
				0xb9f9d770,
				0xba07360d,
				0xba4270a1,
				0xba49a863,
				0xba869185,
				0xbab56423,
				0xbaea49d0,
				0xbaffedef,
				0xbb188579,
				0xbb2b5cd9,
				0xbb314853,
				0xbb3bf7f2,
				0xbb427a69,
				0xbb42ee78,
				0xbb453063,
				0xbb492bc0,
				0xbb97e555,
				0xbb9b1f5d,
				0xbbac2ce9,
				0xbbbd0cd0,
				0xbbfb2ad9,
				0xbc0f60d5,
				0xbc4649e5,
				0xbcb893c3,
				0xbcc5654d,
				0xbcc7f321,
				0xbcd19c9a,
				0xbcdefab5,
				0xbcf7c688,
				0xbd564507,
				0xbd65a104,
				0xbd7d6804,
				0xbda2fa15,
				0xbda702af,
				0xbdb71f30,
				0xbdc1dc1d,
				0xbddfe09a,
				0xbde0ccd4,
				0xbde777b6,
				0xbe053b7f,
				0xbe643e32,
				0xbe7c85d8,
				0xbe862050,
				0xbeac7c8f,
				0xbec44b8f,
				0xbee0b82c,
				0xbef068da,
				0xbf085fa5,
				0xbf7ce0ee,
				0xbf8909fa,
				0xbf8918de,
				0xbfb7cb54,
				0xbfe4c3dc,
				0xc03976a4,
				0xc06e378e,
				0xc0738078,
				0xc079b265,
				0xc0894af7,
				0xc09bfe41,
				0xc0af9e66,
				0xc0b01adf,
				0xc0d0c304,
				0xc0d710bf,
				0xc104fdc6,
				0xc114a65a,
				0xc135e006,
				0xc13a16f0,
				0xc16217aa,
				0xc162360a,
				0xc174e89a,
				0xc17c1428,
				0xc184dfd2,
				0xc19bc1d2,
				0xc1d16f23,
				0xc1f93e69,
				0xc200c0f1,
				0xc2033e67,
				0xc20633f4,
				0xc2161726,
				0xc2339364,
				0xc243827f,
				0xc297ff25,
				0xc29e736c,
				0xc2e3ab32,
				0xc2e3e902,
				0xc2ff6d4f,
				0xc303b70e,
				0xc3262c87,
				0xc32d74c9,
				0xc3674b40,
				0xc36c9e08,
				0xc375166f,
				0xc381b3e6,
				0xc3e04817,
				0xc3f13fcc,
				0xc40bbb0b,
				0xc41f32bf,
				0xc42c019a,
				0xc4495033,
				0xc44eca22,
				0xc450bd65,
				0xc486b3a9,
				0xc496788b,
				0xc4a5671c,
				0xc4b5775d,
				0xc4c2d702,
				0xc4cd1a66,
				0xc4d260d7,
				0xc4d413b8,
				0xc504912c,
				0xc512cb8e,
				0xc54c0cd2,
				0xc5553c15,
				0xc569d6a1,
				0xc56fc20c,
				0xc577ae9c,
				0xc5891bd6,
				0xc593081d,
				0xc5ac6a0a,
				0xc5b62161,
				0xc5dc419e,
				0xc5de8740,
				0xc5f996e4,
				0xc622d83c,
				0xc660c7aa,
				0xc67f8fca,
				0xc689b79b,
				0xc6922870,
				0xc692fd71,
				0xc6b254ae,
				0xc6e1f6a2,
				0xc6fd3b45,
				0xc6fed6dc,
				0xc71f2e9c,
				0xc732d5b3,
				0x7720344,
				0xc7911492,
				0xc79a987e,
				0xc7c649ff,
				0xc80116bc,
				0xc80467c6,
				0xc82334a0,
				0xc8264238,
				0xc82aa437,
				0xc83b7ca7,
				0xc84984b9,
				0xc84e4eb4,
				0xc89630b8,
				0xc8d5d232,
				0xc91dc9e5,
				0xc93d6143,
				0xc93e7ef7,
				0xc94c4b4c,
				0xc95d4c83,
				0xc9689c03,
				0xc974cdee,
				0xc9a01049,
				0xc9a375d8,
				0xc9ab355d,
				0xc9b3d1a2,
				0xc9da7eba,
				0xc9eb9378,
				0xc9f9fa76,
				0xca167027,
				0xca18c189,
				0xca213512,
				0xca43dfbb,
				0xca5f3c8c,
				0xca655896,
				0xca6d8185,
				0xca8dae8c,
				0xcac428f6,
				0xcad74d94,
				0xcae292d4,
				0xcb0099d4,
				0xcb290ee2,
				0xcb2bf389,
				0xcb2c3311,
				0xcb31aa82,
				0xcb3349a8,
				0xcb74fe41,
				0xcba3b7cb,
				0xcbab0735,
				0xcbc4558e,
				0xcbd626f4,
				0xcbd76893,
				0xcc4b16af,
				0xcc691808,
				0xcc853bb5,
				0xccab2ce8,
				0xccdc8715,
				0xcce52baa,
				0xccf19015,
				0xcd1311a4,
				0xcd1a7f03,
				0xcd4fd8a1,
				0xcd97e151,
				0xcdd8fe00,
				0xcdd9a9e6,
				0xcdeb2be6,
				0xcdf88e2d,
				0xcdff8619,
				0xce1f129d,
				0xce23960a,
				0xce67db4d,
				0xce7e374e,
				0xcea8daab,
				0xceb77eb2,
				0xcec5eb59,
				0xced642c5,
				0xcee6ecac,
				0xcf1e5a76,
				0xcf2f0e21,
				0xcfeca85c,
				0xcff38f71,
				0xd00e75f9,
				0xd02abbb2,
				0xd0357169,
				0xd0df4625,
				0xd0e57090,
				0xd0f2eb57,
				0xd1191a56,
				0xd15dd223,
				0xd186b292,
				0xd1b3e291,
				0xd1c3134d,
				0xd1cca233,
				0xd1cfa7e0,
				0xd1db5101,
				0xd1f5e145,
				0xd219e846,
				0xd2251200,
				0xd22a70cb,
				0xd22d5ad7,
				0xd22e15b8,
				0xd23519d2,
				0xd256393a,
				0xd258b1e2,
				0xd26366ec,
				0xd2786f70,
				0xd2b52967,
				0xd2d24770,
				0xd2e57652,
				0xd2e94182,
				0xd2fd26b7,
				0xd322a87f,
				0xd325cbe5,
				0xd32f8f53,
				0xd334fe8b,
				0xd37a5f68,
				0xd3873805,
				0xd3bef497,
				0xd41b42e1,
				0xd42523cd,
				0xd427b91b,
				0xd4405e08,
				0xd4484c93,
				0xd47c7bb9,
				0xd482b34e,
				0xd4936053,
				0xd4ae5a26,
				0xd4c514bd,
				0xd5094d6d,
				0xd519d463,
				0xd52631f1,
				0xd529e4be,
				0xd5362763,
				0xd588f0a5,
				0xd591aab4,
				0xd593f420,
				0xd59d6b1a,
				0xd5c0bc07,
				0xd5c12a95,
				0xd5f70bea,
				0xd600b572,
				0xd61aecba,
				0xd63183a8,
				0xd64fa0d6,
				0xd67b19e7,
				0xd68a9cdf,
				0xd6aa6804,
				0xd6b12b86,
				0xd6b8ec0c,
				0xd6bf7dbb,
				0xd714ee7c,
				0xd718ad9e,
				0xd71ec202,
				0xd722efa8,
				0xd7695070,
				0xd7744cb7,
				0xd790fc9e,
				0xd7c0143f,
				0xd7ca8d26,
				0xd7ec0edd,
				0xd82eba61,
				0xd84ae7c2,
				0xd8a5878d,
				0xd8bf9a2c,
				0xd8ee57f7,
				0xd8f28047,
				0xd8f7692d,
				0xd8fef003,
				0xd934d62b,
				0xd95a6f7d,
				0xd9601f1f,
				0xd9b2911f,
				0xda17460e,
				0xda5e8452,
				0xda76fe6e,
				0xda94526b,
				0xda9df33d,
				0xdacb82c1,
				0xdafa2489,
				0xdb00b30a,
				0xdb19ec33,
				0xdb24e373,
				0xdb60ad20,
				0xdb86cb89,
				0xdb8b3fc0,
				0xdb8f1a1a,
				0xdbf285f4,
				0xdc280c4e,
				0xdc551884,
				0xdc638ff8,
				0xdc6b48ca,
				0xdc6b5d07,
				0xdc6eae80,
				0xdc8f32e1,
				0xdca9a809,
				0xdcb0a8c7,
				0xdcc78b83,
				0xdce32fba,
				0xdcf1ed25,
				0xdcff71e4,
				0xdd12d554,
				0xdd433942,
				0xdd4b2236,
				0xdd8abbcf,
				0xdd9a1802,
				0xdd9ea431,
				0xdda42ad2,
				0xddb23012,
				0xdded2bb9,
				0xde0192e4,
				0xde08a82e,
				0xde4cbc3a,
				0xde6c3ffe,
				0xde83a424,
				0xde91e699,
				0xde962965,
				0xde9950af,
				0xdea4ebf4,
				0xdee74aff,
				0xdeeab297,
				0xdef387de,
				0xdef682af,
				0xdf217cdc,
				0xdf31c32b,
				0xdf325e57,
				0xdf59ff80,
				0xdf5f9f7f,
				0xdf6e8ace,
				0xdf9841d7,
				0xdfb0893d,
				0xdfd03ff2,
				0xdfd5aaa1,
				0xdfdb51b8,
				0xdff68a19,
				0xdffe95c6,
				0xe013a8b3,
				0xe0264f5d,
				0xe0311180,
				0xe0415048,
				0xe05d9217,
				0xe08ef8f2,
				0xe0b17fe0,
				0xe0c3d6ce,
				0xe0ed938f,
				0xe1497820,
				0xe1583df5,
				0xe15ca04a,
				0xe16f99fb,
				0xe188fb85,
				0xe1a1f963,
				0xe1a367ad,
				0xe1af1b43,
				0xe1b6fe0c,
				0xe1b9ffad,
				0xe1c17f6f,
				0xe1c21b3d,
				0xe1e4c1ca,
				0xe1e50f97,
				0xe2100c79,
				0xe211190e,
				0xe22a202a,
				0xe22b4cd9,
				0xe22f390b,
				0xe231f917,
				0xe258d3ce,
				0xe2ba016f,
				0xe2cf7922,
				0xe2d26e9f,
				0xe2eb322b,
				0xe2ee52b7,
				0xe2fba8d8,
				0xe32c6055,
				0xe33dcac4,
				0xe35b8830,
				0xe37a5f0f,
				0xe393768e,
				0xe39b04ac,
				0xe3ce09e2,
				0xe3d693e9,
				0xe3d71673,
				0xe40a0f8e,
				0xe4212e8d,
				0xe43d331b,
				0xe44d5cec,
				0xe4774712,
				0xe49edebd,
				0xe4a13b99,
				0xe4afb8d2,
				0xe4b0ae85,
				0xe4d12678,
				0xe4df846a,
				0xe508f544,
				0xe513c086,
				0xe51f88d9,
				0xe539c011,
				0xe54fb6c7,
				0xe55a7962,
				0xe567d04b,
				0xe573997b,
				0xe5ba1f6d,
				0xe5c038ba,
				0xe60d45ab,
				0xe62944fb,
				0xe63654e3,
				0xe661157e,
				0xe6bb31ab,
				0xe6c76e5e,
				0xe6cb661e,
				0xe6eae263,
				0xe6fa7770,
				0xe6fc3f54,
				0xe7088147,
				0xe70ed8f9,
				0xe786d826,
				0xe7925523,
				0xe79e68e7,
				0xe7b10066,
				0xe7c5df10,
				0xe7cb7050,
				0xe7d14cab,
				0xe7d3f252,
				0xe7d9dc8e,
				0xe7daa6e6,
				0xe7df9d40,
				0xe7f419bf,
				0xe8147d73,
				0xe817f25b,
				0xe81bda47,
				0xe8617484,
				0xe8842e39,
				0xe8ac7f0f,
				0xe8dad32f,
				0xe8e8aada,
				0xe9010c78,
				0xe918fefb,
				0xe92bfed2,
				0xe92e717e,
				0xe9501c24,
				0xe979d6cd,
				0xe9ddefbf,
				0xe9e2ec92,
				0xe9f7398f,
				0xe9f788ec,
				0xea01a75c,
				0xea52c1db,
				0xea5f89bc,
				0xea85b372,
				0xea892147,
				0xea909ab4,
				0xea98ac78,
				0xea9dab4c,
				0xeacd3c4b,
				0xeaf6c20a,
				0xeafbfa28,
				0xeb133ed3,
				0xeb25e6fc,
				0xeb278b23,
				0xeb2e00e0,
				0xeb4eb54e,
				0xeb59f0c3,
				0xeb7d0265,
				0xeb97ff8a,
				0xeb9f2052,
				0xeba60087,
				0xebcaa414,
				0xebe30bbb,
				0xec013325,
				0xec04c9b8,
				0xec06e146,
				0xec087846,
				0xec1cb97c,
				0xec2d6c2c,
				0xec42b38e,
				0xec48c402,
				0xec5d832a,
				0xec6f1f55,
				0xec9758cf,
				0xece03f63,
				0xecf7e8a8,
				0xed0a985e,
				0xed1357f5,
				0xed1840d2,
				0xed25f13b,
				0xed2e79f0,
				0xed3f3ad6,
				0xed4dfca2,
				0xed82c057,
				0xed92db77,
				0xeda770f8,
				0xeda96f47,
				0xedcdbe97,
				0xedd7c0d3,
				0xede36dc8,
				0xedeb881e,
				0xedf175e9,
				0xedf5cd3c,
				0xee01991c,
				0xee04e7a6,
				0xee0bf0c2,
				0xee1b2337,
				0xee36a8c9,
				0xee5616df,
				0xee57994a,
				0xee5b4c1c,
				0xee5ebc97,
				0xee5f8e23,
				0xee6d0843,
				0xee85163e,
				0xee8a4608,
				0xee8c528f,
				0xeea954bb,
				0xeefa0f14,
				0xef366503,
				0xef4b5cd0,
				0xef4fcfb5,
				0xef6d0839,
				0xef6e4362,
				0xef97ec60,
				0xefa64001,
				0xefaae110,
				0xefb5364b,
				0xefc4165a,
				0xf013c580,
				0xf017500d,
				0xf03beb5f,
				0xf03c985c,
				0xf042f402,
				0xf046ea37,
				0xf0481cc3,
				0xf0a61994,
				0xf0ae274e,
				0xf10c7160,
				0xf123e9f6,
				0xf12d5114,
				0xf14fa119,
				0xf15f72b2,
				0xf15fb3dd,
				0xf16de1ee,
				0xf1844d22,
				0xf1858017,
				0xf1c3c4ca,
				0xf1cc086e,
				0xf22a4ce0,
				0xf23d6019,
				0xf2775005,
				0xf27c4b96,
				0xf2b2e482,
				0xf2bd35bb,
				0xf2bde7de,
				0xf2be7d80,
				0xf3004a06,
				0xf32a6f24,
				0xf3445f43,
				0xf3565180,
				0xf3584679,
				0xf360f3d8,
				0xf394a932,
				0xf3aa2136,
				0xf3ae2877,
				0xf3bf3eb6,
				0xf3c33285,
				0xf3ca5bcb,
				0xf3d8a3c7,
				0xf4053ec1,
				0xf4092dd5,
				0xf4385d0d,
				0xf43fc5e6,
				0xf48428cd,
				0xf4a0ea8f,
				0xf4f1511e,
				0xf53a45fd,
				0xf561110a,
				0xf5676424,
				0xf57433a5,
				0xf578c00d,
				0xf5919088,
				0xf5994263,
				0xf5a7a176,
				0xf5af9d4a,
				0xf5c39f51,
				0xf5d66055,
				0xf62881d0,
				0xf62bc268,
				0xf6361ab7,
				0xf65181cf,
				0xf66f582f,
				0xf68387e8,
				0xf69bf55a,
				0xf6b49cae,
				0xf6ef38b3,
				0xf6ff3f3d,
				0xf71e3328,
				0xf724026d,
				0xf72be7e8,
				0xf73506d3,
				0xf7bab7db,
				0xf7f3479f,
				0xf7fcf988,
				0xf80e2102,
				0xf8275b68,
				0xf8357b46,
				0xf85dd961,
				0xf8bd70b3,
				0xf9132f55,
				0xf91d716c,
				0xf92bdd8a,
				0xf9372cc5,
				0xf9627c39,
				0xf9980bc3,
				0xf9b8b7a0,
				0xfa11bea2,
				0xfa3d47fa,
				0xfa4d7a73,
				0xfa546702,
				0xfa686c0e,
				0xfa7bcf6a,
				0xfae5c85d,
				0xfaeab60d,
				0xfaf5aa0c,
				0xfaf7a1ba,
				0xfb454066,
				0xfb4b9bb7,
				0xfb50d934,
				0xfb631122,
				0xfb6b8a4f,
				0xfb74d039,
				0xfb964e73,
				0xfba10656,
				0xfba21596,
				0xfbdd1813,
				0xfc022e61,
				0xfc0243f5,
				0xfc1c3dcb,
				0xfc27b091,
				0xfc2a1c15,
				0xfc43b487,
				0xfc612f85,
				0xfc818f56,
				0xfcb60416,
				0xfce1e2b7,
				0xfcef5842,
				0xfd17bd49,
				0xfd21dcef,
				0xfd26b232,
				0xfd3a6691,
				0xfd531f0c,
				0xfd595b36,
				0xfd6166a5,
				0xfd693ffe,
				0xfd6c9f0f,
				0xfd710be1,
				0xfd7a813a,
				0xfd8a3806,
				0xfd8dc6e8,
				0xfdbea6e8,
				0xfdbeb5b0,
				0xfdcc6b19,
				0xfdeb82cf,
				0xfe401883,
				0xfe64a913,
				0xfe692197,
				0xfe6e928a,
				0xfe9fd22c,
				0xfeb8b69b,
				0xfefa2a3a,
				0xff084195,
				0xff1f92a2,
				0xff2ea296,
				0xff374a2b,
				0xff426713,
				0xff7d7d88,
				0xff93aa35,
				0xffa54e54,
				0xffac631b,
				0xffdc3b30,
				0xfffca75c };
			DWORD Model = Obj[random];
			Object ObJect = OBJECT::CREATE_OBJECT(Model, SPosition.x, SPosition.y, SPosition.z, 1, 1, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Model);
			if (ENTITY::DOES_ENTITY_EXIST(ObJect))
			{
				ENTITY::SET_ENTITY_RECORDS_COLLISIONS(ObJect, true);
				for (float f = 0.0f; f < 75.0f; f++) {
					if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(ObJect))
						ENTITY::APPLY_FORCE_TO_ENTITY(ObJect, 1, Dir.x*10.0f, Dir.y*20.0f, Dir.z*10.0f, 0.0f, 0.0f, 0.0f, 0, 0, 1, 1, 0, 1);
					WAIT(0);
				}
			}
		}
	}
}



bool Features::orboolfr[35] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
void Features::OffRadarfr(Player target)
{
	if (OffRadarfr)
	{
		Player kek = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(Features::Online::selectedPlayer);
		globalHandle(2423841).At(kek, 406).As<bool>() = !!!!!false; //i have globals right, but i not find it on freemode.c script lol hm wait i wanna check something 
		globalHandle(2436711).As<int>() = NETWORK::GET_NETWORK_TIME(kek);
	}

}


char* FtoS22(float input)
{
	char returnvalue[64];
	int wholenumber = (int)input;
	input -= wholenumber;
	input *= 100;
	sprintf(returnvalue, "%d.%d", wholenumber, (int)input);
	return returnvalue;
}
char *ItoS22(int num)
{
	char buf[30];
	_snprintf(buf, sizeof(buf), "%i", num);
	return buf;
}


void Features::selfinfo(bool toggle) {


	char* host;
	if (NETWORK::NETWORK_IS_HOST()) {
		host = "~g~true";
	}
	else {
		host = "~g~false";
	}
	char* hoster;
	for (int i = 0; i <= 32; i++) {
		Ped Handle = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
		Player Host = NETWORK::NETWORK_GET_HOST_OF_SCRIPT("Freemode", -1, 0);
		if (Host == i) {
			hoster = PLAYER::GET_PLAYER_NAME(i);
		}
	}
	if (sizeof(hoster) / sizeof(char) > 2) {
		hoster = "~r~Unknown";
	}
	else {
		ostringstream hostercolored;
		hostercolored << "~g~" << hoster;
		hoster = (char*)hostercolored.str().c_str();
	}
	Ped playerPed = PLAYER::PLAYER_PED_ID();
	Vector3 pCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
	Hash model = 0;
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 1))
		model = ENTITY::GET_ENTITY_MODEL(PED::GET_VEHICLE_PED_IS_IN(playerPed, 1));
	char* vehicleModel = "";
	if (model != 0)
		vehicleModel = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(model);
	ostringstream playername;
	playername << "~g~" << PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID()) << "~g~";
	std::string hoststring = (std::string)"Host: " + host;
	std::string PlayerNameString = (std::string)"Player Name: " + playername.str();
	std::string hostStr = (std::string)"Session Host: " + hoster;

	Menu::Main::ExtraTitle("Self Info");// well its a togle
	Menu::Main::ExtraOption((char*)hoststring.c_str()); // you have same problem here? Yes
	Menu::Main::ExtraOption((char*)PlayerNameString.c_str());
	Menu::Main::ExtraOption((char*)hostStr.c_str());
	if (model != 0) {
		ostringstream modelNameColored;

		modelNameColored << "~g~" << vehicleModel;
		std::string VehModel = (std::string)"Vehicle Model: " + modelNameColored.str();
		Menu::Main::ExtraOption((char*)VehModel.c_str());
	}
	else {
		Menu::Main::ExtraOption("Vehicle Model: ~r~None");
	}
	std::string XCoord = (std::string)"X: " + FtoS22(pCoords.x);
	std::string YCoord = (std::string)"Y: " + FtoS22(pCoords.y);
	std::string ZCoord = (std::string)"Z: " + FtoS22(pCoords.z);
	Menu::Main::ExtraOption((char*)XCoord.c_str());
	Menu::Main::ExtraOption((char*)YCoord.c_str());
	Menu::Main::ExtraOption((char*)ZCoord.c_str());
	int griefing, annoyingme, hate, offensiveLanguage, offensivetagplate, GameExploit, Exploits;
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GRIEFING"), &griefing, 0);
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_ANNOYINGME"), &annoyingme, 0);//Voice Chat
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_VC_HATE"), &hate, 0);//Voice Chat
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_LANGUAGE"), &offensiveLanguage, 0);
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_OFFENSIVE_TAGPLATE"), &offensivetagplate, 0);
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_GAME_EXPLOITS"), &GameExploit, 0);
	STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("MPPLY_EXPLOITS"), &Exploits, 0);
	std::string greifingreps = (std::string)"Griefing Reports: " + ItoS22(griefing);
	std::string haterps = (std::string)"[VOICE CHAT] Hate Reports: " + ItoS22(hate);//
	std::string expreps = (std::string)"Game Exploit Reports: " + ItoS22(GameExploit);
	std::string gameexpreps = (std::string)"Game Exploit Reports: " + ItoS22(Exploits);//
	if (NETWORK::NETWORK_IS_IN_SESSION()) {
		Menu::Main::ExtraOption((char*)greifingreps.c_str());// you have no clue how tedious this is XD
		Menu::Main::ExtraOption((char*)haterps.c_str());
		Menu::Main::ExtraOption((char*)expreps.c_str());
		Menu::Main::ExtraOption((char*)gameexpreps.c_str());//should be good well 
	}
	else {

	}
}





























bool load2() {
	notifyBottom("~g~Steer with the mouse & and move on with w...");
	WAIT(90);
	return true;
}

bool Features::free_cam = false;
void Features::freecam(bool toggle)
{// can i get it? :joy: what i get it for ? haha nothing, i'm just kidding xD but i need to fix ur shitly info :joy: hmm
	static bool lock;
	static std::int32_t cam;
	static float dist;
	auto rot = CAM::GET_GAMEPLAY_CAM_ROT(0);
	auto coord = CAM::GET_GAMEPLAY_CAM_COORD();
	Vector3 p_coord = { 0,0,0 };
	if (!CAM::DOES_CAM_EXIST(cam)) {
		cam = CAM::CREATE_CAM("DEFAULT_SCRIPTED_CAMERA", 1);
		CAM::SET_CAM_ROT(cam, rot.x, rot.y, rot.z, 0);
		CAM::SET_CAM_COORD(cam, coord.x, coord.y, coord.z);
	}
	if (!toggle)
	{
		CAM::RENDER_SCRIPT_CAMS(false, true, 700, 1, 1);
		CAM::SET_CAM_ACTIVE(cam, 0);
		CAM::DESTROY_CAM(cam, true);
		PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 0);
	}

	CAM::RENDER_SCRIPT_CAMS(true, true, 700, 1, 1);
	CAM::SET_CAM_ACTIVE(cam, 1);
	CAM::SET_CAM_ROT(cam, rot.x, rot.y, rot.z, 0);

	p_coord = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);

	ENTITY::SET_ENTITY_COORDS_NO_OFFSET(PLAYER::PLAYER_PED_ID(), p_coord.x, p_coord.y, p_coord.z, 0, 0, 0);
	PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 1);
	UI::HIDE_HUD_AND_RADAR_THIS_FRAME();

	auto speed = .5f;
	if (IsKeyPressed(VK_LSHIFT))
	{
		speed += .3f;
	}

	if (IsKeyPressed(VK_KEY_S))
	{
		speed /= -1;
		auto c = add(&CAM::GET_CAM_COORD(cam), &multiply(&rot_to_direction(&rot), speed));
		CAM::SET_CAM_COORD(cam, c.x, c.y, c.z);
	}

	if (IsKeyPressed(VK_KEY_W))
	{
		auto c = add(&CAM::GET_CAM_COORD(cam), &multiply(&rot_to_direction(&rot), speed));
		CAM::SET_CAM_COORD(cam, c.x, c.y, c.z);
	}
	/*load2();*/
}

bool Features::jokokok = true;
void Features::teleport_to_marker(bool toggle)
{
	if (IsKeyPressed(VK_F5))
	{
		Vector3 coords = get_blip_marker();

		if (coords.x == 0 && coords.y == 0)
		{
			notifyMap("No Waypoint has been set!", 0);
			return;
		}

		// get entity to teleport
		Entity e = PLAYER::PLAYER_PED_ID();
		if (PED::IS_PED_IN_ANY_VEHICLE(e, 0))
		{
			e = PED::GET_VEHICLE_PED_IS_USING(e);
		}

		// load needed map region and check height levels for ground existence
		bool groundFound = false;
		static float groundCheckHeight[] =
		{ 100.0, 150.0, 50.0, 0.0, 200.0, 250.0, 300.0, 350.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0 };
		for (int i = 0; i < sizeof(groundCheckHeight) / sizeof(float); i++)
		{
			ENTITY::SET_ENTITY_COORDS_NO_OFFSET(e, coords.x, coords.y, groundCheckHeight[i], 0, 0, 1);
			WAIT(100);
			if (GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(coords.x, coords.y, groundCheckHeight[i], &coords.z, 0))
			{
				groundFound = true;
				coords.z += 3.0;
				break;
			}
		}
		// if ground not found then set Z in air and give player a parachute
		if (!groundFound)
		{
			coords.z = 1000.0;
			WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFBAB5776, 1, 0);
		}
		//do it
		teleport_to_coords(e, coords);

	}

}

Entity rope_ent0;
Object first_rope;
bool attached_first;

bool Features::ROPEGUN = false;
void Features::ropegun(bool toggle) {

	auto camCoords = CAM::GET_GAMEPLAY_CAM_COORD();
	auto farCoords = add(&CAM::GET_GAMEPLAY_CAM_COORD(), &multiply(&rot_to_direction(&CAM::GET_GAMEPLAY_CAM_ROT(0)), 100.f));
	BOOL hit; Vector3 endCoords; Vector3 surfaceNormal; Entity ent = 0;
	auto ray = WORLDPROBE::_START_SHAPE_TEST_RAY(camCoords.x, camCoords.y, camCoords.z, farCoords.x, farCoords.y, farCoords.z, -1, PLAYER::PLAYER_PED_ID(), 7);
	WORLDPROBE::GET_SHAPE_TEST_RESULT(ray, &hit, &endCoords, &surfaceNormal, &ent);
	notifyMap(("Entity: " + std::to_string(ent) + " Ray: " + std::to_string(ray) + " Hit: " + std::to_string(hit)).c_str());
	if (CONTROLS::IS_CONTROL_PRESSED(2, INPUT_AIM) || IsKeyPressed(VK_RBUTTON)) {
		if (ENTITY::DOES_ENTITY_EXIST(ent) && (ENTITY::IS_ENTITY_A_PED(ent) || ENTITY::IS_ENTITY_A_VEHICLE(ent) || ENTITY::IS_ENTITY_AN_OBJECT(ent))) {
			if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
				ROPE::ROPE_LOAD_TEXTURES();
				auto pweapon = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
				auto pwep_coord = ENTITY::GET_ENTITY_COORDS(pweapon, 1);
				if (!attached_first) {
					first_rope = ROPE::ADD_ROPE(pwep_coord.x, pwep_coord.y, pwep_coord.z, 0, 0, 0,
						distanceBetween(ENTITY::GET_ENTITY_COORDS(ent, 1), pwep_coord), 1, 300, 0.5f, 0.5f, false, true, true, 1.0f, false, 0);
					Vector3 c0 = pwep_coord;
					Vector3 c1 = ENTITY::GET_ENTITY_COORDS(ent, 1);
					ROPE::ATTACH_ENTITIES_TO_ROPE(first_rope, pweapon, ent, c0.x, c0.y, c0.z, c1.x, c1.y, c1.z, distanceBetween(ENTITY::GET_ENTITY_COORDS(ent, 1), pwep_coord) + 40.f, 0, 0, NULL, NULL);
					ROPE::ACTIVATE_PHYSICS(first_rope);
					rope_ent0 = ent;
					attached_first = true;
				}
				else {
					ROPE::DELETE_ROPE(&first_rope);
					Vector3 c0 = ENTITY::GET_ENTITY_COORDS(rope_ent0, 1);
					Vector3 c1 = ENTITY::GET_ENTITY_COORDS(ent, 1);
					first_rope = ROPE::ADD_ROPE(pwep_coord.x, pwep_coord.y, pwep_coord.z, 0, 0, 0,
						distanceBetween(ENTITY::GET_ENTITY_COORDS(rope_ent0, 1), ENTITY::GET_ENTITY_COORDS(ent, 1)), 1, 300, 0.5f, 0.5f, false, true, true, 1.0f, false, 0);
					ROPE::ACTIVATE_PHYSICS(first_rope);
					ROPE::ATTACH_ENTITIES_TO_ROPE(first_rope, rope_ent0, ent, c0.x, c0.y, c0.z, c1.x, c1.y, c1.z, distanceBetween(ENTITY::GET_ENTITY_COORDS(rope_ent0, 1), ENTITY::GET_ENTITY_COORDS(ent, 1)), 0, 0, NULL, NULL);
					first_rope = NULL;
					attached_first = false;
				}
			}
		}
	}
	else { ROPE::DELETE_ROPE(&first_rope); attached_first = false; }
}

int bomber_ting;
Vector3 bomb_coords;
bool bomber_cooldown;
bool bomber_countdown;
bool Features::bomber;
void Features::bomber_mode(bool toggle) {
	if (PED::IS_PED_IN_ANY_HELI(PLAYER::PLAYER_PED_ID()) || PED::IS_PED_IN_ANY_PLANE(PLAYER::PLAYER_PED_ID())) {
		Vector3 c = ENTITY::GET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 1);
		GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(c.x, c.y, c.z, &c.z, 0);
		if (!bomber_countdown)
			bomb_coords = c;
		GRAPHICS::DRAW_MARKER(6, bomb_coords.x, bomb_coords.y, bomb_coords.z, 0.f, 0.f, 0.f, 90.f, 0.f, 0.f, 15.f, 15.f, 15.f, 255, 0, 0, 150, 0, 0, 0, 0, NULL, NULL, 0);

		static auto ticker = GetTickCount();
		if (bomber_cooldown) {
			if ((GetTickCount() - ticker) >= 3500) {
				bomber_cooldown = false;
				ticker = GetTickCount();
			}
		}

		static auto ticcker = GetTickCount();
		if (bomber_countdown) {
			if ((GetTickCount() - ticcker) >= 1500) {
				FIRE::ADD_EXPLOSION(bomb_coords.x, bomb_coords.y, bomb_coords.z, ExplosionTypeBlimp, 10.f, true, false, 0.f);
				notifyBottom("~g~Completed.");
				bomber_ting = 0;
				bomber_countdown = false;
				ticcker = GetTickCount();
			}
		}

		if (IsKeyPressed(VK_SPACE) && !bomber_cooldown) {
			ticcker = GetTickCount();
			ticker = GetTickCount();
			notifyBottom("~s~Wait...");
			bomb_coords = c;
			bomber_countdown = true;
			bomber_cooldown = true;
		}
	}
}

bool Features::ride_container;
void Features::container_rider(bool toggle) {
	static Object container;
	auto selfVeh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	Vector3 min, max;
	Vector3 cmin, cmax;
	Vector3 c = ENTITY::GET_ENTITY_COORDS(selfVeh, 1);

	GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(selfVeh), &min, &max);
	GAMEPLAY::GET_MODEL_DIMENSIONS($("prop_container_01a"), &cmin, &cmax);

	if (!PED::IS_PED_ON_ANY_BIKE(PLAYER::PLAYER_PED_ID())) {
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0)) {
			notifyBottom("~r~Container rider requires a bike.");
			return;
		}
	}

	if (!STREAMING::HAS_MODEL_LOADED($("prop_container_01a")))
		STREAMING::REQUEST_MODEL($("prop_container_01a"));

	if (!ENTITY::DOES_ENTITY_EXIST(container) || !VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(selfVeh)) {
		static auto tickeer = GetTickCount();
		if ((GetTickCount() - tickeer) >= 1000) {
			if (CONTROLS::IS_CONTROL_PRESSED(2, INPUT_VEH_FLY_PITCH_UP_ONLY)) {
				tickeer = GetTickCount();
				ENTITY::APPLY_FORCE_TO_ENTITY(selfVeh, 0, 0, 0, 1.5, 0, 0, 0, 0, 1, 1, 1, 0, 1);
			}
		}
		static auto ticker = GetTickCount();
		if (ENTITY::DOES_ENTITY_EXIST(container)) {
			RequestControlOfEnt(container);
			ENTITY::SET_ENTITY_COORDS(container, 0.f, 0.f, 0.f, 1, 1, 1, 0);
			ENTITY::DELETE_ENTITY(&container);
			OBJECT::DELETE_OBJECT(&container);
		}
		container = OBJECT::CREATE_OBJECT($("prop_container_01a"), c.x, c.y, c.z - ((max.z / 2) + cmax.z), 1, 1, 0);
		ENTITY::SET_ENTITY_ROTATION(container, ENTITY::GET_ENTITY_PITCH(selfVeh), 0.f, ENTITY::GET_ENTITY_HEADING(selfVeh), 0, 0);
	}
}

bool Features::VALKYIREROCKET = false;
void Features::valkyirerocket(bool toggle)
{
	static std::int32_t rocket, cam;
	static std::uint8_t y;
	static float bar;
	static bool init;
	if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
		if (!init) init = true;
	}
	if (init) {
		if (!ENTITY::DOES_ENTITY_EXIST(rocket)) {
			auto weapon = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(PLAYER::PLAYER_PED_ID());
			auto c = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(weapon, 0.f, 1.f, 0.f);
			rocket = OBJECT::CREATE_OBJECT($("w_lr_rpg_rocket"), c.x, c.y, c.z, 1, 1, 0);
			CAM::DESTROY_ALL_CAMS(true);
			cam = CAM::CREATE_CAM("DEFAULT_SCRIPTED_CAMERA", 1);
			CAM::ATTACH_CAM_TO_ENTITY(cam, rocket, 0.f, 0.f, 0.f, 1);
			CAM::RENDER_SCRIPT_CAMS(1, true, 700, 1, 1);
			CAM::SET_CAM_ACTIVE(cam, 1);
			ENTITY::SET_ENTITY_VISIBLE(rocket, 0, 0);
			bar = .5f; y = 255;
		}
		else {
			CAM::SET_CAM_ROT(cam, CAM::GET_GAMEPLAY_CAM_ROT(0).x, CAM::GET_GAMEPLAY_CAM_ROT(0).y, CAM::GET_GAMEPLAY_CAM_ROT(0).z, 0);
			ENTITY::SET_ENTITY_ROTATION(rocket, CAM::GET_GAMEPLAY_CAM_ROT(0).x, CAM::GET_GAMEPLAY_CAM_ROT(0).y, CAM::GET_GAMEPLAY_CAM_ROT(0).z, 0, 1);

			auto c = add(&ENTITY::GET_ENTITY_COORDS(rocket, 1), &multiply(&rot_to_direction(&CAM::GET_GAMEPLAY_CAM_ROT(0)), .8f));
			ENTITY::SET_ENTITY_COORDS(rocket, c.x, c.y, c.z, 0, 0, 0, 0);

			UI::HIDE_HUD_AND_RADAR_THIS_FRAME();
			PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 1);
			ENTITY::FREEZE_ENTITY_POSITION(PLAYER::PLAYER_PED_ID(), 1);
			UI::_BLOCK_WEAPON_WHEEL_THIS_FRAME();

			GRAPHICS::DRAW_RECT(0.5f, 0.5f - 0.025f, 0.050f, 0.002f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f, 0.5f + 0.025f, 0.050f, 0.002f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f - 0.025f, 0.5f, 0.002f, 0.050f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f + 0.025f, 0.5f, 0.002f, 0.050f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f + 0.05f, 0.5f, 0.050f, 0.002f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f - 0.05f, 0.5f, 0.050f, 0.002f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f, 0.5f + 0.05f, 0.002f, 0.050f, 255, 255, 255, 255);
			GRAPHICS::DRAW_RECT(0.5f, 0.5f - 0.05f, 0.002f, 0.050f, 255, 255, 255, 255);
			GRAPHICS::SET_TIMECYCLE_MODIFIER("CAMERA_secuirity");

			GRAPHICS::DRAW_RECT(0.25f, 0.5f, 0.03f, 0.5f, 255, 255, 255, 255);
			static auto ticker = GetTickCount();
			if (GetTickCount() - ticker >= 100) {
				bar -= .01f; y -= 4; ticker = GetTickCount();
			}
			GRAPHICS::DRAW_RECT(0.25f, 0.75f - (bar / 2), 0.03f, bar, 255, y, 0, 255);

			float groundZ;
			GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(ENTITY::GET_ENTITY_COORDS(rocket, 1).x, ENTITY::GET_ENTITY_COORDS(rocket, 1).y, ENTITY::GET_ENTITY_COORDS(rocket, 1).z, &groundZ, 0);
			if (ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(rocket) ||
				(std::abs(ENTITY::GET_ENTITY_COORDS(rocket, 1).z - groundZ) < .5f) ||
				bar <= 0.01) {
				auto impact_coord = ENTITY::GET_ENTITY_COORDS(rocket, 1); ENTITY::FREEZE_ENTITY_POSITION(PLAYER::PLAYER_PED_ID(), 0);
				FIRE::ADD_EXPLOSION(impact_coord.x, impact_coord.y, impact_coord.z, 0, 10.f, 1, 0, .4f);
				ENTITY::DELETE_ENTITY(&rocket);
				rocket = 0;
				PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 0);
				CAM::RENDER_SCRIPT_CAMS(0, true, 700, 1, 1);
				CAM::DESTROY_CAM(cam, 1);
				GRAPHICS::SET_TIMECYCLE_MODIFIER("DEFAULT");
				init = false;
			}
		}
	}
	if (!VALKYIREROCKET) {
		CAM::DESTROY_CAM(cam, 1);
		PLAYER::DISABLE_PLAYER_FIRING(PLAYER::PLAYER_PED_ID(), 0);
		rocket = 0;
		bar = .5f;
		y = 255;
		ENTITY::FREEZE_ENTITY_POSITION(PLAYER::PLAYER_PED_ID(), 0);
	}
}




//Hooking.cpp
#pragma once
#include "stdafx.h"
const auto console = new Console;


using namespace Memory;

ScriptThread*(*GetActiveThread)() = nullptr;
HMODULE _hmoduleDLL;
HANDLE mainFiber;
DWORD wakeAt;

std::vector<LPVOID>		Hooking::m_hooks;
uint64_t*				Hooking::m_frameCount;
fpIsDLCPresent			Hooking::is_DLC_present;
fpStatSetFloat          Hooking::stat_set_float;
fpStatSetBool           Hooking::stat_set_bool;
fpStatSetInt            Hooking::stat_set_int;
fpIsEntityDead			Hooking::is_entity_dead;
fpCreateAmbientPickup	Hooking::create_ambient_pickup;
fpGetPlayerName         Hooking::get_player_name;
fpCreateVehicle         Hooking::create_vehicle;
void*                   Hooking::m_onlineName;
static eGameState* 											m_gameState;
static fpFileRegister                                       m_fileregister;
static uint64_t												m_worldPtr;
static BlipList*											m_blipList;
static Hooking::NativeRegistrationNew**						m_registrationTable;
static std::unordered_map<uint64_t, Hooking::NativeHandler>	m_handlerCache;
static std::vector<LPVOID>									m_hookedNative;
static __int64**                                            m_globalPtr;
static std::vector<void*> EventPtr;
static char EventRestore[REVENT_END] = {};

const int EVENT_COUNT = 78;



/* Start Hooking */
void Hooking::Start(HMODULE hmoduleDLL)
{
	console->writeString("Hooking");
	_hmoduleDLL = hmoduleDLL;
	Log::Init(hmoduleDLL);
	FindPatterns();
	if (!InitializeHooks()) Cleanup();
}
void Hooking::patchEvent(RockstarEvent e, bool toggle) {
	if (EventPtr.size() == 0) return;
	static const BYTE ret = 0xC3;
	BYTE* ptr = (BYTE*)EventPtr[e];
	if (toggle) {
		if (EventRestore[e] == 0) EventRestore[e] = ptr[0];
		*ptr = ret;
	}
	else if (EventRestore[e] != 0) *ptr = EventRestore[e];
}
BOOL Hooking::InitializeHooks()
{
	BOOL returnVal = TRUE;

	if (!iHook.Initialize()) {

		//Log::Error("Failed to initialize InputHook");
		console->writeString("Failed to initialize InputHook");
		returnVal = FALSE;
	}

	if (MH_Initialize() != MH_OK) {
		console->writeString("MinHook failed to initialize");
		returnVal = FALSE;
	}

	if (!HookNatives()) {

		console->writeString("Failed to initialize NativeHooks");
		returnVal = FALSE;
	}

	return returnVal;
}

template <typename T>
bool Native(DWORD64 hash, LPVOID hookFunction, T** trampoline)
{
	if (*reinterpret_cast<LPVOID*>(trampoline) != NULL)
		return true;
	auto originalFunction = Hooking::GetNativeHandler(hash);
	if (originalFunction != 0) {
		MH_STATUS createHookStatus = MH_CreateHook(originalFunction, hookFunction, reinterpret_cast<LPVOID*>(trampoline));
		if (((createHookStatus == MH_OK) || (createHookStatus == MH_ERROR_ALREADY_CREATED)) && (MH_EnableHook(originalFunction) == MH_OK))
		{
			m_hookedNative.push_back((LPVOID)originalFunction);
			DEBUGMSG("Hooked Native 0x%#p", hash);
			return true;
		}
	}

	return false;
}

uint64_t CMetaData::m_begin = 0;
uint64_t CMetaData::m_end = 0;
DWORD CMetaData::m_size = 0;

uint64_t CMetaData::begin()
{
	return m_begin;
}
uint64_t CMetaData::end()
{
	return m_end;
}
DWORD CMetaData::size()
{
	return m_size;
}

void CMetaData::init()
{
	if (m_begin && m_size)
		return;

	m_begin = (uint64_t)GetModuleHandleA(nullptr);
	const IMAGE_DOS_HEADER*	headerDos = (const IMAGE_DOS_HEADER*)m_begin;
	const IMAGE_NT_HEADERS*	headerNt = (const IMAGE_NT_HEADERS64*)((const BYTE*)headerDos + headerDos->e_lfanew);
	m_size = headerNt->OptionalHeader.SizeOfCode;
	m_end = m_begin + m_size;
	return;
}
uint64_t * m_frameCount;
fpIsDLCPresent	OG_IS_DLC_PRESENT = nullptr;
BOOL __cdecl HK_IS_DLC_PRESENT()
{
	static uint64_t	last = 0;
	uint64_t		cur = *Hooking::m_frameCount;
	if (last != cur)
	{
		last = cur;
		Hooking::onTickInit();
	}
	return OG_IS_DLC_PRESENT();
}
/*Hooking::NativeHandler ORIG_WAIT = NULL;
void* __cdecl MY_WAIT(NativeContext *cxt)
{
static int lastThread = 0;
int threadId = SCRIPT::GET_ID_OF_THIS_THREAD();
if (!lastThread)
{
char* name = SCRIPT::_GET_NAME_OF_THREAD(threadId);
if (strcmp(name, "main_persistent") == 0)
{
lastThread = threadId;
Log::Msg("Hooked Script NAME: %s ID: %i", name, threadId);
}
}
if (threadId == lastThread) Hooking::onTickInit();
ORIG_WAIT(cxt);
return cxt;
}*/

Hooking::NativeHandler  ORIG_NETWORK_SESSION_KICK_PLAYER = NULL;
void *__cdecl MY_NETWORK_SESSION_KICK_PLAYER(NativeContext* cxt)
{
	Player player = cxt->GetArgument<int>(0);
	if (player == PLAYER::PLAYER_ID())
	{
		ORIG_NETWORK_SESSION_KICK_PLAYER(cxt);
	}
	return nullptr;
}


Hooking::NativeHandler  ORIG_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE = NULL;
void *__cdecl MY_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(NativeContext* cxt)
{
	Player player = cxt->GetArgument<int>(0);
	if (player == PLAYER::PLAYER_ID())
	{
		ORIG_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(cxt);
	}
	return nullptr;
}

Hooking::NativeHandler  ORIG_ATTACH_ENTITY_TO_ENTITY = NULL;
void *__cdecl MY_ATTACH_ENTITY_TO_ENTITY(NativeContext* cxt)
{
	Player player = cxt->GetArgument<int>(0);
	if (player == PLAYER::PLAYER_ID())
	{
		ORIG_ATTACH_ENTITY_TO_ENTITY(cxt);
	}
	return nullptr;
}

Hooking::NativeHandler ORIG_CLEAR_PED_TASKS_IMMEDIATELY = NULL;
void *__cdecl MY_CLEAR_PED_TASKS_IMMEDIATELY(NativeContext *cxt)
{
	if (cxt->GetArgument<Ped>(0) != PLAYER::PLAYER_PED_ID())
	{
		ORIG_CLEAR_PED_TASKS_IMMEDIATELY(cxt);
	}

	return nullptr;
}

Hooking::NativeHandler ORIG_CLEAR_PED_TASKS = NULL;
void *__cdecl MY_CLEAR_PED_TASKS(NativeContext *cxt)
{
	if (cxt->GetArgument<Ped>(0) != PLAYER::PLAYER_PED_ID())
	{
		ORIG_CLEAR_PED_TASKS(cxt);
	}

	return nullptr;
}

Hooking::NativeHandler ORIG_CLEAR_PED_SECONDARY_TASK = NULL;
void *__cdecl MY_CLEAR_PED_SECONDARY_TASK(NativeContext *cxt)
{
	if (cxt->GetArgument<Ped>(0) != PLAYER::PLAYER_PED_ID())
	{
		ORIG_CLEAR_PED_SECONDARY_TASK(cxt);
	}
	return nullptr;
}

Hooking::NativeHandler ORIG_CLONE_PED = NULL;
void *__cdecl MY_CLONE_PED(NativeContext *cxt)
{
	if (cxt->GetArgument<Ped>(0) != PLAYER::PLAYER_PED_ID())
	{
		ORIG_CLONE_PED(cxt);
	}
	return nullptr;
}


/*bool Hooking::HookNatives()
{
MH_STATUS status = MH_CreateHook(Hooking::is_DLC_present, HK_IS_DLC_PRESENT, (void**)&OG_IS_DLC_PRESENT);
if ((status != MH_OK && status != MH_ERROR_ALREADY_CREATED) || MH_EnableHook(Hooking::is_DLC_present) != MH_OK)
return false;
Hooking::m_hooks.push_back(Hooking::is_DLC_present);
return true;
}*/
bool Hooking::HookNatives() //hooking is fine
{
	auto p_frameCount = pattern("8B 15 ? ? ? ? 41 FF CF");
	char * frameCountPtr = p_frameCount.count(1).get(0).get<char>(2); // 2 byte offset
	int32_t rel = *(int32_t*)frameCountPtr;
	m_frameCount = (uint64_t*)(frameCountPtr + rel + sizeof(rel));
	MH_STATUS status = MH_CreateHook(is_DLC_present, HK_IS_DLC_PRESENT, (void**)&OG_IS_DLC_PRESENT);
	if ((status != MH_OK || status != MH_ERROR_ALREADY_CREATED) && (MH_EnableHook(is_entity_dead) != MH_OK)) {
		Log::Error("Failed to create hook %d", status);
		return false;
	}
	else {
		m_hookedNative.push_back(is_DLC_present);
		return true;
	}
}

void __stdcall ScriptFunction(LPVOID lpParameter)
{
	try
	{
		ScriptMain();

	}
	catch (...)
	{
		console->writeString("Failed scriptFiber");
	}
}

void Hooking::onTickInit()
{
	if (mainFiber == nullptr)
		mainFiber = ConvertThreadToFiber(nullptr);

	if (timeGetTime() < wakeAt)
		return;

	static HANDLE scriptFiber;
	if (scriptFiber)
		SwitchToFiber(scriptFiber);
	else
		scriptFiber = CreateFiber(NULL, ScriptFunction, nullptr);
}

void Hooking::FailPatterns(const char* name)
{
	char buf[4096];
	sprintf_s(buf, "finding %s", name);
	Log::Error(buf);
	Cleanup();
}



/*
//CPatternResult
*/

CPatternResult::CPatternResult(void* pVoid) :
	m_pVoid(pVoid)
{}
CPatternResult::CPatternResult(void* pVoid, void* pBegin, void* pEnd) :
	m_pVoid(pVoid),
	m_pBegin(pBegin),
	m_pEnd(pEnd)
{}
CPatternResult::~CPatternResult() {}

/*
//CPattern Public
*/

CPattern::CPattern(char* szByte, char* szMask) :
	m_szByte(szByte),
	m_szMask(szMask),
	m_bSet(false)
{}
CPattern::~CPattern() {}

CPattern&	CPattern::find(int i, uint64_t startAddress)
{
	match(i, startAddress, false);
	if (m_result.size() <= i)
		m_result.push_back(nullptr);
	return *this;
}

CPattern&	CPattern::virtual_find(int i, uint64_t startAddress)
{
	match(i, startAddress, true);
	if (m_result.size() <= i)
		m_result.push_back(nullptr);
	return *this;
}

CPatternResult	CPattern::get(int i)
{
	if (m_result.size() > i)
		return m_result[i];
	return nullptr;
}

/*
//CPattern Private
*/
bool	CPattern::match(int i, uint64_t startAddress, bool virt)
{
	if (m_bSet)
		return false;
	uint64_t	begin = 0;
	uint64_t	end = 0;
	if (!virt)
	{
		CMetaData::init();
		begin = CMetaData::begin() + startAddress;
		end = CMetaData::end();
		if (begin >= end)
			return false;
	}
	int		j = 0;
	do
	{
		if (virt)
			begin = virtual_find_pattern(startAddress, (BYTE*)m_szByte, m_szMask) + 1;
		else
			begin = find_pattern(begin, end, (BYTE*)m_szByte, m_szMask) + 1;
		if (begin == NULL)
			break;
		j++;
	} while (j < i);

	m_bSet = true;
	return true;
}

bool	CPattern::byte_compare(const BYTE* pData, const BYTE* btMask, const char* szMask)
{
	for (; *szMask; ++szMask, ++pData, ++btMask)
		if (*szMask == 'x' && *pData != *btMask)
			break;
	if ((*szMask) != 0)
		return false;
	return true;
}


uint64_t	CPattern::find_pattern(uint64_t address, uint64_t end, BYTE *btMask, char *szMask)
{
	size_t len = strlen(szMask) + 1;
	for (uint64_t i = 0; i < (end - address - len); i++)
	{
		BYTE*	ptr = (BYTE*)(address + i);
		if (byte_compare(ptr, btMask, szMask))
		{
			m_result.push_back(CPatternResult((void*)(address + i)));
			return address + i;
		}
	}
	return NULL;
}

uint64_t	CPattern::virtual_find_pattern(uint64_t address, BYTE *btMask, char *szMask)
{
	MEMORY_BASIC_INFORMATION mbi;
	char*	pStart = nullptr;
	char*	pEnd = nullptr;
	char*	res = nullptr;
	size_t	maskLen = strlen(szMask);

	while (res == nullptr && sizeof(mbi) == VirtualQuery(pEnd, &mbi, sizeof(mbi)))
	{
		pStart = pEnd;
		pEnd += mbi.RegionSize;
		if (mbi.Protect != PAGE_READWRITE || mbi.State != MEM_COMMIT)
			continue;

		for (int i = 0; pStart < pEnd - maskLen && res == nullptr; ++pStart)
		{
			if (byte_compare((BYTE*)pStart, btMask, szMask))
			{
				m_result.push_back(CPatternResult((void*)pStart, mbi.BaseAddress, pEnd));
				res = pStart;
			}
		}

		mbi = {};
	}
	return (uint64_t)res;
}

void	failPat(const char* name)
{
	Log::Fatal("Failed to find %s pattern.", name);
	exit(0);
}

void mem_nop2(void* ptr, int size)
{
	memset(ptr, 0x90, size);
}

template <typename T>
void	setPat
(
	const char*	name,
	char*		pat,
	char*		mask,
	T**			out,
	bool		rel,
	int			offset = 0,
	int			deref = 0,
	int			skip = 0
)
{
	T*	ptr = nullptr;

	CPattern pattern(pat, mask);
	pattern.find(1 + skip);
	if (rel)
		ptr = pattern.get(skip).get_rel<T>(offset);
	else
		ptr = pattern.get(skip).get<T>(offset);

	while (true)
	{
		if (ptr == nullptr)
			failPat(name);

		if (deref <= 0)
			break;
		ptr = *(T**)ptr;
		--deref;
	}

	*out = ptr;
	return;
}

template <typename T>
void	setFn
(
	const char*	name,
	char*		pat,
	char*		mask,
	T*			out,
	int			skip = 0
)
{
	char*	ptr = nullptr;

	CPattern pattern(pat, mask);
	pattern.find(1 + skip);
	ptr = pattern.get(skip).get<char>(0);

	if (ptr == nullptr)
		failPat(name);

	*out = (T)ptr;
	return;
}

void Hooking::FindPatterns()
{
	HANDLE steam = GetModuleHandleA("steam_api64.dll");

	auto p_activeThread = pattern("E8 ? ? ? ? 48 8B 88 10 01 00 00");
	auto p_blipList = pattern("4C 8D 05 ? ? ? ? 0F B7 C1");
	auto p_fixVector3Result = pattern("83 79 18 00 48 8B D1 74 4A FF 4A 18");
	auto p_gameLegals = pattern("72 1F E8 ? ? ? ? 8B 0D");
	auto p_gameLogos = pattern("70 6C 61 74 66 6F 72 6D 3A");
	auto p_gameState = pattern("83 3D ? ? ? ? ? 8A D9 74 0A");
	//auto p_modelCheck = pattern("48 85 C0 0F 84 ? ? ? ? 8B 48 50");
	//auto p_modelSpawn = pattern("48 8B C8 FF 52 30 84 C0 74 05 48");
	//auto p_modelCheck = pattern("\x48\x85\xC0\x0F\x84\x00\x00\x00\x00\x8B\x48\x50");
	//auto p_modelSpawn = pattern("48 8B C8 FF 52 30 84 C0 74 05 48");
	CPattern modelCheckPattern("\x48\x85\xC0\x0F\x84\x00\x00\x00\x00\x8B\x48\x50",
		"xxxxx????xxx");
	CPattern modelSpawnPattern("\x48\x8B\xC8\xFF\x52\x30\x84\xC0\x74\x05\x48",
		"xxxxxxxxxxx");
	auto p_nativeTable = pattern("76 32 48 8B 53 40 48 8D 0D");
	//auto p_nativeTable = pattern("76 ? ? 8b ? ? 48 8d 0d ? ? ? ? ? 8b ? ? ?");
	auto p_worldPtr = pattern("48 8B 05 ? ? ? ? 45 ? ? ? ? 48 8B 48 08 48 85 C9 74 07");
	auto p_globalPtr = pattern("4C 8D 05 ? ? ? ? 4D 8B 08 4D 85 C9 74 11");
	auto p_eventHook = pattern("48 83 EC 28 E8 ? ? ? ? 48 8B 0D ? ? ? ? 4C 8D 0D ? ? ? ? 4C 8D 05 ? ? ? ? BA 03");

	setPat<uint64_t>("frame count",
		"\x8B\x15\x00\x00\x00\x00\x41\xFF\xCF",
		"xx????xxx",
		&Hooking::m_frameCount,
		true,
		2);

	setFn<fpIsDLCPresent>("is_DLC_present",
		"\x48\x89\x5C\x24\x00\x57\x48\x83\xEC\x20\x81\xF9\x00\x00\x00\x00",
		"xxxx?xxxxxxx????",
		&Hooking::is_DLC_present);

	setFn<fpStatSetBool>("stat_set_bool",
		"\x48\x89\x5C\x24\x00\x88\x54\x24\x10\x57\x48\x83\xEC\x40",
		"xxxx?xxxxxxxxx",
		&Hooking::stat_set_bool);

	setFn<fpStatSetFloat>("stat_set_float",
		"\x48\x89\x5C\x24\x00\xF3\x0F\x11\x4C\x24\x00\x57\x48\x83\xEC\x40",
		"xxxx?xxxxx?xxxxx",
		&Hooking::stat_set_float);

	setFn<fpStatSetInt>("stat_set_int",
		"\x48\x89\x5C\x24\x00\x48\x89\x74\x24\x00\x89\x54\x24\x10\x55\x57\x41\x57",
		"xxxx?xxxx?xxxxxxxx",
		&Hooking::stat_set_int);



	setPat<void>("name changer", "\x48\x8B\x05\x00\x00\x00\x00\xC3\x8A\xD1", "xxx????xxx", &Hooking::m_onlineName, true, 3, 1);
	setFn<fpGetPlayerName>("get_player_name",
		"\x40\x53\x48\x83\xEC\x20\x80\x3D\x00\x00\x00\x00\x00\x8B\xD9\x74\x22",
		"xxxxxxxx?????xxxx",
		&Hooking::get_player_name);

	setFn<fpCreateVehicle>("create_vehicle",
		"\x48\x89\x5C\x24\x00\x55\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x8B\xEC\x48\x83\xEC\x50\xF3\x0F\x10\x02",
		"xxxx?xxxxxxxxxxxxxxxxxxxxxx",
		&Hooking::create_vehicle);

	setFn<fpCreateAmbientPickup>("create_ambient_pickup",
		"\x48\x8B\xC4\x48\x89\x58\x10\x48\x89\x70\x18\x48\x89\x78\x20\x55\x41\x54\x41\x55\x41\x56\x41\x57\x48\x8D\x68\xC1\x48\x81\xEC\x00\x00\x00\x00\x45\x8B\xF9\x41\x8B\xF0\x4C\x8B\xEA\xE8\x00\x00\x00\x00\x0F\xB7\x0D\x00\x00\x00\x00\x33\xFF\x44\x8B\xC7\x44\x8B\xD7\x44\x8B\xE0\x85\xC9\x7E\x1C\x48\x8B\x1D\x00\x00\x00\x00",
		"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx????xxxxxxxxxx????xxx????xxxxxxxxxxxxxxxxxx????",
		&Hooking::create_ambient_pickup);






	//get_player_ped
	/*setFn<fpGetPlayerPed>("get_player_ped",
	"\x40\x53\x48\x83\xEC\x20\x33\xDB\x83\xF9\xFF\x74\x09\xB2\x01\xE8\x00\x00\x00\x00\xEB\x16",
	"xxxxxxxxxxxxxxxx????xx",
	&Hooking::get_player_ped);*/

	//player_id
	/*setFn<fpPlayerId>("player_id",
	"\x48\x83\xEC\x28\x80\x3D\x00\x00\x00\x00\x00\x74\x12\x48\x8B\x0D\x00\x00\x00\x00\xE8",
	"xxxxxx?????xxxxx????x",
	&Hooking::player_id);*/

	char * c_location = nullptr;
	void * v_location = nullptr;

	Sleep(5000);

	console->writeString("Getting Game State...");
	c_location = p_gameState.count(1).get(0).get<char>(2);
	c_location == nullptr ? FailPatterns("gameState") : m_gameState = reinterpret_cast<decltype(m_gameState)>(c_location + *(int32_t*)c_location + 5);

	console->writeString("Getting vector3 result fixer func...");
	v_location = p_fixVector3Result.count(1).get(0).get<void>(0);
	if (v_location != nullptr) scrNativeCallContext::SetVectorResults = (void(*)(scrNativeCallContext*))(v_location);

	console->writeString("Getting native registration table...");
	c_location = p_nativeTable.count(1).get(0).get<char>(9);
	c_location == nullptr ? FailPatterns("native registration table") : m_registrationTable = reinterpret_cast<decltype(m_registrationTable)>(c_location + *(int32_t*)c_location + 4);

	console->writeString("Getting World Pointer...");
	c_location = p_worldPtr.count(1).get(0).get<char>(0);
	c_location == nullptr ? FailPatterns("world Pointer") : m_worldPtr = reinterpret_cast<uint64_t>(c_location) + *reinterpret_cast<int*>(reinterpret_cast<uint64_t>(c_location) + 3) + 7;

	console->writeString("Getting Blip List...");
	c_location = p_blipList.count(1).get(0).get<char>(0);
	c_location == nullptr ? FailPatterns("blip List") : m_blipList = (BlipList*)(c_location + *reinterpret_cast<int*>(c_location + 3) + 7);


	console->writeString("Bypassing Object restrictions..");

	// Online model bypass
	auto bypassPtr = modelCheckPattern.find(0).get(0).get<char>(0);
	if (bypassPtr != nullptr) {
		mem_nop2(bypassPtr, 24);
	}
	else {
		console->writeString("Failed to find online model requests bypass");
	}

	// Model allowed bypass
	bypassPtr = modelSpawnPattern.find(0).get(0).get<char>(8);
	if (bypassPtr == nullptr) {
		console->writeString("Failed to find is player model allowed to spawn bypass");
	}
	else {
		mem_nop2(bypassPtr, 2);
	}

	/*if (p_modelCheck.size() > 0) {

	v_location = p_modelCheck.count(1).get(0).get<void>(0);
	Memory::nop(v_location, 24);
	}

	if (p_modelSpawn.size() > 0) {

	v_location = p_modelSpawn.count(1).get(0).get<void>(8);
	Memory::nop(v_location, 2);
	}*/

	console->writeString("Getting active script thread...");
	c_location = p_activeThread.count(1).get(0).get<char>(1);
	c_location == nullptr ? FailPatterns("Active Script Thread") : GetActiveThread = reinterpret_cast<decltype(GetActiveThread)>(c_location + *(int32_t*)c_location + 4);

	console->writeString("Getting World Pointer...");
	c_location = p_globalPtr.count(1).get(0).get<char>(0);
	__int64 patternAddr = NULL;
	c_location == nullptr ? FailPatterns("globalTable") : patternAddr = reinterpret_cast<decltype(patternAddr)>(c_location);
	m_globalPtr = (__int64**)(patternAddr + *(int*)(patternAddr + 3) + 7);

	console->writeString("Getting Event Hook...");
	if ((c_location = p_eventHook.count(1).get(0).get<char>(0)))
	{
		int i = 0, j = 0, matches = 0, found = 0;
		char* pattern = "\x4C\x8D\x05"; //outdated
		while (found != EVENT_COUNT)
		{
			if (c_location[i] == pattern[j])
			{
				if (++matches == 3)
				{
					EventPtr.push_back((void*)(reinterpret_cast<uint64_t>(c_location + i - j) + *reinterpret_cast<int*>(c_location + i + 1) + 7));
					found++;
					j = matches = 0;
				}
				j++;
			}
			else
			{
				matches = j = 0;
			}
			i++;
		}
	}

	console->writeString("Initializing natives...");
	CrossMapping::initNativeMap();

	console->writeString("Checking if GTA V is ready...");
	while (*m_gameState != GameStatePlaying) {
		Sleep(200);
	}
	console->writeString("GTA V ready!");


}

static Hooking::NativeHandler _Handler(uint64_t origHash)
{
	uint64_t newHash = CrossMapping::MapNative(origHash);
	if (newHash == 0)
	{
		return nullptr;
	}

	Hooking::NativeRegistrationNew * table = m_registrationTable[newHash & 0xFF];

	for (; table; table = table->getNextRegistration())
	{
		for (uint32_t i = 0; i < table->getNumEntries(); i++)
		{
			if (newHash == table->getHash(i))
			{
				return table->handlers[i];
			}
		}
	}
	return nullptr;
}

Hooking::NativeHandler Hooking::GetNativeHandler(uint64_t origHash)
{
	auto& handler = m_handlerCache[origHash];

	if (handler == nullptr)
	{
		handler = _Handler(origHash);
	}

	return handler;
}

eGameState Hooking::GetGameState()
{
	return *m_gameState;
}

BlipList* Hooking::GetBlipList()
{
	return m_blipList;
}

uint64_t Hooking::getWorldPtr()
{
	return m_worldPtr;
}
void WAIT(DWORD ms)
{
	wakeAt = timeGetTime() + ms;
	SwitchToFiber(mainFiber);
}

void Hooking::Cleanup()
{
	console->writeString("Cleaning up hooks");
	for (int i = 0; i < m_hooks.size(); i++)
		if (MH_DisableHook(m_hooks[i]) != MH_OK && MH_RemoveHook(m_hooks[i]) != MH_OK)
			Log::Error("Failed to unhook %p", (void*)m_hooks[i]);
	MH_Uninitialize();

	FreeLibraryAndExitThread(static_cast<HMODULE>(_hmoduleDLL), 1);
}

void Hooking::defuseEvent(RockstarEvent e, bool toggle) //will it work? NOp why you havemethod maybe i buy, no, i have only protections for ceo kick, non host kick, teleport etc
{
	static const unsigned char retn = 0xC3;
	char* p = (char*)EventPtr[e];
	if (toggle)
	{
		if (EventRestore[e] == 0)
			EventRestore[e] = p[0];
		*p = retn;
	}
	else
	{
		if (EventRestore[e] != 0)
			*p = EventRestore[e];
	}
}

__int64** Hooking::getGlobalPtr()
{
	return m_globalPtr;
}
__int64 * Hooking::getGlobalPtr1(int index)
{
	return nullptr;
}
__int64 * Hooking::setTunable(int Tunable)
{
	return nullptr;
}
/*10 Mill Hooking by R!OT


bool Hooking::HookNatives()
{
auto p_framecount = pattern("8B 15 ? ? ? ? 41 FF CF");
char * frameCountPtr =
p_frameCount.count(1).get(0).get<char>(2);
int32_t rel = (int32_t)frameCountPtr;
frameCount = (unit32_t*)(frameCountPtr + rel +												//have to code alot dont touch this
sizeof(rel));
setFn<fpIsEntityDead>("is_entity_dead",
"\x48\x89\x5C\x24\x00\x48\x89\x74\x24\x00\x57\x48\x83\
xEC\x20\x40\xx8A\xFA\xE8\x00\x00\x00\x00\x33\xD8",
"xxxx?xxxx?xxxxxxxxx????xx",
&Hooking::is_entity_dead);
Log::Msg("fpIsEntityDead %p", is_entity_dead);

MH_STATUS status = MH_CreateHook(is_entity_dead,
HK_IS_ENTITY_DEAD, (void**)&OG_IS_ENTITY_DEAD);
if ((status != MH_OK || status !=
MH_ERROR_ALREAD_CREATED) && (MH_EnableHook(is - entity_dead) !=
MH_OK)) {
Log::Error("Failed to create hook %d", status) :
return false;
}
else {
m_hookNative.push_back(is_entity_dead);
return true;
}
}
ato p_beginService = pattern("48 89 5C 24 ? 48 89 6C 24 ? 48
89 74 24 ? 57 41 56 41 57 48 83 EC 50 45 8B F1")
fpNetworkShopBeginsService resolvedFunc1 = (fpNetworkShopBeginService)
p_beginService.count(1).get(0).get<void>(0);
Log::Msg("fpNetworkShaopBeginService %p", resolvedFunc1);

MH_STATUS status1 = MH_CreateHook(resolvedFunc1,
Hooking::HK_BEGIN_SERVICE, (void**)&OG_BEGIN_SERVICE);
if ((status1 != MH_OK && status !=
MH_ERROR_ALREDY_CREATED)) {
Log::Error("Failed to create hook %d", status1);
return false;
}*/




#pragma once
#include "stdafx.h"
using std::string;

#define URL L"EPHESYS AUTH SERVERS"

wstring s2ws(const std::string& str)
{
	using convert_typeX = std::codecvt_utf8<wchar_t>;
	std::wstring_convert<convert_typeX, wchar_t> converterX;

	return converterX.from_bytes(str);
}

bool is_user_authed(std::string username, std::string password)
{
	char hwid[4096];
	// total physical memory
	MEMORYSTATUSEX statex;
	statex.dwLength = sizeof(statex);
	GlobalMemoryStatusEx(&statex);
	sprintf_s(hwid, "%I64i", statex.ullTotalPhys / 1024);

	// volume information
	TCHAR volumename[MAX_PATH + 1] = { 0 };
	TCHAR filesystemname[MAX_PATH + 1] = { 0 };
	DWORD serialnumber = 0, maxcomponentlen = 0, filesystemflags = 0;
	GetVolumeInformation(_T("C:\\"), volumename, ARRAYSIZE(volumename), &serialnumber, &maxcomponentlen, &filesystemflags, filesystemname, ARRAYSIZE(filesystemname));
	sprintf_s(hwid, "%s%li%ws%li", hwid, serialnumber, filesystemname, maxcomponentlen);

	// computer name
	TCHAR computerName[MAX_COMPUTERNAME_LENGTH + 1];
	DWORD size = sizeof(computerName) / sizeof(computerName[0]);
	GetComputerName(computerName, &size);
	sprintf_s(hwid, "%s%ws", hwid, computerName);

	net::requests m_request(L"N9TT-9G0A-B7FQ-RANCN9TT-9G0A-B7FQ-RANCN9TT-9G0A-B7FQ-RANCN9TT-9G0A-B7FQ-RANCN9TT-9G0A-B7FQ-RANCN9TT-9G0A-B7FQ-RANCN9TT", false);
	std::wstring answer = m_request.Post(false, URL, "username=%s&password=%s&hwid=%s", username.c_str(), password.c_str(), (sw::sha512::calculate(hwid)).c_str());
	if (answer == L"Try again!") {
		answer = m_request.Post(false, URL, "username=%s&password=%s&hwid=%s", username.c_str(), password.c_str(), (sw::sha512::calculate(hwid)).c_str());
	}
	return answer != L"Access granted!" ? false : true;
}//only this nothing else  







